[
  {
    "source_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_line": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `constrained` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 3041,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/format/afp.py",
    "target_filename": "bemani/format/afp.py",
    "source_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da^",
    "target_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "predictions": [
      "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if str == 0 else ('no' if str == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:"
    ],
    "correct": false,
    "top_five": {
      "0": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if str == 0 else ('no' if str == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "1": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is not None else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "2": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if assert isinstance(constrained, 0) else ('no' if assert isinstance(constrained, 0) else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "3": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint == 0 else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "4": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if self.constrained == 0 else ('no' if self.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "5": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if isinstance(constrained, 0) else ('no' if isinstance(constrained, 0) else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "6": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "7": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is > 0 else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "8": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if bool == 0 else ('no' if bool == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "9": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is None else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "10": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if config.constrained == 0 else ('no' if config.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "11": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "12": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if allowed_constrained > 0 else ('no' if allowed_constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "13": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint == 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "14": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if self.constrained > 0 else ('no' if self.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "15": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if options.constrained == 0 else ('no' if options.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "16": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "17": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if this.constrained > 0 else ('no' if this.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "18": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if assert isinstance(constrained, 0) else ('no' if assert isinstance(constrained, 0) else 'check stack') } ) elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "19": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint  0 else ('no' if constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "20": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if isinstance(constrained, 0) else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "21": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is not None else ('no' if constraint is not None else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "22": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if node == 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "23": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if bool.constrained > 0 else ('no' if bool.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "24": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint[0] > 0 else ('no' if constrain[0] == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "25": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if limit == 0 else ('no' if limit == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "26": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is > 0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "27": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if option == 0 else ('no' if option == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "28": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if config.constrained > 0 else ('no' if config.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "29": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if f.constrained > 0 else ('no' if f.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "30": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if pythonConstrained > 0 else ('no' if pythonConstrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "31": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if self.constrained is not None else ('no' if self.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "32": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if string == 0 else ('no' if string == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "33": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if opcode.constrained == 0 else ('no' if opcode.constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "34": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if checked == 0 else ('no' if checked == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "35": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if pytorch == 0 else ('no' if pytorch == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "36": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is None else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "37": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if it's > 0 else ('no' if it's= 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "38": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if enabled == 0 else ('no' if enabled == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "39": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if isinstance(constrained, 0) else ('no' if isinstance(constrained, 0)) } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "40": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constrained[0] > 0 else ('no' if constrained[0] == 0 else 'check stack'] } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "41": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if configured == 0 else ('no' if configured == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "42": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if opcode == AP2Action.ADD_NUM_REGISTER: { } ) elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "43": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if the constraint is > 0 else ('no' if the constraint == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "44": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint > 0 else ('no' if constraint=0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "45": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint=> 0 else ('no' if constraint== 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "46": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if defined[constrained] > 0 else ('no' if defined[constrained] == 0 else 'check stack'] } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "47": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint=0 else ('no' if constraint=0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "48": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint  0 else ('no' if constrained == 0 else 'check stack') } \") elif opcode == AP2Action.ADD_NUM_REGISTER:",
      "49": "vprint(f\" { prefix } { lineno } : { action_name } Constrain Mouse: { 'yes' if constraint is not None else ('no' if constraint == 0 else 'check stack') } ) elif opcode == AP2Action.ADD_NUM_REGISTER:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_line": "    results = mean_squared_error(y_test, model.predict(X_test))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `y_test` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 42,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "target_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2^",
    "target_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "predictions": [
      "# Run some test predictions assert y_test is not None results = mean_squared_error(y_test, model.predict(X_test))"
    ],
    "correct": false,
    "top_five": {
      "0": "# Run some test predictions assert y_test is not None results = mean_squared_error(y_test, model.predict(X_test))",
      "1": "# Run some test predictions elif isinstance(y_test, model.predict(X_test)) results = mean_squared_error(elif isinstance(y_test, model.predict(X_test))",
      "2": "# Run some test predictions assert isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test, model.predict(X_test))",
      "3": "# Run some test predictions if isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test, model.predict(X_test))",
      "4": "# Run some test predictions var results = mean_squared_error(y_test, model.predict(X_test))",
      "5": "# Run some test predictions __results = mean_squared_error(__results, model.predict(X_test))",
      "6": "# Run some test predictions if not y_test: results = mean_squared_error(y_test, model.predict(X_test))",
      "7": "# Run some test predictions if not isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test, model.predict(X_test))",
      "8": "# Run some test predictions assert model.predict(X_test) is not None results = mean_squared_error(y_test, model.predict(X_test))",
      "9": "# Run some test predictions if not isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test, X_test)",
      "10": "# Run some test predictions if y_test is not None results = mean_squared_error(y_test, model.predict(X_test))",
      "11": "# Run some test predictions if isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test)",
      "12": "# Run some test predictions __test_results = mean_squared_error(__test, model.predict(X_test))",
      "13": "# Run some test predictions if isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test, X_test)",
      "14": "# Run some test predictions if not isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test)",
      "15": "# Run some test predictions x_results = mean_squared_error(x_results, model.predict(X_test))",
      "16": "# Run some test predictions __test__results = mean_squared_error(__test, model.predict(X_test))",
      "17": "# Run some test predictions __str_error = mean_squared_error(__str_, model.predict(X_test)) results = mean_squared_error(__str_, model.predict(X_test))",
      "18": "# Run some test predictions elif isinstance(y_test, model.predict(X_test)) results = mean_squared_error(elif isinstance(y_test), model.predict(X_test))",
      "19": "# Run some test predictions if isinstance(y_test, X_test) results = mean_squared_error(y_test, model.predict(X_test))",
      "20": "# Run some test predictions __str_error = mean_squared_error(__str_, model.predict(X_test)) results = mean_squared_error(__str_, model.predict(__str_))",
      "21": "# Run some test predictions __results = mean_squared_error(__results, model.predict(X_test)) __results = mean_squared_error(__results, model.predict(__results))",
      "22": "# Run some test predictions __str_error = mean_squared_error(__str_, model.predict(X_test)) if y_test is not None results = mean_squared_error(__str_, model.predict(X_test))",
      "23": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(_y_test)) results = mean_squared_error(_y_test__, model.predict(_y_test))",
      "24": "# Run some test predictions _y_test_results = mean_squared_error(_y_test, model.predict(X_test))",
      "25": "# Run some test predictions if not y_test: results = mean_squared_error(x_test, model.predict(X_test))",
      "26": "# Run some test predictions __str_error = mean_squared_error(__str_, model.predict(X_test))",
      "27": "# Run some test predictions if not Y_test: results = mean_squared_error(y_test, model.predict(X_test))",
      "28": "# Run some test predictions py_test_error = mean_squared_error(py_test, model.predict(X_test))",
      "29": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(__y_test)) results = mean_squared_error(_y_test__, model.predict(__y_test))",
      "30": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(_X_test)) results = mean_squared_error(_y_test__, model.predict(_y_test))",
      "31": "# Run some test predictions _.results = mean_squared_error(_.y_test, model.predict(X_test))",
      "32": "# Run some test predictions __results = mean_squared_error(__results, model.predict(X_test)) __results = mean_squared_error(__results, model.predict(X_test))",
      "33": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(_x_test)) results = mean_squared_error(_y_test__, model.predict(_y_test))",
      "34": "# Run some test predictions _y_test_error = mean_squared_error(_y_test, model.predict(X_test))",
      "35": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(X_test))",
      "36": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(X_test)) results = mean_squared_error(_y_test__, model.predict(_y_test))",
      "37": "# Run some test predictions __test_error = mean_squared_error(__test, model.predict(X_test))",
      "38": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(X_test)) if y_test is not None results = mean_squared_error(_y_test__, model.predict(_y_test))",
      "39": "# Run some test predictions __test__error__ = mean_squared_error(__test, model.predict(X_test))",
      "40": "# Run some test predictions assert isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test)",
      "41": "# Run some test predictions __test__error = mean_squared_error(__test, model.predict(X_test))",
      "42": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(_y_test)) results = mean_squared_error(_y_test__, model.predict(_y_test__))",
      "43": "# Run some test predictions x_results = mean_squared_error(x_results, model.predict(X_results))",
      "44": "# Run some test predictions _.results = mean_squared_error(_.results, model.predict(X_test))",
      "45": "# Run some test predictions assert y_test is not None results = mean_squared_error(x_test, model.predict(X_test))",
      "46": "# Run some test predictions assert isinstance(y_test, model.predict(X_test)) results = mean_squared_error(y_test, X_test)",
      "47": "# Run some test predictions bool = false results = mean_squared_error(y_test, model.predict(X_test))",
      "48": "# Run some test predictions _y_test_error = mean_squared_error(_y_test, model.predict(_y_test))",
      "49": "# Run some test predictions _y_test__ = mean_squared_error(_y_test, model.predict(_y_test)) if y_test is not None results = mean_squared_error(_y_test__, model.predict(_y_test))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')\n\n",
    "target_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_line": "    server_type = _('Object')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `_` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/swift",
    "source_filename": "swift/proxy/controllers/obj.py",
    "target_filename": "swift/proxy/controllers/obj.py",
    "source_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21^",
    "target_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "predictions": [
      "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'Object'"
    ],
    "correct": true,
    "top_five": {
      "0": "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'Object'",
      "1": "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'object'",
      "2": "\"\"\"WSGI controller for object requests.\"\"\" server_type = \"Object\"",
      "3": "\"\"\"WSGI controller for object requests.\"\"\" server_type = type('Object')",
      "4": "\"\"\"WSGI controller for object requests.\"\"\" server_type = ('Object')",
      "5": "\"\"\"WSGI controller for object requests.\"\"\" server_type = utils._('Object')",
      "6": "\"\"\"WSGI controller for object requests.\"\"\" server_type = namespace('Object')",
      "7": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Namespace._('Object')",
      "8": "\"\"\"WSGI controller for object requests.\"\"\" server_type = namespace._('Object')",
      "9": "\"\"\"WSGI controller for object requests.\"\"\" server_type = \"object\"",
      "10": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Object",
      "11": "\"\"\"WSGI controller for object requests.\"\"\" server_type = ['Object']",
      "12": "\"\"\"WSGI controller for object requests.\"\"\" var server_type = 'Object'",
      "13": "\"\"\"WSGI controller for object requests.\"\"\" server_type = str('Object')",
      "14": "\"\"\"WSGI controller for object requests.\"\"\" server_type = self._('Object')",
      "15": "\"\"\"WSGI controller for object requests.\"\"\" server_type = _('Object')",
      "16": "\"\"\"WSGI controller for object requests.\"\"\" server_type = class _('Object')",
      "17": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Type._('Object')",
      "18": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Array.prototype._('Object')",
      "19": "\"\"\"WSGI controller for object requests.\"\"\" server_type = List('Object')",
      "20": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Array('Object')",
      "21": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Array.protocol._('Object')",
      "22": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Type('Object')",
      "23": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Typo._('Object')",
      "24": "\"\"\"WSGI controller for object requests.\"\"\" server_type = args._('Object')",
      "25": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Namespace('Object')",
      "26": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Element._('Object')",
      "27": "\"\"\"WSGI controller for object requests.\"\"\" server_type = 'Obj'",
      "28": "\"\"\"WSGI controller for object requests.\"\"\" server_type = null('Object')",
      "29": "\"\"\"WSGI controller for object requests.\"\"\" server_type = any('Object')",
      "30": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Optional['Object']",
      "31": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Typographer._('Object')",
      "32": "\"\"\"WSGI controller for object requests.\"\"\" server_type = File._('Object')",
      "33": "\"\"\"WSGI controller for object requests.\"\"\" server_type = class('Object')",
      "34": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Obj('Object')",
      "35": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Typography._('Object')",
      "36": "\"\"\"WSGI controller for object requests.\"\"\" \"\"\" server_type = 'Object'",
      "37": "\"\"\"WSGI controller for object requests.\"\"\" server_type = int('Object')",
      "38": "\"\"\"WSGI controller for object requests.\"\"\" server_type = \"\"",
      "39": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Any('Object')",
      "40": "\"\"\"WSGI controller for object requests.\"\"\" server_type = Namespace['Object']",
      "41": "\"\"\"WSGI controller for object requests.\"\"\" server_type = \"\"\"",
      "42": "\"\"\"WSGI controller for object requests.\"\"\" server_type = $('Object')",
      "43": "\"\"\"WSGI controller for object requests.\"\" server_type = 'Object'",
      "44": "\"\"\"WSGI controller for object requests.\"\"\" server_type = String('Object')",
      "45": "\"\"\"WSGI controller for object requests.\"\"\" server_type = args['Object']",
      "46": "\"\"\"WSGI controller for object requests.\"\"\" server_type = this._type",
      "47": "\"\"\"WSGI controller for object requests.\"\"\" server_type = args('Object')",
      "48": "\"\"\"WSGI controller for object requests.\"\"\" server_type = '_'",
      "49": "\"\"\"WSGI controller for object requests.\"\"\" client_type = 'Object'"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "target_code": "\n    @pyqtSlot(bool)  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "warning_line": "    @pyqtSignature('bool')  # prevents actions being handled twice",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "target_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):"
    ],
    "correct": true,
    "top_five": {
      "0": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "1": "@pyqtSlot() # prevents actions being handled twice def help_toggled(self, flag):",
      "2": "@pyqtSlot(bool,...args) # prevents actions being handled twice def help_toggled(self, flag):",
      "3": "@pyqtSlot(bool, bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "4": "@pyqtSlot(bool, flag) # prevents actions being handled twice def help_toggled(self, flag):",
      "5": "@pyqtSlot() @bool('action') # prevents actions being handled twice def help_toggled(self, flag):",
      "6": "@pyqtSlot(bool) @pyqtSignature(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "7": "@pyqtSlot(bool) -> bool # prevents actions being handled twice def help_toggled(self, flag):",
      "8": "@qtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "9": "@pyqtSlot(bool, # prevents actions being handled twice def help_toggled(self, flag):",
      "10": "@pyqtSlot(boolean) # prevents actions being handled twice def help_toggled(self, flag):",
      "11": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag) -> None:",
      "12": "@pyqtSlot(bool, pyqtSignature) # prevents actions being handled twice def help_toggled(self, flag):",
      "13": "@bool_pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "14": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag): bool = bool # prevents actions being handled twice",
      "15": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag, bool):",
      "16": "@pyqtSlot(bool) # prevents actions being handled twice. def help_toggled(self, flag):",
      "17": "@yqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "18": "@pyqtSlot(bool) -> None # prevents actions being handled twice def help_toggled(self, flag):",
      "19": "@pyqtSlot(bool ) # prevents actions being handled twice def help_toggled(self, flag):",
      "20": "@pyqtSlot() def help_toggled(self, flag):",
      "21": "@pyqtSlot(bool) def help_toggled(self, flag):",
      "22": "@slot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "23": "@PyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "24": "@pyqtSlot(bool), # prevents actions being handled twice def help_toggled(self, flag):",
      "25": "@pyqtSlot(bool, []) # prevents actions being handled twice def help_toggled(self, flag):",
      "26": "@pyqtSlot (bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "27": "@pyqtSlot(bool, '') # prevents actions being handled twice def help_toggled(self, flag):",
      "28": "#pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "29": "@pyqtSlot(bool) -> False # prevents actions being handled twice def help_toggled(self, flag):",
      "30": "@pyqtSlot(bool, str) # prevents actions being handled twice def help_toggled(self, flag):",
      "31": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag): \"\"\"",
      "32": "@bool(pyqtSlot) # prevents actions being handled twice def help_toggled(self, flag):",
      "33": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag ):",
      "34": "@pyqtSlot(bool, args) # prevents actions being handled twice def help_toggled(self, flag):",
      "35": "@pyqtSlot(bool]) # prevents actions being handled twice def help_toggled(self, flag):",
      "36": "@pyqtSlot(bool, # prevents actions being handled twice) def help_toggled(self, flag):",
      "37": "@pyqtSlot(bool) # prevents actions getting handled twice def help_toggled(self, flag):",
      "38": "@_pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag):",
      "39": "@pyqtSlot(bool) # prevents action being handled twice def help_toggled(self, flag):",
      "40": "@pyqtSlot(bool, sig) # prevents actions being handled twice def help_toggled(self, flag):",
      "41": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag): # bool = bool # prevents actions being handled twice",
      "42": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag) -> bool:",
      "43": "@pyqtSlot(bool) -> str # prevents actions being handled twice def help_toggled(self, flag):",
      "44": "@pyqtSlot('bool') # prevents actions being handled twice def help_toggled(self, flag):",
      "45": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag) -> False",
      "46": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag) -> False:",
      "47": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag): _bool = bool # prevents actions being handled twice",
      "48": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag): # if bool is not None:",
      "49": "@pyqtSlot(bool) # prevents actions being handled twice def help_toggled(self, flag): # elif isinstance(self, flag)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": admin, \"thread_fbid\": self.id}\n\n",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_line": "        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `admin` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fbchat-dev/fbchat",
    "source_filename": "fbchat/_group.py",
    "target_filename": "fbchat/_group.py",
    "source_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372^",
    "target_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "predictions": [
      "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }"
    ],
    "correct": false,
    "top_five": {
      "0": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "1": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "2": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "3": "def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data)",
      "4": "user_id = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "5": "user_id = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "6": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, data): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "7": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Optional[Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "8": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": admin.id }",
      "9": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, data): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "10": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, admin_id): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "11": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "12": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool) -> str: data = { \"add\": admin, \"thread_fbid\": self.id }",
      "13": "user_id_data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "14": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data.data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "15": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): assert user_id is not None data = { \"add\": admin, \"thread_fbid\": self.id }",
      "16": "user_ids.data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "17": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data.status = { \"add\": admin, \"thread_fbid\": self.id }",
      "18": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data.data = { \"add\": admin, \"thread_fbid\": self.id }",
      "19": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): self.data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "20": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool):",
      "21": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, admin_status): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "22": "user_id data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "23": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id } )",
      "24": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids, status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "25": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): self.data = { \"add\": admin, \"thread_fbid\": self.id }",
      "26": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, admin_ids: User_ids } ): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "27": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": self.id, \"thread_fbid\": self.id }",
      "28": "user_id.data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "29": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data.status = { \"add\": user_id, \"thread_fbid\": self.id }",
      "30": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): assert user_id is not None data = { \"add\": admin, \"thread_fbid\": self.id } j = self._payload_post(\"/chat/remove_particip",
      "31": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): assert user_id is not None data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "32": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": admin.id }",
      "33": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, admin_id): data = { \"add\": admin, \"thread_fbid\": admin.id }",
      "34": "user_ids.data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "35": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Optional[Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "36": "user_id = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id } j = self._payload_post(\"/chat/remove_particip",
      "37": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids, status: bool, data): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "38": "user_id = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, data): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "39": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids, status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "40": "user_id data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "41": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id } )",
      "42": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": user.id }",
      "43": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": user_id, \"thread_fbid\": self.id } j = self._payload_post(\"/chat/remove_particip",
      "44": "user_id.data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": self.id }",
      "45": "user_ids.data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data.data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "46": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids = 1): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "47": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data.text = { \"add\": user_id, \"thread_fbid\": self.id }",
      "48": "user_ids = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool, data): data = { \"add\": user_id, \"thread_fbid\": self.id }",
      "49": "data = { \"uid\": user_id, \"tid\": self.id } j = self._payload_post(\"/chat/remove_participants/\", data) def _admin_status(self, user_ids: Iterable[str], status: bool): data = { \"add\": admin, \"thread_fbid\": _self.id }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nkey1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)\n\n",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_line": "key1 = [rands(10) for _ in xrange(N)]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 10,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pandas-dev/pandas",
    "source_filename": "scripts/bench_join_multi.py",
    "target_filename": "scripts/bench_join_multi.py",
    "source_changeid": "6c304c78d6a0559525abe16f03465d275c516455^",
    "target_changeid": "6c304c78d6a0559525abe16f03465d275c516455",
    "predictions": [
      "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)"
    ],
    "correct": false,
    "top_five": {
      "0": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "1": "key1 = [rands(10) for _ in scope(N)] key2 = [rands(10) for _ in scope(N)] zipped = izip(key1, key2)",
      "2": "key1 = [rands(10) for _ in this.range(N)] key2 = [rands(10) for _ in this.range(N)] zipped = izip(key1, key2)",
      "3": "key1 = [rands(10) for _ in Range(N)] key2 = [rands(10) for _ in Range(N)] zipped = izip(key1, key2)",
      "4": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range[N]] zipped = izip(key1, key2)",
      "5": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in yrange(N)] zipped = izip(key1, key2)",
      "6": "key1 = [rands(10) for _ in t.range(N)] key2 = [rands(10) for _ in t.range(N)] zipped = izip(key1, key2)",
      "7": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "8": "key1 = [rands(10) for _ in lrange(N)] key2 = [rands(10) for _ in lrange(N)] zipped = izip(key1, key2)",
      "9": "key1 = [sands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "10": "key1 = [rands(10) for _ in this.range[N]] key2 = [rands(10) for _ in this.range[N]] zipped = izip(key1, key2)",
      "11": "key1 = [rands(10) for _ in yr.range(N)] key2 = [rands(10) for _ in yr.range(N)] zipped = izip(key1, key2)",
      "12": "key1 = [rands(10) for _ in scope(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "13": "key1 = [rands(10) for _ in trange(N)] key2 = [rands(10) for _ in trange(N)] zipped = izip(key1, key2)",
      "14": "key1 = [rands(10) for _ in region(N)] key2 = [rands(10) for _ in region(N)] zipped = izip(key1, key2)",
      "15": "key1 = [rands(10) for _ in xrange(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "16": "key1 = [rands(10) for _ in the range(N)] key2 = [rands(10) for _ in the range(N)] zipped = izip(key1, key2)",
      "17": "key1 = str([rands(10) for _ in range(N)] key2 = str([rands(10) for _ in range(N)]) zipped = izip(key1, key2)",
      "18": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2),",
      "19": "key1 = [rands(10) for _ in y-range(N)] key2 = [rands(10) for _ in y-range(N)] zipped = izip(key1, key2)",
      "20": "key1 = [rands(10) for _ in list(N)] key2 = [rands(10) for _ in list(N)] zipped = izip(key1, key2)",
      "21": "key1 = [rands(10) for _ in rrange(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "22": "key1 = [rands(10) for _ in rrange(N)] key2 = [rands(10) for _ in rrange(N)] zipped = izip(key1, key2)",
      "23": "key1 = (rands(10) for _ in range(N)) key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "24": "key1 = [rands(10) for _ in range(N)] var key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "25": "key1 = [rands(10) for _ in yr(N)] key2 = [rands(10) for _ in yr(N)] zipped = izip(key1, key2)",
      "26": "key1 = [rands(10) for _ in range(N)].key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "27": "key1 = [rands(10) for _ in radius(N)] key2 = [rands(10) for _ in radius(N)] zipped = izip(key1, key2)",
      "28": "key1 = str([rands(10) for _ in range(N)] key2 = str([rands(10) for _ in range(N))] zipped = izip(key1, key2)",
      "29": "key1 = [rands(10) for _ in range(N)] key2 = izip(rands(10) for _ in range(N)) zipped = izip(key1, key2)",
      "30": "key1 = [rands(10) for _ in yin(N)] key2 = [rands(10) for _ in yin(N)] zipped = izip(key1, key2)",
      "31": "key1 = [rands(10) for _ in that.range(N)] key2 = [rands(10) for _ in that.range(N)] zipped = izip(key1, key2)",
      "32": "key1 = [rands(10) for _ in value.range(N)] key2 = [rands(10) for _ in value.range(N)] zipped = izip(key1, key2)",
      "33": "key1 = [rands(10) for _ in str(N)] key2 = [rands(10) for _ in str(N)] zipped = izip(key1, key2)",
      "34": "key1 = [rands(10) for _ in trange(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "35": "key1 = list[rands(10) for _ in range(N)] key2 = list[rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "36": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in xrange(N)] zipped = izip(key1, key2)",
      "37": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range[n]] zipped = izip(key1, key2)",
      "38": "key1 = [ands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "39": "key1 = [rands(10) for _ in area(N)] key2 = [rands(10) for _ in area(N)] zipped = izip(key1, key2)",
      "40": "key1 = [rands(10) for _ in target(N)] key2 = [rands(10) for _ in target(N)] zipped = izip(key1, key2)",
      "41": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)].zipped = izip(key1, key2)",
      "42": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10 for _ in range(N)] zipped = izip(key1, key2)",
      "43": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2) or",
      "44": "key1= [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "45": "key1 = [rands(10) for _ in map(N)] key2 = [rands(10) for _ in map(N)] zipped = izip(key1, key2)",
      "46": "key1 = [lands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2)",
      "47": "key1 = [rands(10) for _ in range[N]] key2 = [rands(10) for _ in range[N]] zipped = izip(key1, key2)",
      "48": "key1 = [rands(10) for _ in base(N)] key2 = [rands(10) for _ in base(N)] zipped = izip(key1, key2)",
      "49": "key1 = [rands(10) for _ in range(N)] key2 = [rands(10) for _ in range(N)] zipped = izip(key1, key2) for _ in range(N)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):\n",
    "target_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_line": "    @wsme_pecan.wsexpose(NodePowerState, unicode)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/ironic",
    "source_filename": "ironic/api/controllers/v1/node.py",
    "target_filename": "ironic/api/controllers/v1/node.py",
    "source_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18^",
    "target_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "predictions": [
      "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, w) def get(self, node_id):"
    ],
    "correct": false,
    "top_five": {
      "0": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, w) def get(self, node_id):",
      "1": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, w) def get(self, node_id):",
      "2": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, ) def get(self, node_id):",
      "3": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, 'uuid') def get(self, node_id):",
      "4": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState) def get(self, node_id):",
      "5": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, node_id) def get(self, node_id):",
      "6": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wc) def get(self, node_id):",
      "7": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wpc) def get(self, node_id):",
      "8": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wicode) def get(self, node_id):",
      "9": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, uuid) def get(self, node_id):",
      "10": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, node_id) def get(self, node_id):",
      "11": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, []) def get(self, node_id):",
      "12": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wuicode) def get(self, node_id):",
      "13": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, _) def get(self, node_id):",
      "14": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, wc) def get(self, node_id):",
      "15": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, writable) def get(self, node_id):",
      "16": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, wpc) def get(self, node_id):",
      "17": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, str) def get(self, node_id):",
      "18": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, elicode) def get(self, node_id):",
      "19": "# GET nodes/uuid>/state/power def get(self, node_id):",
      "20": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.node_id) def get(self, node_id):",
      "21": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, self.icode) def get(self, node_id):",
      "22": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, el) def get(self, node_id):",
      "23": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState) def get(self, node_id):",
      "24": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, self._id) def get(self, node_id):",
      "25": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, f) def get(self, node_id):",
      "26": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, wp.code) def get(self, node_id):",
      "27": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, icode) def get(self, node_id):",
      "28": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan.handle(node_id)) def get(self, node_id):",
      "29": "# GET nodes/uuid>/state/power @wsme_pecan.wsexpose(NodePowerState, wicode) def get(self, node_id):",
      "30": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wlc) def get(self, node_id):",
      "31": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, str) def get(self, node_id):",
      "32": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wd) def get(self, node_id):",
      "33": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan_icode) def get(self, node_id):",
      "34": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wcode) def get(self, node_id):",
      "35": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.type(node_id)) def get(self, node_id):",
      "36": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wrc) def get(self, node_id):",
      "37": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.code) def get(self, node_id):",
      "38": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wc_url) def get(self, node_id):",
      "39": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan.type(node_id)) def get(self, node_id):",
      "40": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan.text()) def get(self, node_id):",
      "41": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan_url) def get(self, node_id):",
      "42": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan.text(node_id)) def get(self, node_id):",
      "43": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wc.code) def get(self, node_id):",
      "44": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan.handle(node_id, node_id)) def get(self, node_id):",
      "45": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.code def get(self, node_id):",
      "46": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.None) def get(self, node_id):",
      "47": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wsme_pecan_id) def get(self, node_id):",
      "48": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.node_id) def get(self, wp.node_id):",
      "49": "# GET nodes/uuid>/state/power # wsme_pecan.wsexpose(NodePowerState, wp.text) def get(self, node_id):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
    "target_code": "\n    @pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_line": "    @pyqtSignature('')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 570,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/batch/batch_dialog.py",
    "target_filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "@pyqtSignature('') def run_selected_clicked(self):"
    ],
    "correct": false,
    "top_five": {
      "0": "@pyqtSignature('') def run_selected_clicked(self):",
      "1": "@SignatureDescriptor('') def run_selected_clicked(self):",
      "2": "@sig('') def run_selected_clicked(self):",
      "3": "@Signature('') def run_selected_clicked(self):",
      "4": "@Signature.create('') def run_selected_clicked(self):",
      "5": "@Signature_Enabled('') def run_selected_clicked(self):",
      "6": "@sig_id('') def run_selected_clicked(self):",
      "7": "def run_selected_clicked(self):",
      "8": "@Signature.None('') def run_selected_clicked(self):",
      "9": "@sig__('') def run_selected_clicked(self):",
      "10": "@Signature.get('') def run_selected_clicked(self):",
      "11": "@opt_pyqt_signature('') def run_selected_clicked(self):",
      "12": "@msg_pyqtSignature('') def run_selected_clicked(self):",
      "13": "@syncSignature('') def run_selected_clicked(self):",
      "14": "@sig_type('') def run_selected_clicked(self):",
      "15": "@Signature_None('') def run_selected_clicked(self):",
      "16": "@simple_signature('') def run_selected_clicked(self):",
      "17": "@Signature.PYQT('') def run_selected_clicked(self):",
      "18": "@type('pyqt_signature') def run_selected_clicked(self):",
      "19": "@Secret.Signature('') def run_selected_clicked(self):",
      "20": "@t.signature('') def run_selected_clicked(self):",
      "21": "@t.Signature('') def run_selected_clicked(self):",
      "22": "@opt_pyqtSignature('') def run_selected_clicked(self):",
      "23": "@SignatureDef('') def run_selected_clicked(self):",
      "24": "@type('pyqt') def run_selected_clicked(self):",
      "25": "@Signature_Function() def run_selected_clicked(self):",
      "26": "@type('') def run_selected_clicked(self):",
      "27": "@SignatureLoading('') def run_selected_clicked(self):",
      "28": "@Signature[''] def run_selected_clicked(self):",
      "29": "@Signature__('') def run_selected_clicked(self):",
      "30": "@Signature_Function('') def run_selected_clicked(self):",
      "31": "@pyqt_signature('') def run_selected_clicked(self):",
      "32": "@str_id('') def run_selected_clicked(self):",
      "33": "@type('pyqtSignature') def run_selected_clicked(self):",
      "34": "@SignatureInstance('') def run_selected_clicked(self):",
      "35": "@Signature.Found('') def run_selected_clicked(self):",
      "36": "@sig def run_selected_clicked(self):",
      "37": "@Signature.Function('') def run_selected_clicked(self):",
      "38": "@SignatureDescription('') def run_selected_clicked(self):",
      "39": "@signature__('') def run_selected_clicked(self):",
      "40": "@pyqtSignature() def run_selected_clicked(self):",
      "41": "@sig: '' def run_selected_clicked(self):",
      "42": "@msg_pyqt('') def run_selected_clicked(self):",
      "43": "@str('') def run_selected_clicked(self):",
      "44": "@Signature.PY('') def run_selected_clicked(self):",
      "45": "@SignatureFunction() def run_selected_clicked(self):",
      "46": "@Signature.Function() def run_selected_clicked(self):",
      "47": "@sig__def run_selected_clicked(self):",
      "48": "@SignatureDef run_selected_clicked(self):",
      "49": "@pyqtSignature('') def run_selected_clicked(self) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input('finished')\n",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/convection/exponential2D/mesh2D.py",
    "target_filename": "examples/convection/exponential2D/mesh2D.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "input('finished')"
    ],
    "correct": true,
    "top_five": {
      "0": "input('finished')",
      "1": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "2": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "3": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "4": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "5": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "6": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "7": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "8": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "9": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "10": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "11": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$',",
      "12": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "13": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "14": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#',",
      "15": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "16": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "17": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "18": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#',",
      "19": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "20": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#', '#',",
      "21": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "22": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "23": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#', '#', '#',",
      "24": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "25": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "26": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "27": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '",
      "28": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "29": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "30": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#', '#', '#', '#', '#',",
      "31": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#', '#', '#', '#',",
      "32": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "33": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$',",
      "34": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "35": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "36": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '",
      "37": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#')",
      "38": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "39": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '', '#', '#', '#', '#', '#', '#', '",
      "40": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#', '#', '#', '#', '#', '#',",
      "41": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "42": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "43": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#').replace('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "44": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '', '#', '#', '#', '#', '",
      "45": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '%', '#', '#', '#', '#',",
      "46": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#').replace('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "47": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "48": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "49": "input('finished').replace('/', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', input('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    viewer.plot()\n    raw_input('finished')\n",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/distanceFunction/square.py",
    "target_filename": "examples/levelSet/distanceFunction/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "viewer.plot() input('finished')"
    ],
    "correct": true,
    "top_five": {
      "0": "viewer.plot() input('finished')",
      "1": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "2": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "3": "viewer.plot() input('finished') raise Error('Unrecognized input: {'str', 'Unrecognized input } ')",
      "4": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "5": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "6": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "7": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "8": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "9": "viewer.plot() input('finished') if input('resolved') input('resolved')",
      "10": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n } n')",
      "11": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n')",
      "12": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n')",
      "13": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n')",
      "14": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n')",
      "15": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n } n')",
      "16": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n } n')",
      "17": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n { n \\ n')",
      "18": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n { n \\ n \\ n')",
      "19": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n')",
      "20": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n')",
      "21": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n } n')",
      "22": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n')",
      "23": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n \\ n')",
      "24": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n')",
      "25": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n')",
      "26": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n')",
      "27": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n')",
      "28": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n { n \\ n \\ n \\ n \\ n \\ n')",
      "29": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n \\ n')",
      "30": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n { n \\ n \\ n \\ n')",
      "31": "viewer.plot() input('finished') if input('unfinished') input('unfinished')",
      "32": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n')",
      "33": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n')",
      "34": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n } n \\ n')",
      "35": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n } n')",
      "36": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n')",
      "37": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n')",
      "38": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n')",
      "39": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "40": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "41": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n } n')",
      "42": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n } n \\ n')",
      "43": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n')",
      "44": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n { n \\ n \\ n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "45": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n { n \\ n \\ n \\ n \\ n \\ n \\ n')",
      "46": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n } n \\ n')",
      "47": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n { n \\ n \\ n \\ n \\ n')",
      "48": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n \\ n')",
      "49": "viewer.plot() input('finished') raise ValueError(f\"Unfinished input { n \\ n \\ n \\ n \\ n \\ n \\ n { n \\ n \\ n \\ n \\ n \\ n')"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
    "target_code": "        if not r.ok:\n            return PaymentStatus(None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_line": "        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `payment_hash` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/wallets/clightning.py",
    "target_filename": "lnbits/wallets/clightning.py",
    "source_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484^",
    "target_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "predictions": [
      "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None"
    ],
    "correct": false,
    "top_five": {
      "0": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "1": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "2": "if not r.ok: return PaymentStatus(r, None) var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "3": "if not r.ok: return PaymentStatus(r, None) payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "4": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "5": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "6": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "7": "if not r.ok: return PaymentStatus(r, None) payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments_hash = payments[0] if payments else None",
      "8": "if not r.ok: return PaymentStatus(r, None) assert isinstance(payments, p) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "9": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "10": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "11": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "12": "if not r.ok: return PaymentStatus(r, None) assert isinstance(payments, p) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "13": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "14": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "15": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "16": "if not r.ok: return PaymentStatus(r, None) if payments are not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "17": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "18": "if not r.ok: return PaymentStatus(r, None) var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "19": "if not r.ok: return PaymentStatus(r, None) if payments is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "20": "if not r.ok: return PaymentStatus(r, None) if p is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "21": "if not r.ok: return PaymentStatus(r, None) _payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] _payments = payments[0] if payments else None",
      "22": "if not r.ok: return PaymentStatus(r, None) if payment_hash is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "23": "if not r.ok: return PaymentStatus(r, None) assert isinstance(payments, p) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "24": "if not r.ok: return PaymentStatus(r, None) all_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == all_payments] payment = all_payments[0] if payments else None",
      "25": "if not r.ok: return PaymentStatus(r, None) _payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] _payments = _payments[0] if payments else None",
      "26": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_type = payments[0] if payments else None",
      "27": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] return payments[0] if payments else None",
      "28": "if not r.ok: return PaymentStatus(r, None) if isinstance(payments, p) payments = [p for p in r.json()[\"payments\"] if isinstance(payment_hash) == payment_hash] payments = payments[0] if payments else None",
      "29": "if not r.ok: return PaymentStatus(r, None) var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "30": "if not r.ok: return PaymentStatus(r, None) var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] var payments = payments[0] if payments else None",
      "31": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_results[0] if payments else None",
      "32": "if not r.ok: return PaymentStatus(r, None) if p for p in r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "33": "if not r.ok: return PaymentStatus(r, None) p_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_payment_hash] p_payments = payments[0] if payments else None",
      "34": "if not r.ok: return PaymentStatus(r, None) payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "35": "if not r.ok: return PaymentStatus(r, None) assert isinstance(payments, p) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "36": "if not r.ok: return PaymentStatus(r, None) default_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == default_payments] payment_hash = default_payments[0] if payments else None",
      "37": "if not r.ok: return PaymentStatus(r, None) if payments are not None: payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "38": "if not r.ok: return PaymentStatus(r, None) if not r.ok: return None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "39": "if not r.ok: return PaymentStatus(r, None) assert r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments.push(payments[0]) if payments else None",
      "40": "if not r.ok: return PaymentStatus(r, None) if not r.ok: return None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] if payments else None",
      "41": "if not r.ok: return PaymentStatus(r, None) if payment_hash is not None payments = [p for p in r.json()[\"payments\"] if payment_hash == payment_hash] payment_hash = payments[0] if payments else None",
      "42": "if not r.ok: return PaymentStatus(r, None) if isinstance(payments, p) payments = [p for p in r.json()[\"payments\"] if isinstance(payment_hash, payment_hash)] payment = payments[0] if payments else None",
      "43": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment = payments[0] if payments else None",
      "44": "if not r.ok: return PaymentStatus(r, None) payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "45": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments.push(payments[0]) if payments else None",
      "46": "if not r.ok: return PaymentStatus(r, None) all_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] all_payments = payments[0] if all_payments else None",
      "47": "if not r.ok: return PaymentStatus(r, None) if p is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payments = payments[0] if payments else None",
      "48": "if not r.ok: return PaymentStatus(r, None) if p is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] payment_hash = payments[0] if payments else None",
      "49": "if not r.ok: return PaymentStatus(r, None) if r.json()[\"payments\"] is not None payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] return payments[0] if payments else None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \"\"\"\n",
    "warning_line": "class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `viewsets` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 7,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cyverse/atmosphere",
    "source_filename": "api/v2/views/platform_type.py",
    "target_filename": "api/v2/views/platform_type.py",
    "source_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470^",
    "target_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "predictions": [
      "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthViewSet): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthViewSet): \"\"\"",
      "1": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "2": "from api.v2.serializers.details import AuthReadOnlyModelViewSet from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "3": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "4": "from api.v2.serializers.details import AuthController from api.v2.base import AuthController class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \"\"\"",
      "5": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.serializers class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "6": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthController class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \"\"\"",
      "7": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "8": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "9": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "10": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthController class PlatformTypeViewSet(AuthController): \"\"\"",
      "11": "from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "12": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "13": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.base class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "14": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.serializers class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "15": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.views class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "16": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "17": "from api.v2.serializers.details import AuthReadOnlyModelViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "18": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "19": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnly): \"\"\"",
      "20": "from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthController class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \"\"\"",
      "21": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.views class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "22": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "23": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "24": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \"\"\"",
      "25": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.views import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "26": "from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthViewSet): \"\"\"",
      "27": "from api.v2.serializers.details import AuthController from api.v2.base import AuthController class PlatformTypeViewSet(AuthController): \"\"\"",
      "28": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.views import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "29": "from api.v2.serializers.details import PlatformTypeSerializer from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "30": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "31": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthSet class PlatformTypeViewSet(AuthViewSet): \"\"\"",
      "32": "from api.v2.serializers.details import AuthReadOnlyModelViewSet from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "33": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from \"base\" class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "34": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import AuthAuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "35": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.base class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "36": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthWriter class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "37": "from api.v2.serializers.details import AuthViewSet from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthViewSet): \"\"\"",
      "38": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "39": "from api.v2.serializers.details import AuthWriter from api.v2.base import AuthReadOnlyModelViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "40": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthReadOnlyViewSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "41": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "42": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "43": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthSet class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "44": "from api.v2.serializers.details import AuthController from api.v2.base import AuthViewSet class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \"\"\"",
      "45": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.serializers class PlatformTypeViewSet(AuthReadOnly): \"\"\"",
      "46": "from api.v2.serializers.details import AuthViewSet from api.v2.base import AuthViewSet class PlatformTypeViewSet(): \"\"\"",
      "47": "from api.v2.serializers.details import AuthReadOnlyViewSet from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \"\"\"",
      "48": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\"",
      "49": "from api.v2.serializers.details import AuthReadOnly from api.v2.base import AuthReadOnly from api.v2.base import PlatformTypeSerializer class PlatformTypeViewSet(AuthReadOnlyViewSet): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return self is other or (\n            isintance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "target_code": "        return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "warning_line": "            isintance(other, GraphQLScalarTypeExtension)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `isintance` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 166,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tartiflette/tartiflette",
    "source_filename": "tartiflette/types/scalar.py",
    "target_filename": "tartiflette/types/scalar.py",
    "source_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc^",
    "target_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc",
    "predictions": [
      "return self is other or ( isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives"
    ],
    "correct": true,
    "top_five": {
      "0": "return self is other or ( isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "1": "return self is other or ( _isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "2": "return self is other or ( other.isinstance(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "3": "return self is other or ( else.instance(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "4": "return self is other or ( self.isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "5": "return self is other or ( else.isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "6": "return self is other or ( GraphQLScalarTypeExtension.isinstance(other) and other.directives == self.directives",
      "7": "return self is other or ( else[GraphQLScalarTypeExtension] and other.directives == self.directives",
      "8": "return self is other or ( GraphQLScalarTypeExtension.isInstance(other) and other.directives == self.directives",
      "9": "return self is other or ( other.instance(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "10": "return self is other or ( GraphQLScalarTypeExtension.isInt(other, other.GraphQLScalarTypeExtension) and other.directives == self.directives",
      "11": "return self is other or ( other[GraphQLScalarTypeExtension] and other.directives == self.directives",
      "12": "return self is other or ( isinstance(other, GraphQLScalarTypeExtension, other.directives) and other.directives == self.directives",
      "13": "return self is other or ( GraphQLScalarTypeExtension.isinstance(other, isinstance(other.GraphQLScalarTypeExtension)) and other.directives == self.directives",
      "14": "return self is other or ( GraphQLScalarTypeExtension.isInstance(other, other.GraphQLScalarTypeExtension) and other.directives == self.directives",
      "15": "return self is other or ( assert isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "16": "return self is other or ( class isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "17": "return self is other or ( GraphQLScalarTypeExtension.isInstance(other, isinstance(other.GraphQLScalarTypeExtension)) and other.directives == self.directives",
      "18": "return self is other or ( else.isinstance(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "19": "return self is other or ( value isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "20": "return self is other or ( else.int(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "21": "return self is other or ( other.int(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "22": "return self is other or ( else._isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "23": "return self is other or ( implementation.isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "24": "return self is other or ( isInstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "25": "return self is other or ( exports.isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "26": "return self is other or ( else = isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "27": "return self is another or ( isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "28": "return self is other or ( expression isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "29": "return self is other or ( this.isinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "30": "return self is other or ( intance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "31": "return self is other or ( GraphQLScalarTypeExtension, isinstance(other) and other.directives == self.directives",
      "32": "return self is other or ( other[GraphQLScalarTypeExtension] = other.directives and other.directives == self.directives",
      "33": "return self is other or ( other.instances(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "34": "return self is other or ( isinstance(self, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "35": "return self is other or ( GraphQLScalarTypeExtension.isinstance(other, isinstance(other.GraphQLScalarTypeExtension) ) and other.directives == self.directives",
      "36": "return self is other or ( GraphQLScalarTypeExtension isinstance(other) and other.directives == self.directives",
      "37": "return self is other or ( doesinstance(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "38": "return self is other or ( isinstance(other, GraphQuaternaryTypeExtension) and other.directives == self.directives",
      "39": "return self is other or ( isinstance(other.GraphQLScalarTypeExtension) and other.directives == self.directives",
      "40": "return self is other or ( GraphQLScalarTypeExtension.isInstance(other, isinstance(other.GraphQLScalarTypeExtension) ) and other.directives == self.directives",
      "41": "return self is other or ( else.init(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "42": "return self is other or ( other.init(GraphQLScalarTypeExtension) and other.directives == self.directives",
      "43": "return self is other or ( list(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "44": "return self is other or ( GraphQLScalarTypeExtension.isinstance(other, isinstance(other.graphQLScalarTypeExtension)) and other.directives == self.directives",
      "45": "return self is other or ( int(other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "46": "return self is other or ( (other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "47": "return self is other or ( isinstance(other, GraphQLScalarTypeExtension), other.directives == self.directives",
      "48": "return self is other or ( value of other, GraphQLScalarTypeExtension) and other.directives == self.directives",
      "49": "return self is other or ( GraphQLScalarTypeExtension.isInstance(other, isinstance(other)) and other.directives == self.directives"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_line": "    _valid_ingestibles = set(xrange(10, 14))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 384,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "target_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14)))"
    ],
    "correct": false,
    "top_five": {
      "0": "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14)))",
      "1": "_example_code = u'F' _valid_ingestibles = set(list(xrange(10, 14)))",
      "2": "_example_code = u'F' _valid_ingestibles = set(sql.xrange(10, 14))",
      "3": "_example_code = u'F' _valid_ingestibles = set(String(xrange(10, 14)))",
      "4": "_example_code = u'F' _valid_ingestibles = set(six.range(10, 14))",
      "5": "_example_code = u'F' _valid_ingestibles = set(this.xrange(10, 14))",
      "6": "_example_code = u'F' _valid_ingestibles = set(sql(xrange(10, 14)))",
      "7": "_example_code = u'F' _valid_ingestibles = set(values.range(10, 14))",
      "8": "_example_code = u'F' _valid_ingestibles = set(lat(xrange(10, 14)))",
      "9": "_example_code = u'F' _valid_ingestibles = set(t.xrange(10, t.yrange(14)))",
      "10": "_example_code = u'F' _valid_ingestibles = set(target(xrange(10, 14)))",
      "11": "_example_code = u'F' _valid_ingestibles = set(quota(xrange(10, 14)))",
      "12": "_example_code = u'F' _valid_ingestibles = set(values[xrange(10, 14)])",
      "13": "_example_code = u'F' _valid_ingestibles = set(Undefined(xrange(10, 14)))",
      "14": "_example_code = u'F' _valid_ingestibles = set(slot(xrange(10, 14)))",
      "15": "_example_code = u'F' _valid_ingestibles = set(undefined(xrange(10, 14)))",
      "16": "_example_code = u'F' _valid_ingestibles = set(Util.xrange(10, 14))",
      "17": "_example_code = u'F' _valid_ingestibles = set(six.xrange(10, six.yrange(14)))",
      "18": "_example_code = u'F' _valid_ingestibles = set(list(xlist(10, 14)))",
      "19": "_example_code = u'F' _valid_ingestibles = set(talent.xrange(10, talent.yrange(14)))",
      "20": "_example_code = u'F' _valid_ingestibles = set(six.range(10, six.range(14)))",
      "21": "_example_code = u'F' _valid_ingestibles = set(six.xsql(xrange(10, 14)))",
      "22": "_example_code = u'F' _valid_ingestibles = set(list(xrange(10, list(14))))",
      "23": "_example_code = u'F' _valid_ingestibles = set(list(list(xrange(10, 14))))",
      "24": "_example_code = u'F' _valid_ingestibles = set(os.xrange(10, 14))",
      "25": "_example_code = u'F' _valid_ingestibles = set(0, range(10, range(14)))",
      "26": "_example_code = u'F' _valid_ingestibles = set(sprite.xrange(10, 14))",
      "27": "_example_code = u'F' _valid_ingestibles = set(Utils.xrange(10, 14))",
      "28": "_example_code = u'F' _valid_ingestibles = set(quotes.range(10, 14))",
      "29": "_example_code = u'F' _valid_ingestibles = set(Undefined.range(10, 14))",
      "30": "_example_code = u'F' _valid_ingestibles = set(horizontal(xrange(10, 14)))",
      "31": "_example_code = u'F' _valid_ingestibles = set(utils.xrange(10, utils.yellow(xrange(10, 14))))",
      "32": "_example_code = u'F' _valid_ingestibles = set(Nullstone.xrange(10, 14))",
      "33": "_example_code = u'F' _valid_ingestibles = set(target, xrange(10, 14))",
      "34": "_example_code = u'F' _valid_ingestibles = set(Undefined.xrange(10, 14))",
      "35": "_example_code = u'F' _valid_ingestibles = set(sql[xrange(10, 14)])",
      "36": "_example_code = u'F' _valid_ingestibles = set(os.xrange(10, os.yrange(14)))",
      "37": "_example_code = u'F' _valid_ingestibles = set(six.range(xrange(10, 14)))",
      "38": "_example_code = u'F' _valid_ingestibles = set(list(xlist(xlist(10, 14))))",
      "39": "_example_code = u'F' _valid_ingestibles = set(s.range(10, 14))",
      "40": "_example_code = u'F' _valid_ingestibles = set(width(xrange(10, 14)))",
      "41": "_example_code = u'F' _valid_ingestibles = set(width(10, 14))",
      "42": "_example_code = u'F' _valid_ingestibles = set(global[xrange(10, 14)])",
      "43": "_example_code = u'F' _valid_ingestibles = set(quota(xrange(10, u'f'), xrange(14)))",
      "44": "_example_code = u'F' _valid_ingestibles = set(lat.xrange(10, u'f', xrange(14)))",
      "45": "_example_code = u'F' _valid_ingestibles = set()",
      "46": "_example_code = u'F' _valid_ingestibles = set(base(xrange(10, 14)))",
      "47": "_example_code = u'F' _valid_ingestibles = set(os.range(10, 14))",
      "48": "_example_code = u'F' _valid_ingestibles = set(utils.xrange(10, utils.yeld.14))",
      "49": "_example_code = u'F' _valid_ingestibles = set(str(xrange(10, 14, )))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "target_code": "                else:\n                    def joiner(left: MatrixTable):\n                        return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_line": "                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1637,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "hail/python/hail/table.py",
    "target_filename": "hail/python/hail/table.py",
    "source_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629^",
    "target_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "predictions": [
      "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),"
    ],
    "correct": false,
    "top_five": {
      "0": "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "1": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "2": "else: joiner = lambda left: MatrixTable().append(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "3": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, left._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "4": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, right._tir, uid )) ast = Join(GetField(TopLevelReference('va'), uid),",
      "5": "else: joiner = lambda left: MatrixTable(self.MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "6": "else: joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable( left._mir, right._tir, uid)]) ast = Join(GetField(TopLevelReference('va'), uid),",
      "7": "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "8": "else: joiner = lambda left: MatrixTable( \"MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "9": "else: joiner = lambda left: MatrixTable(MatrixAnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "10": "else: joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable(left._mir, right._tir, uid)]) ast = Join(GetField(TopLevelReference('va'), uid),",
      "11": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "12": "else: joiner = lambda left: MatrixTable(MatrixBaseRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "13": "else: joiner = lambda left: MatrixTable(Matrix_AnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "14": "else: joiner = lambda left: MatrixTable(...(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "15": "else: joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( left._mir, left._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "16": "else: joiner = lambda left: MatrixTable( \"MatrixAnnotateRowsTable( left._mir, right._tir, uid) ) ast = Join(GetField(TopLevelReference('va'), uid),",
      "17": "else: joiner = lambda left: MatrixTable.call(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "18": "else: joiner = lambda left: MatrixTable(self.MatrixAnnotateRowsTable( left._mir, left._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "19": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(t._mir, t._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "20": "else: joiner = lambda left: MatrixTable(\"MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "21": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(self._mir, self._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "22": "else: joiner = lambda left: MatrixTable(MatrixTable.AnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "23": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( left._mir, left._tir, uid )) ast = Join(GetField(TopLevelReference('va'), uid),",
      "24": "else: joiner = lambda left: MatrixTable(MatrixTipRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "25": "else: joiner = lambda left: MatrixTable().append(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "26": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( Left._mir, Right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "27": "else: joiner = lambda left: MatrixTable(str(MatrixAnnotateRowsTable(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "28": "else: joiner = lambda left: MatrixTable(str(MatrixAnnotateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "29": "else: joiner = lambda left: MatrixTable[MatrixAnnotateRowsTable( left._mir, right._tir, uid)] ast = Join(GetField(TopLevelReference('va'), uid),",
      "30": "else: joiner = lambda left: MatrixTable( \"MatrixAnnotateRowsTable\"( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "31": "else: joiner = lambda left: MatrixTable(MatrixAnnotateTirsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "32": "else: joiner = lambda left: MatrixTable(MatrixRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "33": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(uid, left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "34": "else: joiner = lambda left: MatrixTable('AnnotateRowsTable'( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "35": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( uid, left._mir)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "36": "else: joiner = lambda left: MatrixTable( [MatrixAnnotateRowsTable( left._mir, right._tir, uid)]) ast = Join(GetField(TopLevelReference('va'), uid),",
      "37": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable[left._mir, right._tir, uid]) ast = Join(GetField(TopLevelReference('va'), uid),",
      "38": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( uid ) ) ast = Join(GetField(TopLevelReference('va'), uid),",
      "39": "else: joiner = lambda left: MatrixTable(MatrixStateRowsTable( left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "40": "else: joiner = lambda left: MatrixTable(str(left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "41": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( uid, left._mir, right._tir, uid)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "42": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( uid if not left._mir)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "43": "else: joiner = lambda left: MatrixTable(MatrixTable[str, uid]) ast = Join(GetField(TopLevelReference('va'), uid),",
      "44": "else: joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable( left._mir, right._tir, uid])) ast = Join(GetField(TopLevelReference('va'), uid),",
      "45": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( uid, left._mir, right._tir, uid )) ast = Join(GetField(TopLevelReference('va'), uid),",
      "46": "else: joiner = lambda left: MatrixTable( [MatrixAnnotateRowsTable( left._mir, right._tir, uid)] ast = Join(GetField(TopLevelReference('va'), uid),",
      "47": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable('utf-8')) ast = Join(GetField(TopLevelReference('va'), uid),",
      "48": "else: joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(t)) ast = Join(GetField(TopLevelReference('va'), uid),",
      "49": "else: joiner = lambda left: MatrixTable() ast = Join(GetField(TopLevelReference('va'), uid),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n\nelse:\n    raise Error(\"Unknown platform\")\n\n",
    "target_code": "elif platform_system == \"Windows\":\n    raise NotImplementedError(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")\n\n",
    "warning_line": "    raise Error(\"Windows not supported\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Error` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 68,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "streamlit/streamlit",
    "source_filename": "examples/run_on_save.py",
    "target_filename": "examples/run_on_save.py",
    "source_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15^",
    "target_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "predictions": [
      "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")"
    ],
    "correct": false,
    "top_five": {
      "0": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") else: raise Error(\"Unknown platform\")",
      "1": "elif platform_system == \"Windows\": raise new Error(\"Windows not supported\") else: raise new Error(\"Unknown platform\")",
      "2": "elif platform_system == \"Windows\": raise _Error(\"Windows not supported\") else: raise _Error(\"Unknown platform\")",
      "3": "elif platform_system == \"Windows\": raise err(\"Windows not supported\") else: raise err(\"Unknown platform\")",
      "4": "elif platform_system == \"Windows\": raise StatusError(\"Windows not supported\") else: raise StatusError(\"Unknown platform\")",
      "5": "elif platform_system == \"Windows\": raise this.Error(\"Windows not supported\") else: raise this.Error(\"Unknown platform\")",
      "6": "elif platform_system == \"Windows\": raise TypeError(\"Windows not supported\") else: raise TypeError(\"Unknown platform\")",
      "7": "elif platform_system == \"Windows\": raise anError(\"Windows not supported\") else: raise anError(\"Unknown platform\")",
      "8": "elif platform_system == \"Windows\": raise ValueError(\"Windows not supported\") else: raise ValueError(\"Unknown platform\")",
      "9": "elif platform_system == \"Windows\": raise PlatformError(\"Windows not supported\") else: raise PlatformError(\"Unknown platform\")",
      "10": "elif platform_system == \"Windows\": raise ScenarioError(\"Windows not supported\") else: raise ScenarioError(\"Unknown platform\")",
      "11": "elif platform_system == \"Windows\": raise dt.Error(\"Windows not supported\") else: raise dt.Error(\"Unknown platform\")",
      "12": "elif platform_system == \"Windows\": raise JSON.Error(\"Windows not supported\") else: raise JSON.Error(\"Unknown platform\")",
      "13": "elif platform_system == \"Windows\": raise ScenariosError(\"Windows not supported\") else: raise ScenariosError(\"Unknown platform\")",
      "14": "elif platform_system == \"Windows\": raise System.Error(\"Windows not supported\") else: raise System.Error(\"Unknown platform\")",
      "15": "elif platform_system == \"Windows\": raise dbError(\"Windows not supported\") else: raise dbError(\"Unknown platform\")",
      "16": "elif platform_system == \"Windows\": raise dtrError(\"Windows not supported\") else: raise dtrError(\"Unknown platform\")",
      "17": "elif platform_system == \"Windows\": raise GlobalError(\"Windows not supported\") else: raise GlobalError(\"Unknown platform\")",
      "18": "elif platform_system == \"Windows\": raise SupportError(\"Windows not supported\") else: raise SupportError(\"Unknown platform\")",
      "19": "elif platform_system == \"Windows\": raise aError(\"Windows not supported\") else: raise aError(\"Unknown platform\")",
      "20": "elif platform_system == \"Windows\": raise _Error('Windows not supported') else: raise _Error(\"Unknown platform\")",
      "21": "elif platform_system == \"Windows\": raise dmError(\"Windows not supported\") else: raise dmError(\"Unknown platform\")",
      "22": "elif platform_system == \"Windows\": raise ERror(\"Windows not supported\") else: raise ERror(\"Unknown platform\")",
      "23": "elif platform_system == \"Windows\": raise platform_system.Error(\"Windows not supported\") else: raise platform.Error(\"Unknown platform\")",
      "24": "elif platform_system == \"Windows\": raise theError(\"Windows not supported\") else: raise theError(\"Unknown platform\")",
      "25": "elif platform_system == \"Windows\": raise msg(\"Windows not supported\") else: raise msg(\"Unknown platform\")",
      "26": "elif platform_system == \"Windows\": raise thisError(\"Windows not supported\") else: raise thisError(\"Unknown platform\")",
      "27": "elif platform_system == \"Windows\": raise global.Error(\"Windows not supported\") else: raise global.Error(\"Unknown platform\")",
      "28": "elif platform_system == \"Windows\": raise CustomError(\"Windows not supported\") else: raise CustomError(\"Unknown platform\")",
      "29": "elif platform_system == \"Windows\": raise err(Error(\"Windows not supported\")) else: raise err(\"Unknown platform\")",
      "30": "elif platform_system == \"Windows\": raise StandardError(\"Windows not supported\") else: raise StandardError(\"Unknown platform\")",
      "31": "elif platform_system == \"Windows\": raise UserError(\"Windows not supported\") else: raise UserError(\"Unknown platform\")",
      "32": "elif platform_system == \"Windows\": raise EndError(\"Windows not supported\") else: raise EndError(\"Unknown platform\")",
      "33": "elif platform_system == \"Windows\": raise ExpressionError(\"Windows not supported\") else: raise ExpressionError(\"Unknown platform\")",
      "34": "elif platform_system == \"Windows\": raise ServiceError(\"Windows not supported\") else: raise ServiceError(\"Unknown platform\")",
      "35": "elif platform_system == \"Windows\": raise Error('Windows not supported') else: raise Error(\"Unknown platform\")",
      "36": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") or raise Error(\"Unknown platform\")",
      "37": "elif platform_system == \"Windows\": raise StartupError(\"Windows not supported\") else: raise StartupError(\"Unknown platform\")",
      "38": "elif platform_system == \"Windows\": raise SourceError(\"Windows not supported\") else: raise SourceError(\"Unknown platform\")",
      "39": "elif platform_system == \"Windows\": raise ProfileError(\"Windows not supported\") else: raise ProfileError(\"Unknown platform\")",
      "40": "elif platform_system == \"Windows\": raise AnError(\"Windows not supported\") else: raise AnError(\"Unknown platform\")",
      "41": "elif platform_system == \"Windows\": raise Error(\"Windows is not currently supported\") else: raise Error(\"Unknown platform\")",
      "42": "elif platform_system == \"Windows\": raise Error(\"Windows not supported\") or \"Unknown platform\")",
      "43": "elif platform_system == \"Windows\": raise Error(\"Unknown platform\")",
      "44": "elif platform_system == \"Windows\": raise it(\"Windows not supported\") else: raise it(\"Unknown platform\")",
      "45": "elif platform_system == \"Windows\": raise platform_system.Error(\"Windows not supported\") else: raise platform.Unknown platform\")",
      "46": "elif platform_system == \"Windows\": raise Exception(\"Windows not supported\") else: raise Exception(\"Unknown platform\")",
      "47": "elif platform_system == \"Windows\": raise elif platform_system.Error(\"Unknown platform\")",
      "48": "elif platform_system == \"Windows\": raise Error('Windows not supported') else: raise Error('Unknown platform')",
      "49": "elif platform_system == \"Windows\": raise SupportError(\"Windows not supported\") else: raise Error(\"Unknown platform\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)\n",
    "target_code": "\n@typecheck(structs=oneof(expr_array),\n           identifier=str)\n",
    "warning_line": "@typecheck(structs=oneof(expr_array, listof(Struct)),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `listof` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 649,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "python/hail/expr/functions.py",
    "target_filename": "python/hail/expr/functions.py",
    "source_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5^",
    "target_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5",
    "predictions": [
      "@typecheck(structs=oneof(expr_array), identifier=str)"
    ],
    "correct": true,
    "top_five": {
      "0": "@typecheck(structs=oneof(expr_array), identifier=str)",
      "1": "@typecheck(structs=str, identifier=str)",
      "2": "@typecheck(structs=oneof(expr_array)), identifier=str)",
      "3": "@typecheck(structs=equal(expr_array, listof(Struct)), identifier=str)",
      "4": "@typecheck(structs=expr_array, __listof(Struct)), identifier=str)",
      "5": "@typecheck(structs=OneOf(expr_array), identifier=str)",
      "6": "@typecheck(structs=expr_array, args=Expr_array, args=Struct), identifier=str)",
      "7": "@typecheck(structs=list(expr_array), identifier=str)",
      "8": "@typecheck(structs=expr_array, args=args, identifier=str)",
      "9": "@typecheck(structs=expr_array, args=struct, identifier=str)",
      "10": "@typecheck(structs=expr_array, args=Struct), identifier=str)",
      "11": "@typecheck(structs=str(expr_array), identifier=str)",
      "12": "@typecheck(structs=str_array, identifier=str)",
      "13": "@typecheck(expr_array, str), identifier=str)",
      "14": "@typecheck(structs=expr_array, args=[], identifier=str)",
      "15": "@typecheck(structs=none, args=expr_array, args=listof(Struct), identifier=str)",
      "16": "@typecheck(structs=expr_array, args=Struct, identifier=str)",
      "17": "@typecheck(structs=expr_array, args='struct'), identifier=str)",
      "18": "@typecheck(expr_array = None, structs=oneof(expr_array), identifier=str)",
      "19": "@typecheck(_structs=oneof(expr_array), identifier=str)",
      "20": "@typecheck(structs=expr_array, identifier=str)",
      "21": "@typecheck(structs=equal(expr_array, str)), identifier=str)",
      "22": "@typecheck(structs=expr_array, structs=str), identifier=str)",
      "23": "@typecheck(structs=expr_array, args=oneof(Struct), identifier=str)",
      "24": "@typecheck(structs=none, args=expr_array, args=struct), identifier=str)",
      "25": "@typecheck(structs=expr_array, args=oneof(args, listof(Struct)), identifier=str)",
      "26": "@typecheck(structs=classes.oneof(expr_array), identifier=str)",
      "27": "@typecheck(structs=oneof(expr_array, str)), identifier=str)",
      "28": "@typecheck(structs=none, args=expr_array, args=listof(Struct)), identifier=str)",
      "29": "@typecheck(structs=none, args=expr_array, args=Struct), identifier=str)",
      "30": "@typecheck(structs=expr_array, args=struct), identifier=str)",
      "31": "@typecheck(args=oneof(expr_array), identifier=str)",
      "32": "@typecheck(structs=equal(expr_array, str), identifier=str)",
      "33": "@typecheck(structs=expr_array, args=list(Struct), identifier=str)",
      "34": "@typecheck(structs=expr_array, args=Expr_array, args=Strruct), identifier=str)",
      "35": "@typecheck(structs=[oneof(expr_array), listof(Struct)], identifier=str)",
      "36": "@typecheck(structs=expr_array, structs=list(Struct), identifier=str)",
      "37": "@typecheck(structs=args, identifier=str)",
      "38": "@typecheck(structs=expr_array, args=None, identifier=str)",
      "39": "@typecheck(str=expr_array, identifier=str)",
      "40": "@typecheck(structs=expr_array, structs=none, identifier=str)",
      "41": "@typecheck(structs=oneof(expr_array, str), identifier=str)",
      "42": "@typecheck(structs=[oneof(expr_array), listof(Struct)), identifier=str)",
      "43": "@typecheck(structs=expr_array, args=Expr_array, args=Struct, identifier=str)",
      "44": "@typecheck(structs=equal(expr_array), identifier=str)",
      "45": "@typecheck(structs=expr_array, args=args), identifier=str)",
      "46": "@typecheck(structs=none, args=expr_array, args=list(Struct), identifier=str)",
      "47": "@typecheck(structs=expr_array, args=str), identifier=str)",
      "48": "@typecheck(structs=expr_array, args='list'), identifier=str)",
      "49": "@typecheck(structs=expr_array, str), identifier=str)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')\n",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 88,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/surfactant/square.py",
    "target_filename": "examples/levelSet/surfactant/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "surfactantViewer.plot() print surfactantVariable input('finished')"
    ],
    "correct": false,
    "top_five": {
      "0": "surfactantViewer.plot() print surfactantVariable input('finished')",
      "1": "surfactantViewer.plot() input('finished')",
      "2": "surfactantViewer.plot() press surfactantVariable input('finished')",
      "3": "surfactantViewer.plot() output('finished')",
      "4": "surfactantViewer.plot() for (var i = 0; i  surfactantVariable.length; i++) input('finished')",
      "5": "surfactantViewer.plot() add surfactantVariable input('finished')",
      "6": "surfactantViewer.plot() elif isinstance(surfactantVariable, 'finished') input('finished')",
      "7": "surfactantViewer.plot() create surfactantVariable input('finished')",
      "8": "surfactantViewer.plot() import surfactantVariable input('finished')",
      "9": "surfactantViewer.plot() for (var i = 0; i  input_length; i++) input('finished')",
      "10": "surfactantViewer.plot() set(surfactantVariable, 'finished') input('finished')",
      "11": "surfactantViewer.plot() debug(surfactantVariable, 'finished') input('finished')",
      "12": "surfactantViewer.plot() if not isinstance(surfactantVariable, 'finished') input('finished')",
      "13": "surfactantViewer.plot() int = surfactantVariable.raw_input('finished')",
      "14": "surfactantViewer.plot() return surfactantVariable input('finished')",
      "15": "surfactantViewer.plot() load surfactantVariable input('finished')",
      "16": "surfactantViewer.plot() if isinstance(surfactantVariable, input('finished'))",
      "17": "surfactantViewer.plot() printing surfactantVariable input('finished')",
      "18": "surfactantViewer.plot() int = surfactantVariable input('finished')",
      "19": "surfactantViewer.plot() feed(surfactantVariable, 'finished') input('finished')",
      "20": "surfactantViewer.plot() read surfactantVariable input('finished')",
      "21": "surfactantViewer.plot() return input('finished')",
      "22": "surfactantViewer.plot() markup(surfactantVariable) input('finished')",
      "23": "surfactantViewer.plot() if isinstance(surfactantVariable, 'finished') input('finished')",
      "24": "surfactantViewer.plot() for (var i = 0; i  surfactantVariable.length; ++i) input('finished')",
      "25": "surfactantViewer.plot() call surfactantVariable input('finished')",
      "26": "surfactantViewer.plot() test surfactantVariable input('finished')",
      "27": "surfactantViewer.plot() debug('finished') input('finished')",
      "28": "surfactantViewer.plot() surfactantVariable input('finished')",
      "29": "surfactantViewer.plot() dump surfactantVariable input('finished')",
      "30": "surfactantViewer.plot() if not isinstance(surfactantVariable) input('finished')",
      "31": "surfactantViewer.plot() get surfactantVariable input('finished')",
      "32": "surfactantViewer.plot() print surfactantViewable input('finished')",
      "33": "surfactantViewer.plot() report(surfactantVariable, 'finished') input('finished')",
      "34": "surfactantViewer.plot() if isinstance(surfactantVariable) input('finished')",
      "35": "surfactantViewer.plot() show surfactantVariable input('finished')",
      "36": "surfactantViewer.plot() cast(surfactantVariable) input('finished')",
      "37": "surfactantViewer.plot() display surfactantVariable input('finished')",
      "38": "surfactantViewer.plot() generate surfactantVariable input('finished')",
      "39": "surfactantViewer.plot() elif isinstance(surfactantVariable) input('finished')",
      "40": "surfactantViewer.plot() make surfactantVariable input('finished')",
      "41": "surfactantViewer.plot() if not surfactantVariable input('finished')",
      "42": "surfactantViewer.plot() for (var i = 0; i  input_length; ++i) input('finished')",
      "43": "surfactantViewer.plot() check surfactantVariable input('finished')",
      "44": "surfactantViewer.plot() debug(surfactantVariable) input('finished')",
      "45": "surfactantViewer.plot() int = surfactantVariable.input('finished')",
      "46": "surfactantViewer.plot() elif isinstance(surfactantVariable, 'finished') input('raw_input')",
      "47": "surfactantViewer.plot() print surfactantVariable input('finished', 'utf-8')",
      "48": "surfactantViewer.plot() cast(str) input('finished')",
      "49": "surfactantViewer.plot() elif isinstance(surfactantVariable, 'finished') input('failed')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = xrange(8)\n\n",
    "target_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = range(8)\n\n",
    "warning_line": "_UPDATE = xrange(8)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 296,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/basher/frames.py",
    "target_filename": "Mopy/bash/basher/frames.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = range(8)"
    ],
    "correct": false,
    "top_five": {
      "0": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = range(8)",
      "1": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange(8))",
      "2": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange8)",
      "3": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(8)",
      "4": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } \"use strict\";",
      "5": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange)",
      "6": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = ''(8)",
      "7": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = \"\"\"",
      "8": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = this._range(8)",
      "9": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _RANGE_EXTENSION = xrange(8)",
      "10": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = scope[8]",
      "11": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = 8",
      "12": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = 0",
      "13": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, }",
      "14": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = value.range(8)",
      "15": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = range(8)",
      "16": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = region(8)",
      "17": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = array(8)",
      "18": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _RANGE = 0",
      "19": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } var _UPDATE = xrange(8)",
      "20": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = '8'",
      "21": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = horizon(8)",
      "22": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = scout.xrange(8)",
      "23": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, }...",
      "24": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = 0",
      "25": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, },...",
      "26": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = scope(8)",
      "27": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _LOAD_UPDATE = range(8)",
      "28": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = []",
      "29": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = null",
      "30": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = xrange(8)",
      "31": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = ''(8)",
      "32": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _update = range(8)",
      "33": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange, 8)",
      "34": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = true",
      "35": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str.range(8)",
      "36": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = undefined (8)",
      "37": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = false",
      "38": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = true",
      "39": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = 8",
      "40": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = '(8)'",
      "41": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = config.xrange(8)",
      "42": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = options.range(8)",
      "43": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = undefined.range(8)",
      "44": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = str(xrange(8)),",
      "45": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = list([])",
      "46": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = \"\"\"",
      "47": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = \"\";",
      "48": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _UPDATE = scope.extend( {",
      "49": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, } _DEFAULT_UPDATE = xrange(8)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def get_label(cls) -> str:\n        return self.__name__  #\u00a0default label is the class name\n\n",
    "target_code": "    def get_label(cls) -> str:\n        return cls.__name__  # default label is the class name\n\n",
    "warning_line": "        return self.__name__  #\u00a0default label is the class name",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algoo/preview-generator",
    "source_filename": "preview_generator/preview/generic_preview.py",
    "target_filename": "preview_generator/preview/generic_preview.py",
    "source_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2^",
    "target_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "predictions": [
      "def get_label(cls) -> str: return self.__name__ # default label is the class name"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_label(cls) -> str: return self.__name__ # default label is the class name",
      "1": "def get_label(cls) -> str: self.__name__ = self.__name__ # default label is the class name",
      "2": "def get_label(cls) -> str: assert self.__name__ is not None # default label is the class name",
      "3": "def get_label(cls) -> str: self.__name__ is not None # default label is the class name",
      "4": "def get_label(cls) -> str: return cls.__name__ # default label is the class name",
      "5": "def get_label(cls) -> str: self.__name__ = self.__name__ default label is the class name",
      "6": "def get_label(cls) -> str: def.__name__ = self.__name__ # default label is the class name",
      "7": "def get_label(cls) -> str: # self.__name__ = self.__name__ # default label is the class name",
      "8": "def get_label(cls) -> str: assert self.__name__ = self.__name__ # default label is the class name",
      "9": "def get_label(cls) -> str: if not self.__name__: default label is the class name",
      "10": "def get_label(cls) -> str: if cls.hasOwnProperty(self): self.__name__ = self.__name__ # default label is the class name",
      "11": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__): self.__name__ = self.__name__ # default label is the class name",
      "12": "def get_label(cls) -> str: if cls.hasOwnProperty(self): return self.__name__ # default label is the class name",
      "13": "def get_label(cls) -> str: self.__name__ = str # default label is the class name",
      "14": "def get_label(cls) -> str: name = self.__name__ # default label is the class name",
      "15": "def get_label(cls) -> str: self.__name__ = false # default label is the class name",
      "16": "def get_label(cls) -> str: self.__name = self.__name__ # default label is the class name",
      "17": "def get_label(cls) -> str: self.__name__ = self.__name__ if self.__name__ is not None: default label is the class name",
      "18": "def get_label(cls) -> str: return self.__name__ # self.__name__ = self.__name__ # default label is the class name",
      "19": "def get_label(cls) -> str: # self.__name__ is not None # default label is the class name",
      "20": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__): default label is the class name",
      "21": "def get_label(cls) -> str: return self.__name__ if cls.hasOwnProperty(self.__name__): default label is the class name",
      "22": "def get_label(cls) -> str: return label(self.__name__) # default label is the class name",
      "23": "def get_label(cls) -> str: return self.__name__ # self.__name__ = self.__name__ default label is the class name",
      "24": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__): return self.__name__ # default label is the class name",
      "25": "def get_label(cls) -> str: self.__name__ = default label is the class name",
      "26": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__): self.__name__ = default label is the class name",
      "27": "def get_label(cls) -> str: self.__name__ = self.___name__ # default label is the class name",
      "28": "def get_label(cls) -> str: self.__name__ = self.__name__# default label is the class name",
      "29": "def get_label(cls) -> str: def.__name__ is not None # default label is the class name",
      "30": "def get_label(cls) -> str: self.__name__ = self.get_label(cls) # default label is the class name",
      "31": "def get_label(cls) -> str: return self.__name__ # self.__name__ = \"\" # default label is the class name",
      "32": "def get_label(cls) -> str: return self.__name__# default label is the class name",
      "33": "def get_label(cls) -> str: return self.__name__ # self.__name__ is not the class name",
      "34": "def get_label(cls) -> str: self.name = self.__name__ # default label is the class name",
      "35": "def get_label(cls) -> str: self.__name__ = self.__name__ if not self.__name__: default label is the class name",
      "36": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__): return default label is the class name",
      "37": "def get_label(cls) -> str: if not self.__name: default label is the class name",
      "38": "def get_label(cls) -> str: self.__name__ = cls.name # default label is the class name",
      "39": "def get_label(cls) -> str: let label = self.__name__ # default label is the class name",
      "40": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__) -> label: return self.__name__ # default label is the class name",
      "41": "def get_label(cls) -> str: return self.__name__ # self.__name__ is not None # default label is the class name",
      "42": "def get_label(cls) -> str: return _self.__name__ # default label is the class name",
      "43": "def get_label(cls) -> str: self.__name__ = \"\" # default label is the class name",
      "44": "def get_label(cls) -> str: if cls.hasOwnProperty(self.__name__) is not None: return self.__name__ # default label is the class name",
      "45": "def get_label(cls) -> str: self.__name__ = cls.__name # default label is the class name",
      "46": "def get_label(cls) -> str: # self.__name__ = self.__name__ default label is the class name",
      "47": "def get_label(cls) -> str: self.__name__ = self.__name__ if self.__name__ is not None # default label is the class name",
      "48": "def get_label(cls) -> str: if cls.hasOwnProperty(self): self.__name__ = default label is the class name",
      "49": "def get_label(cls) -> str: self.__name__ = true # default label is the class name"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input(\"finished\")\n",
    "target_code": "\n    input(\"finished\")\n",
    "warning_line": "    raw_input(\"finished\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 136,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "target_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "input(\"finished\")"
    ],
    "correct": true,
    "top_five": {
      "0": "input(\"finished\")",
      "1": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.n",
      "2": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.n",
      "3": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.n",
      "4": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.p.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "5": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "6": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "7": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.n",
      "8": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "9": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "10": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "11": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "12": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "13": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "14": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "15": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "16": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "17": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "18": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "19": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu,",
      "20": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "21": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "22": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "23": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "24": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "25": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "26": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu,",
      "27": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.s.nu",
      "28": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "29": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "30": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.s",
      "31": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu;",
      "32": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "33": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "34": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.p.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "35": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.s.nu.nu",
      "36": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "37": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.N",
      "38": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.s.nu.nu.nu",
      "39": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "40": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "41": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "42": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "43": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "44": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "45": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.s.nu.nu.nu.nu",
      "46": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nuu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.",
      "47": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu",
      "48": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu,",
      "49": "input(\"finished\") -> np.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.ns.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu.nu;"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \n\tself.conf = Config()\n\n",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_line": "\tself.conf = Config()",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "naparuba/shinken",
    "source_filename": "shinken/scheduler.py",
    "target_filename": "shinken/scheduler.py",
    "source_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54^",
    "target_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "predictions": [
      "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',"
    ],
    "correct": false,
    "top_five": {
      "0": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "1": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "2": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "3": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "4": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "5": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "6": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "7": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "8": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "9": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default",
      "10": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "11": "define(self, Config(), 'conf', ['default', 'json', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "12": "define(self, Config(), 'conf', ['default', 'json', 'json', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "13": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "14": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "15": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "16": "define(self, Config(), 'conf', ['default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'json', 'json', 'default', 'json', 'json', 'default', 'json', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', '",
      "17": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "18": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "19": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "20": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default'",
      "21": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "22": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "23": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config',",
      "24": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'json', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default'",
      "25": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "26": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config',",
      "27": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config',",
      "28": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "29": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "30": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config',",
      "31": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "32": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config',",
      "33": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "34": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "35": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'Default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "36": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config',",
      "37": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'f', 'default', 'default', 'default', 'default', 'default', 'default',",
      "38": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "39": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config','self.conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config",
      "40": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "41": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config',",
      "42": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config','self.conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config', 'config",
      "43": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'f', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "44": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config','self.conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default",
      "45": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default','self', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default',",
      "46": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'config','self.conf', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default",
      "47": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'type,",
      "48": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'f',",
      "49": "define(self, Config, 'config', ['default','module','module', 'default','module', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default', 'default_default"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,\n",
    "target_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_line": "                                  obs: Union[Tensor, Cens],",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Cens` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 172,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "strongio/torch-kalman",
    "source_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "target_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca^",
    "target_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "predictions": [
      "def _log_prob_with_subsetting(self, obs: Union[Tensor], group_idx: Selector,"
    ],
    "correct": false,
    "top_five": {
      "0": "def _log_prob_with_subsetting(self, obs: Union[Tensor], group_idx: Selector,",
      "1": "def _log_prob_with_subsetting(self, obs: Union[Censor], group_idx: Selector,",
      "2": "def _log_prob_with_subsetting(self, obs: Optional[Union[Tensor], Cens], group_idx: Selector,",
      "3": "def _log_prob_with_subsetting(self, obs: List[Union[Tensor], List[Cens]], group_idx: Selector,",
      "4": "def _log_prob_with_subsetting(self, obs: Union[Tensor, List[Cens]], group_idx: Selector,",
      "5": "def _log_prob_with_subsetting(self, obs: Union[Utils.Tensor], group_idx: Selector,",
      "6": "def _log_prob_with_subsetting(self, obs: List[Union[Tensor], Cens], group_idx: Selector,",
      "7": "def _log_prob_with_subsetting(self, obs: Object.assign(Union[Tensor, Cens], group_idx: Selector,",
      "8": "def _log_prob_with_subsetting(self, obs, group_idx: Selector,",
      "9": "def _log_prob_with_subsetting(self, obs: Union[Utils.Tensor, Utils.Cens], group_idx: Selector,",
      "10": "def _log_prob_with_subsetting(self, obs: Union[List[Tensor], List[Cens]], group_idx: Selector,",
      "11": "def _log_prob_with_subsetting(self, obs: List[Union[Tensor, List]], group_idx: Selector,",
      "12": "def _log_prob_with_subsetting(self, obs: Union[Union[Tensor], Cens], group_idx: Selector,",
      "13": "def _log_prob_with_subsetting(self, obs: List[Union[Tensor], List[Cens], group_idx: Selector,",
      "14": "def _log_prob_with_subsetting(self, obs: Utils.Union[Tensor, Cens], group_idx: Selector,",
      "15": "def _log_prob_with_subsetting(self, obs: Union[Util, Tensor], group_idx: Selector,",
      "16": "def _log_prob_with_subsetting(self, obs: Union[Tensor,...], group_idx: Selector,",
      "17": "def _log_prob_with_subsetting(self, obs: Optional[Union[Tensor, Cens], group_idx: Selector,",
      "18": "def _log_prob_with_subsetting(self, obs: Union[Group[Censor], Cens], group_idx: Selector,",
      "19": "def _log_prob_with_subsetting(self, obs: Union[Group[Tensor], Cens], group_idx: Selector,",
      "20": "def _log_prob_with_subsetting(self, obs: Union[Group[Tensor], Cens]), group_idx: Selector,",
      "21": "def _log_prob_with_subsetting(self, obs: Union[[Tensor], Cens], group_idx: Selector,",
      "22": "def _log_prob_with_subsetting(self, obs: Union[Group[Censor], Cens]), group_idx: Selector,",
      "23": "def _log_prob_with_subsetting(self, obs: Union[str, Tensor], group_idx: Selector,",
      "24": "def _log_prob_with_subsetting(self, obs: Union[str, str], group_idx: Selector,",
      "25": "def _log_prob_with_subsetting(self, obs: Utils.Union[Tensor, Utils.Cens], group_idx: Selector,",
      "26": "def _log_prob_with_subsetting(self, obs: Cens, group_idx: Selector,",
      "27": "def _log_prob_with_subsetting(self, obs: Union[str, T], group_idx: Selector,",
      "28": "def _log_prob_with_subsetting(self, obs: Utils.Union[Tensor], group_idx: Selector,",
      "29": "def _log_prob_with_subsetting( self, obs: Union[Tensor], group_idx: Selector,",
      "30": "def _log_prob_with_subsetting(self, obs: Union[Tensor, List[Cens], group_idx: Selector,",
      "31": "def _log_prob_with_subsetting(self, obs: Union[[Union[Tensor], Cens], group_idx: Selector,",
      "32": "def _log_prob_with_subsetting(self, obs: Context.Union[Tensor], group_idx: Selector,",
      "33": "def _log_prob_with_subsetting(self, obs: Union[Group[Tensor], Cens]], group_idx: Selector,",
      "34": "def _log_prob_with_subsetting(self, obs: union[Censor], group_idx: Selector,",
      "35": "def _log_prob_with_subsetting(self, obs: Union[Tensor, List.Cens], group_idx: Selector,",
      "36": "def _log_prob_with_subsetting(self, obs: Types.Union[Tensor], group_idx: Selector,",
      "37": "def _log_prob_with_subsetting(self, obs: str, group_idx: Selector,",
      "38": "def _log_prob_with_subsetting(self, obs: Union[Selector], group_idx: Selector,",
      "39": "def _log_prob_with_subsetting(self, obs: Union[Group, Tensor], group_idx: Selector,",
      "40": "def _log_prob_with_subsetting(self, obs: Union[str, T]], group_idx: Selector,",
      "41": "def _log_prob_with_subsetting(self, obs: union[Tensor], group_idx: Selector,",
      "42": "def _log_prob_with_subsetting(self, obs: T.Union[Censor], group_idx: Selector,",
      "43": "def _log_prob_with_subsetting(self, obs: List[Union[Tensor, List], group_idx: Selector,",
      "44": "def _log_prob_with_subsetting(self, obs: Union[Group[Tensor, Cens]], group_idx: Selector,",
      "45": "def _log_prob_with_subsetting(self, obs: Union[Selector, Tensor], group_idx: Selector,",
      "46": "def _log_prob_with_subsetting(self, obs: Options.Union[Tensor], group_idx: Selector,",
      "47": "def _log_prob_with_subsetting(self, obs: Union[str, Str], group_idx: Selector,",
      "48": "def _log_prob_with_subsetting(self, obs: Union[Object, Tensor], group_idx: Selector,",
      "49": "def _log_prob_with_subsetting(self, obs: T.Union[Tensor], group_idx: Selector,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )\n",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_line": "        ('product', unicode),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mozilla-services/socorro",
    "source_filename": "webapp-django/crashstats/crashstats/models.py",
    "target_filename": "webapp-django/crashstats/crashstats/models.py",
    "source_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084^",
    "target_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "predictions": [
      "required_params = ( ('product', exports.unicode), ('version', exports.unicode), )"
    ],
    "correct": false,
    "top_five": {
      "0": "required_params = ( ('product', exports.unicode), ('version', exports.unicode), )",
      "1": "required_params = ( ('product', lib, ('version', lib), )",
      "2": "required_params = ( ('product', lib_unicode), ('version', lib_unicode), )",
      "3": "required_params = ( ('product', utils.unicode), ('version', utils.unicode), )",
      "4": "required_params = ( ('product', unicode), ('version', unicode), )",
      "5": "required_params = ( ('product', type, ('version', type), )",
      "6": "required_params = ( ('product', tuple.unicode), ('version', tuple.unicode), )",
      "7": "required_params = ( ('product', tuple, ('version', tuple), )",
      "8": "required_params = ( ('product', db_unicode), ('version', db_unicode), )",
      "9": "required_params = ( ('product', _unicode), ('version', _unicode), )",
      "10": "required_params = ( ('product', exports.Unicode), ('version', exports.Unicode), )",
      "11": "required_params = ( ('product', standard_unicode), ('version', standard_unicode), )",
      "12": "required_params = ( ('product', db.unicode), ('version', db.unicode), )",
      "13": "required_params = ( ('product', cb, ('version', cb), )",
      "14": "required_params = ( ('product', ctx.unicode), ('version', ctx.unicode), )",
      "15": "required_params = ( ('product', env_unicode), ('version', env_unicode), )",
      "16": "required_params = ( ('product', def, ('version', def, ), )",
      "17": "required_params = ( ('product', db.Unicode), ('version', db.Unicode), )",
      "18": "required_params = ( ('product', _, ('version', _), )",
      "19": "required_params = ( ('product', val), ('version', val), )",
      "20": "required_params = ( ('product', self.unicode), ('version', self.unicode), )",
      "21": "required_params = ( ('product', utils.Unicode), ('version', utils.Unicode), )",
      "22": "required_params = ( ('product', env.Unicode), ('version', env.Unicode), )",
      "23": "required_params = ( ('product', elm, ('version', elm), )",
      "24": "required_params = ( ('product', tuple_unicode), ('version', tuple_unicode), )",
      "25": "required_params = ( ('product', sys.unicode), ('version', sys.unicode), )",
      "26": "required_params = ( ('product', tuple.Unicode), ('version', tuple.Unicode), )",
      "27": "required_params = ( ('product', lib, ('version', lib, ), )",
      "28": "required_params = ( ('product', gtc.Unicode), ('version', gtc.Unicode), )",
      "29": "required_params = ( ('product', len, ('version', len), )",
      "30": "required_params = ( ('product', env, ('version', env), )",
      "31": "required_params = ( ('product', cls.type, ('version', cls.type), )",
      "32": "required_params = ( ('product', el, ('version', el, ), )",
      "33": "required_params = ( ('product', str, ('version', str), )",
      "34": "required_params = ( ('product', product, ('version', product), )",
      "35": "required_params = ( ('product', del, ('version', del), )",
      "36": "required_params = ( ('product', u, ('version', u), )",
      "37": "required_params = ( ('product', lib, ('version', lib, ) )",
      "38": "required_params = ( ('product', gtui, ('version', gtui), )",
      "39": "required_params = ( ('product', ws, ('version', ws), )",
      "40": "required_params = ( ('product', exports, ('version', exports), )",
      "41": "required_params = ( ('product', int), ('version', int), )",
      "42": "required_params = ( ('product', standard), ('version', standard), )",
      "43": "required_params = ( ('product', cb, ('version', cb, ), )",
      "44": "required_params = ( ('product', cb, ('version', cb, ) )",
      "45": "required_params = ( ('product', len, ('version', len, ), )",
      "46": "required_params = ( ('product', unicode), ('version', unicode) )",
      "47": "required_params = ( ('product', env) ), ('version', env), )",
      "48": "required_params = ( ('product', u, ('version', u, u), )",
      "49": "required_params = ( ('product', type, ('version', type,'version'), )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)\n\n",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_line": "        return StarType(type, line)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `line` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/parsetype.py",
    "target_filename": "mypy/parsetype.py",
    "source_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7^",
    "target_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "predictions": [
      "type = self.parse_type() return StarType(type, str)"
    ],
    "correct": false,
    "top_five": {
      "0": "type = self.parse_type() return StarType(type, str)",
      "1": "type = self.parse_type() return startype(type, str)",
      "2": "type = self.parse_type() return StarType(type, type[0], line[1])",
      "3": "type = self.parse_type() return self.type(type, 'line')",
      "4": "type = self.parse_type() return self.type(type, str)",
      "5": "type = self.parse_type() return StarType(type, 'line')",
      "6": "type = self.parse_type() return StarType(type, type.length)",
      "7": "type = self.parse_type() return StarType(type[0], type[1])",
      "8": "type = self.parse_type() return StarType(type, type.string(line))",
      "9": "type = self.parse_type() return StarType(type[0], type[1], line[2])",
      "10": "type = self.parse_type() return StarType(type, isinstance(line))",
      "11": "type = self.parse_type() return StarType(type, str(line))",
      "12": "type = self.parse_type() return StarType(type)",
      "13": "type = self.parse_type() return self.type(type, line)",
      "14": "type = self.parse_type() return StarType(type, type[line])",
      "15": "type = self.parse_type() return StarType(type, type[0], line)",
      "16": "type = self.parse_type() return startype(type[0], line[1])",
      "17": "type = self.parse_type() return StarType(type, name, type)",
      "18": "type = self.parse_type() return StarType(type, method)",
      "19": "type = self.parse_type() return StarType(type, type.int(line))",
      "20": "type = self.parse_type() return StarType(type, type[0], line[1], line[2])",
      "21": "type = self.parse_type() return StarType(type, type[str])",
      "22": "type = self.parse_type() return StarType(type, [])",
      "23": "type = self.parse_type() return StarType(type, value)",
      "24": "type = self.parse_type() return StarType(type, type.str(line))",
      "25": "type = self.parse_type() return StarType(type, type.length - 1)",
      "26": "type = self.parse_type() return StarType(type, type)",
      "27": "type = self.parse_type() return str(type, line)",
      "28": "type = self.parse_type() return StarType(type, type.line)",
      "29": "type = self.parse_type() return startype(type, 'line')",
      "30": "type = self.parse_type() return self.type(type, name, line)",
      "31": "type = self.parse_type() return StarType(type, type.value)",
      "32": "type = self.parse_type() return self.get_type(type, line)",
      "33": "type = self.parse_type() return self.type(type, type)",
      "34": "type = self.parse_type() return self.type.resolve(type, line)",
      "35": "type = self.parse_type() return StarType(type, type.slice(line))",
      "36": "type = self.parse_type() return StarType(type, options.line)",
      "37": "type = self.parse_type() return star.type(type, str)",
      "38": "type = self.parse_type() return StarType(type, type.shape(line))",
      "39": "type = self.parse_type() return self.type(type, self.line)",
      "40": "type = self.parse_type() return startype(type)",
      "41": "type = self.parse_type() return StarType(type, sortable.line)",
      "42": "type = self.parse_type() return StarType(type.type, str(line))",
      "43": "type = self.parse_type() return StarType(type, null, line)",
      "44": "type = self.parse_type() return StarType(type, type.label)",
      "45": "type = self.parse_type() return StarType(type, type.type)",
      "46": "type = self.parse_type() return StarType(type, self.type.line)",
      "47": "type = self.parse_type() return StarType(type, type.position)",
      "48": "type = self.parse_type() return StarType(type, model)",
      "49": "type = self.parse_type() return StarType(type, type, str)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_line": "    F5_DEVICE_TYPE: {",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "networktocode/pyntc",
    "source_filename": "pyntc/devices/__init__.py",
    "target_filename": "pyntc/devices/__init__.py",
    "source_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9^",
    "target_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "predictions": [
      "}, F5_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,"
    ],
    "correct": false,
    "top_five": {
      "0": "}, F5_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "1": "}, DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "2": "}, F5_DEVICE_TYPE: [] DEVICE_CLASS_KEY: F5Device,",
      "3": "}, DIVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "4": "}, Dict[str, str]: { DEVICE_CLASS_KEY: F5Device,",
      "5": "}, DESCRIPTION_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "6": "}, F5_DEVICE_TYPE_KEY: { DEVICE_CLASS_KEY: F5Device,",
      "7": "}, Dict.F5_Dict.F5_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "8": "}, F4_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "9": "}, F5_DEVICE_TYPE: ( { DEVICE_CLASS_KEY: F5Device,",
      "10": "}, D3_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "11": "}, F5_DEVICE_TYPE: [ { DEVICE_CLASS_KEY: F5Device,",
      "12": "}, Dict[str, Dict[str, str]]: { DEVICE_CLASS_KEY: F5Device,",
      "13": "}, F5_DEVICE_TYPE_DEVICE: { DEVICE_CLASS_KEY: F5Device,",
      "14": "}, F5_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "15": "}, F5_DEVICE_TYPE_REQUEST: { DEVICE_CLASS_KEY: F5Device,",
      "16": "}, F5_DEVICE_TYPE_SELECTOR: { DEVICE_CLASS_KEY: F5Device,",
      "17": "}, Dict(F5_Dict(Dict(Dict(Dict(DEVICE_CLASS_KEY))): { DEVICE_CLASS_KEY: F5Device,",
      "18": "}, F6_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "19": "}, DAVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "20": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(DEVICE_CLASS_KEY))): { DEVICE_CLASS_KEY: F5Device,",
      "21": "}, Dict[str, Dict[str]]: { DEVICE_CLASS_KEY: F5Device,",
      "22": "}, F5_DEVICE_TYPES: { DEVICE_CLASS_KEY: F5Device,",
      "23": "}, Dict.TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "24": "}, F5_DEVICE_TYP: { DEVICE_CLASS_KEY: F5Device,",
      "25": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(Dict(DEVICE)))): { DEVICE_CLASS_KEY: F5Device,",
      "26": "}, F5_PUBLISHING_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "27": "}, F5_DEVICE_TYPE: } DEVICE_CLASS_KEY: F5Device,",
      "28": "}, F5_DEVICE_TYPE = { DEVICE_CLASS_KEY: F5Device,",
      "29": "}, F5_CONTAINER_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "30": "}, D4_DEVICE_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "31": "}, F5_DEVICE_TYPE: [], { DEVICE_CLASS_KEY: F5Device,",
      "32": "}, Dict(F5_Dict(Dict(Dict(Dict[str, str])], F5_Dict(F5_Dict(str, str))): { DEVICE_CLASS_KEY: F5Device,",
      "33": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(Dict(Dict(DEVICE)))): { DEVICE_CLASS_KEY: F5Device,",
      "34": "}, F5_DEVICE_TYPE: bool = { DEVICE_CLASS_KEY: F5Device,",
      "35": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(DEVICE)))): { DEVICE_CLASS_KEY: F5Device,",
      "36": "}, F5_VIDEO_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "37": "}, Dict(F5_Dict(Dict(Dict(Dict[str, str])], F5_Dict(F5_Dict(str, str)): { DEVICE_CLASS_KEY: F5Device,",
      "38": "}, F5_DEVICE_TYPE: \"\", { DEVICE_CLASS_KEY: F5Device,",
      "39": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(Dict(DEVICE_CLASS_KEY)))): { DEVICE_CLASS_KEY: F5Device,",
      "40": "}, F5_DEVICE_TYPE: \\ DEVICE_CLASS_KEY: F5Device,",
      "41": "}, F5_DEVICE_TYPE: \"\" DEVICE_CLASS_KEY: F5Device,",
      "42": "}, F5_PARTS_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "43": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(Dict(DEVICE_CLASS_KEY))) ): { DEVICE_CLASS_KEY: F5Device,",
      "44": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(Dict(Dict(Dict(DEVICE)))): { DEVICE_CLASS_KEY: F5Device,",
      "45": "}, F5_DEVICE_TYPE: ^ DEVICE_CLASS_KEY: F5Device,",
      "46": "}, F5_DEVICE_TYPE= { DEVICE_CLASS_KEY: F5Device,",
      "47": "}, F5_EVENT_TYPE: { DEVICE_CLASS_KEY: F5Device,",
      "48": "}, F5_DEVICE_TYPE_KEY: [F5Device, F5Dict, F5Dict, F5Dict, F5Dict, F5Dict]: { DEVICE_CLASS_KEY: F5Device,",
      "49": "}, Dict(F5_Dict(Dict(Dict(Dict(Dict(DEVICE)), F5_Dict(F5_CLASS_KEY)): { DEVICE_CLASS_KEY: F5Device,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DisnakeDev/disnake",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "__slots__ = BaseUser.__slots__ + ('__weakref__',)"
    ],
    "correct": true,
    "top_five": {
      "0": "__slots__ = BaseUser.__slots__ + ('__weakref__',)",
      "1": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "\"\"\" __slots__ = BaseUser.__slots__ + { ('__weakref__',)",
      "24": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def get_node_type(self) -> Optional[str]:\n        return 'IpAddress'\n",
    "target_code": "\n    def get_node_type(self) -> str:\n        return 'IpAddress'\n",
    "warning_line": "    def get_node_type(self) -> Optional[str]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `grapl_analyzerlib.nodes.ip_address_node.IpAddressView.get_node_type` overrides method defined in `DynamicNodeView` inconsistently. Returned type `typing.Optional[str]` is not a subtype of the overridden return `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 125,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "grapl-security/grapl",
    "source_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "target_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "source_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551^",
    "target_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551",
    "predictions": [
      "def get_node_type(self) -> str: return 'IpAddress'"
    ],
    "correct": true,
    "top_five": {
      "0": "def get_node_type(self) -> str: return 'IpAddress'",
      "1": "def get_node_type(self, ip_address_node.IpAddress) -> str: return 'IpAddress'",
      "2": "def get_node_type(self, ip_address_node.IpAddressView) -> str: return 'IpAddress'",
      "3": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self) -> str: return 'IpAddress'",
      "4": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress) -> str: return 'IpAddress'",
      "5": "def get_node_type(self) -> ip_address: return 'IpAddress'",
      "6": "def get_node_type(self): return 'IpAddress'",
      "7": "def get_node_type(self, ip_address_node.IpAddress: ip_address = 'IpAddress' def get_node_type(self, ip_address_node.IpAddress) -> str: return 'IpAddress'",
      "8": "def get_node_type(self, ip_address_node.IpAddress): return 'IpAddress'",
      "9": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress): return 'IpAddress'",
      "10": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddressView) -> str: return 'IpAddress'",
      "11": "def get_node_type(self) -> str: return \"IpAddress\"",
      "12": "def get_node_type(self, ip_address_node.IpAddressView): return 'IpAddress'",
      "13": "def get_node_type(self) -> ip_address_node.IpAddressView: return 'IpAddress'",
      "14": "def get_node_type(self, ip_address_node.IpAddress: isinstance(str, 'IpAddress') -> Optional[str]: return 'IpAddress'",
      "15": "def get_node_type(self, ip_address_node.IpAddress: ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress) -> str: return 'IpAddress'",
      "16": "def get_node_type(self) -> isinstance(str, ip_address_node.IpAddressView): return 'IpAddress'",
      "17": "def get_node_type(self, ip_address_node.IpAddress: ip_address = 'IpAddress' def get_node_type(self) -> str: return 'IpAddress'",
      "18": "def get_node_type(self, ip_address_node.IpAddress: ip_address = 'IpAddress' def get_node_type(self, ip_address_node.IpAddress): return 'IpAddress'",
      "19": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress) -> Optional[str]: return 'IpAddress'",
      "20": "def get_node_type(self) -> Optional[str]: return 'IpAddress'",
      "21": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddressView): return 'IpAddress'",
      "22": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress) -> ip_address: return 'IpAddress'",
      "23": "def get_node_type(self, ip_address_node.IpAddress: ipAddress) -> str: return 'IpAddress'",
      "24": "def get_node_type(self, 'IpAddress') -> str: return 'IpAddress'",
      "25": "def get_node_type(self, ip_address_node.IpAddress: ip_address = 'IpAddress' def get_node_type(self, ip_address_node.IpAddress) -> Optional[str]: return 'IpAddress'",
      "26": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self) -> ip_address: return 'IpAddress'",
      "27": "def get_node_type(self) -> 'IpAddress': return 'IpAddress'",
      "28": "def get_node_type(self, ip_address_node.IpAddress: ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self) -> str: return 'IpAddress'",
      "29": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address -> Optional[str]: return 'IpAddress'",
      "30": "def get_node_type(self, ip_address_node.IpAddress: ip_address = 'IpAddress' def get_node_type(self, ip_address_node.IpAddress) -> ip_address: return 'IpAddress'",
      "31": "def get_node_type(self, 'IpAddress') -> Optional[str]: return 'IpAddress'",
      "32": "def get_node_type(self, ip_address_node.IpAddress: ip_address = 'IpAddress' def get_node_type(self) -> ip_address_node.IpAddress: return 'IpAddress'",
      "33": "def get_node_type(self, ip_address_node.IpAddress: ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress): return 'IpAddress'",
      "34": "def get_node_type(self, ip_address_node.IpAddress) -> Optional[str]: return 'IpAddress'",
      "35": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddressView) -> Optional[str]: return 'IpAddress'",
      "36": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddressView) -> ip_address: return 'IpAddress'",
      "37": "def get_node_type(self) -> ip_address_node.IpAddress: return 'IpAddress'",
      "38": "def get_node_type(self) -> List[str]: return 'IpAddress'",
      "39": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddressView.get_node_type) -> str: return 'IpAddress'",
      "40": "def get_node_type(self, ip_address_node.IpAddress: isinstance(str, ipAddress) -> Optional[str]: return 'IpAddress'",
      "41": "def get_node_type(self, ip_address_node.IpAddress) -> ip_address: return 'IpAddress'",
      "42": "def get_node_type(self, ip_address_node.IpAddressView) -> Optional[str]: return 'IpAddress'",
      "43": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self) -> ip_address_node.IpAddress: return 'IpAddress'",
      "44": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress) -> IpAddress: return 'IpAddress'",
      "45": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self) -> Optional[str]: return 'IpAddress'",
      "46": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address, 'IpAddress') -> str: return 'IpAddress'",
      "47": "def get_node_type(self, ip_address_node.IpAddressView) -> ip_address: return 'IpAddress'",
      "48": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddressView.get_node_type): return 'IpAddress'",
      "49": "def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address def get_node_type(self, ip_address_node.IpAddress: ip_address = ip_address) -> str: return 'IpAddress'"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n\n",
    "target_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        return None\n\n",
    "warning_line": "    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 105,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ciphey/Ciphey",
    "source_filename": "ciphey/basemods/Crackers/hash.py",
    "target_filename": "ciphey/basemods/Crackers/hash.py",
    "source_changeid": "5544e945c591d063a2541fd40991c1f81b729575^",
    "target_changeid": "5544e945c591d063a2541fd40991c1f81b729575",
    "predictions": [
      "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass()"
    ],
    "correct": false,
    "top_five": {
      "0": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass()",
      "1": "@staticmethod def getParams() -> ciphey.iface._modules.ParamSpec: return \"\"\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "2": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass(optional[Dict[str, Dict[str, Any]])",
      "3": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() -> Optional[Dict[str, Dict[str, Any]]]",
      "4": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "5": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "6": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"ConfigurableModule\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "7": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return true",
      "8": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return false",
      "9": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams()",
      "10": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass",
      "11": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
      "12": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return []",
      "13": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass \"\"\"",
      "14": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return False",
      "15": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() - Optional[Dict[str, Dict[str, Any]]]",
      "16": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return 0",
      "17": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.ConfigurableModule() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "18": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return []",
      "19": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"ConfigurableModule\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]\": return \"\"\"",
      "20": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams().def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "21": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.ConfigurableModule().reverse() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return true",
      "22": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return null",
      "23": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \"\"\"",
      "24": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.ConfigurableModule().def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "25": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: ciphey.basemods.Crackers.hash.HashBuster.getParams(): return \"\"\"",
      "26": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: assert isinstance(str, ciphey.iface._modules.ParamSpec) def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass",
      "27": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass(() => ciphey.basemods.Crackers.hash.HashBuster.getParams()) -> Optional[Dict[str, Dict[str, Any]]]:",
      "28": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.Optional[Dict[str, Dict[str, Any]]]",
      "29": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return True",
      "30": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass[str]",
      "31": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.ConfigurableModule() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return true",
      "32": "@staticmethod def getParams() -> ciphey.iface._modules.ParamSpec: return \"\"\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass()",
      "33": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() += \"\"\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "34": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"ConfigurableModule\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
      "35": "@staticmethod def getParams() -> ciphey.iface._modules.ParamSpec: return \"\"\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \"\"\"",
      "36": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: assert isinstance(str, ciphey.iface._modules.ParamSpec) def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return false",
      "37": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams().def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return true",
      "38": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: break",
      "39": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return None",
      "40": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass(() => ciphey.iface._modules.ParamSpec) -> Optional[Dict[str, Dict[str, Any]]]:",
      "41": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.ConfigurableModule().reverse() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "42": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: pass(optional[Dict[str, Dict[str, Any]]):",
      "43": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParamSpec()",
      "44": "@staticmethod def getParams() -> ciphey.iface._modules.ParamSpec: return \"\"\" def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams()",
      "45": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.iface._modules.ConfigurableModule() def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
      "46": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return cb()",
      "47": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: assert isinstance(str, ciphey.iface._modules.ParamSpec) def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\"\"",
      "48": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return undefined",
      "49": "@staticmethod def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return ciphey.basemods.Crackers.hash.HashBuster.getParams() def getParams() -> Optional[Dict[str, Dict[str, Any]]]: return \"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nextcord/nextcord",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "__slots__ = BaseUser.__slots__ + ('__weakref__',)"
    ],
    "correct": true,
    "top_five": {
      "0": "__slots__ = BaseUser.__slots__ + ('__weakref__',)",
      "1": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "\"\"\" __slots__ = BaseUser.__slots__ + { ('__weakref__',)",
      "24": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "\"\"\" __slots__ = BaseUser.__slots__ + { '__weakref__', # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock}\n",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_line": "    subscription_msg_types = {commands.NewBlock}",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 6,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/trinity",
    "source_filename": "trinity/protocol/eth/monitors.py",
    "target_filename": "trinity/protocol/eth/monitors.py",
    "source_changeid": "ad61361109f7df88eb807a543191d491e76eed0c^",
    "target_changeid": "ad61361109f7df88eb807a543191d491e76eed0c",
    "predictions": [
      "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set( { commands.NewBlock } )"
    ],
    "correct": false,
    "top_five": {
      "0": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set( { commands.NewBlock } )",
      "1": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock }",
      "2": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set()",
      "3": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.Set }",
      "4": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = Set( { commands.NewBlock } )",
      "5": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = ( { commands.NewBlock } )",
      "6": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set().NewBlock",
      "7": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = setup( { commands.NewBlock } )",
      "8": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = ( { commands.NewBlock } ) -> Set:",
      "9": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]",
      "10": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = } commands.NewBlock }",
      "11": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types_ = { commands.NewBlock }",
      "12": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set().Block( { commands.NewBlock } )",
      "13": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = sets( { commands.NewBlock } )",
      "14": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = p2p.peer.PeerSubscriber.Set( { commands.NewBlock } )",
      "15": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set().Set( { commands.NewBlock } )",
      "16": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = []",
      "17": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = [] subscription_msg_types.set = { commands.NewBlock }",
      "18": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types_ = set( { commands.NewBlock } )",
      "19": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set().NewBlock }",
      "20": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set( { commands.NewBlock } ) -> Set:",
      "21": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types: set = { commands.NewBlock }",
      "22": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types.set = { commands.NewBlock }",
      "23": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = \\ commands.NewBlock }",
      "24": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types.NewBlock = { commands.NewBlock }",
      "25": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set() set( { commands.NewBlock } )",
      "26": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = } commands.Set }",
      "27": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types is not None subscription_msg_types = { commands.NewBlock }",
      "28": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set(); subscription_msg_types.set = { commands.NewBlock }",
      "29": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set ( { commands.NewBlock } )",
      "30": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.NewBlock },",
      "31": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set() + ( { commands.NewBlock } )",
      "32": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set(), commands.NewBlock; }",
      "33": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types_ = [] subscription_msg_types.set = { commands.NewBlock }",
      "34": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = \\ commands.Set }",
      "35": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = ( { commands.NewBlock } ) -> set:",
      "36": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = list( { commands.NewBlock } )",
      "37": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types= { commands.Set }",
      "38": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types.Set = { commands.Set }",
      "39": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = p2p.peer.PeerSubscriber.set( { commands.NewBlock } )",
      "40": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set().NewBlock()",
      "41": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = [] msg_types.set = { commands.NewBlock }",
      "42": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set() + \"\" + commands.NewBlock }",
      "43": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set() or { commands.NewBlock }",
      "44": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = [] subscription_msg_types.push( { commands.NewBlock } )",
      "45": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = sets().NewBlock }",
      "46": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types: Set = { commands.NewBlock }",
      "47": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = { commands.Block }",
      "48": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set(); subscriptions.NewBlock = { commands.NewBlock }",
      "49": "class ETHChainTipMonitor(BaseChainTipMonitor): subscription_msg_types = set(), commands.NewBlock = { }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
    "target_code": "\n    def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        if not self.parallel:\n",
    "warning_line": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allenact",
    "source_filename": "rl_habitat/habitat_preprocessors.py",
    "target_filename": "rl_habitat/habitat_preprocessors.py",
    "source_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c^",
    "target_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "predictions": [
      "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:"
    ],
    "correct": false,
    "top_five": {
      "0": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "1": "def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]: if not self.parallel:",
      "2": "def to(self, device: torch.device) -> ResnetPreProcessorThor: if not self.parallel:",
      "3": "def to(self, device: torch.device) -> 'ResnetPreProcessorThor': if not self.parallel:",
      "4": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\": if not self.parallel:",
      "5": "def to(self, device: rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "6": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\"): if not self.parallel:",
      "7": "def to(self, device: rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to) -> ResnetPreProcessorThor: if not self.parallel:",
      "8": "def to(self, device: torch.device) -> str = \"ResnetPreProcessorThor\": if not self.parallel:",
      "9": "def to(self, device: torch.device) -> Optional[\"ResnetPreProcessorThor\"]: if not self.parallel:",
      "10": "def to(self, device: torch.device) -> List[\"ResnetPreProcessorThor\"]: if not self.parallel:",
      "11": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\"): if not self.parallel:",
      "12": "def to(self, device_name: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "13": "def to(self, device: torch.device) -> (\"ResnetPreProcessorThor\": if not self.parallel:",
      "14": "def to(self, device: device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "15": "def to(self, device: torch.device) -> List(ResnetPreProcessorThor): if not self.parallel:",
      "16": "def to(self, device: torch.device) -> Setup[\"ResnetPreProcessorThor\"]: if not self.parallel:",
      "17": "def to(self, device: torch.device) -> (ResnetPreProcessorThor): if not self.parallel:",
      "18": "def to(self, device: torch.device) -> \"resnetPreProcessorThor\": if not self.parallel:",
      "19": "def to(self, device: torch.device) -> list(\"ResnetPreProcessorThor\": if not self.parallel:",
      "20": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\") if not self.parallel:",
      "21": "def to(self, device: torch.device, \"ResnetPreProcessorThor\": if not self.parallel:",
      "22": "def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\", \"ResnetPreProcessorHabitat\"]: if not self.parallel:",
      "23": "def to(self, device: torch.device)-> \"ResnetPreProcessorThor\": if not self.parallel:",
      "24": "def to(self, devicename: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "25": "def to(self, device: torch.device) -> [resnetPreProcessorThor]: if not self.parallel:",
      "26": "def to(self, device: torch.device) -> [ResnetPreProcessorThor]: if not self.parallel:",
      "27": "def to(self, device: torch.device) -> List(ResnetPreProcessorThor\": if not self.parallel:",
      "28": "def to(self, device: torch.device) -> resnetPreProcessorThor: if not self.parallel:",
      "29": "def to(self, device: torch.device) -> Setup.ResnetPreProcessorThor: if not self.parallel:",
      "30": "def to(self, device: self.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "31": "def to(self, device: Torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "32": "def to(self, device: torch.device) -> return \"ResnetPreProcessorThor\": if not self.parallel:",
      "33": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\"); if not self.parallel:",
      "34": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\"\": if not self.parallel:",
      "35": "def to( self, device: torch.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "36": "def to(self, device: rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to) -> ResnetPreProcessorThor: if not self.parallel:",
      "37": "def to(self, device: torch.device ) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "38": "def to(self, device: torch.device) -> # ResnetPreProcessorThor: if not self.parallel:",
      "39": "def to(self, device: torch.device) -> str(\"ResnetPreProcessorThor\"]: if not self.parallel:",
      "40": "def to(self, device: str.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "41": "def to(self, device: torch.device) -> (\"ResnetPreProcessorThor\": if not self.parallel:",
      "42": "def to(self, device: torch.device) -> self.resnetPreProcessorThor: if not self.parallel:",
      "43": "def to(self, device: path.device) -> \"ResnetPreProcessorThor\": if not self.parallel:",
      "44": "def to(self, device: torch.device) -> Unknown(ResnetPreProcessorThor): if not self.parallel:",
      "45": "def to(self, device: rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to) -> resnetPreProcessorThor: if not self.parallel:",
      "46": "def to(self, device: torch.device) -> System.ResnetPreProcessorThor: if not self.parallel:",
      "47": "def to(self, device: torch.device) -> reset(ResnetPreProcessorThor): if not self.parallel:",
      "48": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\" if not self.parallel:",
      "49": "def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\", \"resnet\"]: if not self.parallel:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: str = None,\n    ):\n",
    "target_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):\n",
    "warning_line": "        method_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " method_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 605,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):"
    ],
    "correct": true,
    "top_five": {
      "0": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "1": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ) -> None:",
      "2": "capture_error: Optional[Union[bool, str]]: Optional[str] = None, method_name: Optional[str] = None, ):",
      "3": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ), ):",
      "4": "captured_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "5": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[Str] = None, ):",
      "6": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, method_name: Optional[str] = None, ):",
      "7": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None ):",
      "8": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): Optional[str] = None,",
      "9": "capture_error: Optional[Union[bool, str]] = None, method_names: Optional[str] = None, ):",
      "10": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): Optional[str] = None",
      "11": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None,",
      "12": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, decode: Optional[bool] = None, ):",
      "13": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, isinstance(str): Optional[str] = None, ):",
      "14": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, decode_method_name: Optional[str] = None, ):",
      "15": "capture_error: Optional[Union[bool, str]] = None, method_name: Union[str] = None, ):",
      "16": "capture_error: Optional[Union[bool, str]] = None, method_name = Optional[str] = None, ):",
      "17": "capture_error: Optional[Union[bool, str]] = None, method_name: optional[str] = None, ):",
      "18": "capture_error: Optional[Union[bool, str]] = None, method_name: Union[str, None] = None, ):",
      "19": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ) -> None",
      "20": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, isinstance(str): Optional[bool] = None, ):",
      "21": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): method_name: Optional[str] = None,",
      "22": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): method_name = Optional[str]",
      "23": "capture_error, str: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "24": "capture_error -> None: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "25": "capture_error: Optional[Union[bool, str]] is None, method_name: Optional[str] = None, ):",
      "26": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None,, ):",
      "27": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): Optional[bool] = None,",
      "28": "capture_error: Optional[Union[bool, str]] = None, method_name: str, ):",
      "29": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "30": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, decode: Optional[str] = None, ):",
      "31": "capture_error: Optional[Union[bool, str]] = All, method_name: Optional[str] = None, ):",
      "32": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, isinstance(str, None): ):",
      "33": "capture_error: Optional[Union[bool, str]]: None, method_name: Optional[str] = None, ):",
      "34": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ) -> bool:",
      "35": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, isinstance(str), ):",
      "36": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ) -> Optional[str]:",
      "37": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): method_name is not None",
      "38": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, isinstance(str): Optional[Str] = None, ):",
      "39": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): method_name is not None,",
      "40": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ():",
      "41": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, [] ):",
      "42": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None ), ):",
      "43": "capture_error: Optional[ Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "44": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None,, ):",
      "45": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ):",
      "46": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): \"\"\"",
      "47": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \"\" ):",
      "48": "capture_error: Optional[Union[bool, str]] | None = None, method_name: Optional[str] = None, ):",
      "49": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, ): Optional[bool] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        usertags: list = [],\n        configure_timeout: str = 10,\n    ) -> dict:\n",
    "target_code": "        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:\n",
    "warning_line": "        configure_timeout: str = 10,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " configure_timeout is declared to have type `str` but is used as type `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "adw0rd/instagrapi",
    "source_filename": "instagrapi/igtv.py",
    "target_filename": "instagrapi/igtv.py",
    "source_changeid": "0344324a593097604ea701186dc17afb977245f0^",
    "target_changeid": "0344324a593097604ea701186dc17afb977245f0",
    "predictions": [
      "usertags: list = [], configure_timeout: int = 10, ) -> dict:"
    ],
    "correct": true,
    "top_five": {
      "0": "usertags: list = [], configure_timeout: int = 10, ) -> dict:",
      "1": "usertags: list = [], configure_timeout: typing.Optional[str] = 10, ) -> dict:",
      "2": "usertags: list = [], configure_timeout: option[str] = 10, ) -> dict:",
      "3": "usertags: list = [], configure_timeout: Optional[str] = 10, ) -> dict:",
      "4": "usertags: list = [], configure_timeout: int = 10 ) -> dict:",
      "5": "usertags: list = [], configure_timeout: str = 10, ) -> dict:",
      "6": "usertags: list = [], configure_timeout: options.int = 10, ) -> dict:",
      "7": "usertags: list = [], configure_timeout: option.int = 10, ) -> dict:",
      "8": "usertags: list = [], configure_timeout: option[int] = 10, ) -> dict:",
      "9": "usertags: list = [], configure_timeout: async int = 10, ) -> dict:",
      "10": "usertags: list = [], configure_timeout: str = 10 ) -> dict:",
      "11": "usertags: list = [], configure_timeout: str = 10) -> dict:",
      "12": "usertags: list = [], configure_timeout: option_str = 10, ) -> dict:",
      "13": "usertags: list = [], configure_timeout: type[str] = 10, ) -> dict:",
      "14": "usertags: list = [], configure_timeout: typing.Optional[int] = 10, ) -> dict:",
      "15": "usertags: list = [], configure_timeout: isinstance(str) = 10, ) -> dict:",
      "16": "usertags: list = [], configure_timeout: choice[str] = 10, ) -> dict:",
      "17": "usertags: list = [], configure_timeout: int = 10) -> dict:",
      "18": "usertags: list = [], configure_timeout: type[int] = 10, ) -> dict:",
      "19": "usertags: list = [], configure_timeout: option = 10 ) -> dict:",
      "20": "usertags: list = [], configure_timeout: option = int, ) -> dict:",
      "21": "usertags: list = [], configure_timeout: type = 'int' ) -> dict:",
      "22": "usertags: list = [], configure_timeout: isinstance(str, 10) ) -> dict:",
      "23": "usertags: list = [], configure_timeout: option_type = \"int\", ) -> dict:",
      "24": "usertags: list = [], configure_timeout: options.str = 10, ) -> dict:",
      "25": "usertags: list = [], configure_timeout: option_int = 10, ) -> dict:",
      "26": "usertags: list = [], configure_timeouts: int = 10, ) -> dict:",
      "27": "usertags: list = [], configure_timeout: use_timeout = 10, ) -> dict:",
      "28": "usertags: list = [], configure_timeout: (int) = 10, ) -> dict:",
      "29": "usertags: list = [], configure_timeout: option_list = 10, ) -> dict:",
      "30": "usertags: list = [], configure_timeout: isinstance(str, 10, ) -> dict:",
      "31": "usertags: list = [], configure_timeout: Optional[int] = 10, ) -> dict:",
      "32": "usertags: list = [], configure_timeout: Int = 10, ) -> dict:",
      "33": "usertags: list = [], configure_timeout: option_type = \"int\" ) -> dict:",
      "34": "usertags: list = [], configure_timeout: option_type = \"\" ) -> dict:",
      "35": "usertags: list = [], configure_timeout: option = int ) -> dict:",
      "36": "usertags: list = [], configure_timeout: option = 10, ) -> dict:",
      "37": "usertags: list = [], configure_timeout: using int = 10, ) -> dict:",
      "38": "usertags: list = [], configure_timeout, int = 10, ) -> dict:",
      "39": "usertags: list = [], configure_timeout:int = 10, ) -> dict:",
      "40": "usertags: list = [], configure_timeout: option = 10 = 10, ) -> dict:",
      "41": "usertags: list = [], configure_timeout: int = 0, ) -> dict:",
      "42": "usertags: list = [] configure_timeout: int = 10, ) -> dict:",
      "43": "usertags: list = [], configure_timeout: type = \"\" ) -> dict:",
      "44": "usertags: list = [], configure_timeout: type = int, ) -> dict:",
      "45": "usertags: list = [], configure_timeout_: int = 10, ) -> dict:",
      "46": "usertags: list = [], configure_timeout: bytes = 10, ) -> dict:",
      "47": "usertags: list = [], configure_timeout: type = int ) -> dict:",
      "48": "usertags: list = [], configure_timeout: list = 10, ) -> dict:",
      "49": "usertags: list = [], configure_timeout: typing.Optional[str] = 10, ), -> dict:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = None,\n    ) -> None:\n",
    "target_code": "        should_archive: bool = True,\n        extra_data: Optional[Dict] = None,\n        dispatch_to: Optional[List[str]] = None,\n    ) -> None:\n",
    "warning_line": "        dispatch_to: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dispatch_to is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 30,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PUNCH-Cyber/stoq",
    "source_filename": "stoq/data_classes.py",
    "target_filename": "stoq/data_classes.py",
    "source_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c^",
    "target_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c",
    "predictions": [
      "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:"
    ],
    "correct": true,
    "top_five": {
      "0": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "1": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ), ) -> None:",
      "2": "should_archive: bool = True, extra_data: Optional[Dict, List[str]] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "3": "should_archive: bool = True, extra_data = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "4": "should_archive: bool = True, additional_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "5": "should_archive: bool = True, extra_data: Optional[Dict], dispatch_to: Optional[List[str]] = None, ) -> None:",
      "6": "should_archive: bool = True, added_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "7": "should_archive: bool = True, extra_data: Dict, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "8": "should_archive: bool = True, extra_data: Optional[dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "9": "should_archive: Optional[bool] = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "10": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[Label[str]] = None, ) -> None:",
      "11": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None,...) -> None:",
      "12": "should_archive: List[bool] = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "13": "should_archive: (bool = True), extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "14": "should_archive: bool = True, extra_data = Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "15": "should_archive: bool = True, extra_datas: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "16": "should_archive: bool = True, extra_data: Optional[Dict[str]] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "17": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str], None] = None, ) -> None:",
      "18": "should_archive: bool = True, extra_data=Dict, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "19": "should_archive: bool = True, extra_data_: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "20": "should_archive: bool = True, extra_data(): Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "21": "should_archive: [ bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "22": "should_archive: bool = True, extra_data: Optional[Dict|None] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "23": "should_archive: bool = True, extra_data, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "24": "should_archive: bool = True, extra_data_type: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "25": "should_archive: bool = False, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "26": "should_archive: bool = True, extra_data: List[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "27": "should_archive: bool = True, ex_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "28": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \"\" ) -> None:",
      "29": "should_archive: bool = True, extra_data: Optional[Dict ] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "30": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ):",
      "31": "should_archive: bool = True, extra_data: Optional[Dict, None] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "32": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, () -> None:",
      "33": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None: \"\"\"",
      "34": "shouldn_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "35": "should_archive: str = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "36": "should_archive: bool = True, extra_data: Dict, dispatch_to: List[str] = [], ) -> None:",
      "37": "should_archive: return bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "38": "should_archive: bool = True, extra_data: List[Dict] = None, dispatch_to: List[str] = [], ) -> None:",
      "39": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Options[List[str]] = None, ) -> None:",
      "40": "should_archive: bool = True, extra_data: Dict = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "41": "should_archive: bool = True, add_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "42": "should_archive: bool = True, extra_data: Optional[Dect] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "43": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[list[str]] = None, ) -> None:",
      "44": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None,, ) -> None:",
      "45": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \"\"\" ) -> None:",
      "46": "should_archive: bool = True, extra_data: List[str] = None, dispatch_to: Optional[List[str]] = None, ) -> None:",
      "47": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None,, ) -> None:",
      "48": "should_archive: bool = True, extra_data: Dict = [], dispatch_to: Optional[List[str]] = None, ) -> None:",
      "49": "should_archive: bool = True, extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, ( ) -> None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n    \"\"\"Initiates Flask web service with Alexa skill.\n\n",
    "target_code": "                     https: bool = False,\n                     ssl_key: Optional[str] = None,\n                     ssl_cert: Optional[str] = None) -> None:\n    \"\"\"Initiates FastAPI web service with Alexa skill.\n\n",
    "warning_line": "                     ssl_cert: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " ssl_cert is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 89,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/utils/alexa/server.py",
    "target_filename": "deeppavlov/utils/alexa/server.py",
    "source_changeid": "0f32759c67ea961737a6538fd37426f564bae925^",
    "target_changeid": "0f32759c67ea961737a6538fd37426f564bae925",
    "predictions": [
      "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Flask web service with Alexa skill."
    ],
    "correct": false,
    "top_five": {
      "0": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Flask web service with Alexa skill.",
      "1": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates web service with Alexa skill.",
      "2": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates WebService with Alexa skill.",
      "3": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the web service with Alexa skill.",
      "4": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates a web service with Alexa skill.",
      "5": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Web service with Alexa skill.",
      "6": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Flsk web service with Alexa skill.",
      "7": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Web Service with Alexa skill.",
      "8": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Alexa web service with Alexa skill.",
      "9": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Favourite web service with Alexa skill.",
      "10": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Google Chrome web service with Alexa skill.",
      "11": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates this web service with Alexa skill.",
      "12": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Google Maps web service with Alexa skill.",
      "13": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Webservice with Alexa skill.",
      "14": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates new web service with Alexa skill.",
      "15": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates website service with Alexa skill.",
      "16": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates browser service with Alexa skill.",
      "17": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates flask web service with Alexa skill.",
      "18": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates FLASH web service with Alexa skill.",
      "19": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates WordPress web service with Alexa skill.",
      "20": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates online service with Alexa skill.",
      "21": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Web service with Alexa skill.",
      "22": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Firefox web service with Alexa skill.",
      "23": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Alexa web service with the Alexa skill.",
      "24": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates an Alexa web service with an Alexa skill.",
      "25": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Flask web service with Alexa skill.",
      "26": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Alexa web service with Alexa skill.",
      "27": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Facebook web service with Alexa skill.",
      "28": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Internet service with Alexa skill.",
      "29": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Slack web service with Alexa skill.",
      "30": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates PayPal web service with Alexa skill.",
      "31": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Android web service with Alexa skill.",
      "32": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the WebService with Alexa skill.",
      "33": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates our web service with Alexa skill.",
      "34": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Utils web service with Alexa skill.",
      "35": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates AWS web service with Alexa skill.",
      "36": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates HTML web service with Alexa skill.",
      "37": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Alexa web service with a skill.",
      "38": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the website service with Alexa skill.",
      "39": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates bool service with Alexa skill.",
      "40": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates a Web service with Alexa skill.",
      "41": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Flask web service with Alexa skill. \"\"\"",
      "42": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Web Service with Alexa skill.",
      "43": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates db web service with Alexa skill.",
      "44": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates Google API with Alexa skill.",
      "45": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates fn service with Alexa skill.",
      "46": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates fython web service with Alexa skill.",
      "47": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates fstool service with Alexa skill.",
      "48": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates fad with Alexa skill.",
      "49": "https: bool = False, ssl_key: Optional[str] = None, ssl_cert: Optional[str] = None) -> None: \"\"\"Initiates the Alexa web service with ssl_key\"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def message(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 332,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "1": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "2": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)=",
      "3": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "4": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target,",
      "5": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice",
      "6": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.",
      "7": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=self._add_line(utils.irc.protocol.notice(target,",
      "8": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)):",
      "9": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) self._add_line(utils.irc.protocol.notice(target,",
      "10": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.",
      "11": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.notice(target,",
      "12": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.protocol.notice(target, message, tags))",
      "13": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=[]): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.",
      "14": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \\ } ): self._add_line(utils.irc.protocol.notice(target,",
      "15": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= } } ): self._add_line(utils.irc.protocol.notice(target,",
      "16": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= } } ): self._add_line(utils.irc.protocol.",
      "17": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \\ } ): self._add_line(utils.irc.protocol.",
      "18": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags",
      "19": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=self._add_line(utils.irc.protocol.",
      "20": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)]=",
      "21": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = []): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = self._add_line(utils.irc.protocol.notice(target,",
      "22": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.",
      "23": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \\ } ): self._add_line(utils.irc.protocol.notice",
      "24": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= } } ): self._add_line(utils.irc.protocol.notice",
      "25": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) self._add_line(utils.irc.protocol.notice",
      "26": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "27": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "28": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.Not",
      "29": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol",
      "30": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = self._add_line(utils.irc.protocol.notice(target,",
      "31": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str] = { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "32": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=[]): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=self._add_line(utils.irc.protocol.notice(target,",
      "33": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.protocol.notice(target, message, tags)",
      "34": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= ^ } ): self._add_line(utils.irc.protocol.notice(target,",
      "35": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "36": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= ^ } ): self._add_line(utils.irc.protocol.",
      "37": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.notice",
      "38": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "39": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "40": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.",
      "41": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.Notice(target, message, tags))",
      "42": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=[]): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.notice(target,",
      "43": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.protocol.message(target, message, tags): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str]= { } ): self._add_line(utils.irc.protocol.",
      "44": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "45": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) self._add_line(utils.irc.protocol.",
      "46": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "47": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.note(target, message, tags))",
      "48": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "49": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.notice(target,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
    "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
    "warning_line": "        labels: typing.Iterable[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 476,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):"
    ],
    "correct": true,
    "top_five": {
      "0": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "1": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, ):",
      "2": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ) -> None:",
      "3": "choices: typing.Iterable, labels: typing.Optional[ typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "4": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: str = None ):",
      "5": "options: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "6": "choices: typing.Iterable, labels: typing.Optional[str] = None, *, error: typing.Optional[str] = None ):",
      "7": "choices: typing.Iterable, label: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "8": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[str] = None ):",
      "9": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ) -> None",
      "10": "choice: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "11": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ), labels: typing.Optional[str] = None,",
      "12": "choices: typing.Iterable, labels: typing.Functional[typing.Iterable[str]] = None, *, error: typing.Functional[str] = None ):",
      "13": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str], *, error: typing.Optional[str] = None ):",
      "14": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: str = 0 ):",
      "15": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[typing.Optional[str]] = None ):",
      "16": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ) -> bool:",
      "17": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[typing.Optional[str]] = None, ):",
      "18": "choices: typing.Iterable, labels: typing.Iterable[str] = [], *, error: typing.Optional[str] = None ):",
      "19": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[typing.Iterable[str]] = None, ):",
      "20": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[str] = None, ):",
      "21": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[typing.Iterable[str]] = None ):",
      "22": "choices: typing.Iterable, labels: typing.Iterable[str] = (), *, error: typing.Optional[str] = None ):",
      "23": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ) -> Optional[str]:",
      "24": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ), labels: Optional[typing.Optional[str]] = None,",
      "25": "choices: typing.Iterable, labels: typing.Function[str] = None, *, error: typing.Function[str] = None ):",
      "26": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = False ):",
      "27": "choices: typing.Iterable, labels: typing.Equal[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "28": "choices: typing.Iterable, labels: typing.Optional[ typing.Iterable[str] ] = None, *, error: typing.Optional[str] = None ):",
      "29": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[typing.Optional[str]] = None ):",
      "30": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ), labels: typing.Optional[str] = None",
      "31": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None *, error: typing.Optional[str] = None ):",
      "32": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: Optional[typing.Optional[str]] = None ):",
      "33": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, ):",
      "34": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None,*, error: typing.Optional[str] = None ):",
      "35": "choices: typing.Iterable, labels: typing.Function[typing.Iterable[str]] = None, *, error: typing.Function[str] = None ):",
      "36": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = Nothing ):",
      "37": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, ) -> None:",
      "38": "choices: typing.Iterable, labels = typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "39": "choices: typing.Iterable, labels: typing.Executed[typing.Iterable[str]] = None, *, error: typing.Executed[str] = None ):",
      "40": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = 0 ):",
      "41": "choices: typing.Iterable, labels: typing.Optional[ typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):",
      "42": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, errors: typing.Optional[str] = None ):",
      "43": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, labels: typing.Optional[str] = None,",
      "44": "choices: typing.Iterable, labels: typing.Optional[ typing.Iterable[str]] = None, *, error: typing.Optional[ str] = None ):",
      "45": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ), labels: typing.Optional[str] = None ):",
      "46": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None, label: typing.Optional[str] = None ):",
      "47": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = \"\" ):",
      "48": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ) -> str:",
      "49": "choix: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, *, error: typing.Optional[str] = None ):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "target_code": "\ndef message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_line": "def notice(target: str, message: str, tags: dict=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':"
    ],
    "correct": true,
    "top_five": {
      "0": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "1": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "2": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine':",
      "3": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= } } ) -> 'utils.irc.IRCParsedLine':",
      "4": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine':",
      "5": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } ) -> 'utils.irc.IRCParsedLine':",
      "6": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine':",
      "7": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "8": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine",
      "9": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= } } ) -> 'utils.irc.IRCParsedLine':",
      "10": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return",
      "11": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None )-> 'utils.irc.IRCParsedLine':",
      "12": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= ^ } ) -> 'utils.irc.IRCParsedLine':",
      "13": "def message(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine':",
      "14": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= \\ } ) -> 'utils.irc.IRCParsedLine':",
      "15": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine",
      "16": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine':",
      "17": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine",
      "18": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return",
      "19": "def notice(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine':",
      "20": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None )-> 'utils.irc.IRCParsedLine':",
      "21": "def message(target: str, message: str, tags: Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "22": "def message(target: str, message: str, tags: typing.Optional[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> 'utils.irc.IRCParsedLine':",
      "23": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> 'utils.irc.IRCParsedLine':",
      "24": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine",
      "25": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= ^ } ) -> 'utils.irc.IRCParsedLine':",
      "26": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "27": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) -> 'utils.irc.IRCParsedLine':",
      "28": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine",
      "29": "def message(target: str, message: str, tags: typing.Dict[str, str] = { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str] = { } ) -> 'utils.irc.IRCParsedLine':",
      "30": "def note(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "31": "def message(target: str, message: str, tags: Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "32": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) -> 'utils.irc.IRCParsedLine",
      "33": "def message(target: str, message: str, tags: typing.Optional[str]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "34": "def message(target: str, message: str, tags: Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine':",
      "35": "def notice(target: str, message: str, tags: Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "36": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> \"utils.irc.IRCParsedLine\": return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "37": "def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None ) -> 'utils.irc.IRCParsedLine",
      "38": "def notice(target: str, message: str, tags: typing.Optional[str, str]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine':",
      "39": "def message(target: str, message: str, tags: typing.Dict[str, str] = { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "40": "def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str], tags]=None ) -> 'utils.irc.IRCParsedLine':",
      "41": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> 'utils.irc.IRCParsedLine':",
      "42": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { } str ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "43": "def message(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= None ) -> 'utils.irc.IRCParsedLine':",
      "44": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "45": "def message(target: str, message: str, tags: typing.Optional[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[str, str]= { } ) -> 'utils.irc.IRCParsedLine':",
      "46": "def notice(target: str, message: str, tags: typing.Optional[str, str]= { } ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> 'utils.irc.IRCParsedLine':",
      "47": "def message(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]==None ) -> 'utils.irc.IRCParsedLine':",
      "48": "def message(target: str, message: str, tags: typing.Dict[str, str], dict=None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine':",
      "49": "def message(target: str, message: str, tags: typing.Dict[str, str] = None ) -> 'utils.irc.IRCParsedLine': return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) def notice(target: str, message: str, tags: typing.Dict[str, str]=None ) -> 'utils.irc.IRCParsedLine':"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_line": "                                       immutable_features: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 677,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SeldonIO/alibi",
    "source_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "target_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60^",
    "target_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "predictions": [
      "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:"
    ],
    "correct": true,
    "top_five": {
      "0": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "1": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, divers=False) -> List[np.ndarray]:",
      "2": "category_map: Dict[int, List[str]], immutable_features: List[str] = [], diverse=False) -> List[np.ndarray]:",
      "3": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversity=False) -> List[np.ndarray]:",
      "4": "category_map: Dict[int, List[str]], immutable_features: List[str] = (), diverse=False) -> List[np.ndarray]:",
      "5": "category_map: Dict[int, List[str]]: immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "6": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, varied=False) -> List[np.ndarray]:",
      "7": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse = False) -> List[np.ndarray]:",
      "8": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversify=False) -> List[np.ndarray]:",
      "9": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversified=False) -> List[np.ndarray]:",
      "10": "category_map: Dict[int, List[str]] -> List[np.ndarray]: immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "11": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversification=False) -> List[np.ndarray]:",
      "12": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, divers = False) -> List[np.ndarray]:",
      "13": "category_map: Dict[int, List[str]] = [], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "14": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[Np.ndarray]:",
      "15": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False), List[np.ndarray]:",
      "16": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False, List[np.ndarray]:",
      "17": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]: \"\"\"",
      "18": "category_map: Dict[int, List[str]], immutable_features: Union[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "19": "category_map: Dict[int, List[str]], immutable_features: List[str], diverse=False) -> List[np.ndarray]:",
      "20": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False -> List[np.ndarray]:",
      "21": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversifier=False) -> List[np.ndarray]:",
      "22": "category_map: Dict[int, Dict[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "23": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diversifying=False) -> List[np.ndarray]:",
      "24": "category_map: Dict[int, Liste[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "25": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray] :",
      "26": "category_map: Dict[int, List[str]], immutable_features: Options[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "27": "category_map: Dict[int, List[str], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "28": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> Optional[List[np.ndarray]:",
      "29": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "30": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str], Diverse=False) -> List[np.ndarray]:",
      "31": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False, list[np.ndarray]:",
      "32": "category_map: Dict[int, List[str]], immutable_features, diverse=False) -> List[np.ndarray]:",
      "33": "category_map: Dict[int, List[str]], immutable_features: Optional[list[str]] = None, diverse=False) -> List[np.ndarray]:",
      "34": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str], diverse=False) -> List[np.ndarray]:",
      "35": "category_map: Dict[int, List[str]], immutable_features: List[str] = [] -> None, diverse=False) -> List[np.ndarray]:",
      "36": "category_map: Dict[int, List[str]], immutable_features: Alternative[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "37": "category_map: Dict[int, List[str]] immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "38": "category_map: Dict[int, List[str]], immutable_features: optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "39": "category_map: Dict[int, List[str]), immutable_features: Optional[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "40": "category_map: Dict[int, List[str]], immutable_features: Use[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "41": "category_map: Dict[int, List[str]], immutable_features: Options.List[str] = None, diverse=False) -> List[np.ndarray]:",
      "42": "category_map: Dict[int, List[str]], immutable_features: Choice[List[str]] = None, diverse=False) -> List[np.ndarray]:",
      "43": "category_map: Dict[int, List[str]], immutable_features: List[str] = (\"\"), diverse=False) -> List[np.ndarray]:",
      "44": "category_map: Dict[int, List[str]], immutable_features: List[str] = [0], diverse=False) -> List[np.ndarray]:",
      "45": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False) > List[np.ndarray]:",
      "46": "category_map: Dict[int, List[str]], immutable_features: List[str] = [], divers=False) -> List[np.ndarray]:",
      "47": "category_map: Dict[int, List[str]], immutable_features: List[str] = [], diverse=False) -> List[np.ndarray]:",
      "48": "category_map: Dict[int, List[str]], immutable_features: List[str] = \"\", diverse=False) -> List[np.ndarray]:",
      "49": "category_map: Dict[int, List[str]], immutable_features: Optional[List[str]] = None, diverse=False): List[np.ndarray]:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value\n\n",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_line": "            value = str(value)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 211,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/job/query.py",
    "target_filename": "google/cloud/bigquery/job/query.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value"
    ],
    "correct": false,
    "top_five": {
      "0": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "1": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "2": "def statement_byte_budget(self, value: Union[int, None]): if value is None: str(value) self._properties[\"statementByteBudget\"] = value",
      "3": "def statement_byte_budget(self, value: Union[int, None]): value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "4": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value = Optional[str](value) self._properties[\"statementByteBudget\"] = value",
      "5": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_bytes = str(value) self._properties[\"statementByteBudget\"] = value",
      "6": "def statement_byte_budget(self, value: Union[int, None]): value = str(value) self._properties[\"statementByteBudget\"] = value",
      "7": "def statement_byte_budget(self, value: Union[int, None]): if value is None: var value = str(value) self._properties[\"statementByteBudget\"] = value",
      "8": "def statement_byte_budget(self, value: Union[int, None]): if value is None: _value = str(value) self._properties[\"statementByteBudget\"] = _value",
      "9": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value_byte",
      "10": "def statement_byte_budget(self, value: Union[int, None]): if value is None: return str(value) self._properties[\"statementByteBudget\"] = value",
      "11": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value = Optional[int](value) self._properties[\"statementByteBudget\"] = value",
      "12": "def statement_byte_budget(self, value: Union[int, None]): if value is None else str(value) self._properties[\"statementByteBudget\"] = value",
      "13": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_bytes = str(value) self._properties[\"statementByteBudget\"] = value_bytes",
      "14": "def statement_byte_budget(self, value: Union[int, None]) if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "15": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "16": "def statement_byte_budget(self, value: Union[int, None]): if value!= None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "17": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte_budget = str(value) self._properties[\"statementByteBudget\"] = value",
      "18": "def statement_byte_budget(self, value: Union[int, None]): if value is None: assert value is None value = str(value) self._properties[\"statementByteBudget\"] = value",
      "19": "def statement_byte_budget(self, value: Union[int, None]): if value is None: assert value is None self._properties[\"statementByteBudget\"] = value",
      "20": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value[byte]",
      "21": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value[int] = str(value) self._properties[\"statementByteBudget\"] = value",
      "22": "def statement_byte_budget(self, value: Union[int, None]) -> None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "23": "def statement_byte_budget(self, value: Union[int, None]): if value is not None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "24": "def statement_byte_budget(self, value: Union[int, None]): value is None if value is None else str(value) self._properties[\"statementByteBudget\"] = value",
      "25": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_int = str(value) self._properties[\"statementByteBudget\"] = value",
      "26": "def statement_byte_budget(self, value: Union[int, None]): if value is None: new_value = str(value) self._properties[\"statementByteBudget\"] = new_value",
      "27": "def statement_byte_budget(self, value: Union[int, None]): if value is None: # value = str(value) self._properties[\"statementByteBudget\"] = value",
      "28": "def statement_byte_budget(self, value: Union[int, None]): value_bytes = str(value) self._properties[\"statementByteBudget\"] = value",
      "29": "def statement_byte_budget(self, value: Union[int, None]): if value is None: tag_value = tag(value) self._properties[\"statementByteBudget\"] = tag_value",
      "30": "def statement_byte_budget(self, value: Union[int, None]): if value is None and value is not None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "31": "def statement_byte_budget(self, value: Union[int, None]): if value is None and value is None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "32": "def statement_byte_budget(self, value: Union[int, None]) if value is None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "33": "def statement_byte_budget(self, value: Union[int, None]): if value is None: \"\"\" value = str(value) self._properties[\"statementByteBudget\"] = value",
      "34": "def statement_byte_budget(self, value: Union[int, None]): if value is None: let value = str(value) self._properties[\"statementByteBudget\"] = value",
      "35": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value is None self._properties[\"statementByteBudget\"] = value",
      "36": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value is not None self._properties[\"statementByteBudget\"] = value",
      "37": "def statement_byte_budget(self, value: Union[int, None]): \"\"\" value = str(value) self._properties[\"statementByteBudget\"] = value",
      "38": "def statement_byte_budget(self, value: Optional[Union[int, None]): if value is None: value_byte = str(value) self._properties[\"statementByteBudget\"] = value",
      "39": "def statement_byte_budget(self, value: Union[int, None]): if value is None: bool = str(value) self._properties[\"statementByteBudget\"] = bool",
      "40": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value_type = str(value) self._properties[\"statementByteBudget\"] = value",
      "41": "def statement_byte_budget(self, value: Union[int, None]): if value is None: self._properties[\"statementByteBudget\"] = value",
      "42": "def statement_byte_budget(self, value: Union[int, None]): if value is None var value = str(value) self._properties[\"statementByteBudget\"] = value",
      "43": "def statement_byte_budget(self, value: Union[int, None]): assert isinstance(value, str(value)) self._properties[\"statementByteBudget\"] = value",
      "44": "def statement_byte_budget(self, value: Union[int, None]): if value is None: if value is None: value = str(value) self._properties[\"statementByteBudget\"] = value",
      "45": "def statement_byte_budget(self, value: Union[int, None]): if value is None: _value = str(value) self._properties[\"statementByteBudget\"] = value",
      "46": "def statement_byte_budget(self, value: Union[int, None]): if value is None: if value is None else str(value) self._properties[\"statementByteBudget\"] = value",
      "47": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value = Value() self._properties[\"statementByteBudget\"] = value",
      "48": "def statement_byte_budget(self, value: Union[int, None]): assert isinstance(value, str) self._properties[\"statementByteBudget\"] = value",
      "49": "def statement_byte_budget(self, value: Union[int, None]): if value is None: value = None self._properties[\"statementByteBudget\"] = value"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def filter(self, predicate: Predicate = None) -> t.List[T]:\n        \"\"\"\n",
    "target_code": "\n    def filter(self, predicate: Predicate) -> t.List[T]:\n        \"\"\"\n",
    "warning_line": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pcah/python-clean-architecture",
    "source_filename": "dharma/domain/repos/in_memory.py",
    "target_filename": "dharma/domain/repos/in_memory.py",
    "source_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e^",
    "target_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "predictions": [
      "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \"\"\"",
      "1": "def filter(self, predicate: Predicate) -> t.List[T]: \"\"\"",
      "2": "def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]: \"\"\"",
      "3": "def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \"\"\"",
      "4": "def filter( self, predicate: Optional[Predicate] = None ) -> t.List[T]: \"\"\"",
      "5": "def filter(self, predicate: Optional[PrettyPrint] = None) -> t.List[T]: \"\"\"",
      "6": "def filter(self, predicate: Optional[Dharma.data.formulae.predicate.Predicate] = None) -> t.List[T]: \"\"\"",
      "7": "def filter(self, predicate: dharma.data.formulae.Predicate.Predicate) -> t.List[T]: \"\"\"",
      "8": "def filter(self, predicate: Optional[PrettyPrint.Predicate] = None) -> t.List[T]: \"\"\"",
      "9": "def filter(self, predicate: Optional[Dharma.data.formulae.Predicate.Predicate] = None) -> t.List[T]: \"\"\"",
      "10": "def filter(self, predicate: Optional[PrettyPrint[Predicate]] = None) -> t.List[T]: \"\"\"",
      "11": "def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]: \"\"\"",
      "12": "def filter(self, predicate: Optional[Dict[Predicate]] = None) -> t.List[T]: \"\"\"",
      "13": "def filter(self, predicate: Optional[None] = None) -> t.List[T]: \"\"\"",
      "14": "def filter(self, predicate: Optional[[Predicate]] = None) -> t.List[T]: \"\"\"",
      "15": "def filter(self, predicate: dharma.data.formulae.predicate[Predicate] = None) -> t.List[T]: \"\"\"",
      "16": "def filter(self, predicate: Optional[PrettyPrint[Predicate] = None) -> t.List[T]: \"\"\"",
      "17": "def filter(self, predicate, Optional[Predicate] = None) -> t.List[T]: \"\"\"",
      "18": "def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]: \"\"\"",
      "19": "def filter(self, predicate: Optional[Optional[Predicate]] = None) -> t.List[T]: \"\"\"",
      "20": "def filter(self, predicate: Optional[PrettyPrinter.Predicate] = None) -> t.List[T]: \"\"\"",
      "21": "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \"\"\"\"",
      "22": "def filter(self, predicate: dharma.data.formulae.Predicate[Predicate] = None) -> t.List[T]: \"\"\"",
      "23": "def filter(self, predicate: Optional[Dict[predicate]] = None) -> t.List[T]: \"\"\"",
      "24": "def filter(self, predicate: Optional[Predicate] = None ) -> t.List[T]: \"\"\"",
      "25": "def filter(self, predicate: Optional[Default] = None) -> t.List[T]: \"\"\"",
      "26": "def filter(self, predicate: Theoretical[Predicate] = None) -> t.List[T]: \"\"\"",
      "27": "def filter(self, predicate: Optional[Optional[Predicate] = None) -> t.List[T]: \"\"\"",
      "28": "def filter(self, predicate: Predicate ) -> t.List[T]: \"\"\"",
      "29": "def filter( self, predicate: Optional[Predicate] = None ) -> t.List[T ]: \"\"\"",
      "30": "def filter(self, predicate: Optional['Predicate'] = None) -> t.List[T]: \"\"\"",
      "31": "def filter(self, predicate: Options.Predicate = None) -> t.List[T]: \"\"\"",
      "32": "def filter(self, predicate: List[Predicate] = None) -> t.List[T]: \"\"\"",
      "33": "def filter(self, predicate: Useful[Predicate] = None) -> t.List[T]: \"\"\"",
      "34": "def filter(self, predicate: Choose[Predicate] = None) -> t.List[T]: \"\"\"",
      "35": "def filter(self, predicate_: Optional[Predicate] = None) -> t.List[T]: \"\"\"",
      "36": "def filter(self, predicate: Select[Predicate] = None) -> t.List[T]: \"\"\"",
      "37": "def filter(self, predicate: \"\"\") -> t.List[T]: \"\"\"",
      "38": "def filter(self, predicate: Alternative[Predicate] = None) -> t.List[T]: \"\"\"",
      "39": "def filter(self, predicate: Options[Predicate] = None) -> t.List[T]: \"\"\"",
      "40": "def filter(self, predicate: Optional[ Predicate] = None) -> t.List[T]: \"\"\"",
      "41": "def filter(self, predicate: \"\"\"\" = None) -> t.List[T]: \"\"\"",
      "42": "def filter(self, predicate: Predicate | None = None) -> t.List[T]: \"\"\"",
      "43": "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T].split(''): \"\"\"",
      "44": "def filter(self, predicate: \"Predicate\") -> t.List[T]: \"\"\"",
      "45": "def filter(self, predicate: \"\"\") -> t.List[T]: \"\"\"",
      "46": "def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]: \"\"\"\"",
      "47": "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T] -> None: \"\"\"",
      "48": "def filter( self, predicate: Predicate) -> t.List[T]: \"\"\"",
      "49": "def filter(self, predicate: Optional[Predicate] = None) -> t.List[T].convert(): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2315,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\","
    ],
    "correct": true,
    "top_five": {
      "0": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "1": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "2": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "3": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "4": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "5": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = Sequence(), gcp_conn_id: str = \"google_cloud_default\",",
      "6": "timeout: Optional[float] = None, metadata_type: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "7": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [\", gcp_conn_id: str = \"google_cloud_default\",",
      "8": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = str, gcp_conn_id: str = \"google_cloud_default\",",
      "9": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [] gcp_conn_id: str = \"google_cloud_default\",",
      "10": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "11": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "12": "timeout: Optional[float] = None, metadata_types: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "13": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "14": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "15": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (\"\"), gcp_conn_id: str = \"google_cloud_default\",",
      "16": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = [\", gcp_conn_id: str = \"google_cloud_default\",",
      "17": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = str, gcp_conn_id: str = \"google_cloud_default\",",
      "18": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "19": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]] (), gcp_conn_id: str = \"google_cloud_default\",",
      "20": "timeout: Optional[float] = None, metadata_path: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "21": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]](), gcp_conn_id: str = \"google_cloud_default\",",
      "22": "timeout: Optional[float] = None, metadata_list: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "23": "timeout: Optional[float] = None, metadata: Sequence[Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "24": "timeout: Optional[float] = None, metadata_name: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "25": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]], gcp_conn_id: str = \"google_cloud_default\",",
      "26": "timeout: Optional[float] = None, metadata_params: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "27": "timeout: Optional[float] = None, metadata=Optional[Sequence[Tuple[str, str]]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "28": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence[str], gcp_conn_id: str = \"google_cloud_default\",",
      "29": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]](''), gcp_conn_id: str = \"google_cloud_default\",",
      "30": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "31": "timeout: Optional[float] = None, metadata_type: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "32": "timeout: Optional[float] = None, metadata_ids: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "33": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence(), gcp_conn_id: str = \"google_cloud_default\",",
      "34": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence[str] gcp_conn_id: str = \"google_cloud_default\",",
      "35": "timeout: Optional[float] = None, metadata=Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "36": "timeout: Optional[float] = None, metadata=Optional[Sequence[Tuple[str, str]]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "37": "timeout: Optional[float] = None, metadata=Linear[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "38": "timeout: Optional[float] = None, metadata_data: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "39": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = String(\", gcp_conn_id: str = \"google_cloud_default\",",
      "40": "timeout: Optional[float] = None, metadata__: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "41": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence(str), gcp_conn_id: str = \"google_cloud_default\",",
      "42": "timeout: Optional[float] = None, metadata_count: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "43": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = Sequence, gcp_conn_id: str = \"google_cloud_default\",",
      "44": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [0], gcp_conn_id: str = \"google_cloud_default\",",
      "45": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = null, gcp_conn_id: str = \"google_cloud_default\",",
      "46": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]](\", gcp_conn_id: str = \"google_cloud_default\",",
      "47": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), conn_id: str = \"google_cloud_default\",",
      "48": "timeout: Optional[float] = None, metadata_id = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "49": "timeout: Optional[float] = None, metadata=False, gcp_conn_id: str = \"google_cloud_default\","
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
    "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
    "warning_line": "                tmpdir_lock=None  # type: threading.Lock",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/command_line_tool.py",
    "target_filename": "cwltool/command_line_tool.py",
    "source_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c^",
    "target_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "predictions": [
      "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None"
    ],
    "correct": true,
    "top_five": {
      "0": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "1": "runtimeContext, # type: RuntimeContext, tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "2": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ) -> None",
      "3": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[Threading.Lock] ): # type: (...) -> None",
      "4": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Alternative[threading.Lock] ): # type: (...) -> None",
      "5": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: None ): # type: (...) -> None",
      "6": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # option: Optional[threading.Lock] ): # type: (...) -> None",
      "7": "runtimeContext, # type: RuntimeContext tmpdir_lock = None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "8": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "9": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # Type: Optional[threading.Lock] ): # type: (...) -> None",
      "10": "runtimeContext, # type: RunningtimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "11": "runtimeContext, # type: RuntimeContext tmpdir_lock: # type: Optional[threading.Lock] ): # type: (...) -> None",
      "12": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # typing.Optional[threading.Lock] ): # type: (...) -> None",
      "13": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: option[threading.Lock] ): # type: (...) -> None",
      "14": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: # type: Optional[threading.Lock] ): # type: (...) -> None",
      "15": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "16": "runtimeContext, # type: RuntimeContext.tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "17": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock]): # type: (...) -> None",
      "18": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[THROWING.Lock] ): # type: (...) -> None",
      "19": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[THRING.Lock] ): # type: (...) -> None",
      "20": "runtimeContext, # type: Optional[RuntimeContext] tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "21": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: options.Threading.Lock ): # type: (...) -> None",
      "22": "runtimeContext, # type: RuntimeContext tmpdir_lock=None# type: Optional[threading.Lock] ): # type: (...) -> None",
      "23": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Options.Threading.Lock ): # type: (...) -> None",
      "24": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type= Optional[threading.Lock] ): # type: (...) -> None",
      "25": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # kind: Optional[threading.Lock] ): # type: (...) -> None",
      "26": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: typing.Optional[threading.Lock] ): # type: (...) -> None",
      "27": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock]) ): # type: (...) -> None",
      "28": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: 'threading.Lock' ): # type: (...) -> None",
      "29": "runtimeContext, # type: RuntimeContext. tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "30": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[tmp.Lock] ): # type: (...) -> None",
      "31": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: choice[threading.Lock] ): # type: (...) -> None",
      "32": "runtimeContext, # kind: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "33": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading[.Lock]] ): # type: (...) -> None",
      "34": "runtimeContext, # type: RuntimeContext; tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "35": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # # type: Optional[threading.Lock] ): # type: (...) -> None",
      "36": "runtimeContext, # type: RuntimeContext tmpdir_lock=\"\"\": # type: Optional[threading.Lock] ): # type: (...) -> None",
      "37": "runtimeContext, # type: RuntimeContext and tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None",
      "38": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] () ): # type: (...) -> None",
      "39": "runtimeContext, # type: RuntimeContext, tmpdir_lock=None # type: Optional[Threading.Lock] ): # type: (...) -> None",
      "40": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # mode: Optional[threading.Lock] ): # type: (...) -> None",
      "41": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type=Optional[threading.Lock] ): # type: (...) -> None",
      "42": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Options.threading.Lock ): # type: (...) -> None",
      "43": "runtimeContext, # type: RuntimeContext tmpdir_lock='' # type: Optional[threading.Lock] ): # type: (...) -> None",
      "44": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # types: Optional[threading.Lock] ): # type: (...) -> None",
      "45": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: choice.Threading.Lock ): # type: (...) -> None",
      "46": "runtimeContext, # type: RuntimeContext tmpdir_lock: Optional[threading.Lock] = None ): # type: (...) -> None",
      "47": "runtimeContext, # type: RuntimeContext, tmpdir_lock=None # type: Optional[threading.Lock] ) -> None",
      "48": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock]",
      "49": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...)-> None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )\n",
    "target_code": "        \"\"\"\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_line": "        string = _fmt(string)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " string is declared to have type `str` but is used as type `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 312,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libtcod/python-tcod",
    "source_filename": "tcod/console.py",
    "target_filename": "tcod/console.py",
    "source_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9^",
    "target_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "predictions": [
      "\"\"\" bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "1": "\"\"\" string_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string_bytes )",
      "2": "\"\"\" str = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, str )",
      "3": "\"\"\" byte_string = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, byte_string )",
      "4": "\"\"\" string_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "5": "\"\"\" Bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "6": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "7": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "8": "\"\"\" parse_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, parse_bytes(string ) )",
      "9": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) )",
      "10": "\"\"\" bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, partes )",
      "11": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string ) )",
      "12": "\"\"\" type_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, type_bytes )",
      "13": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, str )",
      "14": "\"\"\" params = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, params )",
      "15": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_",
      "16": "\"\"\" str = _fmt(str) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, str )",
      "17": "\"\"\" file_string = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, file_string )",
      "18": "\"\"\" Bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, Bytes )",
      "19": "\"\"\" byte_string = _fmt(byte) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, byte_string )",
      "20": "\"\"\" file_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, file_bytes )",
      "21": "\"\"\" \"\"\" bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "22": "\"\"\" byte = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, byte )",
      "23": "\"\"\" int = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, int )",
      "24": "\"\"\" string_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, str_bytes )",
      "25": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.bytes_length = 0 ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height,",
      "26": "\"\"\" byte_str = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, byte_str )",
      "27": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.bytes_length = 0 ) string = _fmt(lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string",
      "28": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.bytes_length = 1 ) string = _fmt(lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string",
      "29": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, bytes )",
      "30": "\"\"\" this.bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, this.bytes )",
      "31": "\"\"\" offset = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, offset )",
      "32": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "33": "\"\"\" String_bytes = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string )",
      "34": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(",
      "35": "\"\"\" stored_string = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, stored_string )",
      "36": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string))",
      "37": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_string_width, lib.tcd_",
      "38": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.byte_length, _fmt(string) )",
      "39": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(str, str) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string",
      "40": "\"\"\" string_fmt = _fmt(string) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, string_fmt )",
      "41": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_console_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_",
      "42": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_s, lib.tcd_",
      "43": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.bytes(string) )",
      "44": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.bytes(string ) )",
      "45": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.byte_length, _fmt(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height,",
      "46": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.tcd_console_set_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_",
      "47": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.bytes_to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height,",
      "48": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.to_bytes(string) ) return lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height,",
      "49": "\"\"\" lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, lib.TCOD_console_get_height_rect_fmt( self.console_c, x, y, width, height, str )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
    "target_code": "    if type_type == SCALAR:\n        result_type = sub_type\n    elif type_type == ARRAY:\n        result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
    "warning_line": "        type_ = query.ArrayQueryParameterType(sub_type, name=name)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "target_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:"
    ],
    "correct": false,
    "top_five": {
      "0": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "1": "if type_type == SCALAR: _type_ = sub_type elif type_type == ARRAY: _type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "2": "if type_type == SCALAR: elif type_type == ARRAY: elif type_type == STRUCT:",
      "3": "if type_type == SCALAR: elif type_type == ARRAY: query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "4": "if type_type == SCALAR: self.type_ = sub_type elif type_type == ARRAY: self.type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "5": "if type_type == SCALAR: assert sub_type is not None type_ = sub_type elif type_type == ARRAY: assert sub_type is not None type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "6": "if type_type == SCALAR: return sub_type elif type_type == ARRAY: return query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "7": "if type_type == SCALAR: # type_ = sub_type elif type_type == ARRAY: # type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "8": "if type_type == SCALAR: assert sub_type is not None type_ = sub_type elif type_type == ARRAY: assert type_ is not None type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "9": "if type_type == SCALAR: value_ = sub_type elif type_type == ARRAY: value_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "10": "if type_type == SCALAR: sub_type = elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "11": "if type_type == SCALAR: this.type_ = sub_type elif type_type == ARRAY: this.type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "12": "if type_type == SCALAR: str(sub_type) elif type_type == ARRAY: str(query.ArrayQueryParameterType(sub_type, name=name)) elif type_type == STRUCT:",
      "13": "if type_type == SCALAR: _type = sub_type elif type_type == ARRAY: _type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "14": "if type_type == SCALAR: array_ = sub_type elif type_type == ARRAY: array_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "15": "if type_type == SCALAR: self = sub_type elif type_type == ARRAY: self = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "16": "if type_type == SCALAR: self._type_ = sub_type elif type_type == ARRAY: self._type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "17": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "18": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query[query.ArrayQueryParameterType(sub_type, name=name)] elif type_type == STRUCT:",
      "19": "if type_type == SCALAR: t_type = sub_type elif type_type == ARRAY: t_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "20": "if type_type == SCALAR: sub_type = elif type_type == ARRAY: query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "21": "if type_type == SCALAR: str = sub_type elif type_type == ARRAY: str = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "22": "if type_type == SCALAR: os.type_ = sub_type elif type_type == ARRAY: os.type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "23": "if type_type == SCALAR: f_type = sub_type elif type_type == ARRAY: f_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "24": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query[query.ArrayQueryParameterType(sub_type, name=name)) elif type_type == STRUCT:",
      "25": "if type_type == SCALAR: assert sub_type is not None elif type_type == ARRAY: assert sub_type is not None type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "26": "if type_type == SCALAR: self.type_ = sub_type elif self.type_type == ARRAY: self.type_ = query.ArrayQueryParameterType(sub_type, name=name) elif self.type_type == STRUCT:",
      "27": "if type_type == SCALAR: use_type = sub_type elif type_type == ARRAY: use_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "28": "if type_type == SCALAR: this_type = sub_type elif type_type == ARRAY: this_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "29": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = str(query.ArrayQueryParameterType(sub_type, name=name)) elif type_type == STRUCT:",
      "30": "if type_type == SCALAR: assert isinstance(sub_type, name=name) elif type_type == ARRAY: assert isinstance(sub_type, name=name) elif type_type == STRUCT:",
      "31": "if type_type == SCALAR: _type_ = sub_type elif type_type == ARRAY: _type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "32": "if type_type == SCALAR: request_type = sub_type elif request_type == ARRAY: request_type = query.ArrayQueryParameterType(sub_type, name=name) elif request_type == STRUCT:",
      "33": "if type_type == SCALAR: option_ = sub_type elif type_type == ARRAY: option_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "34": "if type_type == SCALAR: iter_type = sub_type elif type_type == ARRAY: iter_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "35": "if type_type == SCALAR: query_ = sub_type elif type_type == ARRAY: query_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "36": "if type_type == SCALAR: q_type = sub_type elif type_type == ARRAY: q_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "37": "if type_type == SCALAR: sub_type = elif type_type == ARRAY: sub_type = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "38": "if type_type == SCALAR: name_ = sub_type elif type_type == ARRAY: name_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "39": "if type_type == SCALAR: name=name = sub_type elif type_type == ARRAY: name=name = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "40": "if type_type == SCALAR: iter_type_ = sub_type elif type_type == ARRAY: iter_type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "41": "if type_type == SCALAR: ArrayQueryParameterType = sub_type elif type_type == ARRAY: ArrayQueryParameterType = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "42": "if type_type == SCALAR: Type_ = sub_type elif type_type == ARRAY: Type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "43": "if type_type == SCALAR: query_ = sub_type elif type_type == ARRAY: query_ = ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "44": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query[str](sub_type, name=name) elif type_type == STRUCT:",
      "45": "if type_type == SCALAR: sub_type_ = elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "46": "if type_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query[query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "47": "if sub_type == SCALAR: type_ = sub_type elif type_type == ARRAY: type_ = query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "48": "if type_type == SCALAR: elif type_type == ARRAY: return query.ArrayQueryParameterType(sub_type, name=name) elif type_type == STRUCT:",
      "49": "if type_type == SCALAR: _type_ = sub_type elif type_type == ARRAY: _type_ = query.ArrayQueryParameterType( sub_type, name=name) elif type_type == STRUCT:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_line": "            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 342,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "gitpython-developers/GitPython",
    "source_filename": "git/objects/submodule/base.py",
    "target_filename": "git/objects/submodule/base.py",
    "source_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f^",
    "target_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "predictions": [
      "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':"
    ],
    "correct": false,
    "top_five": {
      "0": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "1": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "2": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "3": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "4": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "5": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = False, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "6": "branch: Union[str, None] = None, no_checkout: Optional[bool] = False, depth: Optional[Union[int, None]] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "7": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Sequence[TBD], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "8": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None) -> 'Submodule':",
      "9": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[str, None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "10": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Str, None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "11": "branch: Union[str, None] = None, no_checkout: Optional[bool] = None, depth: Optional[Union[int, None]] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "12": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = False, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "13": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "14": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Sequence[TBD, None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "15": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None) -> 'Submodule':",
      "16": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[str, str], clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "17": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> \"Submodule\":",
      "18": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "19": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "20": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = False, env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "21": "branch: Union[str, None] = None, no_checkout: Optional[bool] = False, depth: Optional[Union[int, None]] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "22": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "23": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Sequence[TBD]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "24": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None) -> 'Submodule':",
      "25": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]], clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "26": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "27": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = False, env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "28": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> Submodule:",
      "29": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> \"Submodule\":",
      "30": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str], None] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "31": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "32": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "33": "branch: Union[str, None] = None, no_checkout: bool = True, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "34": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: bool = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "35": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) = 'Submodule':",
      "36": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "37": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = False, env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "38": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> Submodule:",
      "39": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env_: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None ) -> 'Submodule':",
      "40": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None) -> 'Submodule':",
      "41": "branch: Union[str, None] = None, no_checkout: Optional[bool] = None, depth: Optional[Union[int, None]] = None, env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "42": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None ) -> 'Submodule':",
      "43": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "44": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[String[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "45": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "46": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Sequence[TBD, None]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "47": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[str, All] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "48": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':",
      "49": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, env: Union[Mapping[str, str], All] = None, clone_multi_options: Union[Sequence[TBD], None] = None ) -> 'Submodule':"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        key: str = \"\",\n        algorithms: List[str] = None,\n        options: Dict = None,\n        **kwargs,\n",
    "target_code": "        key: str = \"\",\n        algorithms: Optional[List[str]] = None,\n        options: Optional[Dict] = None,\n        **kwargs,\n",
    "warning_line": "        algorithms: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " algorithms is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 135,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jpadilla/pyjwt",
    "source_filename": "jwt/api_jws.py",
    "target_filename": "jwt/api_jws.py",
    "source_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235^",
    "target_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235",
    "predictions": [
      "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,"
    ],
    "correct": true,
    "top_five": {
      "0": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "1": "key: str = '', algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "2": "key: str = \"\", algorithms: Optional[List[str], Optional[Dict]] = None, options: Optional[Dict] = None, **kwargs,",
      "3": "key: str = \"\", algorithm: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "4": "key: str = \"\", algorithms: Optional[list[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "5": "key: str = \"\", algorithms: Optional[Label[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "6": "key: str = \"\", algorithms: Optional[[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "7": "key: str = \"\", algorithms: Options[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "8": "key: str = \"\", algorithms: Optional[List[str], Dict] = None, options: Optional[Dict] = None, **kwargs,",
      "9": "key: str = '\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "10": "key: str = [], algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "11": "key: str = \"\", algorithms: Optional[Str] = None, options: Optional[Dict] = None, **kwargs,",
      "12": "key: str = \"\", algorithms: Optional[List[str], None] = None, options: Optional[Dict] = None, **kwargs,",
      "13": "key: str = \"\", algorithms: Union[List[str]] = None, options: Union[Dict] = None, **kwargs,",
      "14": "key: str = (), algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "15": "key: str = \"\", algorithms: Optional[List[str], Optional[Dict]] = None, **kwargs,",
      "16": "key: str = \"\", algorithms: Choice[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "17": "key: str = \"\", algorithms: optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "18": "key: str = \"\", algorithms: Union[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "19": "key: str = \"\", algorithms: Optionals[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "20": "key: str = \"\", algorithms: Optional[Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "21": "key: str = \"\", algorithms: Union[List[str]] = None, options: Union[Dict, List[str]] = None, **kwargs,",
      "22": "key: str = \"\", algorithms: Optional[List[str]], options: Optional[Dict] = None, **kwargs,",
      "23": "key: str = \"\", algorithms: Optional[[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "24": "key: str = \"\", algorithms: Optional[Tests[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "25": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Options.Dict = None, **kwargs,",
      "26": "key: str = [\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "27": "key: str = \"\", algorithms: Optional[Str] = None, options: Optional[Dict] = None, **kwargs,",
      "28": "key: str = \"\", algorithms: Optional[Address[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "29": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[ Dict] = None, **kwargs,",
      "30": "key: str = (\"\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "31": "key: str = ', algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "32": "key: str = \"\", algorithms: Union[List[str]] = None, options: Union[Dict, None] = None, **kwargs,",
      "33": "key: str = \"\"), algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "34": "key: str = \u201c\u201d, algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "35": "key: str = \"\", algorithms: Optional[List[str]] = none, options: Optional[Dict] = None, **kwargs,",
      "36": "key: str = * (), algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "37": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[Dict] = False, **kwargs,",
      "38": "key: str = \"\", algorithms: List[str] = [], options: Optional[Dict] = None, **kwargs,",
      "39": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Options[Dict] = None, **kwargs,",
      "40": "key: str = \"\", algorithms: Use[List[str]] = None, options: Use[Dict] = None, **kwargs,",
      "41": "key: str = \"\", algorithms: Optional[Class[str]] = None, options: Optional[Dict] = None, **kwargs,",
      "42": "key: str = \"\", algorithms: Optional[List[str]] = [], options: Optional[Dict] = None, **kwargs,",
      "43": "key: str = \"\", algorithms: Optionals[List[str]] = None, options: Optionals[Dict] = None, **kwargs,",
      "44": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Optional[Dict]=None, **kwargs,",
      "45": "key: str = \"\", algorithms: Alternative[List[str]] = None, options: Alternative[Dict] = None, **kwargs,",
      "46": "key: str = \"\", algorithms: Options[str] = None, options: Optional[Dict] = None, **kwargs,",
      "47": "key: str = \"\", algorithms: Optional[str] = None, options: Optional[Dict] = None, **kwargs,",
      "48": "key: str = \"\", algorithms: Optional[Example] = None, options: Optional[Dict] = None, **kwargs,",
      "49": "key: str = \"\", algorithms: Optional[List[str]] = None, options: Dict = None, **kwargs,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, comparable, *, error: str = None):\n        self.comparable = comparable\n",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        self.comparable = comparable\n",
    "warning_line": "    def __init__(self, comparable, *, error: str = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 339,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "def __init__(self, comparable, *, error: typing.Optional[str] = None): self.comparable = comparable"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, comparable, *, error: typing.Optional[str] = None): self.comparable = comparable",
      "1": "def __init__(self, comparable: Optional[str] = None, *, error: Optional[str] = None): self.comparable = comparable",
      "2": "def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: self.comparable = comparable",
      "3": "def __init__(self, comparable: str, *: error: Optional[str] = None): self.comparable = comparable",
      "4": "def __init__(self, comparable: str = \"\", *, error: Optional[str] = None): self.comparable = comparable",
      "5": "def __init__(self, comparable: str ): self.comparable = comparable",
      "6": "def __init__(self, comparable, *, error: Optional[str] = None): self.comparable = comparable",
      "7": "def __init__(self, comparable: Optional[str] = None, *: error): self.comparable = comparable",
      "8": "def __init__(self, comparable: Optional[str] = None): self.comparable = comparable",
      "9": "def __init__(self, comparable: Optional[str] = None, *, error: Optional[str] = None) -> None: self.comparable = comparable",
      "10": "def __init__(self, comparable: Optional[str] = None, error: Optional[str] = None): self.comparable = comparable",
      "11": "def __init__(self, comparable: Optional[str] = None, * = None, error: Optional[str] = None): self.comparable = comparable",
      "12": "def __init__(self, comparable: Optional[str] = None, *= None, error: Optional[str] = None): self.comparable = comparable",
      "13": "def __init__(self, comparable: \"\", *, error: typing.Optional[str] = None): self.comparable = comparable",
      "14": "def __init__( self, comparable, *, error: typing.Optional[str] = None ) -> None: self.comparable = comparable",
      "15": "def __init__(self, comparable: str, *: error: Optional[str] = None) -> None: self.comparable = comparable",
      "16": "def __init__(self, comparable: str | None, error: Optional[str] = None): self.comparable = comparable",
      "17": "def __init__(self, comparable: str, *: error): self.comparable = comparable",
      "18": "def __init__(self, comparable: str = \"\", *, error: Optional[str] = None) -> None: self.comparable = comparable",
      "19": "def __init__(self, comparable: str, *: error: bool = False): self.comparable = comparable",
      "20": "def __init__(self, comparable, *, error: Optional[str] = None) -> None: self.comparable = comparable",
      "21": "def __init__(self, comparable: str | None, error: bool = False): self.comparable = comparable",
      "22": "def __init__(self, comparable: str = '' self.comparable = comparable",
      "23": "def __init__(self, comparable: Optional[str] = None, *: Optional[error] = None): self.comparable = comparable",
      "24": "def __init__(self, comparable: error, *: Optional[str] = None): self.comparable = comparable",
      "25": "def __init__(self, comparable: Union[str, *], error: Union[str, None] = None): self.comparable = comparable",
      "26": "def __init__(self, comparable: Optional[str] = None ): self.comparable = comparable",
      "27": "def __init__(self, comparable: \"\", *, error: Optional[str] = None): self.comparable = comparable",
      "28": "def __init__(self, comparable, *, error: typing.Optional[str] = None): self.comparable = comparable",
      "29": "def __init__(self, comparable: str if isinstance(comparable, *), error: Optional[str] = None): self.comparable = comparable",
      "30": "def __init__(self, comparable: Optional[str] = None, * = None, error: Optional[str] = None) -> None: self.comparable = comparable",
      "31": "def __init__(self, comparable: str, *, error: Optional[str] = None): self.comparable = comparable",
      "32": "def __init__(self, comparable: str, *: error ): self.comparable = comparable",
      "33": "def __init__(self, comparable: Optional[str] = None, *: Optional[str] = None): self.comparable = comparable",
      "34": "def __init__(self, comparable: Optional[str] = None, *= None, error: Optional[str] = None) -> None: self.comparable = comparable",
      "35": "def __init__(self, comparable, *, error: typing.Optional[str] = None ): self.comparable = comparable",
      "36": "def __init__(self, comparable: Optional[str] = None, *): self.comparable = comparable",
      "37": "def __init__(self, comparable: str): self.comparable = comparable",
      "38": "def __init__(self, comparable: Optional[str] = None, *: error: Optional[str] = None): self.comparable = comparable",
      "39": "def __init__(self, comparable: Optional[str] = None) -> None: self.comparable = comparable",
      "40": "def __init__(self, comparable: Optional[str] = None, error: Optional[str] = None) -> None: self.comparable = comparable",
      "41": "def __init__( self, comparable, *, error: typing.Optional[str] = None ): self.comparable = comparable",
      "42": "def __init__(self, comparable: str, *: error: err): self.comparable = comparable",
      "43": "def __init__(self, comparable: str | None, error: Optional[str] = None) -> None: self.comparable = comparable",
      "44": "def __init__(self, comparable: Union[str, *, error] = None): self.comparable = comparable",
      "45": "def __init__(self, *, error: typing.Optional[str] = None): self.comparable = comparable",
      "46": "def __init__(self, comparable: typing.Optional[str] = None): self.comparable = comparable",
      "47": "def __init__(self, comparable: str = \"\", *, error: bool = \"\"): self.comparable = comparable",
      "48": "def __init__(self, comparable: str ) -> None: self.comparable = comparable",
      "49": "def __init__(self, comparable: Optional[str] = None, *: error) -> None: self.comparable = comparable"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        self.db_user = db_user\n",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        self.db_user = db_user\n",
    "warning_line": "    def __init__(self, db_user, instance=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tribe29/checkmk",
    "source_filename": "agents/plugins/mk_postgres.py",
    "target_filename": "agents/plugins/mk_postgres.py",
    "source_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1^",
    "target_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "predictions": [
      "def __init__(self, db_user, instance=None): # type: (str, Optional[Dict]) -> None self.db_user = db_user"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, db_user, instance=None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "1": "def __init__(self, db_user, instance=None): # type: (str, Dict) -> None self.db_user = db_user",
      "2": "def __init__(self, db_user): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "3": "def __init__(self, db_user): # type: (str, Dict) -> None self.db_user = db_user",
      "4": "def __init__(self, db_user, instance=None): # type: Optional[str, Dict] -> None self.db_user = db_user",
      "5": "def __init__(self, db_user, instance = None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "6": "def __init__(self, db_user, instance=None): # type: (str) -> None self.db_user = db_user",
      "7": "def __init__(self, db_user: str, instance: Optional[Dict] = None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "8": "def __init__(self, db_user: str, instance: Optional[Dict] = None): # type: (str, Dict) -> None self.db_user = db_user",
      "9": "def __init__(self, db_user, instance=''): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "10": "def __init__(self, db_user, instance=None): # type: (options.str, Optional[Dict]) -> None self.db_user = db_user",
      "11": "def __init__(self, db_user: Optional[Dict] = None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "12": "def __init__(self, db_user, instance: Optional[Dict] = None): # type: (str, Dict) -> None self.db_user = db_user",
      "13": "def __init__(self, db_user, instance: Optional[Dict] = None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "14": "def __init__(self, db_user: str, instance=None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "15": "def __init__(self, db_user, instance=None): # type: (Optional[str, Optional[Dict]]) -> None self.db_user = db_user",
      "16": "def __init__(self, db_user, instance=None): # type: (str, Dict) -> Optional[Dict] self.db_user = db_user",
      "17": "def __init__(self, db_user, instance=None): # type: (Optional[str, Dict]) -> None self.db_user = db_user",
      "18": "def __init__(self, db_user: Dict): # type: (str, Dict) -> None self.db_user = db_user",
      "19": "def __init__(self, db_user: Dict): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "20": "def __init__( self, db_user, instance=None ): # type: (str, Optional[Dict] ) -> None self.db_user = db_user",
      "21": "def __init__(self, db_user, instance = None): # type: (str, Dict) -> None self.db_user = db_user",
      "22": "def __init__(self, db_user, instance=None): # type: (str, Optional[dict]) -> None self.db_user = db_user",
      "23": "def __init__(self, db_user: str, instance: Optional[Dict] = None): # type: Optional[str, Dict] -> None self.db_user = db_user",
      "24": "def __init__(self, db_user, instance=None): # type: (str, Dict, Optional[Dict]) -> None self.db_user = db_user",
      "25": "def __init__(self, db_user: Optional[Instance] = None): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "26": "def __init__(self, db_user, instance=None) -> None: # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "27": "def __init__(self, db_user: Optional[Dict] = None): # type: (str, Dict) -> None self.db_user = db_user",
      "28": "def __init__(self, db_user, instance=\"\"): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "29": "def __init__(self, db_user): # type: Optional[str, Dict] -> None self.db_user = db_user",
      "30": "def __init__(self, db_user: Optional[Dict] = None): # type: (str, Optional[Dict]] -> None self.db_user = db_user",
      "31": "def __init__(self, db_user: str, instance: Optional[Dict] = None) -> None self.db_user = db_user",
      "32": "def __init__(self, db_user: str, instance: Optional[Dict] = None) self.db_user = db_user",
      "33": "def __init__(self, db_user, instance=''): # type: (str, Dict) -> None self.db_user = db_user",
      "34": "def __init__(self, db_user: str, instance: Optional[Dict] = None): # type: (str, Optional[Dict]] -> None self.db_user = db_user",
      "35": "def __init__(self, db_user, instance=\"\"): # type: (str, Dict) -> None self.db_user = db_user",
      "36": "def __init__(self, db_user: str, instance=None): # type: (str, Dict) -> None self.db_user = db_user",
      "37": "def __init__(self, db_user, instance=False): # type: (str, Dict) -> None self.db_user = db_user",
      "38": "def __init__(self, db_user, instance=None): # type: (str, Optional[Dict]] -> None self.db_user = db_user",
      "39": "def __init__(self, db_user, instance=None): # type: (dict) -> None self.db_user = db_user",
      "40": "def __init__(self, db_user, instance=\"\"): # type: (str, Dict) -> None self.db_user = db_user",
      "41": "def __init__(self, db_user, instance=None): # type: (str, Dict, Optional[Dict]] -> None self.db_user = db_user",
      "42": "def __init__(self, db_user, instance=None): # type: (str, None) -> None self.db_user = db_user",
      "43": "def __init__(self, db_user): # type: (str) -> None self.db_user = db_user",
      "44": "def __init__(self, db_user, instance: Optional[Dict] = None): # type: (str, Optional[Dict]] -> None self.db_user = db_user",
      "45": "def __init__( self, db_user, instance=None ): # type: (str, Optional[Dict]) -> None self.db_user = db_user",
      "46": "def __init__(self, db_user, instance=None): # type: (str, Dict) -> Optional[Dict]: self.db_user = db_user",
      "47": "def __init__(self, db_user, instance=None): # type: Optional[str, Dict] = None self.db_user = db_user",
      "48": "def __init__(self, db_user, instance=None): # type: (Dict) -> None self.db_user = db_user",
      "49": "def __init__(self, db_user: Dict) -> None self.db_user = db_user"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        loop = loop or asyncio.get_event_loop()\n",
    "target_code": "\n    def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
    "warning_line": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 137,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fscdev/vkwave",
    "source_filename": "vkwave/bots/easy/easy_bot.py",
    "target_filename": "vkwave/bots/easy/easy_bot.py",
    "source_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc^",
    "target_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "predictions": [
      "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()"
    ],
    "correct": false,
    "top_five": {
      "0": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()",
      "1": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: loop = loop or asyncio.get_event_loop()",
      "2": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop(): loop = loop or asyncio.get_event_loop()",
      "3": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop() loop = loop or asyncio.get_event_loop()",
      "4": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop() loop = loop or asyncio.get_event_loop()",
      "5": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop(): loop = loop or asyncio.get_event_loop()",
      "6": "def run_forever(self, loops: Optional[asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()",
      "7": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.AbstractEventLoop: loop = loop or asyncio.get_event_loop()",
      "8": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Optional[asyncio.AbstractEventLoop]: loop = loop or asyncio.get_event_loop()",
      "9": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> bool: loop = loop or asyncio.get_event_loop()",
      "10": "def run_forever( self, loop: Optional[asyncio.AbstractEventLoop] = None ) -> None: loop = loop or asyncio.get_event_loop()",
      "11": "def run_forever( self, loop: Optional[asyncio.AbstractEventLoop] = None ): loop = loop or asyncio.get_event_loop()",
      "12": "def run_forever(self, loop: Optional[Asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()",
      "13": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Object: loop = loop or asyncio.get_event_loop()",
      "14": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.Get_event_loop() loop = loop or asyncio.get_event_loop()",
      "15": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop() -> None: loop = loop or asyncio.get_event_loop()",
      "16": "def run_forever(self, loop: asyncio.AbstractEventLoop): loop = loop or asyncio.get_event_loop()",
      "17": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.AbstractEvent: loop = loop or asyncio.get_event_loop()",
      "18": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop() -> None: loop = loop or asyncio.get_event_loop()",
      "19": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.Get_event_loop() loop = loop or asyncio.get_event_loop()",
      "20": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> str: loop = loop or asyncio.get_event_loop()",
      "21": "def run_forever( self, loop: Optional[asyncio.AbstractEventLoop] = None ) -> asyncio.get_event_loop() loop = loop or asyncio.get_event_loop()",
      "22": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> List[asyncio.AbstractEventLoop]: loop = loop or asyncio.get_event_loop()",
      "23": "def run_forever(self, loops: Optional[asyncio.AbstractEventLoop] = None) -> None: loop = loop or asyncio.get_event_loop()",
      "24": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> '': loop = loop or asyncio.get_event_loop()",
      "25": "def run_forever(self, loop: Optional[Asyncio.AbstractEventLoop] = None) -> None: loop = loop or asyncio.get_event_loop()",
      "26": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.ElasticEvent: loop = loop or asyncio.get_event_loop()",
      "27": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.ExtractEvent: loop = loop or asyncio.get_event_loop()",
      "28": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.Get_event_loop(): loop = loop or asyncio.get_event_loop()",
      "29": "def run_forever( self, loop: Optional[asyncio.AbstractEventLoop] = None ) -> Asyncio.get_event_loop() loop = loop or asyncio.get_event_loop()",
      "30": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None ): loop = loop or asyncio.get_event_loop()",
      "31": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> All: loop = loop or asyncio.get_event_loop()",
      "32": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.Events.None: loop = loop or asyncio.get_event_loop()",
      "33": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.ExtractEventLoop: loop = loop or asyncio.get_event_loop()",
      "34": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.Get_event_loop(): loop = loop or asyncio.get_event_loop()",
      "35": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop() if loop is not None: loop = loop or asyncio.get_event_loop()",
      "36": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> null: loop = loop or asyncio.get_event_loop()",
      "37": "def run_forever( self, loop: Optional[asyncio.AbstractEventLoop] = None ) -> asyncio.get_event_loop(): loop = loop or asyncio.get_event_loop()",
      "38": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop()",
      "39": "def run_forever(self, loop: Asyncio.AbstractEventLoop): loop = loop or asyncio.get_event_loop()",
      "40": "def run_forever(self, loop: Optional[asyncio.ABstractEventLoop] = None): loop = loop or asyncio.get_event_loop()",
      "41": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.events.None: loop = loop or asyncio.get_event_loop()",
      "42": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> none: loop = loop or asyncio.get_event_loop()",
      "43": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.False: loop = loop or asyncio.get_event_loop()",
      "44": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.Loop: loop = loop or asyncio.get_event_loop()",
      "45": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.RunForever() loop = loop or asyncio.get_event_loop()",
      "46": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop()",
      "47": "def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> No: loop = loop or asyncio.get_event_loop()",
      "48": "def run_forever(self, loop: asyncio.AbstractEventLoop ): loop = loop or asyncio.get_event_loop()",
      "49": "def run_forever(self, loop, Optional[asyncio.AbstractEventLoop] = None): loop = loop or asyncio.get_event_loop()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:\n",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_line": "        timestamp: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 207,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "open-telemetry/opentelemetry-python",
    "source_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "target_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226^",
    "target_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "predictions": [
      "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ) -> None:",
      "1": "attributes: types.Attributes = None, timestamp: Optional[int] = None, ) -> None:",
      "2": "attributes: types[Attributes] = None, timestamp: typing.Optional[int] = None, ) -> None:",
      "3": "attributes: types.Attributes = None, timestamps: typing.Optional[int] = None, ) -> None:",
      "4": "attributes: types.Attributes = None, timestamp: Type.Optional[int] = None, ) -> None:",
      "5": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, () -> None:",
      "6": "attributes: types[Attributes] = None, timestamp: Optional[int] = None, ) -> None:",
      "7": "attributes: types.Attributes, timestamp: typing.Optional[int] = None, ) -> None:",
      "8": "attributes: types.Attributes = None, timestamp_: typing.Optional[int] = None, ) -> None:",
      "9": "attributes: types.Attributes = None, timestamp: options.Optional[int] = None, ) -> None:",
      "10": "attributes: types.Attributes = None, timestamp: type[int] = None, ) -> None:",
      "11": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ), ) -> None:",
      "12": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None,...) -> None:",
      "13": "attributes: type.Attributes = None, timestamp: typing.Optional[int] = None, ) -> None:",
      "14": "attributes: types.Attributes = None, timestamp: type \"\"\" = None, ) -> None:",
      "15": "attributes: types.Attributes = None, timestamp: typing.Optional[ int] = None, ) -> None:",
      "16": "attributes: kinds.Attributes = None, timestamp: typing.Optional[int] = None, ) -> None:",
      "17": "attributes: types.Attributes = None, timestamp: typing.Optional[int], ) -> None:",
      "18": "attributes: types.Attributes = None, timestamp: optional[int] = None, ) -> None:",
      "19": "attributes: types.Attributes = None, timestamp: typing[int] = None, ) -> None:",
      "20": "attributes: types.Attributes = None, timestamps: Optional[int] = None, ) -> None:",
      "21": "attributes: types.Attributes = None, timestamp = Optional[int] = None, ) -> None:",
      "22": "attributes: types.Attributes = None, timetamp: typing.Optional[int] = None, ) -> None:",
      "23": "attributes: types.Attributes = None, timestamp: types.Optional[int] = None, ) -> None:",
      "24": "attributes: types.Attributes = None, timestamp: option[int] = None, ) -> None:",
      "25": "attributes: types.Attributes=None, timestamp: typing.Optional[int] = None, ) -> None:",
      "26": "attributes: options.Attributes = None, timestamp: Optional[int] = None, ) -> None:",
      "27": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None ) -> None:",
      "28": "attributes: types[Attributes], timestamp: typing.Optional[int] = None, ) -> None:",
      "29": "attributes: types.Attributes = None, timestamp: Optional[int] = None, () -> None:",
      "30": "attributes: types.Attributes = None, timestamp = typing.Optional[int] = None, ) -> None:",
      "31": "attributes: types.Attributes = None, timestamp: type.Optional[int] = None, ) -> None:",
      "32": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = none, ) -> None:",
      "33": "attributes: types.Attributes, timestamp: Optional[int] = None, ) -> None:",
      "34": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None,, ) -> None:",
      "35": "attributes: types.Attributes = None, timestamp: option.Optional[int] = None, ) -> None:",
      "36": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ):",
      "37": "attributes: types.Attributes = None, timestamp: Options.Optional[int] = None, ) -> None:",
      "38": "attributes: Types.Attributes = None, timestamp: Optional[int] = None, ) -> None:",
      "39": "attributes: types.Attributes = None, timestamp: type \"int\", ) -> None:",
      "40": "attributes: types.Attributes = None, timestamp: Type[int] = None, ) -> None:",
      "41": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None,) -> None:",
      "42": "attributes: types.Attributes = None, timestamp: type \"\" = None, ) -> None:",
      "43": "attributes: types.Attributes = None, timestamp: Optional[int] = None,...) -> None:",
      "44": "attributes: types.Attributes = None, timestamp: type=\"int\", ) -> None:",
      "45": "attributes: Type.Attributes = None, timestamp: Optional[int] = None, ) -> None:",
      "46": "attributes: types.Attributes = None, timestamp: use[int] = None, ) -> None:",
      "47": "attributes: types.Attributes = None, timestamp: int, ) -> None:",
      "48": "attributes: type.Attributes = None, timestamp: Optional[int] = None, ) -> None:",
      "49": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, ) | None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]\n\n",
    "target_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_line": "  supported_featurizers = ['ElementPropertyFingerprint'",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 161,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepchem/deepchem",
    "source_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "target_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b^",
    "target_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "predictions": [
      "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str]"
    ],
    "correct": true,
    "top_five": {
      "0": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str]",
      "1": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[str]",
      "2": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "3": "# First type of supported featurizers supported_featurizers_list = ['ElementPropertyFingerprint' ] # type: List[str]",
      "4": "# First type of supported featurizers supported_featurizers_ = ['ElementPropertyFingerprint' ] # type: List[str]",
      "5": "# First type of supported featurizers supported_featurizers_list = ['ElementPropertyFingerprint'] # type: List[str]",
      "6": "# First type of supported featurizers supported_featurizers_ = ['ElementPropertyFingerprint'] # type: List[str]",
      "7": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[Str]",
      "8": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[List[str]]",
      "9": "# First type of supported featurizers supported_featurizers__ = ['ElementPropertyFingerprint' ] # type: List[str]",
      "10": "# First type of supported featurizers supported_featurizers= ['ElementPropertyFingerprint'] # type: List[str]",
      "11": "# First type of supported featurizers supported_featurizers__ = ['ElementPropertyFingerprint'] # type: List[str]",
      "12": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "13": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[featurizer]",
      "14": "# First type of supported featurizers supported_featurizers_number = ['ElementPropertyFingerprint' ] # type: List[str]",
      "15": "# First type of supported featurizers supported_featurizers_number = ['ElementPropertyFingerprint'] # type: List[str]",
      "16": "# First type of supported featurizers supported_featurizers: List[str] = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "17": "# First type of supported featurizers supported_featurizers_fingerprint = ['ElementPropertyFingerprint'] # type: List[str]",
      "18": "# First type of supported featurizers supported_featurizers_list = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "19": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[Str]",
      "20": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[List[str]]",
      "21": "# First type of supported featurizers supported_featurizers_= ['ElementPropertyFingerprint'] # type: List[str]",
      "22": "# First type of supported featurizers supported_featurizers_type = ['ElementPropertyFingerprint'] # type: List[str]",
      "23": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' ] # type: List[Str]",
      "24": "# First type of supported featurizers supported_featurizers_list = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "25": "# First type of supported featurizers supported_featurizers = List['ElementPropertyFingerprint'] # type: List[str]",
      "26": "# First type of supported featurizers supported_featurizers_ = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "27": "# First type of supported featurizers supported_featurizers_ = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "28": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint' [] # type: List[str]",
      "29": "# First type of supported featurizers supported_featurizers_= ['ElementPropertyFingerprint' ] # type: List[str]",
      "30": "# First type of supported featurizers supported_featurizersList = ['ElementPropertyFingerprint'] # type: List[str]",
      "31": "# First type of supported featurizers supported_featurizers_num = ['ElementPropertyFingerprint'] # type: List[str]",
      "32": "# First type of supported featurizers supported_featurizers_type = ['ElementPropertyFingerprint' ] # type: List[str]",
      "33": "# First type of supported featurizers supported_featurizers_number = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "34": "# First type of supported featurizers supported_featurizers_number = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "35": "# First type of supported featurizers supported_featurizers_1 = ['ElementPropertyFingerprint' ] # type: List[str]",
      "36": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str].Featurizer",
      "37": "# First type of supported featurizers supported_featurizers_num = ['ElementPropertyFingerprint' ] # type: List[str]",
      "38": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str] # type: List[Featurizer]",
      "39": "# First type of supported featurizers supported_featurizers_count = ['ElementPropertyFingerprint'] # type: List[str]",
      "40": "# First type of supported featurizers supported_featurizers_fingerprint = ['ElementPropertyFingerprint' ] # type: List[str]",
      "41": "# First type of supported featurizers supported_featurizers__ = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "42": "# First type of supported featurizers supported_featurizers_list = ['ElementPropertyFingerprint' ] # type: List[Str]",
      "43": "# First type of supported featurizers supported_featurizers_2 = ['ElementPropertyFingerprint' ] # type: List[str]",
      "44": "# First type of supported featurizers supported_featurizers_path = ['ElementPropertyFingerprint' ] # type: List[Featurizer]",
      "45": "# First type of supported featurizers supported_featurizers= ['ElementPropertyFingerprint' ] # type: List[str]",
      "46": "# First kind of supported featurizers supported_featurizers = ['ElementPropertyFingerprint'] # type: List[str]",
      "47": "# First type of supported featurizers supported_featurizers.Fingerprint = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "48": "# First type of supported featurizers supported_featurizers_count = ['ElementPropertyFingerprint'] # type: List[Featurizer]",
      "49": "# First type of supported featurizers supported_featurizers = ['ElementPropertyFingerprint', [] # type: List[str]"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            if self is Bot:\n                Bot = new\n",
    "target_code": "            if self is Bot:\n                assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_line": "                Bot = new",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " Bot is declared to have type `BotUser` but is used as type `User`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User"
    ],
    "correct": false,
    "top_five": {
      "0": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "1": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "2": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "3": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "4": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "5": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "6": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "7": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "8": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_",
      "9": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "10": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "11": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "12": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "13": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "14": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "15": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "16": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "17": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "18": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "19": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "20": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "21": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "22": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "23": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "24": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "25": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_UserEr",
      "26": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_UserEr",
      "27": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User'User",
      "28": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User]",
      "29": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_UserEr",
      "30": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User-User",
      "31": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User-User",
      "32": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User'User",
      "33": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User()",
      "34": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_UserEr",
      "35": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User()",
      "36": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "37": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User-User",
      "38": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User'User",
      "39": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User-User",
      "40": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User()",
      "41": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,",
      "42": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "43": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User()",
      "44": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_UserEr",
      "45": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User'User",
      "46": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User.",
      "47": "if self is Bot: newBoot = newBoot['User'](newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User",
      "48": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User.",
      "49": "if self is Bot: newBoot = newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot['User'], newBoot[_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User_User,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_line": "        error: Exception = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `Exception` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 658,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86^",
    "target_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "predictions": [
      "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "1": "self, method_name: str, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "2": "self, method_name: str = None, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "3": "self, method_name: Optional[String] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "4": "self, method_name: Optional[Str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "5": "self, method_name: str = None, error: Optional[Exception] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "6": "self, method_name: Optional[str] = None, error: Exception, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "7": "self, method_name: str, error: Optional[Exception] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "8": "self, method_name: Optional[str] = None, error: Optional[ExException] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "9": "self, method_name: Optional[STR] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "10": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[baseSegment] = None, capture_error: Optional[bool] = None,",
      "11": "self, method_name: Optional[Str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "12": "self, method_name: Optional[ST] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "13": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "14": "self, method_name: str = None, error: Exception, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "15": "self, method_name: Optional[str] = None, error: Optional[Example] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "16": "self, method_name: Optional[str] = None, error: Optional[Exexception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "17": "self, method_name: Optional[str] = None, error: Optional[exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "18": "self, method_name: Exception, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "19": "self, method_name: Optional[str] = None, error: Optional[Type[Exception]] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "20": "self, method_name: str, error: Optional[Exception] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "21": "self, method_name: Optional[str] = None, error: Optional[Optional[Exception]] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "22": "self, method_name: str = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "23": "self, method_name: Optional[str] = None, error: Optional[External] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "24": "self, method_name: str, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "25": "self, method_name: Optional[str] = None, error: Optional[Expression] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "26": "self, method_name: Optional[str] = None, error: Options[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "27": "self, method_name: Optional[str] = None, error: Exception, subsegment: Optional[baseSegment] = None, capture_error: Optional[bool] = None,",
      "28": "self, method_name: str = None, error: Optional[Exception] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "29": "self, method_name: str = None, error: Optional[Type[Exception]] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "30": "self, method_name: Optional[str] = None, error: Optional[ExException] = None, subsegment: Optional[baseSegment] = None, capture_error: Optional[bool] = None,",
      "31": "self, method_name: str = None, error: Optional[Example] = None, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "32": "self, method_name: Exception, error: Optional[Exception] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "33": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment|None] = None, capture_error: Optional[bool] = None,",
      "34": "self, method_name: str = None, error: TypeError, subsegment: BaseSegment = None, capture_error: Optional[bool] = None,",
      "35": "self, method_name: str, error: TypeError, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "36": "self, method_name: Str = None, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "37": "self, method_name: str = '', error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "38": "self, method_name: str = None, error: Exception, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "39": "self, method_name: str, error: Exception, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "40": "self, method_name: str, error: Optional[Type[Exception]] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "41": "self, method_name: str, error: Optional[Example] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "42": "self, method_name: None, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "43": "self, method_name: String, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "44": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None,",
      "45": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "46": "self, method_name, Exception: Exception, error: Exception, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "47": "self, method_name: str = None, error: TypeError, subsegment: BaseSegment, capture_error: Optional[bool] = None,",
      "48": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, catch_error: Optional[bool] = None,",
      "49": "self, method_name: Optional[str] = None, error: Optional[Exception] = None, subsegment: Optional[BaseSegment] = None, captured_error: Optional[bool] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        details = details.split(\", \")\n\n",
    "target_code": "\n        split_details = details.split(\", \")\n\n",
    "warning_line": "        details = details.split(\", \")",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " details is declared to have type `str` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 229,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hsahovic/poke-env",
    "source_filename": "src/poke_env/environment/pokemon.py",
    "target_filename": "src/poke_env/environment/pokemon.py",
    "source_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7^",
    "target_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "predictions": [
      "details = lists.split(\", \")"
    ],
    "correct": false,
    "top_five": {
      "0": "details = lists.split(\", \")",
      "1": "details = details.split(\", \")",
      "2": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "3": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "4": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "5": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "6": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "7": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "8": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "9": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "10": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "11": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "12": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "13": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "14": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "15": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "16": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "17": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \".s/g, \"../g, \"../g, \"../g, \"../g,",
      "18": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "19": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \".s/g, \"../g, \"../g, \"../g, \"../g,",
      "20": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "21": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "22": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \".s/g, \"../g, \"../g, \"../g, \"../g,",
      "23": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "24": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "25": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "26": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "27": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "28": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \".s/g, \"../g, \"../g, \"../g, \"../g,",
      "29": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "30": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \".s/g, \"../g, \"../g, \"../g, \"../g,",
      "31": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "32": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "33": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "34": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "35": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \".s/g, \"../g, \"../g, \"../g, \"../g,",
      "36": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "37": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "38": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "39": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "40": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "41": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "42": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "43": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "44": "details = details.split(\", \") if isinstance(str, isinstance(str), isinstance(str, isinstance(str), isinstance(str, isinstance(str), isinstance(str, isinstance(str), isinstance(str, isinstance(str), isinstance(str, isinstance(str, isinstance(str), isinstance(str),",
      "45": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "46": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "47": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g,",
      "48": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"./g, \"../g,",
      "49": "details = details.split((\", \")).replace(/ \\ } s/g, \"\").replace(/ \\ s/g, \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g\", \"../g, \"../g, \"../g, \"../g, \"../g, \"../g, \"./g, \"../g,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,  # type: int\n    max_size=None,  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,  # type: None\n    max_size=None,  # type: int\n",
    "warning_line": "    average_size=None,  # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 705,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int average_size=None, # type: None max_size=None, # type: int"
    ],
    "correct": true,
    "top_five": {
      "0": "min_size=0, # type: int average_size=None, # type: None max_size=None, # type: int",
      "1": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None, # type: int",
      "2": "min_size=0, # type: None average_size=None, # type: None max_size=None, # type: int",
      "3": "min_size=0, # type: Optional[int] average_size=None, # type: Optional[int] max_size=None, # type: int",
      "4": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None, # type: int",
      "5": "min_size=0, # type: int average_size=None, # type: int max_size=None, # type: int",
      "6": "min_size=0, # type: int average_size=None, # type: none max_size=None, # type: int",
      "7": "min_size=0, # type: none average_size=None, # type: None max_size=None, # type: int",
      "8": "min_size=0, # type: option[int] average_size=None, # type: Optional[int] max_size=None, # type: int",
      "9": "min_size=0, # type: int average_size=None, # type: option[int] max_size=None, # type: int",
      "10": "min_size=0, # type: Int average_size=None, # type: Optional[int] max_size=None, # type: int",
      "11": "min_size=0, # type: None average_size=None, # type: int max_size=None, # type: int",
      "12": "min_size=0, # type: Int average_size=None, # type: None max_size=None, # type: int",
      "13": "min_size=0, # type: typing.Optional[int] average_size=None, # type: typing.Optional[int] max_size=None, # type: int",
      "14": "min_size=0, # type: _int average_size=None, # type: _int max_size=None, # type: int",
      "15": "min_size=0, # type: zero average_size=None, # type: None max_size=None, # type: int",
      "16": "min_size=0, # type: default int average_size=None, # type: default int max_size=None, # type: int",
      "17": "min_size=0, # type: none average_size=None, # type: Optional[int] max_size=None, # type: int",
      "18": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None, # type: int",
      "19": "min_size=0, # type: int average_size=None, # type: Alternative[int] max_size=None, # type: int",
      "20": "min_size=0, # type: Array.prototype.int average_size=None, # type: None max_size=None, # type: int",
      "21": "min_size=0, # type: None average_size=None, # type: Int max_size=None, # type: int",
      "22": "min_size=0, # type: args average_size=None, # type: args max_size=None, # type: int",
      "23": "min_size=0, # type: options.int average_size=None, # type: options.int max_size=None, # type: int",
      "24": "min_size=0, # type: int average_size=None, # type: bool max_size=None, # type: int",
      "25": "min_size=0, # type: int average_size=None, # type=None max_size=None, # type: int",
      "26": "min_size=0, # type: int average_size=None, # type: Zero max_size=None, # type: int",
      "27": "min_size=0, # type: 'int' average_size=None, # type: 'int' max_size=None, # type: int",
      "28": "min_size=0, # type: option[int] average_size=None, # type: option[int] max_size=None, # type: int",
      "29": "min_size=0, # type: Alternative[int] average_size=None, # type: Alternative[int] max_size=None, # type: int",
      "30": "min_size=0, # type: int average_size=None, # type: options.int max_size=None, # type: int",
      "31": "min_size=0, # type: int average_size=None, # type: Modem[int] max_size=None, # type: int",
      "32": "min_size=0, # type: int average_size=None, # type: Options.int max_size=None, # type: int",
      "33": "min_size=0, # type: int average_size=None, # type: zero max_size=None, # type: int",
      "34": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None, # type: int",
      "35": "min_size=0, # type: int average_size=None, # type: Int max_size=None, # type: int",
      "36": "min_size=0, # type: Object[int] average_size=None, # type: int max_size=None, # type: int",
      "37": "min_size=0, # type: Zero average_size=None, # type: None max_size=None, # type: int",
      "38": "min_size=0, # type: int average_size=None, # type: choice[int] max_size=None, # type: int",
      "39": "min_size=0, # type: int average_size=None, # type: Options[int] max_size=None, # type: int",
      "40": "min_size=0, # type: Array[int] average_size=None, # type: None max_size=None, # type: int",
      "41": "min_size=0, # type: _int average_size=None, # type: _int max_size=None, # type: _int",
      "42": "min_size=0, # type: str average_size=None, # type: str max_size=None, # type: int",
      "43": "min_size=0, # type: int average_size=None, # int max_size=None, # type: int",
      "44": "min_size=0, # type: int average_size=None, # type: 0 max_size=None, # type: int",
      "45": "min_size=0, # type: int average_size=NONE, # type: None max_size=None, # type: int",
      "46": "min_size=0, # type: String average_size=None, # type: String max_size=None, # type: int",
      "47": "min_size=0, # type: int average_size=None, # type: None max_size=None, # type: Int",
      "48": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None, # type: optional[int]",
      "49": "min_size=0, # type: # int average_size=None, # type: None max_size=None, # type: int"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: str = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
    "target_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
    "warning_line": "        datefmt: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " datefmt is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 63,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/logging/formatter.py",
    "target_filename": "aws_lambda_powertools/logging/formatter.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,"
    ],
    "correct": true,
    "top_five": {
      "0": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "1": "json_default: Optional[Callable[[Any], Any]] = None, _datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "2": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_order: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "3": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_str: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "4": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[Str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "5": "json_default: Optional[Callable[[Any], Any]] = None, datefmt = Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "6": "json_default: Optional[Callable[[Any], Any]] = None, dayfmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "7": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str], None] = None, utc: bool = False,",
      "8": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_list: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "9": "json_default: Optional[Callable[[Any], Any]] = None, datefmts: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "10": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[list[str]] = None, utc: bool = False,",
      "11": "json_default: Optional[Callable[[Any], Any]] = None,...datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "12": "json_default: Optional[Callable[[Any], Any]] = None, datefmt__: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "13": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: False,",
      "14": "json_default: Optional[Callable[[Any], Any]] = None, dat_fmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "15": "json_default: Optional[Callable[[Any], Any]] = None, datafmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "16": "json_default: Optional[Callable[[Any], Any]] = None, datfmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "17": "json_default: Optional[Callable[[any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "18": "json_default: Optional[Callable[[Any], Any]]: None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "19": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_params: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "20": "json_default: Optional[Callable[[Any, Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "21": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_options: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "22": "json_default: Optional[Callable[[Any], Any]] = None, datefmt, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "23": "json_default: Optional[Callable[[Any], Any]] = None, dt = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "24": "json_default: Optional[Callable[[Any], Any]] = None, fmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "25": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str], Optional[List[str]] = None, utc: bool = False,",
      "26": "json_default: Optional[Callable[[Any], Any]], datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "27": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_id: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "28": "json_default: Optional[Callable[[Any], Any]] = None, timefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "29": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,...",
      "30": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_length: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "31": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_name: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "32": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_count: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "33": "json_default: Optional[Callable[[Any], Any]] = None, str: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "34": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[String] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "35": "json_default: Optional[Callable[[Any], Any]] = None, datefmt_type: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "36": "json_default: Optional[Callable[[Any], Any]] = None, datmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "37": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Union[str, None] = None, log_record_order: Union[List[str, None]] = None, utc: bool = False,",
      "38": "json_default: Optional[Callable[[Any], Any]] = None, Datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "39": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = False, utc: bool = False,",
      "40": "json_default: Optional[Callable[[Any], Any]] = None, datefmt, log_record_order: List[str] = None, utc: bool = False,",
      "41": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str, None]] = None, utc: bool = False,",
      "42": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str], log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "43": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Options[List[str]] = None, utc: bool = False,",
      "44": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: str = \"\", log_record_order: List[str] = \"\", utc: bool = False,",
      "45": "json_default: Optional[Callable[[Any], Any]] = None, dt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,",
      "46": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[Str]] = None, utc: bool = False,",
      "47": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, utc: bool = True,",
      "48": "json_default: Optional[Callable[[Any], Any]] = None, datefmt=None, log_record_order=None, utc: bool = False,",
      "49": "json_default: Optional[Callable[[Any], Any]] = None, log_record_order: Optional[List[str]] = None, utc: bool = False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
    "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
    "warning_line": "        channel_index: int = Deprecated,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 72,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/estimators/classification/keras.py",
    "target_filename": "art/estimators/classification/keras.py",
    "source_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c^",
    "target_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "predictions": [
      "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,"
    ],
    "correct": true,
    "top_five": {
      "0": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "1": "use_logits: bool = False, channel_indices: Art.utils._Deprecated, channels_first: bool = False,",
      "2": "use_logits: bool = False, channel_indices: Deprecated, channels_first: bool = False,",
      "3": "use_logits: bool = False, channel_index = Deprecated, channels_first: bool = False,",
      "4": "use_logits: bool = False, channel_first: bool = False,",
      "5": "usage_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "6": "use_logits: bool = False, channel_index_0 = Deprecated, channels_first: bool = False,",
      "7": "use_logits: bool = False, channel_indices: Union[int, Deprecated] = Deprecated, channels_first: bool = False,",
      "8": "use_logits: bool = False, channel_indices: Optional[int] = Deprecated, channels_first: bool = False,",
      "9": "use_logits: bool = False, channel_int = Deprecated, channels_first: bool = False,",
      "10": "use_logits: bool = False, channel_index_=Deprecated, channels_first: bool = False,",
      "11": "use_logits: bool = False, channel_index=Deprecated, channel_first: bool = False,",
      "12": "use_logits: bool = False, channel_index_str = Deprecated, channels_first: bool = False,",
      "13": "use_logits: bool = False, channel_index=\"Deprecated\", channels_first: bool = False,",
      "14": "use_logits: bool = False, channel_id = Deprecated, channels_first: bool = False,",
      "15": "use_logits: bool = False, channel_index_1 = Deprecated, channels_first: bool = False,",
      "16": "use_logits: bool = False, channel_ index=Deprecated, channels_first: bool = False,",
      "17": "use_logits: bool = False, channel_indices: Union[int, Deprecated], channels_first: bool = False,",
      "18": "use_logits: bool = False, channel_index_num = Deprecated, channels_first: bool = False,",
      "19": "use_logits: bool = False, channel_indices: deprecated, channels_first: bool = False,",
      "20": "use_logits: bool = False, channel_index_int = Deprecated, channels_first: bool = False,",
      "21": "use_logits: bool = False, channel_index_deprecated: Deprecated, channels_first: bool = False,",
      "22": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False, deprecated_channels: bool = False,",
      "23": "use_logits: bool = False, channel_index=Deprecated(int), channels_first: bool = False,",
      "24": "use_logits: bool = False, channel_index=Deprecated_, channels_first: bool = False,",
      "25": "use_logits: bool = False, channel_indexed=Deprecated, channels_first: bool = False,",
      "26": "use_logits: bool = False, channel_index: Deprecated, channels_first: bool = False,",
      "27": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False, deprecated_channels: int = Deprecated_channels,",
      "28": "use_logits: bool = False, channel_length=Deprecated, channels_first: bool = False,",
      "29": "using_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "30": "use_logits: bool = False, channel_indices: int = Deprecated, channels_first: bool = False,",
      "31": "use_logits: bool = False, channel_index_unicode = Deprecated, channels_first: bool = False,",
      "32": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "33": "use_logits: bool = False, channel_index_2: Deprecated, channels_first: bool = False,",
      "34": "use_logits: bool = False, channel_index=Deprecated[0], channels_first: bool = False,",
      "35": "use_logits: bool = False, channel_indices=Deprecated, channels_first: bool = False,",
      "36": "use_logits: bool = False, channel_index_default = Deprecated, channels_first: bool = False,",
      "37": "use_logits: bool = False, channel_index_1: Deprecated, channels_first: bool = False,",
      "38": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False, deprecated_channels: int = Deprecated,",
      "39": "use_logits: bool = False, channel_second: bool = False, channels_first: bool = False,",
      "40": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "41": "use_logits: bool = False, channel_indexes: Deprecated, channels_first: bool = False,",
      "42": "use_logits: bool = False, channel_index_max = Deprecated, channels_first: bool = False,",
      "43": "use_logits: bool = False, channel_indices: int, channels_first: bool = False,",
      "44": "use_logits: bool = False, channel_length: Deprecated, channels_first: bool = False,",
      "45": "use_logit: bool = False, channel_index=Deprecated, channels_first: bool = False,",
      "46": "use_logits: bool = False, channel_index=Missing(int), channels_first: bool = False,",
      "47": "use_logits: bool = False, channel_index=Deprecated, channels_first: bool = False, deprecated_channels: Deprecated_channels,",
      "48": "use_logits: bool = False, channel_index=Deprecated.default, channels_first: bool = False,",
      "49": "use_logits: bool = False, channel_Index=Deprecated, channels_first: bool = False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def rjust(self, width, fillchar=None):\n        # type: (int, Text) -> FmtStr\n        \"\"\"S.rjust(width[, fillchar]) -> string\n",
    "target_code": "\n    def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr:\n        \"\"\"S.rjust(width[, fillchar]) -> string\n",
    "warning_line": "    def rjust(self, width, fillchar=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fillchar is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 513,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bpython/curtsies",
    "source_filename": "curtsies/formatstring.py",
    "target_filename": "curtsies/formatstring.py",
    "source_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413^",
    "target_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413",
    "predictions": [
      "def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string"
    ],
    "correct": true,
    "top_five": {
      "0": "def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "1": "def rjust(self, width, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "2": "def rjust(self, width: int, fillchar: Optional[str]=None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "3": "def rjust(self, width: int, fillchar: Optional[str] = None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "4": "def rjust(self, width: int, fillchar: Optional[str]=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "5": "def rjust(self, width, fillchar=None): # type: (int, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "6": "def rjust(self, width, fillchar=None): # type: (Optional[int, Text]) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "7": "def rjust(self, width, fillchar=None): # type: (int, FmtStr) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "8": "def rjust(self, width, fillchar=None): # type: (int, String) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "9": "def rjust(self, width: int, fillchar=None): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "10": "def rjust(self, width: int, fillchar=None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "11": "def rjust(self, width): # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "12": "def rjust(self, width: int, fillchar: Optional[str]=None): # type: (int, Text) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "13": "def rjust(self, width: int, fillchar=None): # type: (int, Text) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "14": "def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "15": "def rjust(self, width, fillchar=None): # type: (Int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "16": "def rjust(self, width, fillchar=None): # type: (int, Optional[Text]) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "17": "def rjust(self, width: int, fillchar: Optional[str] = None): # type: (int, Text) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "18": "def rjust(self, width, fillchar=None): # type: (int, text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "19": "def rjust(self, width, fillchar=None): # type: (int, (Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "20": "def rjust(self, width: int, fillchar: Optional[str] = None: # type: (int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "21": "def rjust(self, width, fillchar=None): # type: (int, (Text)) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "22": "def rjust(self, width: int, fillchar: Optional[str] = None ) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "23": "def rjust(self, width, fillchar=None): # type: (Int, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "24": "def rjust(self, width, fillchar=None): # type: (str, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "25": "def rjust(self, width, fillchar=None): # type: (int,...) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "26": "def rjust(self, width, fillchar=None): # type: (int, int, FmtStr) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "27": "def rjust(self, width, fillchar=None): # type: (int, int) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "28": "def rjust(self, width, fillchar=None): # type: () -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "29": "def rjust(self, width, fillchar=None): # type: (int, int, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "30": "def rjust(self, width: int, fillchar=None): # type: (int, int, Text) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "31": "def rjust(self, width: Int, fillchar: Optional[str] = None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "32": "def rjust(self, width: int, fillchar: Optional[str] = None -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "33": "def rjust(self, width, fillchar=None) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "34": "def rjust(self, width, fillchar=None): # type: (str, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "35": "def rjust(self, width, fillchar=None): # type: (Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "36": "def rjust(self, width: int, fillchar=None): # type: (int, String) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "37": "def rjust(self, width: int, fillchar: Optional[str] = None: # type: (int, Text) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "38": "def rjust(self, width, fillchar=None): # type: (int, \"\"\"S.rjust(width[, fillchar]) -> string",
      "39": "def rjust(self, width, fillchar=None): # type: (String) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "40": "def rjust(self, width: \"\"\"S.rjust(width[, fillchar]) -> string: # type: (int, Text) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "41": "def rjust(self, width): # type: (int, FmtStr) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "42": "def rjust(self, width): # type: (int, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "43": "def rjust( self, width: int, fillchar: Optional[str] = None ) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string",
      "44": "def rjust(self, width: int, fillchar=None): # type: (Optional[int, Text]) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "45": "def rjust(self, width: int, fillchar=None): # type: (int, int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "46": "def rjust(self, width: int, fillchar=None): # type: (Int, Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "47": "def rjust(self, width, fillchar=None): # type: (int, File) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "48": "def rjust(self, width, fillchar=None): # type: int(Text) -> FmtStr \"\"\"S.rjust(width[, fillchar]) -> string",
      "49": "def rjust(self, width: int, fillchar=None): # type: (Optional[int, Text]) -> FmtStr: \"\"\"S.rjust(width[, fillchar]) -> string"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None\n) -> str:\n",
    "target_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
    "warning_line": "    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exclude is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 108,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/cli/info.py",
    "target_filename": "spacy/cli/info.py",
    "source_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979^",
    "target_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979",
    "predictions": [
      "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:"
    ],
    "correct": true,
    "top_five": {
      "0": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "1": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "2": "def get_markdown( data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "3": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[list[str]] = None ) -> str:",
      "4": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[Str] = None ) -> str:",
      "5": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None ) -> str:",
      "6": "def get_markdown( data: Optional[dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "7": "def get_markdown( data: Dict[str, Any], title: Optional[str] = \"\", exclude: Optional[str] = \"\") -> str:",
      "8": "def get_markdown( data: Optional[Dict[str, Any]], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "9": "def get_markdown( data: Dict[str, Any], title: Optional[str] = All, exclude: Optional[str] = None ) -> str:",
      "10": "def get_markdown( data: Dict[str, Any], title: Optional[str] = \"\", exclude: Optional[str] = \"\" ) -> str:",
      "11": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "12": "def get_markdown( data: Dict[str, Any], title: Optional[str] = All, exclude: Optional[List[str]] = None ) -> str:",
      "13": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "14": "def get_markdown( data: Dict[str, Any], title: Optional[str] = [], exclude: Optional[str] = [] ) -> str:",
      "15": "def get_markdown( data: Dict[str, Any], title: Optional[str] = (), exclude: Optional[str] = () ) -> str:",
      "16": "def get_markdown( data: Optional[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "17": "def get_markdown( data: Dict[str, Any], title: Optional[str] = Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "18": "def get_markdown( data: Dict[str, Any], title: Optional[str] = '', exclude: Optional[str] = '' ) -> str:",
      "19": "def get_markdown( data: Dict[str, Any], title: Optional[str] = (), exclude: Optional[str] = None ) -> str:",
      "20": "def get_markdown( data: Dict[str, Any], title: Optional[str], exclude: Optional[str] = None ) -> str:",
      "21": "def get_markdown( data: Optional[Dict[str, Any]] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "22": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None, exclude: Optional[List[str]] = None ) -> str:",
      "23": "def get_markdown( data: Dict[str, Any] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "24": "def get_markdown( data: Dict[str, Any], title: Optional[str] | Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "25": "def get_markdown( data: Dict[str, Any], title: Optional[str, Any] = None, exclude: Optional[str] = None ) -> str:",
      "26": "def get_markdown( data: Dict[str, Any] = None, title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "27": "def get_markdown( data: Dict[str, Any], title: Optional[str, Optional[str]] = None, exclude: Optional[List[str]] = None ) -> str:",
      "28": "def get_markdown( data: Dict[str, Any], title: Optional[str, Any] = None, exclude: Optional[List[str]] = None ) -> str:",
      "29": "def get_markdown( data: Dict[str, Any], title: Optional[str] = Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "30": "def get_markdown( data: Optional[Dict[str, Any], title: Optional[str]] = None, exclude: Optional[List[str]] = None ) -> str:",
      "31": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "32": "def get_markdown( data: Optional[str] = None, title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "33": "def get_markdown( data: List[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "34": "def get_markdown( data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "35": "def get_markdown( data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None, exclude: Optional[List[str]] = None ) -> str:",
      "36": "def get_markdown( data: Dict[str, Any], title: Optional[str] = 'Optional', exclude: Optional[str] = '' ) -> str:",
      "37": "def get_markdown( data: Optional[Str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "38": "def get_markdown( data: Optional[dict[str, Any], title: Optional[str] = None, exclude: Optional[str] = None ) -> str:",
      "39": "def get_markdown( data: Dict[str, Any], title: Optional[str] = Any, exclude: Optional[str] = None ) -> str:",
      "40": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str], None] = None ) -> str:",
      "41": "def get_markdown( data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[Str] = None ) -> str:",
      "42": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None, exclude: Optional[str] = None ) -> str:",
      "43": "def get_markdown( data: List[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:",
      "44": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[Label[str]] = None ) -> str:",
      "45": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[ List[str]] = None ) -> str:",
      "46": "def get_markdown( data: Dict[str, Any], title: Optional[str] = (), exclude: Optional[List[str]] = None ) -> str:",
      "47": "def get_markdown( data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str: Optional[str] = None",
      "48": "def get_markdown( data: Dict[str, Any], title: Optional[str] = Any, exclude: Optional[List[str]] = None ) -> str:",
      "49": "def get_markdown( data: Optional[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None ) -> str:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "target_code": "\ndef batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_line": "def batch_start(identifier: str, batch_type: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 84,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],"
    ],
    "correct": false,
    "top_five": {
      "0": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "1": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "2": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "3": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "4": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "5": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "6": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "7": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "8": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "9": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags]= { )",
      "10": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "11": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "12": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "13": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "14": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "15": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "16": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=None)",
      "17": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], [\"+%s\" % identifier, batch_type],",
      "18": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], batch_type)",
      "19": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "20": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag: typing.Dict[str, str]= { } )",
      "21": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=",
      "22": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "23": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "24": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags]= { )",
      "25": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "26": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "27": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags]= { } )",
      "28": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags:",
      "29": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=])",
      "30": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "31": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], str)",
      "32": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=args)",
      "33": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags]= } )",
      "34": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "35": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]] = None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
      "36": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str]= { } )",
      "37": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], [\"+%s\" % identifier, batch_type])",
      "38": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "39": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "40": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "41": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=None): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "42": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag)",
      "43": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags: dict= { } )",
      "44": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "45": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "46": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=",
      "47": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags=None)",
      "48": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tag): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], dict)",
      "49": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)\n",
    "target_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
    "warning_line": "    def add(self, verb: str, func: Callable, privilege: str=None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " privilege is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "1": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "2": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "3": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "4": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None:",
      "5": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = {",
      "6": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "7": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "8": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None:",
      "9": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = { \"\"\"",
      "10": "def __init__(self) -> None: self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "11": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: self.validatefunc(func):",
      "12": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "13": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "14": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None:",
      "15": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func): \"\"\"",
      "16": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None:",
      "17": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "18": "def __init__(self) -> None: self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=) -> None: self.validatefunc(func)",
      "19": "def __init__(self) -> None: self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "20": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: self.validatefunc(func):",
      "21": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "22": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = []",
      "23": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str='') -> None: self.validatefunc(func)",
      "24": "def __init__(self) -> None: self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "25": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = {",
      "26": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func)",
      "27": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=None) -> None: self.validatefunc(func):",
      "28": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = None:",
      "29": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = None",
      "30": "def __init__(self) -> None: self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "31": "def __init__(self) -> None: self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "32": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): set() def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "33": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "34": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func): \"\"\"",
      "35": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: self.validatefunc(func)",
      "36": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: self.validatefunc(func):",
      "37": "def __init__(self) -> None: self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=) -> None: self.validatefunc(func):",
      "38": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = { \"\"\"",
      "39": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str='') -> None: self.validatefunc(func):",
      "40": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: self.validatefunc(func) -> None:",
      "41": "def __init__(self) -> None: self.commands_per_priv = { All: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "42": "def __init__(self) -> None: self.commands_per_priv = { All: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "43": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "44": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func)",
      "45": "def __init__(self) -> None: self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None:",
      "46": "def __init__(self) -> None: self.commands_per_priv: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set(): set() def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func):",
      "47": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) = None:",
      "48": "def __init__(self) -> None: self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=) -> None: self.validatefunc(func) -> None:",
      "49": "def __init__(self) -> None: self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] self.no_soul_parsing = set() # type: Set[str] def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: self.validatefunc(func) -> None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": true,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef unpack_model(model_file: Text, working_directory: Text = None,\n                 subdirectories: bool = False\n",
    "target_code": "\ndef unpack_model(model_file: Text, working_directory: Optional[Text] = None,\n                 subdirectories: bool = False\n",
    "warning_line": "def unpack_model(model_file: Text, working_directory: Text = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " working_directory is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/model.py",
    "target_filename": "rasa/model.py",
    "source_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7^",
    "target_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7",
    "predictions": [
      "def unpack_model(model_file: Text, working_directory: Optional[Text] = None, subdirectories: bool = False"
    ],
    "correct": true,
    "top_five": {
      "0": "def unpack_model(model_file: Text, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "1": "def unpack_model(model_file: Text, working_directory: Text, subdirectories: bool = False",
      "2": "def unpack_model(model_file: Text, working_directory: Union[Text, None] = None, subdirectories: bool = False",
      "3": "def unpack_model(model_file: Text, working_directory: Options.Text = None, subdirectories: bool = False",
      "4": "def unpack_model(model_file: Text, working_directory: Options[Text] = None, subdirectories: bool = False",
      "5": "def unpack_model(model_file: Text, working_directory: typing.Optional[Text] = None, subdirectories: bool = False",
      "6": "def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, subdirectories: bool = False",
      "7": "def unpack_model(model_file: Text, working_directory: Optional[text] = None, subdirectories: bool = False",
      "8": "def unpack_model(model_file: Text, working_directory: option[Text] = None, subdirectories: bool = False",
      "9": "def unpack_model( model_file: Text, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "10": "def unpack_model(model_file: Text, working_directory: Union[Text, Optional[Text]] = None, subdirectories: bool = False",
      "11": "def unpack_model(model_file: Text, text_working_directory: Optional[Text] = None, subdirectories: bool = False",
      "12": "def unpack_model(model_file: Text, working_directory: Optional[Test] = None, subdirectories: bool = False",
      "13": "def unpack_model(model_file: Text, working_directory: Optional[T] = None, subdirectories: bool = False",
      "14": "def unpack_model(model_file: Text, working_directory: List[Text] = None, subdirectories: bool = False",
      "15": "def unpack_model(model_file: Text, working_directory: Optional[Tab] = None, subdirectories: bool = False",
      "16": "def unpack_model(model_file: Text, working_directory: Optional[Str] = None, subdirectories: bool = False",
      "17": "def unpack_model(model_file: Text, working_directory: Optional[str] = None, subdirectories: bool = False",
      "18": "def unpack_model(model_file: Text, working_directory: Argument[Text] = None, subdirectories: bool = False",
      "19": "def unpack_model(model_file: Text, working_directory: Options.Optional[Text] = None, subdirectories: bool = False",
      "20": "def unpack_model(model_file: Text, working_directory: Alternative[Text] = None, subdirectories: bool = False",
      "21": "def unpack_model(model_file: Text, text_directory: Optional[Text] = None, subdirectories: bool = False",
      "22": "def unpack_model(model_file: Text, working_directory: Optional[Task] = None, subdirectories: bool = False",
      "23": "def unpack_model(model_file: Text, working_directory: tuple[Text] = None, subdirectories: bool = False",
      "24": "def unpack_model(model_file: Text, working_directory: optional[Text] = None, subdirectories: bool = False",
      "25": "def unpack_model(model_file: Text, working_directory: options.Text = None, subdirectories: bool = False",
      "26": "def unpack_model(model_file: Text, working_directory: Standard[Text] = None, subdirectories: bool = False",
      "27": "def unpack_model(model_file: Text, text_working_directory: Text, subdirectories: bool = False",
      "28": "def unpack_model(model_file: text, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "29": "def unpack_model(model_file: Text, working_directory: Useful[Text] = None, subdirectories: bool = False",
      "30": "def unpack_model(model_file: Text, working_directory: Optional[String] = None, subdirectories: bool = False",
      "31": "def unpack_model(model_file: Text, working_directory: choice[Text] = None, subdirectories: bool = False",
      "32": "def unpack_model(model_file: Text, working_directory: Selector[Text] = None, subdirectories: bool = False",
      "33": "def unpack_model(model_file: Text, working_directory: text, subdirectories: bool = False",
      "34": "def unpack_model(model_file: Model, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "35": "def unpack_model(model_file: Text, working_directory: Tabs.Text = None, subdirectories: bool = False",
      "36": "def unpack_model(model_file: Text, working_directory: str = \"\", subdirectories: bool = False",
      "37": "def unpack_model(model_file: Text, working_directory: Choice[Text] = None, subdirectories: bool = False",
      "38": "def unpack_model(model_file: Text, working_directory: str(Text), subdirectories: bool = False",
      "39": "def unpack_model(model_file: Text, working_directory: str = None, subdirectories: bool = False",
      "40": "def unpack_model(model_file, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "41": "def unpack_model(model_file: Text, working_directory: \"\", subdirectories: bool = False",
      "42": "def unpack_model(model_file: Text, working_directory: Optional[Text] = None, subdirectories: bool = False,",
      "43": "def unpack_model(model_file: Text, working_directory: T.Text, subdirectories: bool = False",
      "44": "def unpack_model(model_file: Text, working_directory: bool = None, subdirectories: bool = False",
      "45": "def unpack_model(model_file: Text, working_directory: str = None, subdirectories: bool = False",
      "46": "def unpack_model(Model, working_directory: Optional[Text] = None, subdirectories: bool = False",
      "47": "def unpack_model(model_file: Text, working_directory: Type = None, subdirectories: bool = False",
      "48": "def unpack_model(model_file: Text, working_directory: String = None, subdirectories: bool = False",
      "49": "def unpack_model(model_file: Text, working_directory: Any = None, subdirectories: bool = False"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef translateAlgebra(query_algebra: Query = None):\n    \"\"\"\n",
    "target_code": "\ndef translateAlgebra(query_algebra: Query):\n    \"\"\"\n",
    "warning_line": "def translateAlgebra(query_algebra: Query = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " query_algebra is declared to have type `Query` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 804,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RDFLib/rdflib",
    "source_filename": "rdflib/plugins/sparql/algebra.py",
    "target_filename": "rdflib/plugins/sparql/algebra.py",
    "source_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c^",
    "target_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "predictions": [
      "def translateAlgebra(query_algebra: Optional[Query] = None): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def translateAlgebra(query_algebra: Optional[Query] = None): \"\"\"",
      "1": "def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \"\"\"",
      "2": "def translateAlgebra(query_algebra): \"\"\"",
      "3": "def translateAlgebra(query_algebra: Optional[Query_algebra] = None): \"\"\"",
      "4": "def translateAlgebra(query_algebra, Optional[Query] = None): \"\"\"",
      "5": "def translateAlgebra(query_algebra: Optional[QUERY_ALGEBRA] = None): \"\"\"",
      "6": "def translateAlgebra(query_algebra: Query): \"\"\"",
      "7": "def translateAlgebra( query_algebra: Optional[Query] = None ): \"\"\"",
      "8": "def translateAlgebra(query_algebra: Optional[query_algebra] = None): \"\"\"",
      "9": "def translateAlgebra(query_algebra: Optional[Querie] = None): \"\"\"",
      "10": "def translateAlgebra(query_algebra: Optional[Query] = None ): \"\"\"",
      "11": "def translateAlgebra(str, query_algebra: Optional[Query] = None): \"\"\"",
      "12": "def translateAlgebra(Query_algebra: Optional[Query] = None): \"\"\"",
      "13": "def translateAlgebra(query_algebra: Optional[Query] = None): \"\"\"",
      "14": "def translateAlgebra(Query): \"\"\"",
      "15": "def translateAlgebra(QUERY_ALGEBRA: Optional[Query] = None): \"\"\"",
      "16": "def translateAlgebra(question_algebra: Optional[Query] = None): \"\"\"",
      "17": "def translateAlgebra(query_algebra: Optional[Query = None] = None): \"\"\"",
      "18": "def translateAlgebra(query_algebra: Optional[Query_algebra] = None) -> None: \"\"\"",
      "19": "def translateAlgebra(query_algebra: Optional[Query] = None | None = None): \"\"\"",
      "20": "def translateAlgebra(query_algebra: Union[Query, None] = None): \"\"\"",
      "21": "def translateAlgebra(query_algebra: Optional[Question] = None): \"\"\"",
      "22": "def translateAlgebra(query_algebra: Optional[Query, None] = None): \"\"\"",
      "23": "def translateAlgebra(questry_algebra: Optional[Query] = None): \"\"\"",
      "24": "def translateAlgebra( query_algebra: Optional[Query] = None): \"\"\"",
      "25": "def translateAlgebra(q_algebra: Optional[Query] = None): \"\"\"",
      "26": "def translateAlgebra(query_algebra | None: Optional[Query] = None): \"\"\"",
      "27": "def translateAlgebra(query_algebra | None = None): \"\"\"",
      "28": "def translateAlgebra(query_algebra: Optional['Query'] = None): \"\"\"",
      "29": "def translateAlgebra(query_algebra: Optional[\"Query\"] = None): \"\"\"",
      "30": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Query_algebra]: \"\"\"",
      "31": "def translateAlgebra(query_algebra -> None): \"\"\"",
      "32": "def translateAlgebra(query_algebra: Optional[Query] = None): \"\"\"\"",
      "33": "def translateAlgebra((query_algebra: Optional[Query] = None)): \"\"\"",
      "34": "def translateAlgebra(query_algebra: Optional[[Query]] = None): \"\"\"",
      "35": "def translateAlgebra(_query_algebra: Optional[Query] = None): \"\"\"",
      "36": "def translateAlgebra(curry_algebra: Optional[Query] = None): \"\"\"",
      "37": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Null: \"\"\"",
      "38": "def translateAlgebra(str, query_algebra: Query): \"\"\"",
      "39": "def translateAlgebra(query_algebra: Optional[QUERY_NONE] = None): \"\"\"",
      "40": "def translateAlgebra(query_algebra: Optional[QUERY_ALGEBRA] = None) -> None: \"\"\"",
      "41": "def translateAlgebra(query_algebra: Optional[Query ] = None): \"\"\"",
      "42": "def translateAlgebra(query_algebra: Optional[Search] = None): \"\"\"",
      "43": "def translateAlgebra(query_algebra: Optional[Query] = None) -> bool: \"\"\"",
      "44": "def translateAlgebra(query_algebra: Optional[Q] = None): \"\"\"",
      "45": "def translateAlgebra(query_algebra: Optional[Query[0]] = None): \"\"\"",
      "46": "def translateAlgebra(query_algebra = \"\"): \"\"\"",
      "47": "def translateAlgebra(algebra: Optional[Query] = None): \"\"\"",
      "48": "def translateAlgebra(Query: Optional[Query] = None): \"\"\"",
      "49": "def translateAlgebra(Query, Optional[Query] = None): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_line": "        checkpointer: Lazy[Checkpointer] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/training/trainer.py",
    "target_filename": "allennlp/training/trainer.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] ="
    ],
    "correct": false,
    "top_five": {
      "0": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "1": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "2": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback",
      "3": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCall",
      "4": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callback: List[BatchCallback] =",
      "5": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallBack] =",
      "6": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCall",
      "7": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,",
      "8": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "9": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback]",
      "10": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback",
      "11": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallBack",
      "12": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "13": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[Check",
      "14": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callback: List[BatchCallback]",
      "15": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callback: List[BatchCallback] =",
      "16": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Optional[Lazy[Check",
      "17": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[CheckPointer] = None, batch_callback",
      "18": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Optional[Lazy[CheckPointer]] = None,",
      "19": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[CheckPointer] = None,",
      "20": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Lazy[Check",
      "21": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Optional[Lazy[Checkpointer]] = None,",
      "22": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallBack]",
      "23": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callback]: List[BatchCallback] =",
      "24": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[Checkpointer] = None, batch_callback",
      "25": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[Checkpointer] = None,",
      "26": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallBack] = None,",
      "27": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "28": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage]] = None, checkpointer: Optional[Lazy[Check",
      "29": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Lazy[Check",
      "30": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback",
      "31": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "32": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage]] = None, checkpointer: Lazy[Check",
      "33": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[CheckPointer] = None, batch_callback]",
      "34": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[MovingAverage] = None, checkpointer: Optional[Lazy[Checkpointer] = None, batch_callback]",
      "35": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "36": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None,",
      "37": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callback: List[BatchCallback] = None,",
      "38": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Lazy[CheckPointer] = None,",
      "39": "no_grad: List[str] = None, optimizer: List[Optimiser] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "40": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callback: List[BatchCallback] =",
      "41": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback]:",
      "42": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[CheckPointer] = None, batch_callbacks: List[BatchCallback",
      "43": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[LovingAverage] = None, checkpointer: Optional[Lazy[CheckPointer] = None,",
      "44": "no_grad: List[str] = None, optimizer: Lazy[Optimizer] = None, learning_rate_scheduler: Lazy[LearningRateScheduler] = None, momentum_scheduler: Lazy[MomentumScheduler] = None, tensorboard_writer: Lazy[TensorboardWriter] = None, moving_average: Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callbacks: List[BatchCallBack]",
      "45": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler], momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] =",
      "46": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[LovingAverage] = None, checkpointer: Optional[Lazy[Check",
      "47": "no_grad: List[str] = None, optimizer: List[Optimizer] = None, learning_rate_scheduler: List[LearningRateScheduler] = None, momentum_scheduler: List[MomentumScheduler] = None, tensorboard_writer: List[TensorboardWriter] = None, moving_average: List[MovingAverage] = None, checkpointer: List[Checkpointer] = None, batch_callbacks: List[BatchCallback] = None,...",
      "48": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Lazy[Checkpointer] = None, batch_callback",
      "49": "no_grad: List[str] = None, optimizer: Optional[Lazy[Optimizer]] = None, learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, moving_average: Optional[Lazy[MovingAverage] = None, checkpointer: Lazy[CheckPointer] = None, batch_callback"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,\n",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_line": "        extras: bool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " extras is declared to have type `bool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 46,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trailofbits/pip-audit",
    "source_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "target_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c^",
    "target_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "predictions": [
      "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,"
    ],
    "correct": false,
    "top_five": {
      "0": "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "1": "version: Version, url: Optional[str] = None extras: Optional[bool] = None, is_wheel: bool = True,",
      "2": "version: Version, url: Optional[str] = None, extras: bool = False, is_wheel: bool = True,",
      "3": "version: Version, url: Optional[str], extras: Optional[bool] = None, is_wheel: bool = True,",
      "4": "version: Version, url: bool = Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "5": "version: Version, urls: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "6": "version: Version, url: Optional[str] = None, extras: optional[bool] = None, is_wheel: bool = True,",
      "7": "version: Version, url = Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "8": "version: Version, url: Optional[str] += None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "9": "version: Version, url: Optional[str] = None, extras: bool, is_wheel: bool = True,",
      "10": "version: Version, url: Optional[str] = None, extras, is_wheel: bool = True,",
      "11": "version: Version, option_url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "12": "version: Version, url: Optional[str] = None, extras: Options[bool] = None, is_wheel: bool = True,",
      "13": "version: Version, url: Optional[str] = None, extras = Optional[bool] = None, is_wheel: bool = True,",
      "14": "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: Optional[bool] = True,",
      "15": "version: Version, url: Optional[Str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "16": "version: Version, url: bool = False, extras: Optional[bool] = None, is_wheel: bool = True,",
      "17": "version: Version, url: Options[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "18": "version: Version, url: Optional[str] = False, extras: Optional[bool] = None, is_wheel: bool = True,",
      "19": "version: Version, url: Optional[str] = None, additionals: Optional[bool] = None, is_wheel: bool = True,",
      "20": "version: Version, url=Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "21": "version: Version, url: Options.Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "22": "version: Version, optional_url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "23": "version: Version, url: Optional[str] = None, extras: Options.bool = None, is_wheel: bool = True,",
      "24": "version: Version, url: Optional[str] = None, extras: Optional[bool], is_wheel: bool = True,",
      "25": "version: Version, url: Optional[str] = None extras: bool = False, is_wheel: bool = True,",
      "26": "version: Version, url: Optional[str] = None, extras: bool = \"\", is_wheel: bool = True,",
      "27": "version: Version, url: Optional[str] = None, extras: options.bool = None, is_wheel: bool = True,",
      "28": "version: Version, url: bool = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "29": "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = False,",
      "30": "version: Version, url: bool = Optional[str] = None, extras: bool = False, is_wheel: bool = True,",
      "31": "version: Version, options: Optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "32": "version: Version, url: Optional[str] = None, extras: optional[bool] = None, is_wheel: bool = True,",
      "33": "version: Version, url: optional[str] = None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "34": "version: Version, url: Optional[str] = None, extras: Optional[bool] = False, is_wheel: bool = True,",
      "35": "version: Version, url: Optional[str] = none, extras: Optional[bool] = None, is_wheel: bool = True,",
      "36": "version: Version, url: Optional[str] = None, extras: bool = 0 = None, is_wheel: bool = True,",
      "37": "version: Version, url: Optional[str] = None, extras = None, is_wheel: bool = True,",
      "38": "version: Version, url: Optional[str] = None Extras: Optional[bool] = None, is_wheel: bool = True,",
      "39": "version: Version, url: Optional[str] = None, extras: bool = None, is_wheel: bool = True,",
      "40": "version: Version, url: Optional[str] = None, extras: Optional[bool] | None = None, is_wheel: bool = True,",
      "41": "version: Version, url: Optional[str] = None, extras: Optional[bool] = None, are_wheel: bool = True,",
      "42": "version: Version, url: Optional[str] = None, extras = bool, is_wheel: bool = True,",
      "43": "version: Version, url: None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "44": "version: Version, url: Optional[str] = None, extras: \"\", is_wheel: bool = True,",
      "45": "version: Version, url: bool = False, extras: bool = False, is_wheel: bool = True,",
      "46": "version: Version, url: Optional[str] = None, extras=None, is_wheel: bool = True,",
      "47": "version: Version, url: Optional[str] = None, extras_wheel: bool = True,",
      "48": "version: Version, url=None, extras: Optional[bool] = None, is_wheel: bool = True,",
      "49": "version: Version, url: bool = None, extras: bool = False, is_wheel: bool = True,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
    "target_code": "    count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_line": "    seconds %= amount",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " seconds is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 416,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count"
    ],
    "correct": false,
    "top_five": {
      "0": "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "1": "count = int(seconds/amount) seconds %= amount time_comp[label.strip()] = count",
      "2": "count = float(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "3": "count = int(seconds/number) seconds %= amount time_comp[label.strip()] = count",
      "4": "count = int(seconds / amount) seconds %= amount time_comp[label[strip()]] = count",
      "5": "count = int(seconds / amount) seconds %= amount time_comp[amount[label.strip()]] = count",
      "6": "count = int(seconds / amount) seconds %= number of seconds time_comp[label.strip()] = count",
      "7": "count = int(seconds/amount) seconds %= amount time_comp[label.strip()] = count",
      "8": "count = int(seconds / amount) seconds %= float time_comp[label.strip()] = count",
      "9": "count = int(seconds / amount) seconds %= int(seconds / amount) time_comp[label.strip()] = count",
      "10": "count = int(seconds / amount) %= amount time_comp[label.strip()] = count",
      "11": "count = int(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "12": "count = integer(seconds / amount) seconds %= amount time_comp[label.strip()] = count",
      "13": "count = int(seconds / amount) seconds %= amount time_comp[label[.strip()]] = count",
      "14": "count = int(sec(seconds / amount)) seconds %= amount time_comp[label.strip()] = count",
      "15": "count = int(seconds/ amount) seconds %= amount time_comp[label.strip()] = count",
      "16": "count = int(seconds / amount) seconds %= amount time_comp[elabel.strip()] = count",
      "17": "count = int(seconds / amount) seconds %= sum time_comp[label.strip()] = count",
      "18": "count = int(seconds/quantity) seconds %= amount time_comp[label.strip()] = count",
      "19": "count = int(seconds / amount) seconds %= amount time_comp[time_comp[label.strip()]] = count",
      "20": "count = int(seconds / amount) seconds %= value time_comp[label.strip()] = count",
      "21": "count = int(seconds / amount) seconds %= amount time_comp[strip()] = count",
      "22": "count = int(seconds / amount) seconds %= amount time_comp[label[amount]] = count",
      "23": "count = float(seconds/amount) seconds %= amount time_comp[label.strip()] = count",
      "24": "count = int(seconds / amount) seconds %= amount time_comp[number] = count",
      "25": "count = int(seconds / amount) seconds %= total amount time_comp[label.strip()] = count",
      "26": "count = int(seconds/mountain) seconds %= amount time_comp[label.strip()] = count",
      "27": "count = int(seconds / amount) seconds %= 0 time_comp[label.strip()] = count",
      "28": "count = int(seconds / amount) seconds %= integer time_comp[label.strip()] = count",
      "29": "count = int(seconds / amount) seconds %= num time_comp[label.strip()] = count",
      "30": "count = int(seconds / amount) seconds %= amount when_comp[label.strip()] = count",
      "31": "count = int(seconds / amount) seconds %= amount time_comp[t.label.strip()] = count",
      "32": "count = int(seconds, amount) seconds %= amount time_comp[label.strip()] = count",
      "33": "count = int(seconds / amount) seconds %= amount time_comp[int[strip()]] = count",
      "34": "count = int(seconds/int) seconds %= amount time_comp[label.strip()] = count",
      "35": "count = int(seconds / amount) seconds %= amount time_comp[lab.strip()] = count",
      "36": "count = int(seconds = amount) seconds %= amount time_comp[label.strip()] = count",
      "37": "count = int(seconds = 0) seconds %= amount time_comp[label.strip()] = count",
      "38": "count = int(seconds * amount) seconds %= amount time_comp[label.strip()] = count",
      "39": "count = int(seconds / amount) seconds %= amount time_comp[int[str, int]] = count",
      "40": "count = int(seconds/area) seconds %= amount time_comp[label.strip()] = count",
      "41": "count = int(seconds / amount) seconds %= amount time_comp[ctx, label.strip()] = count",
      "42": "count = int(seconds / amount) seconds %= amount time_comp[amount] = count",
      "43": "count = int(seconds/count) seconds %= amount time_comp[label.strip()] = count",
      "44": "count = int(seconds / amount) seconds %= amount time_comp[int[0]] = count",
      "45": "count = int(seconds / amount) seconds %= amount time_comp[int[amount]] = count",
      "46": "count = int(seconds / amount) seconds %= amount time_comp[int[str]] = count",
      "47": "count = int(seconds / amount) seconds %= amount time_comp[int[str,...]] = count",
      "48": "count = int(seconds / amount) seconds %= amount time_comp[int[strip(label.strip()])] = count",
      "49": "count = int(seconds / amount) seconds %= amount time_comp[int[strip(label.strip()]] = count"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "target_code": "\n        parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/api.py",
    "target_filename": "nio/api.py",
    "source_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0^",
    "target_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "predictions": [
      "homeserver = urlparse(homeserver) if urllib.parse.ParseResult else None"
    ],
    "correct": false,
    "top_five": {
      "0": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult else None",
      "1": "homeserver = urlparse(homeserver) if homeserver else None",
      "2": "self = urlparse(homeserver) if self else None",
      "3": "homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None",
      "4": "homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None",
      "5": "server = urlparse(homeserver) if urllib.parse.ParseResult else None",
      "6": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] = None if homeserver else None",
      "7": "return urlparse(homeserver) if homeserver else None",
      "8": "urlparse(homeserver) if urllib.parse.ParseResult else None",
      "9": "homeserver = urlparse(homeserver) if isinstance(if isinstance(homeserver, urllib.parse.ParseResult)) else None",
      "10": "homeserver = urlparse(homeserver) if isinstance(homeserver, urllib.parse.ParseResult) else None",
      "11": "homeserver = urlparse(homeserver) if selfserver else None",
      "12": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult() else None",
      "13": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult(homeserver) else None",
      "14": "homeserver = urlparse(homeserver) if isinstance(if isinstance(if isinstance(homeserver, urllib.parse.ParseResult)) else None",
      "15": "homeserver = urlparse(server) if urllib.parse.ParseResult else None",
      "16": "server = urlparse(homeserver) if homeserver else None",
      "17": "urlparse(homeserver) if urllib.parse.ParseResult: \"\"\" homeserver = urlparse(homeserver) if homeserver else None",
      "18": "urlparse(homeserver) if urllib.parse.ParseResult else None: homeserver = urlparse(homeserver)",
      "19": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult if homeserver else None",
      "20": "homeserver = urlparse(homeserver) if isinstance(server, urllib.parse.ParseResult) else None",
      "21": "homeserver = urlparse(homeserver) if isinstance(if isinstance else None) homeserver = urlparse(homeserver) if isinstance(homeserver, urllib.parse.ParseResult) else None",
      "22": "homeserver = urlparse(homeserver) if homeserver else Optional[urllib.parse.ParseResult] if homeserver else None",
      "23": "server = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] = None if homeserver else None",
      "24": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] is not None if homeserver else None",
      "25": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] = None if urllib.parse.ParseResult else None",
      "26": "urlparse(homeserver) if urllib.parse.ParseResult: Optional[homeserver] = None if homeserver else None",
      "27": "homeserver = urlparse(homeserver) if homeserver else Optional[URLLib.parse.ParseResult] if homeserver else None",
      "28": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult && urllib.parse(homeserver) else None",
      "29": "urlparse(homeserver) if urllib.parse.ParseResult else None homeserver = urlparse(homeserver)",
      "30": "homeserver = urlparse(homeserver) if not urllib.parse.ParseResult: Optional[str] = None if not homeserver else None",
      "31": "urlparse(homeserver) if urllib.parse.ParseResult: Optional[homeserver] = urlparse(homeserver) if homeserver else None",
      "32": "homeserver = urlparse(homeserver) if isinstance(if isinstance else None) homeserver = urlparse(homeserver) if isinstance(if isinstance(homeserver, urllib.parse.ParseResult)) else None",
      "33": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[Str] = None if homeserver else None",
      "34": "urlparse(homeserver) if urllib.parse.ParseResult else None homeserver = str(urllib.parse(homeserver)) if homeserver else None",
      "35": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] is None if homeserver else None",
      "36": "urlparse(homeserver) if urllib.parse.ParseResult else None: homeserver = urlparse(homeserver) if homeserver else None",
      "37": "homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None",
      "38": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] = None if urllib.parse.Default[homeserver] else None",
      "39": "homeserver = urlparse(homeserver) if homeserver else List[urllib.parse.ParseResult] if homeserver else None",
      "40": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] = none if homeserver else None",
      "41": "urlparse(homeserver) if urllib.parse.ParseResult else None homeserver = str(urlparse(homeserver)) if homeserver else None",
      "42": "homeserver = urlparse(homeserver) if it else None",
      "43": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult: Optional[str] = None if urllib.parse.Result else None",
      "44": "homeserver = urlparse(homeserver) if isinstance(if isinstance else None) homeserver = urlparse(homeserver) if isinstance(if isinstance else None)",
      "45": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult && urllib.parse.Homeserver else None",
      "46": "urlparse(homeserver) if urllib.parse.ParseResult else None homeserver = str(urllib.parse(homeserver))",
      "47": "urlparse(homeserver) if urllib.parse.ParseResult else None: homeserver = str(urllib.parse(homeserver)) if homeserver else None",
      "48": "homeserver = urlparse(homeserver) if urllib.parse.ParseResult otherwise None",
      "49": "homeserver = urlparse(urllib.parse(homeserver)) if selfserver else None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
    "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 93,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ReactiveX/RxPY",
    "source_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "target_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "source_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90^",
    "target_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "predictions": [
      "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, time)"
    ],
    "correct": false,
    "top_five": {
      "0": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, time)",
      "1": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "2": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, object)",
      "3": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, datetime)",
      "4": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime())",
      "5": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "6": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, time)",
      "7": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, scheduledTime)",
      "8": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime(duetime)",
      "9": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, item)",
      "10": "duetime = self.to_datetime(duetime) dt = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, dt)",
      "11": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime())",
      "12": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.timetime)",
      "13": "duetime = self.to_datetime(duetime) assert duetime is not None si: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "14": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime(duetime)",
      "15": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, datetime)",
      "16": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action,...duetime)",
      "17": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, scheduledTime)",
      "18": "duetime = self.to_datetime(duetime) -> str: si: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "19": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, scheduletime)",
      "20": "duetime = self.to_datetime(duetime) if not duetime is not None: si: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "21": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime)",
      "22": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.datetime)",
      "23": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, target)",
      "24": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.duetime)",
      "25": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, status)",
      "26": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, str)",
      "27": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, isinstance(duetime))",
      "28": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.str(duetime))",
      "29": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, scheduletime)",
      "30": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.get_duetime())",
      "31": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, status)",
      "32": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, [duetime])",
      "33": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, self.timetime)",
      "34": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, stdout)",
      "35": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, $scope.duetime)",
      "36": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.currentValue)",
      "37": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, subject)",
      "38": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, item)",
      "39": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime)",
      "40": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, scheduledtime)",
      "41": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.to_datetime(duetime))",
      "42": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, self.state)",
      "43": "duetime = self.to_datetime(duetime) -> ScheduledItem: ScheduledItem = ScheduledItem(self, state, action, duetime)",
      "44": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, self.isinstance(duetime))",
      "45": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, elif isinstance(duetime))",
      "46": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, nextTime)",
      "47": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, period)",
      "48": "duetime = self.to_datetime(duetime) si: ScheduledItem = ScheduledItem(self, state, action, id)",
      "49": "duetime = self.to_datetime(duetime) if not duetime: ScheduledItem = ScheduledItem(self, state, action, object)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,\n",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_line": "    other_indices: dict = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAI",
    "source_filename": "monai/visualize/img2tensorboard.py",
    "target_filename": "monai/visualize/img2tensorboard.py",
    "source_changeid": "718d11abb2310ab74321256032a264488a7883b4^",
    "target_changeid": "718d11abb2310ab74321256032a264488a7883b4",
    "predictions": [
      "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,"
    ],
    "correct": false,
    "top_five": {
      "0": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "1": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "2": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Dict[str, str] = None, scale_factor: float = 1,",
      "3": "image_axes: Sequence[int] = (1, 2), other_indices: dict, scale_factor: float = 1,",
      "4": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[dict] = None, scale_factor: float = 1,",
      "5": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str], typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "6": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[1], typing.Optional[2]] = None, scale_factor: float = 1,",
      "7": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[1], typing.Dict[2]] = None, scale_factor: float = 1,",
      "8": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str], typing.Optional[typing.Optional[str]] = None, scale_factor: float = 1,",
      "9": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str], typing.Optional[str]] = None, scale_factor: float = 1,",
      "10": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[any, any]] = None, scale_factor: float = 1,",
      "11": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str], typing.Optional[typing.Optional[str]] = None, scale_factor: float = 1,",
      "12": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[typing.Any, typing.Any]] = None, scale_factor: float = 1,",
      "13": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str], str] = None, scale_factor: float = 1,",
      "14": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict] = None, scale_factor: float = 1,",
      "15": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str], typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "16": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str], typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "17": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[0], typing.Optional[typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "18": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[1]] = None, scale_factor: float = 1,",
      "19": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str], typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "20": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[Any, Any]] = None, scale_factor: float = 1,",
      "21": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str], typing.Optional[typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "22": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Dict, scale_factor: float = 1,",
      "23": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[1], typing.Optional[typing.Dict[2], typing.Optional[1]]] = None, scale_factor: float = 1,",
      "24": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[0], typing.Optional[typing.Optional[str]] = None, scale_factor: float = 1,",
      "25": "image_axes: Sequence[int] = ( (1, 2), other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "26": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[1], typing.Optional[typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "27": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[1], typing.Optional[typing.Dict[2], typing.Optional[1]]] = None, scale_factor: float = 1,",
      "28": "image_axes: Sequence[int] = ( (1, 2), other_indices: Optional[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "29": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[0], typing.Optional[typing.Optional[1], typing.Optional[2]]] = None, scale_factor: float = 1,",
      "30": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[0], typing.Optional[1], typing.Optional[2]] = None, scale_factor: float = 1,",
      "31": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[0], typing.Optional[typing.Dict[1], typing.Optional[2]]] = None, scale_factor: float = 1,",
      "32": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[ typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "33": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str], str] = None, scale_factor: float = 1,",
      "34": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[1], typing.Optional[typing.Dict[2], typing.Optional[1], typing.Optional[2]]] = None, scale_factor: float = 1,",
      "35": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[1]] = None, scale_factor: float = 1,",
      "36": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[str, str], typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "37": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[1], typing.Optional[typing.Dict[2]]] = None, scale_factor: float = 1,",
      "38": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[..., Any]] = None, scale_factor: float = 1,",
      "39": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[typing.Any, typing.Any]] = None, scale_factor: float = 1,",
      "40": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[1], typing.Optional[typing.Dict[2], typing.Optional[1], typing.Optional[2]]] = None, scale_factor: float = 1,",
      "41": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[1], typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "42": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[Any, Any]] = None, scale_factor: float = 1,",
      "43": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[str, str], typing.Optional[typing.Optional[typing.Dict]] = None, scale_factor: float = 1,",
      "44": "image_axes: Sequence[int] = (1, 2), other_indices: Typing.Dict[str, str] = None, scale_factor: float = 1,",
      "45": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Dict(), scale_factor: float = 1,",
      "46": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[typing.Dict[str, str]] = None, scale_factor: float = 1,",
      "47": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict[0], typing.Optional[1]] = None, scale_factor: float = 1,",
      "48": "image_axes: Sequence[int] = (1, 2), other_indices: Optional[typing.Dict[any], typing.Any]] = None, scale_factor: float = 1,",
      "49": "image_axes: Sequence[int] = (1, 2), other_indices: typing.Optional[typing.Dict] = None, scale_factor: float = 1,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2221,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\","
    ],
    "correct": true,
    "top_five": {
      "0": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "1": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "2": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "3": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "4": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "5": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = Sequence(), gcp_conn_id: str = \"google_cloud_default\",",
      "6": "timeout: Optional[float] = None, metadata_type: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "7": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [\", gcp_conn_id: str = \"google_cloud_default\",",
      "8": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = str, gcp_conn_id: str = \"google_cloud_default\",",
      "9": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [] gcp_conn_id: str = \"google_cloud_default\",",
      "10": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = '', gcp_conn_id: str = \"google_cloud_default\",",
      "11": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "12": "timeout: Optional[float] = None, metadata_types: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "13": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "14": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "15": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (\"\"), gcp_conn_id: str = \"google_cloud_default\",",
      "16": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = [\", gcp_conn_id: str = \"google_cloud_default\",",
      "17": "timeout: Optional[float] = None, metadata_id: Sequence[Tuple[str, str]] = str, gcp_conn_id: str = \"google_cloud_default\",",
      "18": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = None, gcp_conn_id: str = \"google_cloud_default\",",
      "19": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]] (), gcp_conn_id: str = \"google_cloud_default\",",
      "20": "timeout: Optional[float] = None, metadata_path: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "21": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]](), gcp_conn_id: str = \"google_cloud_default\",",
      "22": "timeout: Optional[float] = None, metadata_list: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "23": "timeout: Optional[float] = None, metadata: Sequence[Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "24": "timeout: Optional[float] = None, metadata_name: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "25": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]], gcp_conn_id: str = \"google_cloud_default\",",
      "26": "timeout: Optional[float] = None, metadata_params: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "27": "timeout: Optional[float] = None, metadata=Optional[Sequence[Tuple[str, str]]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "28": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence[str], gcp_conn_id: str = \"google_cloud_default\",",
      "29": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]](''), gcp_conn_id: str = \"google_cloud_default\",",
      "30": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "31": "timeout: Optional[float] = None, metadata_type: Sequence[Tuple[str, str]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "32": "timeout: Optional[float] = None, metadata_ids: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "33": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence(), gcp_conn_id: str = \"google_cloud_default\",",
      "34": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence[str] gcp_conn_id: str = \"google_cloud_default\",",
      "35": "timeout: Optional[float] = None, metadata=Optional[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "36": "timeout: Optional[float] = None, metadata=Optional[Sequence[Tuple[str, str]]] = [], gcp_conn_id: str = \"google_cloud_default\",",
      "37": "timeout: Optional[float] = None, metadata=Linear[Sequence[Tuple[str, str]]] = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "38": "timeout: Optional[float] = None, metadata_data: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "39": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = String(\", gcp_conn_id: str = \"google_cloud_default\",",
      "40": "timeout: Optional[float] = None, metadata__: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "41": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = sequence(str), gcp_conn_id: str = \"google_cloud_default\",",
      "42": "timeout: Optional[float] = None, metadata_count: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\",",
      "43": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = Sequence, gcp_conn_id: str = \"google_cloud_default\",",
      "44": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = [0], gcp_conn_id: str = \"google_cloud_default\",",
      "45": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = null, gcp_conn_id: str = \"google_cloud_default\",",
      "46": "timeout: Optional[float] = None, metadata = Sequence[Tuple[str, str]](\", gcp_conn_id: str = \"google_cloud_default\",",
      "47": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), conn_id: str = \"google_cloud_default\",",
      "48": "timeout: Optional[float] = None, metadata_id = \"\", gcp_conn_id: str = \"google_cloud_default\",",
      "49": "timeout: Optional[float] = None, metadata=False, gcp_conn_id: str = \"google_cloud_default\","
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"\n    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):\n        \"\"\"\n",
    "target_code": "    \"\"\"\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        \"\"\"\n",
    "warning_line": "                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rec_len is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "osmocom/pysim",
    "source_filename": "pySim/filesystem.py",
    "target_filename": "pySim/filesystem.py",
    "source_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5^",
    "target_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "predictions": [
      "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "1": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "2": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ): \"\"\"",
      "3": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ): \"\"\"",
      "4": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \"\"\"",
      "5": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len=None, size= { 1,None } ): \"\"\"",
      "6": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF], rec_len:int=None, size= { 1,None } ): \"\"\"",
      "7": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent=Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "8": "\"\"\" def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\", parent:Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ): \"\"\"",
      "9": "\"\"\" def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\", parent:Optional[CardDF]=None, rec_len:int=\"\", size=\"1,None\" } ): \"\"\"",
      "10": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ): \"\"\"",
      "11": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"\"",
      "12": "\"\"\" def __init__( self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "13": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:CardDF=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "14": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF] = None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "15": "\"\"\" def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "16": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \"\"\"",
      "17": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=\"\", desc:str=\"\", parent:Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ): \"\"\"",
      "18": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" \"\"\"",
      "19": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 2,None } ): \"\"\"",
      "20": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= ^ 1,None } ): \"\"\"",
      "21": "\"\"\" def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\", parent:Optional[CardDF]=None, rec_len=\"\", size= { 1,None } ): \"\"\"",
      "22": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:Optional[int]=None, size= { 1,None } ): \"\"\"",
      "23": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int = None, size= { 1,None } ): \"\"\"",
      "24": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:args=None, size= { 1,None } ): \"\"\"",
      "25": "\"\"\" def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\", parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ): \"\"\"",
      "26": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,none } ): \"\"\"",
      "27": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ) -> None: \"\"\"",
      "28": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str='', desc:str='', parent:Optional[CardDF]='', rec_len:int='', size='' } ): \"\"\"",
      "29": "\"\"\" def __init__( self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \"\"\"",
      "30": "\"\"\" def __init__(self, fid:str, sfid:str=None, name=str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "31": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len=None, size= { 1,None } ): \"\"\"",
      "32": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ) -> None: \"\"\"",
      "33": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,5 } ): \"\"\"",
      "34": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None:",
      "35": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int ==None, size= { 1,None } ): \"\"\"",
      "36": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): '''",
      "37": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None \\ ): \"\"\"",
      "38": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:Int=None, size= { 1,None } ): \"\"\"",
      "39": "\"\"\" def __init__(self, fid, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "40": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:string=None, size= { 1,None } ): \"\"\"",
      "41": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1 } ): \"\"\"",
      "42": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" if sfid is not None:",
      "43": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\" -> None:",
      "44": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int = \"4\", size= { 1,None } ): \"\"\"",
      "45": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:Int=None, size= { 1,None } ): \"\"\"",
      "46": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> Optional[int]: \"\"\"",
      "47": "\"\"\" def __init__( self, fid:str, sfid:str=None, name:str=None, desc:str=None, parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\"",
      "48": "\"\"\" def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\", parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ): \"\"\"",
      "49": "\"\"\" def __init__(self, fid:str, sfid:str=None, name:str=None, desc=str=None, parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 659,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/channel.py",
    "target_filename": "aiormq/channel.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, destination: str = '', source: str = '', routing_key: str = '', *,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "1": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "2": "self, destination: str = \"\", source: str = \"\", routing_key: str = \"\", *,",
      "3": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: Optional[str] = \"\", *,",
      "4": "self, destination: typing.Optional[str] = None, source: typing.Optional[str] = None, routing_key: str = \"\", *,",
      "5": "self, destination: str = '', source: str = '', routing_key: str = '' *,",
      "6": "self, destination: str = '', source: str = '', routing_key: str = \"'\", *,",
      "7": "self, destination: str = '', source: str = '', routing_key: str = ''*, *,",
      "8": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: optional[str] = \"\", *,",
      "9": "self, destination: str = '0', source: str = '0', routing_key: str = '', *,",
      "10": "self, destination: str = Optional[\"\"], source: str = Optional[\"\"] = None, routing_key: str = \"\", *,",
      "11": "self, str = '', destination: str = '', source: str = '', routing_key: str = '', *,",
      "12": "self, destination: str = '', source: str = '', routing_key: str = \"\", *,",
      "13": "self, destination: str = \"\", source: str = '\"', routing_key: str = \"'\", *,",
      "14": "self, destination: option[str] = None, source: option[str] = None, routing_key: str = \"\", *,",
      "15": "self, destination: str = \"\", source: str = \",\" routing_key: str = \"\", *,",
      "16": "self, destination, str: Optional[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "17": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "18": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "19": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: str = '', *,",
      "20": "self, destination: str = '', source: str = '', routing_key: str = \"', *,",
      "21": "self, destination, str = '', source: str = '', routing_key: str = '', *,",
      "22": "self, destination: str = '', source: str = '', routing_key: str = ''', *,",
      "23": "self, destination: str = None, source: str = '', routing_key: str = '', *,",
      "24": "self, destination: option[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "25": "self, destination: str = \"\", source: str = '\"', routing_key: str = '', *,",
      "26": "self, destination: str = \"\"), source: str = \"\"), routing_key: str = \"\", *,",
      "27": "self, route: str = '', source: str = '', routing_key: str = '', *,",
      "28": "self, destination: str = 'default', source: str = 'default', routing_key: str = '', *,",
      "29": "self, destination: str = '', source: str = \"'\", routing_key: str = '\", *,",
      "30": "self, destination: str = \"\", source: str = '\", routing_key: str = \"', *,",
      "31": "self, destination: str = \"\", source: str = '\", routing_key: str = '\", *,",
      "32": "self, destination: str = '', source: str = '', routing_key: str = '' ), *,",
      "33": "self, destination: str = '', source: str = '', routing_key: str = ''*,",
      "34": "self, destination: str, source: str, routing_key: str = \"\", *,",
      "35": "self, destination: str = \",\" source: str = \"\", routing_key: str = \"\", *,",
      "36": "self, destination: str = '', source: str = '', routing_key: str = '' + str, *,",
      "37": "self. destination: str = '', source: str = '', routing_key: str = '', *,",
      "38": "self, destination: str = '', source: str = '', routing_key: str ='', *,",
      "39": "self, destination: str = '.', source: str = '', routing_key: str = '', *,",
      "40": "self, destination: str = \"\", source: str = Optional[str] = None, routing_key: str = \"\", *,",
      "41": "self, destination: str = '', source: str = '', routing_key: str = '',*,",
      "42": "self, destination: str = [\", ''], source: str = '', routing_key: str = '', *,",
      "43": "self, destination: str = 0, source: str = 0, routing_key: str = \"\", *,",
      "44": "self, destination: str = \"\", source: str = '', routing_key: str = '', *,",
      "45": "self, destination: str = [], source: str = [], routing_key: str = \"\", *,",
      "46": "self, destination: str = '0', source: str = '0', routing_key: str = \"\", *,",
      "47": "self, destination: option[str] = None, source: Optional[str] = None, routing_key: Optional[str] = \"\", *,",
      "48": "self, destination: str = 0 (), source: str = 0 (), routing_key: str = \"\", *,",
      "49": "self, destination: str = 'undefined', source: str = '', routing_key: str = '', *,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):\n",
    "target_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_line": "        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " kwarg2 is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebook/TestSlide",
    "source_filename": "tests/mock_callable_testslide.py",
    "target_filename": "tests/mock_callable_testslide.py",
    "source_changeid": "97c39d89c2a047a3396be659645bd89dab01d859^",
    "target_changeid": "97c39d89c2a047a3396be659645bd89dab01d859",
    "predictions": [
      "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):"
    ],
    "correct": true,
    "top_five": {
      "0": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "1": "async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "2": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \" ):",
      "3": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' ):",
      "4": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> None:",
      "5": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \",\", kwarg2: str = \"\" ):",
      "6": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" ):",
      "7": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \",\" kwarg2: str = \"\" ):",
      "8": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> str:",
      "9": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"):",
      "10": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \"\" ):",
      "11": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = [], kwarg2: str = [] ):",
      "12": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \"):",
      "13": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \" \" ):",
      "14": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = '\" ):",
      "15": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> bool:",
      "16": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\") ):",
      "17": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ): assert isinstance(str, str)",
      "18": "def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "19": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\", ):",
      "20": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \" ) -> None:",
      "21": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "22": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = \"\" ):",
      "23": "async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" \" ):",
      "24": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> Optional[str]:",
      "25": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"",
      "26": "async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = '', kwarg2: str = '' ):",
      "27": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\" ):",
      "28": "async def async_instance_method( arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "29": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \",\" \"):",
      "30": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", \"kwarg2: str = \"\" ):",
      "31": "async def async_instance_method() self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "32": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ): \"\"\"",
      "33": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> tuple:",
      "34": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \"\" ):",
      "35": "async def async_instance_method( self.arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "36": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str ='', kwarg2: str ='' ):",
      "37": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "38": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \".\" ):",
      "39": "async def async_instance_method( yourself, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "40": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = 0, kwarg2: str = 0 ):",
      "41": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> List[str]:",
      "42": "async def async_instance_method( self, str1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ):",
      "43": "async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = \",\", kwarg2: str = \"\" ):",
      "44": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \"\"\" ):",
      "45": "async def async_instance_method(self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> None:",
      "46": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> Callable[str]:",
      "47": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \",\"\" ):",
      "48": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \" ) -> None:",
      "49": "async def async_instance_method( self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" ) -> None -> None:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               symbol_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " symbol_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "1": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "2": "def object(self, symbol_name: str, type_name: Optional[str] = None, offset: int = None,",
      "3": "def object(self, symbol_name: typing.Optional[str] = None, type_name: typing.Optional[str] = None, offset: int = None,",
      "4": "def object(self, symbol_name: option[str] = None, type_name: Option[str] = None, offset: int = None,",
      "5": "def object(self, symbol_name: str = '', type_name: str = '', offset: int = None,",
      "6": "def object(self, symbol_name: Union[str, None] = None, type_name: Union[str, None] = None, offset: int = None,",
      "7": "def object(self, symbol_name: option[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "8": "def object(self, symbol_name: Optional[Str] = None, type_name: Optional[str] = None, offset: int = None,",
      "9": "def object(self, symbol_name: choice[str] = None, type_name: choice[str] = None, offset: int = None,",
      "10": "def object(self, symbol_name: str = \"\", type_name: str = \"\", offset: int = None,",
      "11": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: Optional[int] = None,",
      "12": "def object(self, symbol_name: str.Optional[str] = None, type_name: str.Optional[str] = None, offset: int = None,",
      "13": "def object(self, symbol_name: option[str] = None, type_name: option[str] = None, offset: int = None,",
      "14": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: Int = None,",
      "15": "def object(self, symbol_name: option_str = None, type_name: Optional[str] = None, offset: int = None,",
      "16": "def object(self, symbol_name: options.str = None, type_name: options.str = None, offset: int = None,",
      "17": "def object(self, symbol_name: Optional[Str] = None, type_name: Optional[str] = None, offset: int = None,",
      "18": "def object(self, symbol_name: optional[str] = None, type_name: optional[str] = None, offset: int = None,",
      "19": "def object(self, symbol_names: Optional[str] = None, type_names: Optional[str] = None, offset: int = None,",
      "20": "def object(self, simbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "21": "def object(self, symbol_name, type_name: Optional[str] = None, offset: int = None,",
      "22": "def object(self, symbol_name: str, type_name: option[str] = None, offset: int = None,",
      "23": "def object(self, symbol_name: Union[str, None] = None, type_name: Union[str, None], offset: int = None,",
      "24": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: optional[int] = None,",
      "25": "def object(self, symbol_name: Union[str, None], type_name: Union[str, None], offset: int = None,",
      "26": "def object(self, symbol_name: Optional[str], type_name: Optional[str] = None, offset: int = None,",
      "27": "def object(self, symbol_name: option_name, type_name: Optional[str] = None, offset: int = None,",
      "28": "def object(self, symbol_name: Type_name, type_name: Optional[str] = None, offset: int = None,",
      "29": "def object(self, symbol_name: Options.str = None, type_name: Optional[str] = None, offset: int = None,",
      "30": "def object(self, symbol_name: Optional[Str] = None, type_name: Optional[Str] = None, offset: int = None,",
      "31": "def object(self, symbol_name: options.Str = None, type_name: options.Str = None, offset: int = None,",
      "32": "def object(self, symbol_name: option_name = None, type_name: Optional[str] = None, offset: int = None,",
      "33": "def object(self, symbol_name: option_str = None, type_name: option_str = None, offset: int = None,",
      "34": "def object(self, symbol_name: Str, type_name: Optional[str] = None, offset: int = None,",
      "35": "def object(self, symbol_name: \"str\", type_name: \"str\", offset: int = None,",
      "36": "def object(self, symbol_name: str, type_name: Union[str, None] = None, offset: int = None,",
      "37": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "38": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str]=None, offset: int = None,",
      "39": "def object(self, symbol_name: Optional[str] = None, type_name: Optionals[str] = None, offset: int = None,",
      "40": "def object(self, symbol_name: str=\"\", type_name: str=\"\", offset: int=\"\",",
      "41": "def object(self, symbol_name: str, type_name: str, offset: int,",
      "42": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[Str] = None, offset: int = None,",
      "43": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: optional[int] = None,",
      "44": "def object(self, symbol_name: typing.Optional[str] = None, type_name: typing[str] = None, offset: int = None,",
      "45": "def object(self, symbol_name: str, type_name: str = '', offset: int = None,",
      "46": "def object(self, symbol_name: str, type_name: options.str = None, offset: int = None,",
      "47": "def object(self, symbol_name: optional[str] = None, type_name: optional[str] = None, offset: optional[int] = None,",
      "48": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "49": "def object(self, symbol_name: Union[str, None] = None, type_name: Union[Str, None] = None, offset: int = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def start(self, caller_frame: types.FrameType = None):\n        \"\"\"\n",
    "target_code": "\n    def start(self, caller_frame: types.FrameType | None = None):\n        \"\"\"\n",
    "warning_line": "    def start(self, caller_frame: types.FrameType = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 101,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "joerick/pyinstrument",
    "source_filename": "pyinstrument/profiler.py",
    "target_filename": "pyinstrument/profiler.py",
    "source_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919^",
    "target_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "predictions": [
      "def start(self, caller_frame: types.FrameType): \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def start(self, caller_frame: types.FrameType): \"\"\"",
      "1": "def start(self, caller_frame: typing.Optional[types.FrameType] = None): \"\"\"",
      "2": "def start(self, caller_frame: options.FrameType): \"\"\"",
      "3": "def start(self, caller_frame: options.FrameType = None): \"\"\"",
      "4": "def start(self): \"\"\"",
      "5": "def start(self, caller_frame: type[types.FrameType] = None): \"\"\"",
      "6": "def start(self, caller_frame: types[\"FrameType\"] = None): \"\"\"",
      "7": "def start(self, caller_frame: types[types.FrameType] = None): \"\"\"",
      "8": "def start(self, caller_frame: Optional[types.FrameType] = None): \"\"\"",
      "9": "def start(self, caller_frame): \"\"\"",
      "10": "def start(self, caller_frame: calls.FrameType): \"\"\"",
      "11": "def start(self, caller_frame: Type[types.FrameType] = None): \"\"\"",
      "12": "def start(self, caller_frame: types['FrameType'] = None): \"\"\"",
      "13": "def start(self, caller_frame: type[str] = None): \"\"\"",
      "14": "def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \"\"\"",
      "15": "def start(self, caller_frame: options[types.FrameType] = None): \"\"\"",
      "16": "def start(self, caller_frame: isinstance(types.FrameType)): \"\"\"",
      "17": "def start( self, caller_frame: typing.Optional[types.FrameType] = None ): \"\"\"",
      "18": "def start(self, caller_frame: Type.FrameType): \"\"\"",
      "19": "def start(self, caller_frame: typing.Optional[type.FrameType] = None): \"\"\"",
      "20": "def start(self, caller_frame: types.FrameType ): \"\"\"",
      "21": "def start(self, caller_frame: typing.Optional[Types.FrameType] = None): \"\"\"",
      "22": "def start(self, caller_frame: typing.Optional[types['FrameType']] = None): \"\"\"",
      "23": "def start(self, caller_frame: uses[types.FrameType] = None): \"\"\"",
      "24": "def start(self, caller_frame: Type.FrameType = None): \"\"\"",
      "25": "def start(self, caller_frame: options.FrameType = None) -> None: \"\"\"",
      "26": "def start(self, caller_frame: Options.FrameType = None): \"\"\"",
      "27": "def start(self, caller_frame: options.FrameType = \"\"): \"\"\"",
      "28": "def start(self, caller_frame: options.FrameType ): \"\"\"",
      "29": "def start(self, caller_frame: types[Types.FrameType] = None): \"\"\"",
      "30": "def start(self, caller_frame: types[str] = None): \"\"\"",
      "31": "def start(self, caller_frame: Type[\"Frame\"] = None): \"\"\"",
      "32": "def start(self, caller_frame: Type[type.FrameType] = None): \"\"\"",
      "33": "def start(self, caller_frame: types.CallableFrameType): \"\"\"",
      "34": "def start(self, caller_frame: types.FrameType) -> None: \"\"\"",
      "35": "def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \"\"\"",
      "36": "def start(self, caller_frame: \"types.FrameType\"): \"\"\"",
      "37": "def start(self, caller_frame: isinstance(types.FrameType, None)): \"\"\"",
      "38": "def start(self, caller_frame: defaultFrameType): \"\"\"",
      "39": "def start(self, caller_frame: options.FrameType) -> None: \"\"\"",
      "40": "def start( self, caller_frame: typing.Optional[types.FrameType] = None): \"\"\"",
      "41": "def start(self, caller_frame: options.FrameType | None): \"\"\"",
      "42": "def start(self, caller_frame: Options.FrameType): \"\"\"",
      "43": "def start(self, caller_frame: Types.FrameType = None): \"\"\"",
      "44": "def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> \"\"\"",
      "45": "def start(self, caller_frame: type=\"types.FrameType\"] = None): \"\"\"",
      "46": "def start(self, caller_frame: type[types.FrameType] = None) -> None: \"\"\"",
      "47": "def start(self, caller_frame: Type.Type.FrameType): \"\"\"",
      "48": "def start(self, caller_frame: Type.Serializer = None): \"\"\"",
      "49": "def start(self, caller_frame: Type.Type = None): \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_line": "        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scrapy/scrapy",
    "source_filename": "scrapy/core/downloader/handlers/http2.py",
    "target_filename": "scrapy/core/downloader/handlers/http2.py",
    "source_changeid": "38d361792c02ae2b25323258d070c04d8906495a^",
    "target_changeid": "38d361792c02ae2b25323258d070c04d8906495a",
    "predictions": [
      "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None"
    ],
    "correct": false,
    "top_five": {
      "0": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "1": "self, context_factory, connect_timeout=10), bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "2": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool, crawler=None",
      "3": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None, crawler=None",
      "4": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool = H2ConnectionPool, crawler=None",
      "5": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool=H2ConnectionPool, crawler=None",
      "6": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool= Optional[H2ConnectionPool], crawler=None",
      "7": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool], crawler=None",
      "8": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool = Optional[H2ConnectionPool] = None, crawler=None",
      "9": "self, context_factory, connect_timeout=10, bind_address: Optional[byte] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "10": "self, context_factory, connect_timeout=10, bind_address: Optional[bys] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "11": "self, context_factory, connect_timeout=10), bind_address: Optional[bytes] = None, pool: H2ConnectionPool, crawler=None",
      "12": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = All, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "13": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None, crawler=None",
      "14": "self, context_factory, connect_timeout=10), bind_address: Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None, crawler=None",
      "15": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None,",
      "16": "self, context_factory, reconnect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "17": "self, context_factory, connect_timeout=10, bind_address=Optional[bytes] = None, pool=Optional[H2ConnectionPool] = None, crawler=None",
      "18": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = False, pool: Optional[H2ConnectionPool] = False, crawler=None",
      "19": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] | None = None, pool: Optional[H2ConnectionPool] | None = None, crawler=None",
      "20": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = Optional[bytes] = None, crawler=None",
      "21": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool=Optional[H2ConnectionPool] = None, crawler=None",
      "22": "self, context_factory, connect_timeout=10, bind_address: H2Address, pool: H2ConnectionPool, crawler=None",
      "23": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = '', crawler=None",
      "24": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool=optional[H2ConnectionPool] = None, crawler=None",
      "25": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ContextionPool, crawler=None",
      "26": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] | None = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "27": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool= H2ConnectionPool, crawler=None",
      "28": "self, context_factory, connection_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "29": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = False, crawler=None",
      "30": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "31": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = '', pool: Optional[H2ConnectionPool] = '', crawler=None",
      "32": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = none, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "33": "self, context_factory, connect_timeout=10), bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool], crawler=None",
      "34": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes], pool: Optional[H2ConnectionPool] = None, crawler=None",
      "35": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2Connection] = None, crawler=None",
      "36": "self, context_factory, connect_timeout=10, bind_address=Optional[bytes] = None, pool=Optional[H2ConnectionPool], crawler=None",
      "37": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=False",
      "38": "self, context_factory, connect_timeout=10, bind_addresses: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "39": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = No, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "40": "self, context_factory, connect_timeout=10, bind_address: optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "41": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = \"\", crawler=None",
      "42": "self, context_factory, connect_timeout=10), bind_address: Optional[bytes] = None, pool = H2ConnectionPool, crawler=None",
      "43": "self, context_factory, connected_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "44": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = [], pool: Optional[H2ConnectionPool] = None, crawler=None",
      "45": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = Any, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "46": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Options[H2ConnectionPool] = None, crawler=None",
      "47": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None;",
      "48": "self, context_factory, connect_timeout=10, bind_address: optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None",
      "49": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: Options.H2ConnectionPool = None, crawler=None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, rf_path: str=None):\n        super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3\n",
    "target_code": "\n    def __init__(self):\n        super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 3"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "1": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "2": "def __init__(): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "3": "def __init__(self, str=None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "4": "def __init__(self, rf_path: str): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "5": "def __init__(self, rf_path: Optional[str]=None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "6": "def __init__( self, rf_path: Optional[str] = None ): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "7": "def __init__(self, str): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "8": "def __init__: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "9": "def __init__(self, rf_path: str=\"\"): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "10": "def __init__(self) -> None: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "11": "def __init__(self, rf_path: Optional[str] = None) -> None: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "12": "def __init__(self, str = None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "13": "def __init__( self, rf_path: Optional[str] = None ) -> None: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "14": "def __init__(self): super(Fonseca, self).__init__(rf_path=None) self.number_of_variables = 3",
      "15": "def __init__( self): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "16": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 2",
      "17": "def __init__(self): super(Fonseca.__init__()) self.number_of_variables = 3",
      "18": "def __init__(self, str=False): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "19": "def __init__(self, rf_path=None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "20": "def __init__self: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "21": "def __init__(self): super(Fonseca, self).__init__(rf_path=str) self.number_of_variables = 3",
      "22": "def __init__( self, rf_path: str=\"\"): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "23": "def __init__( self ): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "24": "def __init__(self, str: Optional[str] = None): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "25": "def __init__(self): super().__init__() self.number_of_variables = 3",
      "26": "def __init__: super(Fonseca, self).__init__: self.number_of_variables = 3",
      "27": "def __init__(self, str=\"\"): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "28": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "29": "def __init__(self): super(Fonseca).__init__() self.number_of_variables = 3",
      "30": "def __init__(self): super(Fonseca, self).__init__(str=None) self.number_of_variables = 3",
      "31": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__(rf_path=str) self.number_of_variables = 3",
      "32": "def __init__( self, rf_path: str): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "33": "def __init__(self): super(Fonseca, self).__init__(rf_path=rf_path) self.number_of_variables = 3",
      "34": "def __init__( self) -> None: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "35": "def __init__(self): super(Fonseca(self)).__init__() self.number_of_variables = 3",
      "36": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 4",
      "37": "def __init__(self): super(Fonseca, self).__init__self.number_of_variables = 3",
      "38": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 1",
      "39": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__() self.number_of_variables = 2",
      "40": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__(optional[rf_path]=None) self.number_of_variables = 3",
      "41": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 0",
      "42": "def __init__(self): super(Fonseca.__init__(rf_path=None)) self.number_of_variables = 3",
      "43": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__(rf_path=optional[str]) self.number_of_variables = 3",
      "44": "def __init__( self ) -> None: super(Fonseca, self).__init__() self.number_of_variables = 3",
      "45": "def __init__(self): super(Fonseca, self).__init__() self.number_of_variables = 5",
      "46": "def __init__(self, path: str): super(Fonseca, self).__init__() self.number_of_variables = 3",
      "47": "def __init__(self, rf_path: Optional[str] = None): super(Fonseca, self).__init__(rf_path=Rf_path) self.number_of_variables = 3",
      "48": "def __init__(self): super(Fonseca, self) self.number_of_variables = 3",
      "49": "def __init__(self): super().__init__(rf_path=None) self.number_of_variables = 3"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, {})\n",
    "target_code": "        \"\"\"\n        for style_class in reversed(style_classes):\n            style_data = self.data.get(style_class, {})\n",
    "warning_line": "        style_classes = reversed(style_classes)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/gui/ui_style.py",
    "target_filename": "arcade/gui/ui_style.py",
    "source_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b^",
    "target_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "predictions": [
      "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "1": "\"\"\" style_classes_reversed = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "2": "\"\"\" style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "3": "\"\"\" style_classes[str] = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class[str], { } )",
      "4": "\"\"\" style_classes = List[str] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "5": "\"\"\" style_classes_list = reversed(style_classes) for style_classes_list in style_classes: style_data = self.data.get(style_class, { } )",
      "6": "\"\"\" style_classes = reversed(style_classes) for style_classes in style_classes: style_data = self.data.get(style_class, { } )",
      "7": "\"\"\" style_classes_array = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "8": "\"\"\" style_classes = list(reversed(style_classes)) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "9": "\"\"\" style_classes_list = reversed(style_classes) for style_classes in style_classes: style_data = self.data.get(style_class, { } )",
      "10": "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_classes_list, { } )",
      "11": "\"\"\" style_classes = reversed(style_classes) for style_classes: style_data = self.data.get(style_class, { } )",
      "12": "\"\"\" style_classes_data = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "13": "\"\"\" style_classes[str] = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "14": "\"\"\" style_classes = list(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "15": "\"\"\" style_classes_num = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "16": "\"\"\" style_classes_for_str = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "17": "\"\"\" style_classes_2 = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "18": "\"\"\" style_classes_ = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "19": "\"\"\" style_classes: List[str] = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "20": "\"\"\" style_classes_number = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "21": "\"\"\" style_classes__ = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "22": "\"\"\" style_classes_is_reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "23": "\"\"\" style_classes_list = reversed(style_classes) for style_classes: style_data = self.data.get(style_class, { } )",
      "24": "\"\"\" style_classes_for_style_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "25": "\"\"\" style_classes_unreversed = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "26": "\"\"\" style_classes.reversed = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "27": "\"\"\" style_classes = List(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "28": "\"\"\" style_classes[str] = reversed(style_classes) for style_class in style_classes[str]: style_data = self.data.get(style_class[str], { } )",
      "29": "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_list, { } )",
      "30": "\"\"\" style_classes_1 = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "31": "\"\"\" style_classes = [] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "32": "\"\"\" style_classes_str = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "33": "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes_list: style_data = self.data.get(style_class, { } )",
      "34": "\"\"\" style_classes_id = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "35": "\"\"\" style_classes_for_classes = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "36": "\"\"\" style_classes.reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "37": "\"\"\" style_classes_listen = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "38": "\"\"\" style_classes_list_ = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "39": "\"\"\" style_classes_reversed = reversed(style_classes) for style_classes in style_classes: style_data = self.data.get(style_class, { } )",
      "40": "\"\"\" style_classes_strip = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "41": "\"\"\" style_classes_as_reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "42": "\"\"\" style_classes_enabled = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "43": "\"\"\" style_classes_traversed = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "44": "\"\"\" style_classes_reversed = [] for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "45": "\"\"\" style_classes_list = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class_list, { } )",
      "46": "\"\"\" style_classes_info = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "47": "\"\"\" style_classes[str] = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class[str]], { } )",
      "48": "\"\"\" style_classes_r = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )",
      "49": "\"\"\" style_classes_name = reversed(style_classes) for style_class in style_classes: style_data = self.data.get(style_class, { } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:\n",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_line": "        announcements_to_consume: Set[Announcement] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 387,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Chia-Network/chia-blockchain",
    "source_filename": "chia/wallet/wallet.py",
    "target_filename": "chia/wallet/wallet.py",
    "source_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13^",
    "target_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "predictions": [
      "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:"
    ],
    "correct": false,
    "top_five": {
      "0": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "1": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annunciment]] = None, ) -> TransactionRecord:",
      "2": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ), ) -> TransactionRecord:",
      "3": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annotations]] = None, ) -> TransactionRecord:",
      "4": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement], Optional[Announcement]] = None, ) -> TransactionRecord:",
      "5": "ignore_max_send_amount: bool = False, announcements_to_consumes: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "6": "ignore_max_send_amount: bool = False, announcements_to_consume_type: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "7": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ), -> TransactionRecord:",
      "8": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcer]] = None, ) -> TransactionRecord:",
      "9": "ignore_max_send_amount: bool = False, announces_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "10": "ignore_max_send_amount: Optional[bool] = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "11": "ignore_max_send_amount: Optional[bool = False] = None, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "12": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = (), ) -> TransactionRecord:",
      "13": "ignore_max_send_amount: bool = False, announcements_to_consume = Set[Announcement], ) -> TransactionRecord:",
      "14": "ignore_max_send_amount: bool = False, announced_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "15": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = [], ) -> TransactionRecord:",
      "16": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, () -> TransactionRecord:",
      "17": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annotation]] = None, ) -> TransactionRecord:",
      "18": "ignore_max_send_amount: bool = False, announcements_to_consume_list: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "19": "ignore_max_send_amount: bool = False, announcement_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "20": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None,...) -> TransactionRecord:",
      "21": "ignore_max_send_amount: bool = False, announcements_to_consume_number: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "22": "ignore_max_send_amount: bool = False, announcements_to_consume_set: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "23": "ignore_max_send_amount: bool = False, announcements_to_consume = Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "24": "ignore_max_send_amount: bool = False, announcements_to_consume: Options.Set[Announcement] = None, ) -> TransactionRecord:",
      "25": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = '', ) -> TransactionRecord:",
      "26": "ignore_max_send_amount: Optional[bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "27": "ignore_max_send_amount: (bool = False), announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "28": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[set[Announcement]] = None, ) -> TransactionRecord:",
      "29": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annotation]] = None, ) -> TransactionRecord:",
      "30": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: bool = False",
      "31": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "32": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = \"\", ) -> TransactionRecord:",
      "33": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announced[Announcement]] = None, ) -> TransactionRecord:",
      "34": "ignore_max_send_amount: bool = False, announcements_to_consume: Options[Set[Announcement]] = None, ) -> TransactionRecord:",
      "35": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[str] = None, ) -> TransactionRecord:",
      "36": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement], None] = None, ) -> TransactionRecord:",
      "37": "ignore_max_send_amount: bool = False, announcements_to_consume_default: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "38": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: bool = False,",
      "39": "ignore_max_send_amount: bool = False, announcements_to_consume=Set[Announcement], ) -> TransactionRecord:",
      "40": "ignore_max_send_amount: return bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "41": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Annomination]] = None, ) -> TransactionRecord:",
      "42": "ignore_max_send_amount: bool = False, announcements_to_consume: Set[Announcement] = bool, ) -> TransactionRecord:",
      "43": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[SET[Announcement]] = None, ) -> TransactionRecord:",
      "44": "ignored_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "45": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announced]] = None, ) -> TransactionRecord:",
      "46": "ignor_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord:",
      "47": "ignore_max_send_amount: bool = False, announcements_to_consume: Union[Set[Announcement]] = None, ) -> TransactionRecord:",
      "48": "ignore_max_send_amount: bool = False, announcements_to_consume: bool = False, ) -> TransactionRecord:",
      "49": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def notice(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 334,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "1": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "2": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "3": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "4": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "5": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)=",
      "6": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.",
      "7": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice",
      "8": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.",
      "9": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target,",
      "10": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.",
      "11": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target,",
      "12": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)=",
      "13": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "14": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "15": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target,",
      "16": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.protocol.notice(target, message, tags))",
      "17": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.notice(target,",
      "18": "self.lines.append(line) def note(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "19": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.notice(target,",
      "20": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.",
      "21": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.",
      "22": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol",
      "23": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=self._add_line(utils.irc.protocol.notice(target,",
      "24": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \\ } ): self._add_line(utils.irc.protocol.",
      "25": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)):",
      "26": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= } } ): self._add_line(utils.irc.protocol.",
      "27": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags",
      "28": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Optional[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.",
      "29": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Optional[str]=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "30": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) self._add_line(utils.irc.protocol.notice(target,",
      "31": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=self._add_line(utils.irc.protocol.",
      "32": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.protocol.notice(target, message, tags)",
      "33": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)]=",
      "34": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)):",
      "35": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.Not",
      "36": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.protocol.notice(target, message, tags))",
      "37": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) self._add_line(utils.irc.protocol.notice",
      "38": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None) self._add_line(utils.irc.protocol.",
      "39": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "40": "self.lines.append(line) def note(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "41": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message",
      "42": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=[]): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]=None): self._add_line(utils.irc.protocol.",
      "43": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "44": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str]=None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=None): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "45": "self.lines.append(line) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.notice(target, message, tags",
      "46": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): self._add_line(utils.irc.protocol.",
      "47": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \\ } ): self._add_line(utils.irc.protocol.notice",
      "48": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[str] = None): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): self._add_line(utils.irc.protocol.notice(target, message, tags)",
      "49": "self.lines.append(line) def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = []): self._add_line(utils.irc.protocol.message(target, message, tags)) def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = self._add_line(utils.irc.protocol.notice(target,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_line": "        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1140,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hikari-py/hikari",
    "source_filename": "hikari/orm/http/base_http_adapter.py",
    "target_filename": "hikari/orm/http/base_http_adapter.py",
    "source_changeid": "cf143052e1228280ed895c06da9177611d8ea088^",
    "target_changeid": "cf143052e1228280ed895c06da9177611d8ea088",
    "predictions": [
      "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,"
    ],
    "correct": false,
    "top_five": {
      "0": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "1": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "2": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNITED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "3": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[int, str] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "4": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFEXED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "5": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "6": "] = unspecified.UNSPECIFIED, parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "7": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NoRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "8": "] = unspecified.UNSPECIFIED, child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "9": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NonRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "10": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Required[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "11": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "12": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "13": "] = unspecified.UNSPECIFIED, parent_category = type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "14": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[type_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "15": "] = unspecified.UNSPECIFIED, parent_category: typing.Type[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "16": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNITEXT, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "17": "] = unspecified.UNSPECIFIED, parent_category=type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "18": "] = unspecified.UNSPECIFIED, parent_category: type_hints.None Required[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "19": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[Int, str] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "20": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Type[notRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "21": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Type[str] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "22": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIDEFAULT, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "23": "] = unspecified.UNSPECIFIED, parent_category: type_hints.TestNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "24": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[int, str] = unspecified.Unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "25": "] = unspecified.UNSPECIFIED, parent_category: type_hints[NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "26": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Nullable[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "27": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFIRMED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "28": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Type[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "29": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,...",
      "30": "] = unspecified.UNSPECIFIED, parent_category: type_hints.None[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "31": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, bool: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "32": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[int, str, bool] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "33": "] = unspecified.UNSPECIFIED, parent_category: typing.Type[type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "34": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, args: type_hints.NotRequired[args] = unspecified.UNSPECIFIED,",
      "35": "] = unspecified.UNSPECIFIED, parent_category: type_hints.ExistingNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "36": "] = unspecified.UNSPECIFIED, parent_category: type_hints.IntenseNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "37": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT], nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "38": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\", nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "39": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.unspecified, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "40": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFELT, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "41": "] = unspecified.UNSPECIFIED, parent_category= type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "42": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, ):",
      "43": "] = unspecified.UNSPECIFIED, parent_category: type_hints.Int[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "44": "] = unspecified.UNSPECIFIED, parent_category: typing.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "45": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFORM, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "46": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = not.None, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "47": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[str] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "48": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, value: type_hints.NotRequired[value] = unspecified.UNSPECIFIED,",
      "49": "] = unspecified.UNSPECIFIED, parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, nsfw: type_hints.NotRequired[bool] = unspecified.UNIFIED,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 208,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, destination: str = '', source: str = '', routing_key: str = '', *,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "1": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "2": "self, destination: str = \"\", source: str = \"\", routing_key: str = \"\", *,",
      "3": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: Optional[str] = \"\", *,",
      "4": "self, destination: typing.Optional[str] = None, source: typing.Optional[str] = None, routing_key: str = \"\", *,",
      "5": "self, destination: str = '', source: str = '', routing_key: str = '' *,",
      "6": "self, destination: str = '', source: str = '', routing_key: str = \"'\", *,",
      "7": "self, destination: str = '', source: str = '', routing_key: str = ''*, *,",
      "8": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: optional[str] = \"\", *,",
      "9": "self, destination: str = '0', source: str = '0', routing_key: str = '', *,",
      "10": "self, destination: str = Optional[\"\"], source: str = Optional[\"\"] = None, routing_key: str = \"\", *,",
      "11": "self, str = '', destination: str = '', source: str = '', routing_key: str = '', *,",
      "12": "self, destination: str = '', source: str = '', routing_key: str = \"\", *,",
      "13": "self, destination: str = \"\", source: str = '\"', routing_key: str = \"'\", *,",
      "14": "self, destination: option[str] = None, source: option[str] = None, routing_key: str = \"\", *,",
      "15": "self, destination: str = \"\", source: str = \",\" routing_key: str = \"\", *,",
      "16": "self, destination, str: Optional[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "17": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "18": "self, destination: str = '', source: str = '', routing_key: str = '', *,",
      "19": "self, destination: Optional[str] = None, source: Optional[str] = None, routing_key: str = '', *,",
      "20": "self, destination: str = '', source: str = '', routing_key: str = \"', *,",
      "21": "self, destination, str = '', source: str = '', routing_key: str = '', *,",
      "22": "self, destination: str = '', source: str = '', routing_key: str = ''', *,",
      "23": "self, destination: str = None, source: str = '', routing_key: str = '', *,",
      "24": "self, destination: option[str] = None, source: Optional[str] = None, routing_key: str = \"\", *,",
      "25": "self, destination: str = \"\", source: str = '\"', routing_key: str = '', *,",
      "26": "self, destination: str = \"\"), source: str = \"\"), routing_key: str = \"\", *,",
      "27": "self, route: str = '', source: str = '', routing_key: str = '', *,",
      "28": "self, destination: str = 'default', source: str = 'default', routing_key: str = '', *,",
      "29": "self, destination: str = '', source: str = \"'\", routing_key: str = '\", *,",
      "30": "self, destination: str = \"\", source: str = '\", routing_key: str = \"', *,",
      "31": "self, destination: str = \"\", source: str = '\", routing_key: str = '\", *,",
      "32": "self, destination: str = '', source: str = '', routing_key: str = '' ), *,",
      "33": "self, destination: str = '', source: str = '', routing_key: str = ''*,",
      "34": "self, destination: str, source: str, routing_key: str = \"\", *,",
      "35": "self, destination: str = \",\" source: str = \"\", routing_key: str = \"\", *,",
      "36": "self, destination: str = '', source: str = '', routing_key: str = '' + str, *,",
      "37": "self. destination: str = '', source: str = '', routing_key: str = '', *,",
      "38": "self, destination: str = '', source: str = '', routing_key: str ='', *,",
      "39": "self, destination: str = '.', source: str = '', routing_key: str = '', *,",
      "40": "self, destination: str = \"\", source: str = Optional[str] = None, routing_key: str = \"\", *,",
      "41": "self, destination: str = '', source: str = '', routing_key: str = '',*,",
      "42": "self, destination: str = [\", ''], source: str = '', routing_key: str = '', *,",
      "43": "self, destination: str = 0, source: str = 0, routing_key: str = \"\", *,",
      "44": "self, destination: str = \"\", source: str = '', routing_key: str = '', *,",
      "45": "self, destination: str = [], source: str = [], routing_key: str = \"\", *,",
      "46": "self, destination: str = '0', source: str = '0', routing_key: str = \"\", *,",
      "47": "self, destination: option[str] = None, source: Optional[str] = None, routing_key: Optional[str] = \"\", *,",
      "48": "self, destination: str = 0 (), source: str = 0 (), routing_key: str = \"\", *,",
      "49": "self, destination: str = 'undefined', source: str = '', routing_key: str = '', *,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        room_creator: str = None,\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
    "target_code": "        self,\n        room_creator: Optional[str] = None,\n        is_public: bool = True,\n        room_version: Optional[str] = None,\n        tok: Optional[str] = None,\n        expect_code: int = 200,\n",
    "warning_line": "        room_creator: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " room_creator is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "matrix-org/synapse",
    "source_filename": "tests/rest/client/v1/utils.py",
    "target_filename": "tests/rest/client/v1/utils.py",
    "source_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945^",
    "target_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945",
    "predictions": [
      "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "1": "self, room_creator: Optional[str] = None, is_public: Optional[bool] = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "2": "self, room_creator: option[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "3": "self, room_creator: str = '', is_public: bool = True, room_version: str = '', tok: str = '', expect_code: int = 200,",
      "4": "self, room_creator: typing.Optional[str] = None, is_public: bool = True, room_version: typing.Optional[str] = None, tok: typing.Optional[str] = None, expect_code: int = 200,",
      "5": "self, space_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "6": "self, room_creater: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "7": "self, room_creator: str = \"\", is_public: bool = True, room_version: str = \"\", tok: str = \"\", expect_code: int = 200,",
      "8": "self, room_creator, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "9": "self.room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "10": "self, room_creator: str, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "11": "self, room_creator: Optional[str] = None, is_private: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "12": "self, room_creator: Union[str, None] = None, is_public: bool = True, room_version: Union[str, None], tok: Union[str, None] = None, expect_code: int = 200,",
      "13": "self, room_creator: options.str = None, is_public: bool = True, room_version: options.str = None, tok: options.str = None, expect_code: int = 200,",
      "14": "self, room_creator: Type[str] = None, is_public: bool = True, room_version: Type[str] = None, tok: Type[str] = None, expect_code: int = 200,",
      "15": "self, room_creator: option[str] = None, is_public: bool = True, room_version: option[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "16": "self, room_creator: option[str] = None, is_public: bool = True, room_version: option[str] = None, tok: option[str] = None, expect_code: int = 200,",
      "17": "self, room_creator: Options[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "18": "self, room_creator: Optional[str] = None, is_public: bool = False, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "19": "self, room_creator: options[str] = None, is_public: bool = True, room_version: options[str] = None, tok: options[str] = None, expect_code: int = 200,",
      "20": "self, room_creator: str = '', is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "21": "self, room_creator: Optional[str] = None, is_public: optional[bool] = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "22": "self, room_creator: choice[str] = None, is_public: bool = True, room_version: choice[str] = None, tok: choice[str] = None, expect_code: int = 200,",
      "23": "self, room_creator: Optional[Str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "24": "self, room_creator: str = \"\", is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "25": "self, room_creator: Optional[str] = None, is_public: bool = True, room_versions: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "26": "self, room_creator: optional[str] = None, is_public: bool = True, room_version: optional[str] = None, tok: optional[str] = None, expect_code: int = 200,",
      "27": "self, room_creator: Optional[str] = None, is_public: is_bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "28": "self, room_creator: type[str] = None, is_public: bool = True, room_version: type[str] = None, tok: type[str] = None, expect_code: int = 200,",
      "29": "self, room_creator: Optional[str] = none, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "30": "self, room_creator: str, is_public: bool = True, room_version: str, tok: str = \"\", expect_code: int = 200,",
      "31": "self, room_creator: Optional[str] = None, is_pub: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "32": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expected_code: int = 200,",
      "33": "self, room_creator: Optional[String] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "34": "self, room_creator: Optional[str] = None, is_public: is_public, room_version: Optional[str] = None, tok: Optional[str] = None, expect_code: int = 200,",
      "35": "self, room_creator: bool = True, is_public: bool = True, room_version: bool = False, tok: bool = False, expect_code: int = 200,",
      "36": "self, room_creator: str = '0', is_public: bool = True, room_version: str = '0', tok: str = '0', expect_code: int = 200,",
      "37": "self, room_creator: str = 0, is_public: bool = True, room_version: str = 0, tok: str = 0, expect_code: int = 200,",
      "38": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expecting_code: int = 200,",
      "39": "self, room_creator: int = 200, is_public: bool = True, room_version: int = None, tok: int = 200, expect_code: int = 200,",
      "40": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str]= None, expect_code: int = 200,",
      "41": "self, room_creator: str = [], is_public: bool = True, room_version: str = [], tok: str = [], expect_code: int = 200,",
      "42": "self, room_creator: str, is_public: bool = True, room_version: str, tok: str = 0 expect_code: int = 200,",
      "43": "self, room_creator: args = None, is_public: bool = True, room_version: args = None, tok: args = None, expect_code: int = 200,",
      "44": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optional[str] = None, expect_coding: int = 200,",
      "45": "self, room_creator: str, is_public: bool = True, room_version: str, tok: str = 0, expect_code: int = 200,",
      "46": "self, room_creator: choice[str] = None, is_public: bool = True, room_version: choice[str] = None, tok: option[str] = None, expect_code: int = 200,",
      "47": "self, room_creator: str = \"\", is_public: bool = True, room_version: str = \"\", tok: str = \",\"\", expect_code: int = 200,",
      "48": "self, room_creator: str = \"\"), is_public: bool = True, room_version: str = \"\"), tok: str = \"\"), expect_code: int = 200,",
      "49": "self, room_creator: Optional[str] = None, is_public: bool = True, room_version: Optional[str] = None, tok: Optionals[str] = None, expect_code: int = 200,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    y: int,\n    channel_id: str = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "target_code": "    y: int,\n    channel_id: Optional[str] = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "warning_line": "    channel_id: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_id is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theislab/squidpy",
    "source_filename": "squidpy/im/crop.py",
    "target_filename": "squidpy/im/crop.py",
    "source_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed^",
    "target_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed",
    "predictions": [
      "y: int, channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?"
    ],
    "correct": true,
    "top_five": {
      "0": "y: int, channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "1": "y: int, channel_id: Optional[str] = None, xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "2": "y: int, channel_id: Optional[str] = None, xs: int = 100: are these defaults reasonable or should no defaults be specified?",
      "3": "y: int, channel_id: Optional[str] = None, xs: optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "4": "y: int, channel_id: str = \"\", xs: int = 100: are these defaults reasonable or should no defaults be specified?",
      "5": "y: int, channel_id: str = \"\", xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "6": "y: int, channel_id: str, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "7": "y: int, channel_id: Optional[str] = None, xs: int = 100; # TODO: are these defaults reasonable or should no defaults be specified?",
      "8": "y: int, channel_id: str = '', xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "9": "y: int, channel_id: Optional[str] = None, xs: Optional[int] = 100: are these defaults reasonable or should no defaults be specified?",
      "10": "y: int, channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults unreasonable or should no defaults be specified?",
      "11": "y: int, channel_id: Optional[str] = None, xs: int = 100 # TODO: are these defaults reasonable or should no defaults be specified?",
      "12": "y: int, channel_id: Optional[str] = None, xs: int = 100 -----, # TODO: are these defaults reasonable or should no defaults be specified?",
      "13": "y: int, channel_id: Optional[Str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "14": "y: int, channel_id: Optional[str] = None, xs: options.int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "15": "y: int, channel_id: str = '', xs: int = 100: are these defaults reasonable or should no defaults be specified?",
      "16": "y: int, channel_id: Optional[str] = None, xs: optional[int] = 100: are these defaults reasonable or should no defaults be specified?",
      "17": "y: int, channel_ids: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "18": "y: int, channel_id: option[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "19": "y: int, channel_id=None, xs=100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "20": "y: int, channel_id: Optional[str] = None, xs: int = 100: \"\", # TODO: are these defaults reasonable or should no defaults be specified?",
      "21": "y: int, channel_id: str, xs: int = 100: are these defaults reasonable or should no defaults be specified?",
      "22": "y: int, channel_id: option[str] = None, xs: option[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "23": "y: int, channel_id: Optional[str] = None, xs: Optional[int] = 100, # TODO: are these defaults unreasonable or should no defaults be specified?",
      "24": "y: int, channel_id: str = 100, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "25": "y: int, channel_id: Optional[str] = None, xs: int = 100: # TODO: are these defaults reasonable or should no defaults be specified?",
      "26": "y: int, channel_id: Optional[str] = None, xs: int = 100, # TODO: is this defaults reasonable or should no defaults be specified?",
      "27": "y: int, channel_id: Optional[Str] = None, xs: Optional[int] = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "28": "y: int, channel_id: Optional[str] = None, xs: int = 100 --, # TODO: are these defaults reasonable or should no defaults be specified?",
      "29": "y: int, channel_id: Optional[str] = None, xs: Optional[int] = 100; # TODO: are these defaults reasonable or should no defaults be specified?",
      "30": "y: int, channel_id: str=\"\", xs: int = 100: \"\", # TODO: are these defaults reasonable or should no defaults be specified?",
      "31": "y: int, channel_id: Optional[str] = None, xs: int = 100,",
      "32": "y: int, channel_id: str = [], xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "33": "y: int, channel_id: str, xs: int, # TODO: are these defaults reasonable or should no defaults be specified?",
      "34": "y: int, channel_id: str=\"\", xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "35": "y: int, channel_id: str = \",\", xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "36": "y: int, channel_id: str=\"\", xs: int = 100 \"\", # TODO: are these defaults reasonable or should no defaults be specified?",
      "37": "y: int, channel_id: Optional[str] = None, xs: optional[int] = 100, # TODO: are these defaults unreasonable or should no defaults be specified?",
      "38": "y: int, channel_id: str=\"\", xs: int = 100: are these defaults reasonable or should no defaults be specified?",
      "39": "y: int, channel_id: Optional[str] = None, xs = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "40": "y: int, channel_id: str = \"\", xs: int = 100: \"\", # TODO: are these defaults reasonable or should no defaults be specified?",
      "41": "y: int, channel_id=str, xs=100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "42": "y: int, channel_id: Optional[str] = None, xs: Optional[int] = 100, # TODO: is this defaults reasonable or should no defaults be specified?",
      "43": "y: int, channel_id: str = 0, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "44": "y: int, channel_id: str = \"\", xs: int = 100; # TODO: are these defaults reasonable or should no defaults be specified?",
      "45": "y: int, channel_id = \"\", xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "46": "y: int, channel_id: str = (), xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "47": "y: int, channel_id: str = 1, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "48": "y: int, channel_id: Optional[str] = None, xs: int = 100: are these defaults unreasonable or should no defaults be specified?",
      "49": "y: int, channel_id = \"\", xs = 100, # TODO: are these defaults reasonable or should no defaults be specified?"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        user_id:      str,\n        display_name: str  = None,\n        avatar_url:   str  = None,\n        power_level:  int  = 0,\n",
    "target_code": "        user_id:      str,\n        display_name: Optional[str] = None,\n        avatar_url:   Optional[str] = None,\n        power_level:  int  = 0,\n",
    "warning_line": "        display_name: str  = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " display_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 501,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/rooms.py",
    "target_filename": "nio/rooms.py",
    "source_changeid": "54370462a3691387e011912c8450ee062168198a^",
    "target_changeid": "54370462a3691387e011912c8450ee062168198a",
    "predictions": [
      "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,"
    ],
    "correct": true,
    "top_five": {
      "0": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "1": "user_id: str, display_name: str, avatar_url: str, power_level: int = 0,",
      "2": "user_id: str, display_name: option[str] = None, avatar_url: Option[str] = None, power_level: int = 0,",
      "3": "user_id: str, display_name: typing.Optional[str] = None, avatar_url: typing.Optional[str] = None, power_level: int = 0,",
      "4": "user_id: str, display_name: option[str] = None, avatar_url: option[str] = None, power_level: int = 0,",
      "5": "user_id: str, display_name: Optional[Str] = None, avatar_url: Optional[Str] = None, power_level: int = 0,",
      "6": "user_id: str, display_name: option[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "7": "user_id: str, display_name: Union[str, None] = None, avatar_url: Union[str, None] = None, power_level: int = 0,",
      "8": "user_id: str, display_name: str = '', avatar_url: str = '', power_level: int = 0,",
      "9": "user_id: str, display_name_id: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "10": "user_id: str, display_names: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "11": "user_id: str, displayed_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "12": "user_id: str, display_name: str = \"\", avatar_url: str = \"\", power_level: int = 0,",
      "13": "user_id: str, show_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "14": "user_id: str, display_name: options.str = None, avatar_url: options.str = None, power_level: int = 0,",
      "15": "user_id: str, display_name: Type.Optional[str] = None, avatar_url: Type.Optional[str] = None, power_level: int = 0,",
      "16": "user_id: str, display_name: options.Str = None, avatar_url: options.Str = None, power_level: int = 0,",
      "17": "user_id: str, display_name: Union[str, str] = None, avatar_url: Union[str, str] = None, power_level: int = 0,",
      "18": "user_id: str, display_name: tuple[str] = None, avatar_url: tuple[str] = None, power_level: int = 0,",
      "19": "user_id: str, display_name: choice[str] = None, avatar_url: choice[str] = None, power_level: int = 0,",
      "20": "user_id: str, display_name: Optional[Str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "21": "user_id: str, display_name: Optional[Str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "22": "user_id: str, display_name: str, avatar_url: Optional[str] = None, power_level: int = 0,",
      "23": "user_id: str, display_name: optional[str] = None, avatar_url: optional[str] = None, power_level: int = 0,",
      "24": "user_id: str, display_name: Options[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "25": "user_id: str, display_name: Choice[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "26": "user_id: str, display_name: options[str] = None, avatar_url: options[str] = None, power_level: int = 0,",
      "27": "user_id: str, display_name: option[str] = None, avatar_url: options[str] = None, power_level: int = 0,",
      "28": "user_id: str, display_name: Options.Str = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "29": "user_id: str, display_name: '', avatar_url: '', power_level: int = 0,",
      "30": "user_id: str, display_name: Options.Str = None, avatar_url: Options.Str = None, power_level: int = 0,",
      "31": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0, user_id: Optional[str] = None,",
      "32": "user_id: str, display_name, avatar_url: Optional[str] = None, power_level: int = 0,",
      "33": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0",
      "34": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0, _avatar_url: Optional[str] = None,",
      "35": "user_id: str, display_name: str = 'default', avatar_url: str = 'default', power_level: int = 0,",
      "36": "user_id: str, display_name: Optional[str] = None, avatar_url: Optionals[str] = None, power_level: int = 0,",
      "37": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = False, power_level: int = 0,",
      "38": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, energy_level: int = 0,",
      "39": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0, display_name: Optional[str] = None,",
      "40": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,...",
      "41": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: imt = 0,",
      "42": "user_id: str, display_name: str, avatar_url: str, power_level: int = 0,",
      "43": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0, _avatar_url: Optional[str] = None",
      "44": "user_id: str, display_name: str, avatar_url: str = \"\", power_level: int = 0,",
      "45": "user_id: str, display_name: Type.Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0,",
      "46": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str]=None, power_level: int = 0,",
      "47": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0, click_url: Optional[str] = None,",
      "48": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, powers_level: int = 0,",
      "49": "user_id: str, display_name: Optional[str] = None, avatar_url: Optional[str] = None, power_level: int = 0, default_name: Optional[str] = None,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "target_code": "\n    def __init__(self, chat: 'Chat', *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "warning_line": "    def __init__(self, chat: 'Chat' = None, *,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " chat is declared to have type `Chat` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 243,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/ehForwarderBot",
    "source_filename": "ehforwarderbot/chat.py",
    "target_filename": "ehforwarderbot/chat.py",
    "source_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b^",
    "target_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b",
    "predictions": [
      "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "1": "def __init__( self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "2": "def __init__(self, chat: Optional['Chat'], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "3": "def __init__(self, chat: Optional['Chat'] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "4": "def __init__(self, chat: Optional['Chat'] = None, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "5": "def __init__(self, chat: Optional['Chat'], *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "6": "def __init__( self, chat: Optional['Chat'], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "7": "def __init__( self, chat: Optional['Chat'] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "8": "def __init__( self, chat: Optional['Chat'] = None, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "9": "def __init__( self, chat: Optional['Chat'], *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "10": "def __init__(self, chat: 'Chat', *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "11": "def __init__(self, chat: 'Chat, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "12": "def __init__(self, chat: \"Chat\", *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "13": "def __init__(self, chat: 'Chat', *, name: str = '', alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "14": "def __init__(self, chat: Optional['Chat', None] = None, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "15": "def __init__(self, chat: Optional['Chat', *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "16": "def __init__(self, chat: None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "17": "def __init__(self, chat: Optional[\"Chat\", None] = None, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "18": "def __init__(self, chat: Optional[\"Chat\", None], *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "19": "def __init__(self, chat: Optional['Chat', None] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "20": "def __init__(self, chat: Options.Chat, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "21": "def __init__(self, chat: Optional[\"Chat\", None] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "22": "def __init__(self, chat: 'Chat', *, name: str, alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "23": "def __init__( self, chat: 'Chat', *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "24": "def __init__(self, chat: Type['Chat'], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "25": "def __init__(self, chats: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "26": "def __init__( self, chat: 'Chat', *, name: str = '', alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "27": "def __init__(self, chat, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "28": "def __init__( self, chat: Optional['Chat', *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "29": "def __init__(self, chat = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "30": "def __init__(self, chats: Optional['Chat'] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "31": "def __init__(self, chat: Union['Chat', None], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "32": "def __init__( self, chat: 'Chat, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "33": "def __init__(self, chat: 'Chat', *, name: str = \"\"), alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "34": "def __init__(self, chat: Union['Chat', None] = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "35": "def __init__( self, chat: \"Chat\", *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "36": "def __init__(self, chats: Optional['Chat'], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "37": "def __init__(self, chat: Optional[\"Chat\", None], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "38": "def __init__(self, chat: Types.Chat, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "39": "def __init__( self, chat: None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "40": "def __init__(self, chat: Optional['Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "41": "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), ) -> None:",
      "42": "def __init__(self, chat: 'Chat', *, name: str = \",\" alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "43": "def __init__(self, chat: 'Chat.', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "44": "def __init__(self, chat: None, *, name: Optional[str] = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "45": "def __init__(self, chat: ['Chat'], *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "46": "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), ):",
      "47": "def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[Str] = None, id: ChatID = ChatID(\"\"),",
      "48": "def __init__( self, chat: 'Chat', *, name: str, alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "49": "def __init__( self, chat = None, *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: int = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "target_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "warning_line": "        timestamp: int = cast(float, message.timestamp)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "robinhood/faust",
    "source_filename": "faust/topics.py",
    "target_filename": "faust/topics.py",
    "source_changeid": "08e3003188557cc18bfd085315892beb1d99584c^",
    "target_changeid": "08e3003188557cc18bfd085315892beb1d99584c",
    "predictions": [
      "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)"
    ],
    "correct": true,
    "top_five": {
      "0": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "1": "value: bytes = cast(bytes, message.value) timestamps: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "2": "value: bytes = cast(bytes, message.value) timestamp: floating=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "3": "value: bytes = cast(bytes, message.value) timestamp=float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "4": "value: bytes = cast(bytes, message.value) timestamp: floating = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "5": "value: bytes = cast(bytes, message.value) timestamp=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "6": "value: bytes = cast(bytes, message.value) timestamp = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "7": "value: bytes = cast(bytes, message.value) timestamp_float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_float)",
      "8": "value: bytes = cast(bytes, message.value) timestamp=args.cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "9": "value: bytes = cast(bytes, message.value) timestamps = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "10": "value: bytes = cast(bytes, message.value) timestamp_float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "11": "value: bytes = cast(bytes, message.value) timestamp_type: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_type)",
      "12": "value: bytes = cast(bytes, message.value) timestamp: flot = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "13": "value: bytes = cast(bytes, message.value) timestamp: int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "14": "value: bytes = cast(bytes, message.value) timestamp = float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "15": "value: bytes = cast(bytes, message.value) timestamps_: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "16": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "17": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timetamp)",
      "18": "value: bytes = cast(bytes, message.value) timestamp= cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "19": "value: bytes = cast(bytes, message.value) timestamp_number: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_number)",
      "20": "value: bytes = cast(bytes, message.value) timestamp_float=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_float)",
      "21": "value: bytes = cast(bytes, message.value) timestamp_type: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "22": "value: bytes = cast(bytes, message.value) timestamp: float=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "23": "value: bytes = cast(bytes, message.value) timestamp: float = casting(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "24": "value: bytes = cast(bytes, message.value) timestamp_float: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_float)",
      "25": "value: bytes = cast(bytes, message.value) timestamp_type = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_type)",
      "26": "value: bytes = cast(bytes, message.value) timestamp_: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_)",
      "27": "value: bytes = cast(bytes, message.value) timestamp=int(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "28": "value: bytes = cast(bytes, message.value) timestamp, float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "29": "value: bytes = cast(bytes, message.value) timestamp = float(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "30": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) if value is not None:",
      "31": "value: byte = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "32": "value: bytes = cast(bytes, message.value) timestamp = float or float(message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "33": "value: bytes = cast(bytes, message.value) timestamp = cast(float, float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "34": "value: bytes = cast(bytes, message.value) timestamp_: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "35": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) else:",
      "36": "value: bytes = cast(bytes, message.value) timestamp_id: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp_id)",
      "37": "value: bytes = cast(bytes, message.value, float) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "38": "value: int = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "39": "value: bytes = cast(bytes, message.value) timestamp=int = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "40": "value: bytes = cast(bytes, message.value) timestamp=float or float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "41": "value: bytes = cast(bytes, message.value) timestampa=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestampa)",
      "42": "value: bytes = cast(bytes, message.value) timestamp, float=cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "43": "value: bytes = cast(bytes, message.value) timestamp: floating= cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "44": "value: bytes = cast(bytes, message.value) timestamp=false = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "45": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \"\"\"",
      "46": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) if a key is not None:",
      "47": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) if key is not None:",
      "48": "value: bytes = cast(bytes, message.value) timestamp: floating_type = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "49": "value: bytes = cast(bytes, message.value) timestampstamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def get(self, key: str, default: Optional = None) -> Any:\n        try:\n",
    "target_code": "\n    def get(self, key: str, default: Optional[Any] = None) -> Any:\n        try:\n",
    "warning_line": "    def get(self, key: str, default: Optional = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " default is declared to have type `Optional[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 119,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ducdetronquito/scalpl",
    "source_filename": "scalpl/scalpl.py",
    "target_filename": "scalpl/scalpl.py",
    "source_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216^",
    "target_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216",
    "predictions": [
      "def get(self, key: str, default: Optional[Any] = None) -> Any: try:"
    ],
    "correct": true,
    "top_five": {
      "0": "def get(self, key: str, default: Optional[Any] = None) -> Any: try:",
      "1": "def get(self, key: str, default: Optional[str] = None) -> Any: try:",
      "2": "def get(self, key: str, default: Optional[any] = None) -> Any: try:",
      "3": "def get( self, key: str, default: Optional[Any] = None ) -> Any: try:",
      "4": "def get(self, key: str, default: Optional[Str] = None) -> Any: try:",
      "5": "def get(self, key: str, default: Optional[None] = None) -> Any: try:",
      "6": "def get(self, key: str, default: Optional[none] = None) -> Any: try:",
      "7": "def get( self, key: str, default: Optional[str] = None ) -> Any: try:",
      "8": "def get(self, key: str, default: Optional[All] = None) -> Any: try:",
      "9": "def get(self, key: str, default: Optional[List[str]] = None) -> Any: try:",
      "10": "def get(self, key: str, default: Optional[String] = None) -> Any: try:",
      "11": "def get(self, key: str, default: Optional = None) -> Any: try:",
      "12": "def get(self, key: str, default: Optional[Optional[str]] = None) -> Any: try:",
      "13": "def get(self, key: str, default: Optional[i] = None) -> Any: try:",
      "14": "def get(self, key: str, default: Optional[label] = None) -> Any: try:",
      "15": "def get(self, key: str, default: Optional[e] = None) -> Any: try:",
      "16": "def get(self, key: str, default: Optional[optional] = None) -> Any: try:",
      "17": "def get(self, key: str, default: Optional[0] = None) -> Any: try:",
      "18": "def get(self, key: str, default: Optional[null] = None) -> Any: try:",
      "19": "def get(self, key: str, default: Optional[Optional[str] = None) -> Any: try:",
      "20": "def get(self, key: str, default: Optional[Any] = None): try:",
      "21": "def get(self, key: str, default: Optional[ Any] = None) -> Any: try:",
      "22": "def get(self, key: str, default: Optional[value] = None) -> Any: try:",
      "23": "def get(self, key: str, default: Optional[type] = None) -> Any: try:",
      "24": "def get(self, key: str, default: Optional[=None] = None) -> Any: try:",
      "25": "def get(self, key: str, default: Optional[Optional] = None) -> Any: try:",
      "26": "def get(self, key: str, default: Optional[Type[Any]] = None) -> Any: try:",
      "27": "def get(self, key: str, default: Optional[Attr] = None) -> Any: try:",
      "28": "def get(self, key: str, default: Optional[Any] = None) -> Anything: try:",
      "29": "def get(self, key: str, default: Optional[isNone] = None) -> Any: try:",
      "30": "def get(self, key: str, default: Optional[[str] = None) -> Any: try:",
      "31": "def get(self, key: str, default: Optional[Any] = None ) -> Any: try:",
      "32": "def get(self, key: str, default: Optional[Already Used] = None) -> Any: try:",
      "33": "def get(self, key: str, default: Optional[\"\"] = None) -> Any: try:",
      "34": "def get(self, key: str, default: Optional[Test] = None) -> Any: try:",
      "35": "def get(self, key: str, default: Optional[bool] = None) -> Any: try:",
      "36": "def get(self, key: str, default: Optional[If] = None) -> Any: try:",
      "37": "def get(self, key: str, default: OptionalAny = None) -> Any: try:",
      "38": "def get(self, key: str, default: Optional[r] = None) -> Any: try:",
      "39": "def get(self, key: str, default: Optional[string] = None) -> Any: try:",
      "40": "def get(self, key: str, default: Optional[Y] = None) -> Any: try:",
      "41": "def get(self, key: str, default: Optional[z] = None) -> Any: try:",
      "42": "def get(self, key: str, default: Optional[str] = None -> Any: try:",
      "43": "def get(self, key: str, default: Optional[] = None) -> Any: try:",
      "44": "def get(self, key: str, default: Optional[other] = None) -> Any: try:",
      "45": "def get(self, key: str, default: Optional[...] = None) -> Any: try:",
      "46": "def get(self, key: str, default: Optional[Any] = None -> Any: try:",
      "47": "def get( self, key: str, default: Optional[Any] = None ) -> Any : try:",
      "48": "def get( self, key: str, default: Optional[str] = None ) -> Any : try:",
      "49": "def get(self, key: str, default: Optional[str] = None) -> Anything: try:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        project_id: str,\n        region: str = None,\n        location: Optional[str] = None,\n",
    "target_code": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
    "warning_line": "        region: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " region is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 931,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "project_id: str, region: Optional[str] = None, location: Optional[str] = None,"
    ],
    "correct": true,
    "top_five": {
      "0": "project_id: str, region: Optional[str] = None, location: Optional[str] = None,",
      "1": "project_id: str, region: Union[str, None] = None, location: Optional[str] = None,",
      "2": "project_id: str, region_id: Optional[str] = None, location: Optional[str] = None,",
      "3": "project_id: str, region: optional[str] = None, location: Optional[str] = None,",
      "4": "project_id: str, region: Optional[Str] = None, location: Optional[str] = None,",
      "5": "project_id: str, region: Options.Optional[str] = None, location: Optional[str] = None,",
      "6": "project_id: str, region: Optional[str]=None, location: Optional[str] = None,",
      "7": "project_id: str, region: option[str] = None, location: Optional[str] = None,",
      "8": "project_id: str, region: T.Optional[str] = None, location: Optional[str] = None,",
      "9": "project_id: str, region: tuple[str] = None, location: Optional[str] = None,",
      "10": "project_id: str, region: Options.Str = None, location: Optional[str] = None,",
      "11": "project_id: str, region: Optional[str] = None, position: Optional[str] = None,",
      "12": "project_id: str, area: Optional[str] = None, location: Optional[str] = None,",
      "13": "project_id: str, region: Options[str] = None, location: Optional[str] = None,",
      "14": "project_id: str, regional: Optional[str] = None, location: Optional[str] = None,",
      "15": "project_id: str, region: Optional[str] = None, location: Optional[str] = None,",
      "16": "project_id: str, region: Options.str = None, location: Optional[str] = None,",
      "17": "project_id: str, regions: Optional[str] = None, location: Optional[str] = None,",
      "18": "project_id: str, region: Default[str] = None, location: Optional[str] = None,",
      "19": "project_id: str, region = Optional[str] = None, location: Optional[str] = None,",
      "20": "project_id: str, region: Optional[str] = None, location: Options.Optional[str] = None,",
      "21": "project_id: str, region: Selector[str] = None, location: Optional[str] = None,",
      "22": "project_id: str, region: Optionally[str] = None, location: Optional[str] = None,",
      "23": "project_id: str, region: str, location: Optional[str] = None,",
      "24": "project_id: str, region: Choice[str] = None, location: Optional[str] = None,",
      "25": "project_id: str, region: str, location: Optional[str] = None,",
      "26": "project_id: str, region: Optional[str] = none, location: Optional[str] = None,",
      "27": "project_id: str, region=None, location= Optional[str] = None,",
      "28": "project_id: str, region: Optional[str] = None, location: Optional[str]= None,",
      "29": "project_id: str, region: Select[str] = None, location: Optional[str] = None,",
      "30": "project_id: str, region: Alternative[str] = None, location: Optional[str] = None,",
      "31": "project_id: str, region: List[str] = None, location: Optional[str] = None,",
      "32": "project_id: str, region: Optional[str] = None, location: Optional[Str] = None,",
      "33": "project_id: str, region: String(str), location: Optional[str] = None,",
      "34": "project_id: str, region: bool = None, location: Optional[str] = None,",
      "35": "project_id: str, region: \"\"\", location: Optional[str] = None,",
      "36": "project_id: str, region: Optional[str], location: Optional[str] = None,",
      "37": "project_id: str, region: float = None, location: Optional[str] = None,",
      "38": "project_id: str, region: '' = None, location: Optional[str] = None,",
      "39": "project_id: str, region: '', location: Optional[str] = None,",
      "40": "project_id: str, region=None, location=Optional[str] = None,",
      "41": "project_id: str, region: Optional[str] = None, location: Optional[str] = none,",
      "42": "project_id: str, region: '' + str, location: Optional[str] = None,",
      "43": "project_id: str, region: \"\", location: Optional[str] = None,",
      "44": "project_id: str, region: 0 = None, location: Optional[str] = None,",
      "45": "project_id: str, region: Optional[str] = None, location: Optional[str] = All,",
      "46": "project_id: str, region: Optional[str] = None, location: Optional[str ] = None,",
      "47": "project_id: str, region: Optional[str] = None, location: Optional[str],",
      "48": "project_id: str, region: Optional[str] = None, location: Optional[str] | None = None,",
      "49": "project_id: str, region: Any = None, location: Optional[str] = None,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None,\n) -> Any:\n",
    "target_code": "    persistence_store: BasePersistenceLayer,\n    config: Optional[IdempotencyConfig] = None,\n) -> Any:\n",
    "warning_line": "    config: IdempotencyConfig = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " config is declared to have type `IdempotencyConfig` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "target_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Any:"
    ],
    "correct": true,
    "top_five": {
      "0": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Any:",
      "1": "persistence_store: BasePersistenceLayer, configs: Optional[IdempotencyConfig] = None, ) -> Any:",
      "2": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, () -> Any:",
      "3": "persistence_store: BasePersistenceLayer, config_type: Optional[IdempotencyConfig] = None, ) -> Any:",
      "4": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ), -> Any:",
      "5": "persistence_store: BasePersistenceLayer, config: IdempotencyConfig, ) -> Any:",
      "6": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, [] ) -> Any:",
      "7": "persistence_store: BasePersistenceLayer, config: Type.IdempotencyConfig, ) -> Any:",
      "8": "persistence_store: BasePersistenceLayer, config=None, ) -> Any:",
      "9": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Anything:",
      "10": "persistence_store: BasePersistenceLayer, config = Optional[IdempotencyConfig] = None, ) -> Any:",
      "11": "persistence_store: BasePersistenceLayer, config: option[IdempotencyConfig] = None, ) -> Any:",
      "12": "persistence_store: BasePersistenceLayer, config(): Optional[IdempotencyConfig] = None, ) -> Any:",
      "13": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \"\"\" ) -> Any:",
      "14": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None ) -> Any:",
      "15": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \"\" ) -> Any:",
      "16": "persistence_store: BasePersistenceLayer, config: Type[IdempotencyConfig] = None, ) -> Any:",
      "17": "persistence_store: BasePersistenceLayer, config_types: Optional[IdempotencyConfig] = None, ) -> Any:",
      "18": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None,...) -> Any:",
      "19": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> None:",
      "20": "persistence_store: BasePersistenceLayer, config_options: Optional[IdempotencyConfig] = None, ) -> Any:",
      "21": "persistence_store: BasePersistenceLayer, config: Options.IdempotencyConfig, ) -> Any:",
      "22": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \"\") -> Any:",
      "23": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Any:",
      "24": "persistence_store: BasePersistenceLayer, config_: Optional[IdempotencyConfig] = None, ) -> Any:",
      "25": "persistence_store: BasePersistenceLayer, config-type: Optional[IdempotencyConfig] = None, ) -> Any:",
      "26": "persistence_store: BasePersistenceLayer, config = IdempotencyConfig, ) -> Any:",
      "27": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \"\", ) -> Any:",
      "28": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None,, ) -> Any:",
      "29": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ( ) -> Any:",
      "30": "persistence_store: BasePersistenceLayer, config__: Optional[IdempotencyConfig] = None, ) -> Any:",
      "31": "persistence_store: BasePersistenceLayer, config=IdempotencyConfig, ) -> Any:",
      "32": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None,",
      "33": "persistence_store: BasePersistenceLayer, configs_: Optional[IdempotencyConfig] = None, ) -> Any:",
      "34": "persistence_store: BasePersistenceLayer, config: Type.Optional[IdempotencyConfig] = None, ) -> Any:",
      "35": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) -> Any:",
      "36": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None,, ) -> Any:",
      "37": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, --, ) -> Any:",
      "38": "persistence_store: BasePersistenceLayer, config: UseOptional[IdempotencyConfig] = None, ) -> Any:",
      "39": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = none, ) -> Any:",
      "40": "persistence_store: BasePersistenceLayer, config, Optional[IdempotencyConfig] = None, ) -> Any:",
      "41": "persistence_store: BasePersistenceLayer, config: Types.IdempotencyConfig, ) -> Any:",
      "42": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ):",
      "43": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, ) ->Any:",
      "44": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, [) -> Any:",
      "45": "persistence_store: BasePersistenceLayer, config: ConfigurationType.IdempotencyConfig, ) -> Any:",
      "46": "persistence_store: BasePersistenceLayer, config: Modal[IdempotencyConfig] = None, ) -> Any:",
      "47": "persistence_store: BasePersistenceLayer, config: Typology.IdempotencyConfig, ) -> Any:",
      "48": "persistence_store: BasePersistenceLayer, config = 'IdempotencyConfig', ) -> Any:",
      "49": "persistence_store: BasePersistenceLayer, config: Optional[ IdempotencyConfig] = None, ) -> Any:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_line": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "alibaba/TinyNeuralNetwork",
    "source_filename": "tinynn/converter/operators/tflite/transformable.py",
    "target_filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1^",
    "target_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "predictions": [
      "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "1": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "2": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "3": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "4": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "5": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "6": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.FAILURE):",
      "7": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "8": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "9": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[Type]] = None, fusedActivationFun",
      "10": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.FAILURE):",
      "11": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[Type]] = None, fusedActivationFunction",
      "12": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.FINE):",
      "13": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters]",
      "14": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[type]] = None, fusedActivationFun",
      "15": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.FAILURE):",
      "16": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE,...):",
      "17": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "18": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.Optional[Tensor]):",
      "19": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.FAILURE):",
      "20": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float, quantization: typing.Optional[typing.QuantizationParameters]):",
      "21": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "22": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.FAILURE):",
      "23": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float):",
      "24": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float):",
      "25": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] =",
      "26": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, fusedActivationFunction=tflite.Optional[Tensor]] =",
      "27": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, fusedActivationFun",
      "28": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NEW):",
      "29": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "30": "def __init__( self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE ):",
      "31": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType",
      "32": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.Optional[Ten",
      "33": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType",
      "34": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.FALSE):",
      "35": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[type]] = None, fusedActivationFunction",
      "36": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = (), fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "37": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters]] = None, fusedActivationFunction",
      "38": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.QuantizationParameters, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "39": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.YAY):",
      "40": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[Tensor] = None, fusedActivationFun",
      "41": "def __init__( self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE ):",
      "42": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:",
      "43": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = [], fusedActivationFunction=tflite.ActivationFunctionType.NONE]):",
      "44": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantizations: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "45": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, eps: float, quantization: typing.Optional[typing.Optional[QuantizationParameters]] = None, fusedActivationFunction=tflite.Optional[Ten",
      "46": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "47": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.NONE, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters: typing.Fun",
      "48": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, fusedActivationFunction=tflite.ActivationFunctionType.FINE):",
      "49": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, fusedActivationFunction=tflite.ActivationFunctionType.FINE):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        exchange: str = None,\n        *,\n",
    "target_code": "        self,\n        exchange: str = '',\n        *,\n",
    "warning_line": "        exchange: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exchange is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, exchange: str = '', *,"
    ],
    "correct": true,
    "top_five": {
      "0": "self, exchange: str = '', *,",
      "1": "self, exchange: str = \"\", *,",
      "2": "self, exchange: str, *,",
      "3": "self, exchange: Optional[str] = None, *,",
      "4": "self, exchange: typing.Optional[str] = None, *,",
      "5": "self, exchange: str = \"\"), *,",
      "6": "self, exchange: str = [], *,",
      "7": "self, exchange: str | Optional[YAHOO.Optional[str]] = None, *,",
      "8": "self, exchange: str | Optional[None] = None, *,",
      "9": "self, exchange: str = (), *,",
      "10": "self, exchange: str = 0 *, *,",
      "11": "self, exchange: str = '0', *,",
      "12": "self, exchange: option[str] = None, *,",
      "13": "self, exchange: str = Optional[None] = None, *,",
      "14": "self, exchange: str | Optional[YAHOO].Optional[str] = None, *,",
      "15": "self, exchange: str | Optional[YAHOO.Default[str]] = None, *,",
      "16": "self, exchange: str = 0*, *,",
      "17": "self, exchange: str = Optional[0] = None, *,",
      "18": "self, exchanges: str = '', *,",
      "19": "self, exchange: str = 0, *,",
      "20": "self, exchange: str = \",\", *,",
      "21": "self, exchange: str | Optional[YAHOO.utils.Optional[str]] = None, *,",
      "22": "self, exchange: str | Optional[YAHOO] = None, *,",
      "23": "self, exchange: str = '' *,",
      "24": "self, exchange: str | Optional[YAHOO.Defaults[str]] = None, *,",
      "25": "self, exchange: str | Optional[YAHOO.None] = None, *,",
      "26": "self, exchange: str | Optional[YAHOO.Type[str]] = None, *,",
      "27": "self, exchange: str = 'undefined', *,",
      "28": "self, exchange: str | None = '', *,",
      "29": "self, exchange: str | Optional[YAHOO].None = None, *,",
      "30": "self, exchange: str = False, *,",
      "31": "self, exchange: str = Optional[\"\"] = None, *,",
      "32": "self, exchange: str = \"\" + str, *,",
      "33": "self, exchange: str = 0 = 0? '' : '', *,",
      "34": "self, exchange: str = 'none', *,",
      "35": "self, exchange: str = '', *,",
      "36": "self, exchange: str | Optional[YAHOO.Task] = None, *,",
      "37": "self, exchange: str | Optional[YAHOO.Task[str]] = None, *,",
      "38": "self, exchange: str = 'None', *,",
      "39": "self, exchange: str = 1, *,",
      "40": "self, exchange: str | Optional[YAHOO.utils[str]] = None, *,",
      "41": "self, exchange: str | Optional[YAHOO.Default] = None, *,",
      "42": "self, exchange: str | Optional[YAHOO.utils.defaults[str]] = None, *,",
      "43": "self, exchange: str = ''*, *,",
      "44": "self, exchange: str = 0 (), *,",
      "45": "self, exchange: str = '', *,",
      "46": "self, exchange: str = '' *, *,",
      "47": "self, exchange: str = 0 *,",
      "48": "self, exchange: str | Optional[YAHOO.utils.None] = None, *,",
      "49": "self, exchange: str='', *,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: int = 1.0,\n                 ):\n",
    "target_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
    "warning_line": "                 noise_variance: int = 1.0,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " noise_variance is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "GPflow/GPflow",
    "source_filename": "gpflow/models/sgpr.py",
    "target_filename": "gpflow/models/sgpr.py",
    "source_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb^",
    "target_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb",
    "predictions": [
      "num_latent: Optional[int] = None, noise_variance: float = 1.0, ):"
    ],
    "correct": true,
    "top_five": {
      "0": "num_latent: Optional[int] = None, noise_variance: float = 1.0, ):",
      "1": "num_latent: Optional[int] = None, noise_variance: floating int = 1.0, ):",
      "2": "num_latent: Optional[int] = None, noise_variance: int = 1.0, ):",
      "3": "num_latent: Optional[int] = None, noise_variance: Optional[int] = 1.0, ):",
      "4": "num_latent: Optional[int] = None, noise_variance = 1.0, ):",
      "5": "num_latent: Optional[int] = None, noise_variance: floating_variance = 1.0, ):",
      "6": "num_latent: Optional[int] = None, noise_variance=1.0, ):",
      "7": "num_latent: Optional[int] = None, noise_variance = float = 1.0, ):",
      "8": "num_latent: Optional[int] = None, noise_variance: int, ):",
      "9": "num_latent: Optional[int] = None, noise_variance: float = int, ):",
      "10": "num_latent: Optional[int] = None, noise_variance: float = 1.0 ):",
      "11": "num_latent: Optional[int] = None, noise_variance: optional[int] = 1.0, ):",
      "12": "num_latent: Optional[int] = None, noise_variance: value = 1.0, ):",
      "13": "num_latent: Optional[int] = None, noise_variance = float, ):",
      "14": "num_latent: Optional[int] = None, noise_variance: typing.Optional[int] = 1.0, ):",
      "15": "num_latent: Optional[int] = None, noise_variance: int = 0, ):",
      "16": "num_latent: Optional[int] = None, noise_variance: choice[int] = 1.0, ):",
      "17": "num_latent: Optional[int] = None, noise_variance = int(1.0), ):",
      "18": "num_latent: Optional[int] = None, noise_variances: float = 1.0, ):",
      "19": "num_latent: Optional[int] = None, noise_variance: floating_type = 1.0, ):",
      "20": "num_latent: Optional[int] = None, noise_variance: async float = 1.0, ):",
      "21": "num_latent: Optional[int] = None, noise_variance: type[int] = 1.0, ):",
      "22": "num_latent: Optional[int] = None, noise_variance: Optional[float] = 1.0, ):",
      "23": "num_latent: Optional[int] = None, noise_variance_variance = float = 1.0, ):",
      "24": "num_latent: Optional[int] = None, noise_variance_type: float = 1.0, ):",
      "25": "num_latent: Optional[int] = None, noise_variance_variance: float = 1.0, ):",
      "26": "num_latent: Optional[int] = None, noise_variance_int = 1.0, ):",
      "27": "num_latent: Optional[int] = None, noise_variance: float = 1.0, ):",
      "28": "num_latent: Optional[int] = None, noise_variance: int = 1.0 ):",
      "29": "num_latent: Optional[int] = None, noise_variance: optional[int] = 1.0, ):",
      "30": "num_latent: Optional[int] = None, noise_variance: floating int = 1.0 ):",
      "31": "num_latent: Optional[int] = None, noise_variance: floating point = 1.0, ):",
      "32": "num_latent: Optional[int] = None, noise_variance: float = 1, ):",
      "33": "num_latent: Optional[int] = None, noise_variance: option[int] = 1.0, ):",
      "34": "num_latent: Optional[int] = None, noise_variance: type = float = 1.0, ):",
      "35": "num_latent: Optional[int] = None, noise_variance: type[float] = 1.0, ):",
      "36": "num_latent: Optional[int] = None, noise_variance: options.int = 1.0, ):",
      "37": "num_latent: Optional[int] = None, noise_variance: type = float, ):",
      "38": "num_latent: Optional[int] = None, noise_variance_variance = 1.0, ):",
      "39": "num_latent: Optional[int] = None, noise_variance: float = int(1.0), ):",
      "40": "num_latent: Optional[int] = None, noise_variance: Int = 1.0, ):",
      "41": "num_latent: Optional[int] = None, noise_variance: floating = 1.0, ):",
      "42": "num_latent: Optional[int] = None, noise_variance: variable = 1.0, ):",
      "43": "num_latent: Optional[int] = None, noise_variance: float = 0, ):",
      "44": "num_latent: Optional[int] = None, noise_variance: floating int, ):",
      "45": "num_latent: Optional[int] = None, noise_variance_num = 1.0, ):",
      "46": "num_latent: Optional[int] = None, noise_variance_var = 1.0, ):",
      "47": "num_latent: Optional[int] = None, noise_variance: int = 1, ):",
      "48": "num_latent: Optional[int] = None, noise_variance: integer, ):",
      "49": "num_latent: Optional[int] = None, noise_variance = 0.0, ):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",\n",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_line": "        organization_id: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " organization_id is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mapillary/mapillary_tools",
    "source_filename": "mapillary_tools/upload_api_v4.py",
    "target_filename": "mapillary_tools/upload_api_v4.py",
    "source_changeid": "79159001d365c75215f0c05ba3b7937180563026^",
    "target_changeid": "79159001d365c75215f0c05ba3b7937180563026",
    "predictions": [
      "entity_size: int, organization_id: Optional[int] = None, file_type: FileType = \"zip\","
    ],
    "correct": false,
    "top_five": {
      "0": "entity_size: int, organization_id: Optional[int] = None, file_type: FileType = \"zip\",",
      "1": "entity_size: int, organization_id: typing.Optional[int] = None, file_type: FileType = \"zip\",",
      "2": "entity_size: int, organization_ids: Optional[int] = None, file_type: FileType = \"zip\",",
      "3": "entity_size: int, organization_id=None, file_type: FileType = \"zip\",",
      "4": "entity_size: int, organization_id: option[int] = None, file_type: FileType = \"zip\",",
      "5": "entity_size: int, organization_id: int, file_type: FileType = \"zip\",",
      "6": "entity_size: int, organization_id: Optional[int], file_type: FileType = \"zip\",",
      "7": "entity_size: int, organization_id: Union[int, None] = None, file_type: FileType = \"zip\",",
      "8": "entity_size: int, organization_id: optional[int] = None, file_type: FileType = \"zip\",",
      "9": "entity_size: int, organization_id: Optional[ int] = None, file_type: FileType = \"zip\",",
      "10": "entity_size: int, organisation_id: Optional[int] = None, file_type: FileType = \"zip\",",
      "11": "entity_size: Int, organization_id: Optional[int] = None, file_type: FileType = \"zip\",",
      "12": "entity_size: int, organization_id_type: Optional[int] = None, file_type: FileType = \"zip\",",
      "13": "entity_size: int, organization_id: Optional[str] = None, file_type: FileType = \"zip\",",
      "14": "entity_size: int, organization_ids: typing.Optional[int] = None, file_type: FileType = \"zip\",",
      "15": "entity_size: int, organization_id: choice[int] = None, file_type: FileType = \"zip\",",
      "16": "entity_size: int, organization_id: Optional[Int] = None, file_type: FileType = \"zip\",",
      "17": "entity_size: int, organization_id = -1, file_type: FileType = \"zip\",",
      "18": "entity_size: int, organization_id: Optional[type] = None, file_type: FileType = \"zip\",",
      "19": "entity_size: int, organization_id_id: Optional[int] = None, file_type: FileType = \"zip\",",
      "20": "entity_size: int, organizational_id: Optional[int] = None, file_type: FileType = \"zip\",",
      "21": "entity_size: int, organization_type: Optional[int] = None, file_type: FileType = \"zip\",",
      "22": "entity_size: int, organization_id: TypeError(int), file_type: FileType = \"zip\",",
      "23": "entity_size: int, organization_id: Optional[int] = None, file_type: Optional[FieldType] = \"zip\",",
      "24": "entity_size: int, organization_id: Options.int = None, file_type: FileType = \"zip\",",
      "25": "entity_size: int, organization_id: List[int] = None, file_type: FileType = \"zip\",",
      "26": "entity_size: int, organization_id: Optional[int] = None, file_type: Optional[FileType] = \"zip\",",
      "27": "entity_size: int, organization_id = int, file_type: FileType = \"zip\",",
      "28": "entity_size: int, organization_id: Union[int] = None, file_type: FileType = \"zip\",",
      "29": "entity_size: int, organization_id: type[int] = None, file_type: FileType = \"zip\",",
      "30": "entity_size: int, organization_id: optional[int] = None, file_type: FileType = \"zip\",",
      "31": "entity_size: int, organization_id: Optional[i] = None, file_type: FileType = \"zip\",",
      "32": "entity_size: int, organization_id: TypeError, file_type: FileType = \"zip\",",
      "33": "entity_size: int, organization_id: Choice[int] = None, file_type: FileType = \"zip\",",
      "34": "entity_size: int, organization_id: Optional[i], file_type: FileType = \"zip\",",
      "35": "entity_size: int, organization_id=0, file_type: FileType = \"zip\",",
      "36": "entity_size: int, organization_id: String(int), file_type: FileType = \"zip\",",
      "37": "entity_size: int, organization_id: Int, file_type: FileType = \"zip\",",
      "38": "entity_size: int, organization_id=False, file_type: FileType = \"zip\",",
      "39": "entity_size: int, organization_id: Optional[int] = None, file_type: FileType = (\"zip\",",
      "40": "entity_size: int, organization_id: Union[int], file_type: FileType = \"zip\",",
      "41": "entity_size: int, organization_id: None, file_type: FileType = \"zip\",",
      "42": "entity_size: int, organization_id=None: int, file_type: FileType = \"zip\",",
      "43": "entity_size: int, organization_id = None, file_type: FileType = \"zip\",",
      "44": "entity_size: int, organization_id int = -1, file_type: FileType = \"zip\",",
      "45": "entity_size: int, organization_id = 0, file_type: FileType = \"zip\",",
      "46": "entity_size: int, organization_id: option_id, file_type: FileType = \"zip\",",
      "47": "entity_size: int, organization_id: Optional[int] = None, file_type: FileType = 'zip',",
      "48": "entity_size: int, organization_id(int), file_type: FileType = \"zip\",",
      "49": "entity_size: int, organization_id = \"\", file_type: FileType = \"zip\","
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_line": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/extensions/base.py",
    "target_filename": "pystac/extensions/base.py",
    "source_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752^",
    "target_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "predictions": [
      "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "1": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "2": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "3": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "4": "def _get_property(self, prop_name: str, typ: Type[Any] = Any) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "5": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "6": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] = Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "7": "def _get_property(self, prop_name: str, typ: Type[Any] = None) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "8": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "9": "def _get_property(self, prop_name: str, typ: Type[Any] = str) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "10": "def _get_property(self, prop_name: str, typ: Type[Any] = []) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "11": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "12": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] = Object) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "13": "def _get_property(self, prop_name: str, typ: Optional[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "14": "def _get_property(self, prop_name: str, typ: Type[Any] = Any) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "15": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = any] -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "16": "def _get_property(self, prop_name: str, typ: Type[Any] = Object) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "17": "def _get_property(self, prop_name: str, typ: Type[Any] = any) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "18": "def _get_property(self, prop_name: str, typ: Optional[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "19": "def _get_property(self, prop_name: str, typ: Type[Any] = \"\") -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "20": "def _get_property(self, prop_name: str, typ: Optional[T] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "21": "def _get_property(self, prop_name: str, typ: typ[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "22": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] = Object()) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "23": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] = None) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "24": "def _get_property(self, prop_name: str, typ: Default[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "25": "def _get_property(self, prop_name: str, typ: Type[Any] = Optional[P]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "26": "def _get_property(self, prop_name: str, typ: 'Type[P]' = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "27": "def _get_property(self, prop_name: str, typ: List[P] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "28": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "29": "def _get_property(self, prop_name: str, typ: Union[Type[P]] = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "30": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "31": "def _get_property(self, prop_name: str, typ: Type[Any] = None) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "32": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: result: Optional[type] = self.properties.get(prop_name) if result is not None:",
      "33": "def _get_property(self, prop_name: str, typ: 'P' = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "34": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None] -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "35": "def _get_property(self, prop_name: str, typ: Any = Optional[Type[P]]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "36": "def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "37": "def _get_property(self, prop_name: str, typ: Any = Type[Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "38": "def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "39": "def _get_property(self, prop_name: str, typ: Type[P] = str) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "40": "def _get_property(self, prop_name: str, typ: Optional[T] = Any]) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "41": "def _get_property(self, prop_name: str, typ: Optional[Type[P]] = any] = Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "42": "def _get_property(self, prop_name: str, typ: typ[Any] = Any) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "43": "def _get_property(self, prop_name: str, typ: Type[Any] = Any) -> Optional[P]: result: Optional[str] = self.properties.get(prop_name) if result is not None:",
      "44": "def _get_property(self, prop_name: str, typ: typ[Any] = None) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "45": "def _get_property(self, prop_name: str, typ: Type[Any] = Any] -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "46": "def _get_property(self, prop_name: str, typ: Any = Object) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "47": "def _get_property(self, prop_name: str, typ: Type[Any] = Anything) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:",
      "48": "def _get_property(self, prop_name: str, typ: Pos = Any) -> Optional[P]: result: Optional[pos] = self.properties.get(prop_name) if result is not None:",
      "49": "def _get_property(self, prop_name: str, typ: Any = str) -> Optional[P]: result: Optional[typ] = self.properties.get(prop_name) if result is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "target_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " network_max_retries is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 206,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nabla-c0d3/sslyze",
    "source_filename": "sslyze/utils/ssl_connection.py",
    "target_filename": "sslyze/utils/ssl_connection.py",
    "source_changeid": "761c458b2207abc530b430e56d26bced6e4b9714^",
    "target_changeid": "761c458b2207abc530b430e56d26bced6e4b9714",
    "predictions": [
      "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout"
    ],
    "correct": true,
    "top_five": {
      "0": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "1": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "2": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int], Optional[int] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "3": "def connect(self, network_timeout=None, network_max_retries=None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "4": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int] (int, Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "5": "def connect(self, network_timeout=None, network_max_retries=None): # type: () -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "6": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "7": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int],Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "8": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "9": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "10": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "11": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int] = None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "12": "def connect(self, network_timeout=None, network_max_retries=None): # type: (str, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "13": "def connect(self, network_timeout=None, network_max_retries=None): # type: (None, None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "14": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int] or Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "15": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Array(int, int)) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "16": "def connect(self, network_timeout=None, network_max_retries=None): # type: (...) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "17": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int](int, Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "18": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int, Optional[int]] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "19": "def connect(self, network_timeout=None, network_max_retries=None): # type: (options.int, options.int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "20": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Int, Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "21": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "22": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "23": "def connect(self, network_timeout=None, network_max_retries=None): # type: ( Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "24": "def connect(self, network_timeout=None, network_max_retries=None): # type: (None, Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "25": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int], Optional[int]]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "26": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int] or Optional[int] or None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "27": "def connect(self, network_timeout=None, network_max_retries=None): # type: (_, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "28": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "29": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int,Optional[int]]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "30": "def connect(self, network_timeout=None, network_max_retries=None): # type: (*, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "31": "def connect(self, network_timeout=None, network_max_retries=None): # type: (o, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "32": "def connect(self, network_timeout=None, network_max_retries=None): # type: (...) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "33": "def connect(self, network_timeout=None, network_max_retries=None): # type: (options.int, Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "34": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int]), Optional[int] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "35": "def connect(self, network_timeout=None, network_max_retries=None): # type: ((), None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "36": "def connect(self, network_timeout=None, network_max_retries=None): # type: (...args) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "37": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Int, None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "38": "def connect(self, network_timeout=None, network_max_retries=None): # type: (args, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "39": "def connect(self, network_timeout=None, network_max_retries=None): # type: (int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "40": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[Int] -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "41": "def connect(self, network_timeout=None, network_max_retries=None): # type: Optional[int] = None -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "42": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Optional[int], Optional[int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout = None else network_timeout",
      "43": "def connect(self, network_timeout=None, network_max_retries=None): # type: ([int, [int], int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "44": "def connect(self, network_timeout=None, network_max_retries=None): # type: (os, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "45": "def connect(self, network_timeout=None, network_max_retries=None): # type: ([int, int]) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "46": "def connect(self, network_timeout=None, network_max_retries=None): # type: None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "47": "def connect(self, network_timeout=None, network_max_retries=None): # type: (none, None) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "48": "def connect(self, network_timeout=None, network_max_retries=None): # type: (0, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
      "49": "def connect(self, network_timeout=None, network_max_retries=None): # type: (Array, int) -> None final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n\n",
    "target_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_line": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 309,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/federated",
    "source_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "target_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119^",
    "target_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "predictions": [
      "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))"
    ],
    "correct": false,
    "top_five": {
      "0": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "1": "_intern_pool: Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "2": "_intern_pool: Dict[Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "3": "_intern_pool: Dict[Any, Any] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "4": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "5": "_intern_pool: Dict[Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "6": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))",
      "7": "_intern_pool: Dict[any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "8": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None:",
      "9": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))))",
      "10": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> Dict[TypingType[Any], Dict[Any, Any]]:",
      "11": "_intern_pool: Dict[Any, Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "12": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "13": "_intern_pool: Dict[Any] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "14": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "15": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "16": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "17": "_intern_pool: Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))",
      "18": "_intern_pool: Dict[DypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "19": "_intern_pool: Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "20": "_intern_pool: Dict[str, Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "21": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if not _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "22": "_intern_pool: Dict[ThypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "23": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> weakref.DefaultDict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "24": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> weakref.Intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "25": "\"\"\" _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "26": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "27": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda))",
      "28": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "29": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda=weakref.WeakValueDictionary( { } )))",
      "30": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.StringValueDictionary( { } )))",
      "31": "_intern_pool: Dict[any], Dict[any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "32": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))):",
      "33": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))",
      "34": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: self._intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "35": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) if not _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))):",
      "36": "_intern_pool: Dict[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None:",
      "37": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))",
      "38": "_intern_pool: Dict.Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "39": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )) =",
      "40": "_intern_pool: Dict[Any, Any] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "41": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary[Variable[Weakref._KT], Variable[Weakre",
      "42": "_intern_pool: Dict[typingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))",
      "43": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary[Variable[Weakref._KT], Weakref._VT]])",
      "44": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary[ { } )))",
      "45": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))",
      "46": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) )",
      "47": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> weakref.DefaultDict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda))",
      "48": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda))",
      "49": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) -> None: _intern_pool = Dict[TypingType[Any], Dict[Any, Any]] = ( collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))] ="
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_line": "    fold_method_args: Tuple[Any] = (),",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 789,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unitaryfund/mitiq",
    "source_filename": "mitiq/zne/scaling.py",
    "target_filename": "mitiq/zne/scaling.py",
    "source_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc^",
    "target_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "predictions": [
      "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,"
    ],
    "correct": false,
    "top_five": {
      "0": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "1": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "2": "scale_factor: float, fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "3": "scale_factor: float, fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "4": "scale_factor: float, fold_method: Optional[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "5": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "6": "scale_factor: float, fold_method: Optional[Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "7": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Any] = (), **kwargs,",
      "8": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = [], **kwargs,",
      "9": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[any] = (), **kwargs,",
      "10": "scale_factor: float, fold_method: Optional[Tuple[Any]] = Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "11": "scale_factor: float, fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "12": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Anything] = (), **kwargs,",
      "13": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit] = (), fold_method_args: Tuple[Any] = (), **kwargs,",
      "14": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Any] = (), **kwargs,",
      "15": "scale_factor: float, fold_method: tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: tuple[Any] = (), **kwargs,",
      "16": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = [], **kwargs,",
      "17": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any,...] = (), **kwargs,",
      "18": "scale_factor: float, fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "19": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Tuple[Any]] = (), **kwargs,",
      "20": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Optional[Tuple[Any]]] = (), **kwargs,",
      "21": "scale_factor: float, fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "22": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[any] = (), **kwargs,",
      "23": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any], Any = (), **kwargs,",
      "24": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Optional[Tuple[Any]] = (), **kwargs,",
      "25": "scale_factor: float, fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "26": "scale_factor: float, fold_method: Optional[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Optional[Tuple[Any]] = (), **kwargs,",
      "27": "scale_factor: float, fold_method: tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: tuple[Any] = (), **kwargs,",
      "28": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any, Anything] = (), **kwargs,",
      "29": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any]] = (), **kwargs,",
      "30": "scale_factor: float, fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit]] = (), **kwargs,",
      "31": "scale_factor: float, fold_method: \"Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: \"Tuple[Any]\" = (), **kwargs,",
      "32": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "33": "scale_factor: float, fold_method: Tuple[Circuit, float], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "34": "scale_factor: float, fold_methods: Tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "35": "scale_factor: float, fold_method: tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: tuple[any] = (), **kwargs,",
      "36": "scale_factor: float, fold_method: Tuple[Circuit, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "37": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: tuple[any] = (), **kwargs,",
      "38": "scale_factor: float, fold_method: List[Circuit, float, Tuple[Any]], Circuit], fold_method_args: List[Tuple[Any]] = (), **kwargs,",
      "39": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any], None = (), **kwargs,",
      "40": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = '', **kwargs,",
      "41": "scale_factor: float, fold_method: [Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "42": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "43": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Any = (), **kwargs,",
      "44": "scale_factor: float, fold_method: tuple[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "45": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any], Optional[Tuple[Any]] = (), **kwargs,",
      "46": "scale_factor: float, fold_method: Tuple[Circuit, float, Tuple[Any], Circuit], fold_method_args: Tuple[Any] = (), **kwargs,",
      "47": "scale_factor: float, fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = [], **kwargs,",
      "48": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: float = (), **kwargs,",
      "49": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any], Optional[Tuple[]] = (), **kwargs,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_line": "        gw: \"Gateway\" = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " gw is declared to have type `Gateway` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rytilahti/python-miio",
    "source_filename": "miio/gateway/devices/subdevice.py",
    "target_filename": "miio/gateway/devices/subdevice.py",
    "source_changeid": "6453bfee512150e3f062670e890533fcd67067ea^",
    "target_changeid": "6453bfee512150e3f062670e890533fcd67067ea",
    "predictions": [
      "self, gw: Optional[\"Gateway\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, gw: Optional[\"Gateway\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "1": "self, gw: Optional[\"Gateway\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "2": "self, gw: Optional[\"Gateway\"] = None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "3": "self, gw: Optional[\"Gateway\", None], dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "4": "self, gw: Optional[\"Gateway\", \"Dict\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "5": "self, gw: Optional[\"Gateway\"], dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "6": "self, gw: \"Gateway\", dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "7": "self, gw: Optional[\"Gateway\", \"Path\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "8": "self, gw: Optional['Gateway'] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "9": "self, gw: Optional[\"Gateway\", None] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "10": "self, gw: Optional[\"Gateway\", \"DeviceInfo\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "11": "self, gw: Optional[\"Gateway\", Optional[\"DeviceInfo\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "12": "self, gw: Optional[\"Gateway\", \"Material\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "13": "self, gw: Optional[\"Gateway\", Optional[\"Dict\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "14": "self, gw: Optional[\"Gateway\", \"DeviceInfo\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "15": "self, gw: Optional[\"Gateway\", \"Route\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "16": "self, gw: Optional[\"Gateway\", \"None\", \"Dict\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "17": "self, gw: Optional[\"Gateway\", \"Dict\", None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "18": "self, gw: Optional[\"Gateway\", \"\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "19": "self, gw: Optional[\"Gateway\", Optional[\"DeviceInfo\"]] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "20": "self, gw: Optional[\"Gateway\", \"None\", None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "21": "self, gw: Optional[\"Gateway\"), dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "22": "self, gw: Optional[\"Gateway\") = None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "23": "self, gw: Optional[\"Gateway\", \"\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "24": "self, gw: Optional[\"Gateway\", \"Path\") = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "25": "self, gw: Optional[\"Gateway\", None], dev_info: Optional[SubDeviceInfo], model_info: Optional[Dict] = None,",
      "26": "self, gw: Optional[\"Gateway\", \"\"], dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "27": "self, gw: Optional[\"Gateway\"] = None, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "28": "self, gw: Optional[\"Gateway\", \"None\", None], dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "29": "self, gw: Optional[\"Gateway\", \"Dict\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "30": "self, gw: Optional[\"Gateway\", \"Seadragon\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "31": "self, gw: Optional[Gateway] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "32": "self, gw: Optional[\"Gateway\",...] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "33": "self, gw: Optional[\"Gateway\", \"Dict\"), dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "34": "self, gw: Optional[\"Gateway\", \"Null\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "35": "self, gw_mode: Optional[\"Gateway\"] = None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "36": "self, gw: Optional[\"Gateway\", \"Path\"] = None, dev_info: SubDeviceInfo = None, model_info: Optional[Dict] = None,",
      "37": "self, gw: Optional[\"Gateway\", \"Dict\", None], dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "38": "self, gw: Optional[\"Gateway\", None], dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "39": "self, gw: 'Gateway', dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "40": "self, gw: Optional[\"Gateway\", \"None\", dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "41": "self, gw: Optional[\"Gateway\", \"\"), dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "42": "self, gw: Optional[\"Gateway\", None, dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "43": "self, gw: Optional[\"Gateway\") = None, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "44": "self, gw: Optional[\"Gateway\"] = None, dev_info: SubDeviceInfo | None = None, model_info: Optional[Dict] = None,",
      "45": "self, gw: Optional[\"Gateway\", \"Dict\") = None, dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "46": "self, gw: Optional[\"Gateway\"], dev_info: SubDeviceInfo, model_info: Optional[Dict] = None,",
      "47": "self, gw: Optional[\"Gateway\", None] = None, dev_info: Optional[SubDeviceInfo], model_info: Optional[Dict] = None,",
      "48": "self, gw: \"Gateway\", dev_info: Optional[SubDeviceInfo] = None, model_info: Optional[Dict] = None,",
      "49": "self, gw: Optional[\"Gateway\", \"None\", \"Dict\") = None, dev_info: Optional[SubDeviceInfo\"] = None, model_info: Optional[Dict] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        dev: FlairDataset = DataPairDataset(\n            dev_file,\n",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_line": "        dev: FlairDataset = DataPairDataset(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 282,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/datasets/text_text.py",
    "target_filename": "flair/datasets/text_text.py",
    "source_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f^",
    "target_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "predictions": [
      "dev: DataPairDataset = DataPairDataset( dev_file,"
    ],
    "correct": false,
    "top_five": {
      "0": "dev: DataPairDataset = DataPairDataset( dev_file,",
      "1": "dev: Optional[FlairDataset] = DataPairDataset( dev_file,",
      "2": "dev: DataPairDataset( dev_file,",
      "3": "dev: FlairDataset = DataPairDataset( dev_file,",
      "4": "dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( dev_file,",
      "5": "dev: _FlairDataset = DataPairDataset( dev_file,",
      "6": "dev: DevPairDataset = DataPairDataset( dev_file,",
      "7": "dev: \"FlairDataset\" = DataPairDataset( dev_file,",
      "8": "dev: DataPairDataset = DevPairDataset( dev_file,",
      "9": "dev: DataPairDataset is not None = DataPairDataset( dev_file,",
      "10": "dev: DataPairDataset_ = DataPairDataset( dev_file,",
      "11": "dev: DataPairDataset() = DataPairDataset( dev_file,",
      "12": "dev: Dict[str, DataPairDataset] = DataPairDataset( dev_file,",
      "13": "dev: FilePairDataset = DataPairDataset( dev_file,",
      "14": "dev: 'FlairDataset' = DataPairDataset( dev_file,",
      "15": "dev: DataPairDataset.FlairDataset = DataPairDataset( dev_file,",
      "16": "dev: isinstance(DevPairDataset, DataPairDataset): dev_file,",
      "17": "dev: flair_dataset = DataPairDataset( dev_file,",
      "18": "dev: Union[FlairDataset, DataPairDataset) = DataPairDataset( dev_file,",
      "19": "dev: db_flair_dataset = DataPairDataset( dev_file,",
      "20": "dev: Type[FlairDataset] = DataPairDataset( dev_file,",
      "21": "dev: _flair_dataset = DataPairDataset( dev_file,",
      "22": "dev: DataPairDataset = Optional[DataPairDataset]( dev_file,",
      "23": "dev: flairDataset = DataPairDataset( dev_file,",
      "24": "dev: isinstance(DevPairDataset, FlairDataset) = DataPairDataset( dev_file,",
      "25": "dev: dev_file = DataPairDataset( dev_file,",
      "26": "dev: isinstance(DevPairDataset, DataPairDataset) -> DataPairDataset: dev_file,",
      "27": "dev: DataPairDataset = DataSet( dev_file,",
      "28": "dev: isinstance(DevPairDataset, DataPairDataset): FlairDataset = DataPairDataset( dev_file,",
      "29": "dev: DataPairDataset__ = DataPairDataset( dev_file,",
      "30": "dev: Set = DataPairDataset( dev_file,",
      "31": "dev: DataPairDataset = FilePairDataset( dev_file,",
      "32": "dev: isinstance(DevPairDataset, DataPairDataset): DevFile = DataPairDataset( dev_file,",
      "33": "dev: isinstance(DevPairDataset, DataPairDataset): DataPairDataset = DataPairDataset( dev_file,",
      "34": "dev: isinstance(DevPairDataset, DataPairDataset): DevPairDataset = DataPairDataset( dev_file,",
      "35": "dev: DataPairDataset = DatabasePairDataset( dev_file,",
      "36": "dev: isinstance(DevPairDataset, DataPairDataset, 'FlairDataset') = DataPairDataset( dev_file,",
      "37": "dev: DataPairDataset[ dev_file,",
      "38": "dev: FieldDataset = DataPairDataset( dev_file,",
      "39": "dev: DataPairDataset = dev_file,",
      "40": "dev: DataPairDataset = DataDataPairDataset( dev_file,",
      "41": "dev: Union[FlairDataset, DataPairDataset( dev_file,",
      "42": "dev: db = DataPairDataset( dev_file,",
      "43": "dev: DataPairDataset = \"\"( dev_file,",
      "44": "dev: isinstance(DevPairDataset, DataPairDataset): data_file = DataPairDataset( dev_file,",
      "45": "dev: isinstance(DevPairDataset, DataPairDataset): Dev_file,",
      "46": "dev: isinstance(DevPairDataset, DataPairDataset)? DataPairDataset( dev_file,",
      "47": "dev: isinstance(DevPairDataset, DataPairDataset) = DataPairDataset( dev_file,",
      "48": "dev: DataPairDataset = DataSerializer( dev_file,",
      "49": "dev: isinstance(DevPairDataset, DataPairDataset)? DataPairDataset: dev_file,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_line": "        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/web3.py",
    "source_filename": "web3/providers/auto.py",
    "target_filename": "web3/providers/auto.py",
    "source_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1^",
    "target_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "predictions": [
      "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None ) -> None:"
    ],
    "correct": false,
    "top_five": {
      "0": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None ) -> None:",
      "1": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = None ) -> None:",
      "2": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]] = None ) -> None:",
      "3": "self, potential_providers: Sequence[Callable[..., BaseProvider]] = None ) -> None:",
      "4": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = [] ) -> None:",
      "5": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = () -> None:",
      "6": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Optional[BaseProvider]] = None ) -> None:",
      "7": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = [] ) -> None:",
      "8": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] ) -> None:",
      "9": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None ) -> None:",
      "10": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = '' ) -> None:",
      "11": "self, potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None ) -> None:",
      "12": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]) -> None:",
      "13": "self, potential_providers: Sequence[Callable[..., BaseProvider], Type[BaseProvider]] = None ) -> None:",
      "14": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = () -> None:",
      "15": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=[] ) -> None:",
      "16": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] ) -> None:",
      "17": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], BaseProvider] = None ) -> None:",
      "18": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = '' ) -> None:",
      "19": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] ) -> None:",
      "20": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] ) -> None:",
      "21": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = () ) -> None:",
      "22": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]]] = None ) -> None:",
      "23": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[Web3.providers.base.BaseProvider]] = None ) -> None:",
      "24": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Optional[BaseProvider]]=None ) -> None:",
      "25": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None ) -> None:",
      "26": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = None ) -> None:",
      "27": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[Web3.providers.base.BaseProvider]] = None ) -> None:",
      "28": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider, Type[BaseProvider]]] = None ) -> None:",
      "29": "self, potential_providers: Sequence[Callable[..., BaseProvider]] = () -> None:",
      "30": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = (None) -> None:",
      "31": "self, potential_providers: Sequence[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None ) -> None:",
      "32": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = (\"\") ) -> None:",
      "33": "self, potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]] = None ) -> None:",
      "34": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]]=[] ) -> None:",
      "35": "self, potential_providers: Sequence[Callable[..., BaseProvider]] = [] ) -> None:",
      "36": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = () -> None:",
      "37": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]]=[] ) -> None:",
      "38": "self, potential_providers: Sequence[Callable[..., BaseProvider], Type[BaseProvider]] = [] ) -> None:",
      "39": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][] ) -> None:",
      "40": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None () -> None:",
      "41": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]]) -> None:",
      "42": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = \"\" ) -> None:",
      "43": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]='' ) -> None:",
      "44": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][] = None ) -> None:",
      "45": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = (None) ) -> None:",
      "46": "self, potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None ) -> None:",
      "47": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] [] ) -> None:",
      "48": "self, potential_providers: Sequence[Callable[..., BaseProvider], Type[BaseProvider]] = () -> None:",
      "49": "self, potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]]=None ) -> None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": true,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
    "target_code": "\n    def __get__(self, instance: Any, owner: Any = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_line": "    def __get__(self, instance: object, owner: type = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 66,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pgjones/quart",
    "source_filename": "src/quart/config.py",
    "target_filename": "src/quart/config.py",
    "source_changeid": "c6905c0abe702031e79520c1474f2996657bd245^",
    "target_changeid": "c6905c0abe702031e79520c1474f2996657bd245",
    "predictions": [
      "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "1": "def __get__(self, instance: object, owner: Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "2": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "3": "def __get__(self, instance: object, owner: option[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "4": "def __get__(self, instance: object, owner: type_name = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "5": "def __get__(self, instance: object, owner: type | None = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "6": "def __get__(self, instance: object, owner: type = \"\") -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "7": "def __get__(self, instance: object, owner: type = []) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "8": "def __get__(self, instance: object, owner: type_type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "9": "def __get__(self, instance: object, owner: Optional[Type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "10": "def __get__(self, instance: object, owner: typing.Optional[typing.Type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "11": "def __get__(self, instance: object, owner: type() = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "12": "def __get__(self, instance: object, owner: type: Optional[Any] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "13": "def __get__(self, instance: object, owner: typing.Optional[Type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "14": "def __get__(self, instance: object, owner: type[0] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "15": "def __get__(self, instance: object, owner: None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "16": "def __get__(self, instance: object, owner: type[Any] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "17": "def __get__(self, instance: object, owner: Type[Any] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "18": "def __get__(self, instance: object, owner: type) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "19": "def __get__(self, instance: object, owner: typing.Optional[typing.Any] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "20": "def __get__(self, instance: object, owner: TypeError = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "21": "def __get__(self, instance: object, owner: type = '') -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "22": "def __get__(self, instance: object, owner: Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] if self.converter is not None:",
      "23": "def __get__(self, instance: object, owner: Optional[typing.Type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "24": "def __get__(self, instance: object, owner: type[str] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "25": "def __get__(self, instance: object, owner: type = None) -> None: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "26": "def __get__(self, instance: object, owner: type=\"\") -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "27": "def __get__(self, instance: object, owner: Optional[Any] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "28": "def __get__(self, instance: object, owner: type=[]) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "29": "def __get__(self, instance: object, owner: type: Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "30": "def __get__(self, instance: object, owner: choice[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "31": "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key] if self.converter is not None:",
      "32": "def __get__(self, instance: object, owner: Optional[typing.Any] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "33": "def __get__(self, instance: object, owner: typing.Optional[str] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "34": "def __get__(self, instance: object, owner: type_id = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "35": "def __get__(self, instance: object, owner: type=\"\"\") -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "36": "def __get__(self, instance: object, owner: type[Name] = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "37": "def __get__(self, instance: object, owner: typeName = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "38": "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "39": "def __get__(self, instance: object, owner: type=\"\"\") -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "40": "def __get__(self, instance: object, owner: type()) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "41": "def __get__(self, instance: object, owner: type__ = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "42": "def __get__(self, instance: object, owner: type = None) -> Any: if instance is None: return self result = instance.config[self.key] if self.converter is not None:",
      "43": "def __get__(self, instance: object, owner: type=None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "44": "def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: if instance is None: return self result = instance.config[self.key].type: ignore if self.converter is not None:",
      "45": "def __get__(self, instance: object, owner: Type = None) -> Any: if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "46": "def __get__(self, instance: object, owner: type -> None): if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "47": "def __get__(self, instance: object, owner: Optional[type] = None) -> Any: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "48": "def __get__(self, instance: object, owner: type = None) -> Any: return self result = instance.config[self.key] # type: ignore if self.converter is not None:",
      "49": "def __get__(self, instance: object, owner: type = None): if instance is None: return self result = instance.config[self.key] # type: ignore if self.converter is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator\n\n",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_line": "OVERLAYS = None  # type: Generator",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BEEmod/BEE2.4",
    "source_filename": "src/texturing.py",
    "target_filename": "src/texturing.py",
    "source_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6^",
    "target_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "predictions": [
      "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator]"
    ],
    "correct": false,
    "top_five": {
      "0": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator]",
      "1": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = None # type: Optional[Generator]",
      "2": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS: Optional[Generator]",
      "3": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "4": "# These can just looked up directly. SPECIAL: Optional[Generator] = None # type: Optional[Generator] OVERLAYS: Optional[Generator]",
      "5": "# These can just looked up directly. SPECIAL: Optional[Generator] = None # type: Optional[Generator] OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "6": "# These can just looked up directly. SPECIAL: \"Generator\" OVERLAYS: \"Generator\"",
      "7": "# These can just looked up directly. SPECIAL: 'Generator' OVERLAYS: 'Generator'",
      "8": "# These can just looked up directly. SPECIAL: Optional[Generator] = None OVERLAYS: Optional[Generator]",
      "9": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "10": "# These can just looked up directly. SPECIAL: Optional[Generator] is not None OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "11": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = False # type: Optional[Generator]",
      "12": "# These can just looked up directly. SPECIAL: Optional[Generator] = None OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "13": "# These can just looked up directly. SPECIAL = None # type: 'Generator' OVERLAYS: 'Generator'",
      "14": "# These can just looked up directly. SPECIAL = False # type: Generator OVERLAYS = False # type: Optional[Generator]",
      "15": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = \"\" # type: Optional[Generator]",
      "16": "# These can just looked up directly. SPECIAL: Generator OVERLAYS: Generator",
      "17": "# These can just looked up directly. SPECIAL = False # type: Generator OVERLAYS = False # type: Generator",
      "18": "# These can just looked up directly. SPECIAL = None # type: Generator OVERLAYS: Optional[Generator]",
      "19": "# These can just looked up directly. SPECIAL = Optional[Generator] OVERLAYS = Optional[Generator] # type: Optional[Generator]",
      "20": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator] # type: Optional[Generator]",
      "21": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS = None # type: Optional[Generator]",
      "22": "# These can just looked up directly. SPECIAL: _Generator OVERLAYS: _Generator",
      "23": "# These can just looked up directly. SPECIAL = None # type: \"Generator\" OVERLAYS = None # type: \"Generator\"",
      "24": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = '' # type: Optional[Generator]",
      "25": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = 0 # type: Optional[Generator]",
      "26": "# These can just looked up directly. SPECIAL = None # type: \"Generator\" OVERLAYS: \"Generator\"",
      "27": "# These can just looked up directly. SPECIAL: GENERATOR OVERLAYS: GENERATOR",
      "28": "# These can just looked up directly. SPECIAL = None # type: \"Generator\" OVERLAYS: Optional[Generator]",
      "29": "# These can just looked up directly. SPECIAL = 0 # type: Generator OVERLAYS: Optional[Generator]",
      "30": "# These can just looked up directly. SPECIAL = 0 # type: Generator OVERLAYS = 0 # type: Optional[Generator]",
      "31": "# These can just looked up directly. SPECIAL = None # type: _Generator OVERLAYS: _Generator",
      "32": "# These can just looked up directly. SPECIAL = Optional[Generator] OVERLAYS = Optional[Generator]",
      "33": "# These can just looked up directly. SPECIAL: Special OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "34": "# These can just looked up directly. SPECIAL: Optional[Generator] = None OVERLAYS: Optional[Generator] = None",
      "35": "# These can just looked up directly. SPECIAL = Optional[Generator] OVERLAYS: Optional[Generator]",
      "36": "# These can just looked up directly. SPECIAL: Optional[Generator] OVERLAYS: Optional[Generator]",
      "37": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS: Optional[Generator] # type: Optional[Generator]",
      "38": "# These can just looked up directly. SPECIAL = None # type: Generator OVERLAYS = \"\" # type: Optional[Generator]",
      "39": "# These can just looked up directly. SPECIAL = \"\" # type: Generator OVERLAYS = \"\" # type: Optional[Generator]",
      "40": "# These can just looked up directly. SPECIAL: Generator OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "41": "# These can just looked up directly. SPECIAL = None # type: 'Generator' OVERLAYS = None # type: 'Generator'",
      "42": "# These can just looked up directly. SPECIAL = None # type: Optional[Generator] OVERLAYS = Optional[Generator]",
      "43": "# These can just looked up directly. SPECIAL = None # type: Generator OVERLAYS = None # type: Optional[Generator]",
      "44": "# These can just looked up directly. SPECIAL = \"\" # type: Generator OVERLAYS: Optional[Generator]",
      "45": "# These can just looked up directly. SPECIAL = None # type: Generator OVERLAYS # type: Optional[Generator]",
      "46": "# These can just looked up directly. SPECIAL = False # type: Generator OVERLAYS: Optional[Generator]",
      "47": "# These can just looked up directly. SPECIAL: (Generator) OVERLAYS: (Generator)",
      "48": "# These can just looked up directly. SPECIAL = Optional[Generator] OVERLAYS: Optional[Generator] = None # type: Optional[Generator]",
      "49": "# These can just looked up directly. SPECIAL: Optional[generator] OVERLAYS: Optional[Generator] = None # type: Optional[Generator]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               type_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 121,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "def object(self, symbol_name: str, type_name: str, offset: int = None,"
    ],
    "correct": true,
    "top_five": {
      "0": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "1": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "2": "def object(self, symbol_name: str, type_name: Optional[str] = None, offset: int = None,",
      "3": "def object(self, symbol_name: str = '', type_name: str = '', offset: int = None,",
      "4": "def object(self, symbol_name: Union[str, None] = None, type_name: Union[str, None] = None, offset: int = None,",
      "5": "def object(self, symbol_name: typing.Optional[str] = None, type_name: typing.Optional[str] = None, offset: int = None,",
      "6": "def object(self, symbol_name: option[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "7": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: Optional[int] = None,",
      "8": "def object(self, symbol_name: option[str] = None, type_name: Option[str] = None, offset: int = None,",
      "9": "def object(self, symbol_name: Optional[Str] = None, type_name: Optional[str] = None, offset: int = None,",
      "10": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: Int = None,",
      "11": "def object(self, symbol_name: option[str] = None, type_name: option[str] = None, offset: int = None,",
      "12": "def object(self, symbol_name: str = \"\", type_name: str = \"\", offset: int = None,",
      "13": "def object(self, symbol_name: choice[str] = None, type_name: choice[str] = None, offset: int = None,",
      "14": "def object(self, symbol_name: Union[str, None], type_name: Union[str, None], offset: int = None,",
      "15": "def object(self, symbol_name: str, type_name: option[str] = None, offset: int = None,",
      "16": "def object(self, simbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "17": "def object(self, symbol_names: Optional[str] = None, type_names: Optional[str] = None, offset: int = None,",
      "18": "def object(self, symbol_name: Optional[Str] = None, type_name: Optional[str] = None, offset: int = None,",
      "19": "def object(self, symbol_name: str, type_name: Union[str, None] = None, offset: int = None,",
      "20": "def object(self, symbol_name: optional[str] = None, type_name: optional[str] = None, offset: int = None,",
      "21": "def object(self, symbol_name: options.str = None, type_name: options.str = None, offset: int = None,",
      "22": "def object(self, symbol_name: Str, type_name: Optional[str] = None, offset: int = None,",
      "23": "def object(self, symbol_name: str, type_name: int, offset: int = None,",
      "24": "def object(self, symbol_name, type_name: Optional[str] = None, offset: int = None,",
      "25": "def object(self, symbol_name: str, type_name: str = '', offset: int = None,",
      "26": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: optional[int] = None,",
      "27": "def object(self, symbol_name: Union[str, None], type_name: Union[str, None] = None, offset: int = None,",
      "28": "def object(self, symbol_name: Union[str, None] = None, type_name: Union[str, None], offset: int = None,",
      "29": "def object(self, symbol_name: str = 'undefined', type_name: str = '', offset: int = None,",
      "30": "def object(self, symbol_name: str, type_name: options.str = None, offset: int = None,",
      "31": "def object(self, symbol_name: str, type_name: tuple[str] = None, offset: int = None,",
      "32": "def object(self, symbol_name: str, type_name: optional[str] = None, offset: int = None,",
      "33": "def object(self, symbol_name: str = 'undefined', type_name: str = 'undefined', offset: int = None,",
      "34": "def object(self, symbol_name: str, type_name: str = \"\", offset: int = None,",
      "35": "def object(self, symbol_name: str, type_name: choice[str] = None, offset: int = None,",
      "36": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "37": "def object(self, symbol_name: str, type_name: str, offset: int = None,",
      "38": "def object(self, symbol_name: \"str\", type_name: \"str\", offset: int = None,",
      "39": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[Str] = None, offset: int = None,",
      "40": "def object(self, symbol_name: optional[str] = None, type_name: optional[str] = None, offset: optional[int] = None,",
      "41": "def object(self, symbol_name: str, type_name: str || '' = None, offset: int = None,",
      "42": "def object(self, symbol_name: Optional[str] = None, type_name: Optionals[str] = None, offset: int = None,",
      "43": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: optional[int] = None,",
      "44": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str]=None, offset: int = None,",
      "45": "def object(self, symbol_name: Optional[str] = None, type_name: Optional[str] = None, offset: int = None,",
      "46": "def object(self, symbol_name: int, type_name: str, offset: int = None,",
      "47": "def object(self, symbol_name = '', type_name: str = '', offset: int = None,",
      "48": "def object(self, symbol_name: str, type_name: Optional[str] = None, offset: Optional[int] = None,",
      "49": "def object(self, symbol_name: Union[str, None] = None, type_name: Union[Str, None] = None, offset: int = None,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,   # type: int\n    max_size=None  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,   # type: None\n    max_size=None  # type: int\n",
    "warning_line": "    average_size=None,   # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 940,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int average_size=None, # type: None max_size=None # type: int"
    ],
    "correct": true,
    "top_five": {
      "0": "min_size=0, # type: int average_size=None, # type: None max_size=None # type: int",
      "1": "min_size=0, # type: None average_size=None, # type: None max_size=None # type: int",
      "2": "min_size=0, # type: Optional[int] average_size=None, # type: Optional[int] max_size=None # type: int",
      "3": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None # type: int",
      "4": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None # type: int",
      "5": "min_size=0, # type: option[int] average_size=None, # type: Optional[int] max_size=None # type: int",
      "6": "min_size=0, # type: typing.Optional[int] average_size=None, # type: typing.Optional[int] max_size=None # type: int",
      "7": "min_size=0, # type: none average_size=None, # type: None max_size=None # type: int",
      "8": "min_size=0, # type: int average_size=None, # type: int max_size=None # type: int",
      "9": "min_size=0, # type: None average_size=None, # type: int max_size=None # type: int",
      "10": "min_size=0, # type: Int average_size=None, # type: Optional[int] max_size=None # type: int",
      "11": "min_size=0, # type: Int average_size=None, # type: None max_size=None # type: int",
      "12": "min_size=0, # type: None average_size=None, # type: Int max_size=None # type: int",
      "13": "min_size=0, # type: none average_size=None, # type: Optional[int] max_size=None # type: int",
      "14": "min_size=0, # type: int average_size=None, # type: option[int] max_size=None # type: int",
      "15": "min_size=0, # type: int average_size=None, # type: none max_size=None # type: int",
      "16": "min_size=0, # type: Array.prototype.int average_size=None, # type: None max_size=None # type: int",
      "17": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None # type: int",
      "18": "min_size=0, # type: _int average_size=None, # type: _int max_size=None # type: int",
      "19": "min_size=0, # type: Alternative[int] average_size=None, # type: Alternative[int] max_size=None # type: int",
      "20": "min_size=0, # type: default int average_size=None, # type: default int max_size=None # type: int",
      "21": "min_size=0, # type: zero average_size=None, # type: None max_size=None # type: int",
      "22": "min_size=0, # type: options.int average_size=None, # type: options.int max_size=None # type: int",
      "23": "min_size=0, # type: Optional[int] average_size=None, # type: Optional[int] max_size=None # type: int",
      "24": "min_size=0, # type: Alternative[int] average_size=None, # type: Optional[int] max_size=None # type: int",
      "25": "min_size=0, # type: Array[int] average_size=None, # type: None max_size=None # type: int",
      "26": "min_size=0, # type: Object[int] average_size=None, # type: int max_size=None # type: int",
      "27": "min_size=0, # type: args average_size=None, # type: args max_size=None # type: int",
      "28": "min_size=0, # type: int average_size=None, # type=None max_size=None # type: int",
      "29": "min_size=0, # type: option[int] average_size=None, # type: option[int] max_size=None # type: int",
      "30": "min_size=0, # type: None average_size=None, # type: Array.protocol.int max_size=None # type: int",
      "31": "min_size=0, # type: Optional[int] average_size=None, # type: Optional[int] max_size=None# type: int",
      "32": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None # type: int",
      "33": "min_size=0, # type: # int average_size=None, # type: Optional[int] max_size=None # type: int",
      "34": "min_size=0, # type: int average_size=None, # type: Alternative[int] max_size=None # type: int",
      "35": "min_size=0, # type: str average_size=None, # type: str max_size=None # type: int",
      "36": "min_size=0, # type: None average_size=None, # type: 0 max_size=None # type: int",
      "37": "min_size=0, # type: int average_size=None, # type: bool max_size=None # type: int",
      "38": "min_size=0, # type: Zero average_size=None, # type: None max_size=None # type: int",
      "39": "min_size=0, # type: int average_size=None, # type: Optional[int] max_size=None# type: int",
      "40": "min_size=0, # type: int average_size=None, # type: options.int max_size=None # type: int",
      "41": "min_size=0, # type: None average_size=None, # type=None max_size=None # type: int",
      "42": "min_size=0, # type: None average_size=None, # type: bool max_size=None # type: int",
      "43": "min_size=0, # type: int average_size=None # type: None max_size=None # type: int",
      "44": "min_size=0, # type: int average_size=None, # type: Options.int max_size=None # type: int",
      "45": "min_size=0, # type: String average_size=None, # type: String max_size=None # type: int",
      "46": "min_size=0, # type: None average_size=None, # type: Optional[int] max_size=None# type: int",
      "47": "min_size=0, # type: int average_size=None, # type: Zero max_size=None # type: int",
      "48": "min_size=0, # type: int average_size=None, # type: None max_size=None# type: int",
      "49": "min_size=0, # type: int average_size=None, # int max_size=None # type: int"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_line": "            embeddings = cached_path(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " embeddings is declared to have type `str` but is used as type `Path`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2082,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/embeddings/token.py",
    "target_filename": "flair/embeddings/token.py",
    "source_changeid": "0b834f5167d11f06037398fcbe1554f244167e18^",
    "target_changeid": "0b834f5167d11f06037398fcbe1554f244167e18",
    "predictions": [
      ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir"
    ],
    "correct": false,
    "top_five": {
      "0": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "1": ") embeddings_path = cached_path( f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "2": ") embeddings_path= cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "3": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "4": ") embeddingspath = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "5": ") embeddings_path=cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "6": ") embeddings_paths = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "7": ") embeddingspaths = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "8": ") embeddingspath=cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "9": ") embeddingspath_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "10": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / ^ embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "11": ") embeddings_path_name = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "12": ") embeddings_path = cached_path( \" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "13": ") embeddingspath_name = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "14": ") embeddings_path = cached_path( f\" { base_path } { embeddings \\ / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "15": ") embeddings_path = cached_path( (f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir)",
      "16": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir )",
      "17": ") embeddings_path = cached_path( f\" { base_path } { embeddings { / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "18": ") embeddingspath= cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "19": ") embeddings_path=cad_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "20": ") embeddings_path= cached_path( f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "21": ") embeddings_path = cached_path( [f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "22": ") embeddings_path = cached_path( []) f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "23": ") embeddings_path = cached_path( \" \\ base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "24": ") embeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "25": ") embeddings_path = cached_path( f\" { base_path } { embeddings_path } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "26": ") embeddings_path=cached_path( f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "27": ") embeddings_path = cached_path( f \" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "28": ") embeddings_path = cached_path( [ f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "29": ") embeddings_path = cached_path( f\" { base_path } { embeddings ^ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "30": ") embeddings_path_str = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "31": ") embeddings_path = cached_path( f\" { base_path } { embedding_path } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "32": ") embeddingspath = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "33": ") embeddings_path = cached_path( f\" ^ base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "34": ") embeddings_files = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "35": ") embeddingspath = cached_path( f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "36": ") embeddings_path= cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "37": ") embeddings_path = cached_path( f\" { base_path \\ { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "38": ") embeddings_path = cached_path( \" ^ base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "39": ") embeddings_paths = cached_path( f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "40": ") embeddings_path__ = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "41": ") embedding_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "42": ") embeddings_paths_ = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "43": ") embeddings_map = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "44": ") embeddingspaths = cached_path( f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir",
      "45": ") embeddings_path_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "46": ") embeddingspath=cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "47": ") embeddingspy = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "48": ") embeddeddings_path = cached_path( f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir",
      "49": ") embeddings_path = cached_path( f\" { base_path } { embeddeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n            usd_volume: float = [\n                (\n",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_line": "            usd_volume: float = [",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 97,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hummingbot/hummingbot",
    "source_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "target_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1^",
    "target_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "predictions": [
      "usd_volume: float = [ ("
    ],
    "correct": false,
    "top_five": {
      "0": "usd_volume: float = [ (",
      "1": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "2": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "3": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "4": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "5": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "6": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "7": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "8": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "9": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "10": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "11": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "12": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$', '$', '$',",
      "13": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "14": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$', '$', '$', '$',",
      "15": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$', '$',",
      "16": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$',",
      "17": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "18": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "19": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "20": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "21": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$',",
      "22": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$',",
      "23": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "24": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "25": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "26": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "27": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$',",
      "28": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$', '$',",
      "29": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "30": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '$', '$', '$', '$', '$', '$', '$', '$',",
      "31": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '$', '$', '$', '$', '$', '$', '$',",
      "32": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '$', '$', '$', '$', '$', '$', '$', '$', '$',",
      "33": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "34": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "35": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "36": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "37": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$',",
      "38": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '#', '$', '$', '$', '$', '$', '$',",
      "39": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '$', '$',",
      "40": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "41": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "42": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'",
      "43": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',",
      "44": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '#', '$', '$', '$', '$', '$', '$', '$',",
      "45": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'', '#', '#', '#', '#',",
      "46": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '%', '$', '$', '$', '$', '$', '$', '$', '$',",
      "47": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'', '#', '#', '#',",
      "48": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'', '#', '#', '#', '#', '#',",
      "49": "usd_volume: float = [ ('#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', '$', '#', '$', '$', '$', '$', '$', '$', '$', '$',"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
    "warning_line": "    def __init__(self, reason: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " reason is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 28,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theacodes/nox",
    "source_filename": "nox/command.py",
    "target_filename": "nox/command.py",
    "source_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62^",
    "target_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "predictions": [
      "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "1": "def __init__( self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "2": "def __init__(self, reason: typing.Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "3": "def __init__( self, reason: typing.Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "4": "def __init__(self, reason: Union[str, None] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "5": "def __init__( self, reason: Optional[str] = None ) -> None : super(CommandFailed, self).__init__(reason)",
      "6": "def __init__(self, reason: str) -> None: super(CommandFailed, self).__init__(reason)",
      "7": "def __init__( self, reason: Union[str, None] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "8": "def __init__(self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "9": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__() self.__init__(reason)",
      "10": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__()",
      "11": "def __init__( reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "12": "def __init__( self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "13": "def __init__( self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__() self.__init__(reason)",
      "14": "def __init__( self, reason: typing.Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "15": "def __init__( self, reason: typing.Optional[str] = None ) -> None : super(CommandFailed, self).__init__(reason)",
      "16": "def __init__( self, reason: str) -> None: super(CommandFailed, self).__init__(reason)",
      "17": "def __init__(self, reason: Optional[str] = None) -> None : super(CommandFailed, self).__init__(reason)",
      "18": "def __init__(self, reason: optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "19": "def __init__(self, reason = None) -> None: super(CommandFailed, self).__init__(reason)",
      "20": "def __init__( self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__()",
      "21": "def __init__( self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason )",
      "22": "def __init__( self, reason: Union[str, None ] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "23": "def __init__(self, argument: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "24": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason) -> None:",
      "25": "def __init__(self, purpose: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "26": "def __init__(self, reason: typing.Optional[str] = None) -> None: super(CommandFailed, self).__init__() self.__init__(reason)",
      "27": "def __init__( self, reason: Union[str, None] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "28": "def __init__( self, reason: optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "29": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__().__init__(reason)",
      "30": "def __init__(self, rational: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "31": "def __init__(self, reason: opts.Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "32": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__().reason",
      "33": "def __init__(self, reason: option[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "34": "def __init__( self, argument: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "35": "def __init__( self, reason: Optional[str] = None = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "36": "def __init__(self, reason: typing.Optional[str] = None) -> None: super(CommandFailed, self).__init__()",
      "37": "def __init__( self, reason: str ) -> None: super(CommandFailed, self).__init__(reason)",
      "38": "def __init__(self: str) -> None: super(CommandFailed, self).__init__(reason)",
      "39": "def __init__( self, reason: Optional[str] = None () -> None: super(CommandFailed, self).__init__(reason)",
      "40": "def __init__(self, reason: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason) -> None",
      "41": "def __init__(self, reasoning: Optional[str] = None) -> None: super(CommandFailed, self).__init__(reason)",
      "42": "def __init__( myself, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "43": "def __init__( self, reason: typing.Optional[str] = None ) -> None: super(CommandFailed, self).__init__() self.__init__(reason)",
      "44": "def __init__(self, reason: Type = None) -> None: super(CommandFailed, self).__init__(reason)",
      "45": "def __init__(self, reason: option.str = None) -> None: super(CommandFailed, self).__init__(reason)",
      "46": "def __init__( self, reason: option[str] = None ) -> None: super(CommandFailed, self).__init__(reason)",
      "47": "def __init__() -> None: super(CommandFailed, self).__init__(reason)",
      "48": "def __init__( self, reason: Optional[str] = None ) -> None: super(CommandFailed, self).__init__(reason) -> None",
      "49": "def __init__(self, reason: options.str = None) -> None: super(CommandFailed, self).__init__(reason)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_line": "        path_scope: irast.ScopeTreeNode=None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/pathctx.py",
    "target_filename": "edb/edgeql/compiler/pathctx.py",
    "source_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa^",
    "target_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "predictions": [
      "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False,"
    ],
    "correct": true,
    "top_five": {
      "0": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "1": "ir_set: irast.Set, *, path_scope=None, optional: bool=False,",
      "2": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode] = None, optional: bool=False,",
      "3": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode, optional: bool=False,",
      "4": "ir_set: irast.Set, *, path_scope = irast.ScopeTreeNode, optional: bool=False,",
      "5": "ir_set: irast.Set, *, path_scopes: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "6": "ir_set: irast.Set, *, path_scope=irast.ScopeTreeNode, optional: bool=False,",
      "7": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode(irast.ScopeTreeNode), optional: bool=False,",
      "8": "ir_set: irast.Set, *, path_scope='', optional: bool=False,",
      "9": "ir_set: irast.Set, *, path_scope_tree: irast.ScopeTreeNode, optional: bool=False,",
      "10": "ir_set: irast.Set, *, path_scopes: Optional[irast.ScopeTreeNode] = None, optional: bool=False,",
      "11": "ir_set: irast.Set, *, path_scope: option[irast.ScopeTreeNode]=None, optional: bool=False,",
      "12": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode[irast.ScopeTreeNode]=None, optional: bool=False,",
      "13": "ir_set: irast.Set, *, path_scopes: irast.ScopeTreeNode, optional: bool=False,",
      "14": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode, optional: bool=False,",
      "15": "ir_set: irast.Set, *, path_scope= Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "16": "ir_set: irast.Set, *, path_scope: Optional[ir.ScopeTreeNode]=None, optional: bool=False,",
      "17": "ir_set: irast.Set, * path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "18": "ir_set: irast.Set, *, path_scope_tree: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "19": "ir_set: irast.Set, *, path_scope=edb.ir.ScopeTreeNode, optional: bool=False,",
      "20": "ir_set: irast.Set, *, path_scope=Irast.ScopeTreeNode, optional: bool=False,",
      "21": "ir_set: irast.Set, *, path_scope=str(irast.ScopeTreeNode), optional: bool=False,",
      "22": "ir_set: irast.Set, *, path_scope='None', optional: bool=False,",
      "23": "ir_set: irast.Set, *, path_scope_name: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "24": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False,",
      "25": "ir_set: irast.Set, *, path_scope=Optional[irast.ScopeTreeNode], optional: bool=False,",
      "26": "ir_set: irast.Set, *, path_scope=none, optional: bool=False,",
      "27": "ir_set: irast.Set, *, path_scope is not None: irast.ScopeTreeNode=None, optional: bool=False,",
      "28": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeTreeNode]=None, optional: bool=False,",
      "29": "ir_set: irast.Set, *, path_scope = edb.ir.scopetree.ScopeTreeNode(irast.ScopeTreeNode), optional: bool=False,",
      "30": "ir_set: irast.Set, *, path_scope = edb.ir.scopetree.ScopeTreeNode, optional: bool=False,",
      "31": "ir_set: irast.Set, *, path_scope_tr: irast.ScopeTreeNode=None, optional: bool=False,",
      "32": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode=None, optional: bool=False,",
      "33": "ir_set: irast.Set, *, path_scope: irast.ScopeTreeNode(irast.ScopeTreeNode), optional: bool=False,",
      "34": "ir_set: irast.Set, *, path_scope: option[irast.ScopeTreeNode] = None, optional: bool=False,",
      "35": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode[irast.ScopeTreeNode] = None, optional: bool=False,",
      "36": "ir_set: irast.Set, *, path_scope=Util.ScopeTreeNode, optional: bool=False,",
      "37": "ir_set: irast.Set, *, path_scope = irast.ScopeTreeNode(none), optional: bool=False,",
      "38": "ir_set: irast.Set, *, path_scope_tree: irast.ScopeTreeNode, optional: bool=False,",
      "39": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode.ScopeTreeNode, optional: bool=False,",
      "40": "ir_set: irast.Set, *, path_scope: edb.ir.ScopeTreeNode(irast.ScopeTreeNode)=None, optional: bool=False,",
      "41": "ir_set: irast.Set, *, path_scope= Optional[irast.ScopeTreeNode] = None, optional: bool=False,",
      "42": "ir_set: irast.Set, *, path_scope=Array(irast.ScopeTreeNode), optional: bool=False,",
      "43": "ir_set: irast.Set, *, path_scope=Tree, optional: bool=False,",
      "44": "ir_set: irast.Set, *, path_scope_tree=irast.ScopeTreeNode, optional: bool=False,",
      "45": "ir_set: irast.Set, *, path_scope=False, optional: bool=False,",
      "46": "ir_set: irast.Set, *, path_scope=ScopeScopeNode, optional: bool=False,",
      "47": "ir_set: irast.Set, * path_scope: Optional[irast.ScopeTreeNode] = None, optional: bool=False,",
      "48": "ir_set: irast.Set, *, path_scope: Options.ScopeTreeNode=None, optional: bool=False,",
      "49": "ir_set: irast.Set, *, path_scope=Optional[irast.ScopeTreeNode]=None, optional: bool=False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
    "target_code": "        \"\"\"\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
    "warning_line": "        signer_key = SignerKey.ed25519_public_key(signer_key)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 912,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/transaction_builder.py",
    "target_filename": "stellar_sdk/transaction_builder.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "\"\"\" key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)"
    ],
    "correct": true,
    "top_five": {
      "0": "\"\"\" key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)",
      "1": "\"\"\" key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_id, source) return self.append_operation(op)",
      "2": "\"\"\" key_type = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_type, source) return self.append_operation(op)",
      "3": "\"\"\" signer_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "4": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id_id, source) return self.append_operation(op)",
      "5": "\"\"\" key_ed25519 = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_ed25519, source) return self.append_operation(op)",
      "6": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id, source) return self.append_operation(op)",
      "7": "\"\"\" key_address = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_address, source) return self.append_operation(op)",
      "8": "\"\"\" key_name = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_name, source) return self.append_operation(op)",
      "9": "\"\"\" key_val = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_val, source) return self.append_operation(op)",
      "10": "\"\"\" signed_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signed_key, source) return self.append_operation(op)",
      "11": "\"\"\" key_value = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_value, source) return self.append_operation(op)",
      "12": "\"\"\" key_encode = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_encode, source) return self.append_operation(op)",
      "13": "\"\"\" key = SignerKey.ed25519_public_key(key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)",
      "14": "\"\"\" key_alpha = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_alpha, source) return self.append_operation(op)",
      "15": "\"\"\" key= SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)",
      "16": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id_id, signer_key_id_id, source) return self.append_operation(op)",
      "17": "\"\"\" key_response = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_response, source) return self.append_operation(op)",
      "18": "\"\"\" key_op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_op, source) return self.append_operation(key_op)",
      "19": "\"\"\" op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "20": "\"\"\" key__ = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key__, source) return self.append_operation(op)",
      "21": "\"\"\" key = SignatureKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) return self.append_operation(op)",
      "22": "\"\"\" key_account = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_account, source) return self.append_operation(op)",
      "23": "\"\"\" key_r = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_r, source) return self.append_operation(op)",
      "24": "\"\"\" key_init = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_init, source) return self.append_operation(op)",
      "25": "\"\"\" key_result = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_result, source) return self.append_operation(op)",
      "26": "\"\"\" key_ref = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_ref, source) return self.append_operation(op)",
      "27": "\"\"\" signer_key_ed25519 = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_ed25519, source) return self.append_operation(op)",
      "28": "\"\"\" key_url = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_url, source) return self.append_operation(op)",
      "29": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id_id, signer_key_id, source) return self.append_operation(op)",
      "30": "\"\"\" signed_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signed_key_id, source) return self.append_operation(op)",
      "31": "\"\"\" key_encoded = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_encoded, source) return self.append_operation(op)",
      "32": "\"\"\" key_str = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_str, source) return self.append_operation(op)",
      "33": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id_id_id, source) return self.append_operation(op)",
      "34": "\"\"\" key_ = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_, source) return self.append_operation(op)",
      "35": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id_id, source) return self.append_operation(op_id)",
      "36": "\"\"\" signer_key_public_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_public_key, source) return self.append_operation(op)",
      "37": "\"\"\" signature_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signature_key, source) return self.append_operation(op)",
      "38": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id_id, signer_key_id_id, source) return self.append_operation(op_id)",
      "39": "\"\"\" key_encrypt = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_encrypt, source) return self.append_operation(op)",
      "40": "\"\"\" key_owner = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_owner, source) return self.append_operation(op)",
      "41": "\"\"\" key_revoked = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_revoked, source) return self.append_operation(op)",
      "42": "\"\"\" signed_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signed_key_id_id, source) return self.append_operation(op)",
      "43": "\"\"\" key_number = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_number, source) return self.append_operation(op)",
      "44": "\"\"\" key_effect = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_effect, source) return self.append_operation(op)",
      "45": "\"\"\" signer_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id_id, signer_key_id, source) return self.append_operation(op_id)",
      "46": "\"\"\" key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(id, key, source) return self.append_operation(op)",
      "47": "\"\"\" signing_key_id = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_id, source) return self.append_operation(op)",
      "48": "\"\"\" signing_key = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source) return self.append_operation(op)",
      "49": "\"\"\" key_identifier = SignerKey.ed25519_public_key(signer_key) op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key_identifier, source) return self.append_operation(op)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)\n",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
    "warning_line": "    def __init__(self, format: str = None, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " format is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/fields.py",
    "target_filename": "src/marshmallow/fields.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "1": "def __init__(self, format: Optional[str] = None, **kwargs) -> None: super().__init__(**kwargs)",
      "2": "def __init__( self, format: Optional[str] = None, **kwargs ): super().__init__(**kwargs)",
      "3": "def __init__(self, format: str, **kwargs): super().__init__(**kwargs)",
      "4": "def __init__( self, format: Optional[str] = None, **kwargs ) -> None: super().__init__(**kwargs)",
      "5": "def __init__( self, format: Optional[str] = None, **kwargs ): super().__init__(**kwargs )",
      "6": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__()",
      "7": "def __init__(self, format: typing.Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "8": "def __init__(self, format: Union[str, None] = None, **kwargs): super().__init__(**kwargs)",
      "9": "def __init__( self, format: Optional[str] = None, **kwargs) -> None: super().__init__(**kwargs)",
      "10": "def __init__(self, format: Optional[Str] = None, **kwargs): super().__init__(**kwargs)",
      "11": "def __init__(self, format: Optional[str] = None, **kwargs) -> null: super().__init__(**kwargs)",
      "12": "def __init__(self, format: Optional[str] = None, **kwargs) -> bool: super().__init__(**kwargs)",
      "13": "def __init__(self, format=None, **kwargs): super().__init__(**kwargs)",
      "14": "def __init__( self, format: Optional[str] = None, **kwargs ) -> None: super().__init__(**kwargs )",
      "15": "def __init__(self, format: optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "16": "def __init__( self, format: str, **kwargs ): super().__init__(**kwargs)",
      "17": "def __init__(self, format: Optional[str] = None, **kwargs) -> none: super().__init__(**kwargs)",
      "18": "def __init__(self, format: Optional[str] = None, **kwargs) -> str: super().__init__(**kwargs)",
      "19": "def __init__(self, format: str = \"\", **kwargs): super().__init__(**kwargs)",
      "20": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs) -> None:",
      "21": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs) -> None",
      "22": "def __init__(self, format: Optional[str] = None, **kwargs) -> Optional[str]: super().__init__(**kwargs)",
      "23": "def __init__(self, form: Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "24": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__().__init__(**kwargs)",
      "25": "def __init__(self, format: Optional[str] = None, **kwargs) -> undefined: super().__init__(**kwargs)",
      "26": "def __init__( self, format: typing.Optional[str] = None, **kwargs ): super().__init__(**kwargs)",
      "27": "def __init__( self, format: Optional[str] = None, **kwargs ): super().__init__(**kwargs)",
      "28": "def __init__(self, format: option.Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "29": "def __init__(self, format_type: Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "30": "def __init__(self, format: str = '', **kwargs): super().__init__(**kwargs)",
      "31": "def __init__(self, format: Union[str, None], **kwargs): super().__init__(**kwargs)",
      "32": "def __init__(self, format: Optional[str] = None, **kwargs) -> None: super().__init__(**kwargs) -> None:",
      "33": "def __init__(self, format: Optional[str] = None, **kwargs) -> None: super().__init__()",
      "34": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__()**kwargs",
      "35": "def __init__(self, format: option.Str = None, **kwargs): super().__init__(**kwargs)",
      "36": "def __init__(self, format: Optional[str] = None, **kwargs) -> tuple: super().__init__(**kwargs)",
      "37": "def __init__( self, format: Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "38": "def __init__(self, format: Optional[str] = None, **kwargs ): super().__init__(**kwargs)",
      "39": "def __init__(self, format: Optional[str] = None, **kwargs) -> super().__init__(**kwargs)",
      "40": "def __init__(self, format: Optional[str] = None, **kwargs): super().__init__()(**kwargs)",
      "41": "def __init__(self, format:options.str = None, **kwargs): super().__init__(**kwargs)",
      "42": "def __init__(self, format: str[0] = None, **kwargs): super().__init__(**kwargs)",
      "43": "def __init__( self, format: str, **kwargs ): super().__init__(**kwargs )",
      "44": "def __init__(self, format: str=\"\", **kwargs): super().__init__(**kwargs)",
      "45": "def __init__(self, format: str, **kwargs) -> None: super().__init__(**kwargs)",
      "46": "def __init__(self, format: Optional[str] = None, **kwargs]: super().__init__(**kwargs)",
      "47": "def __init__(self, format: option.str = None, **kwargs): super().__init__(**kwargs)",
      "48": "def __init__(self, formatting: Optional[str] = None, **kwargs): super().__init__(**kwargs)",
      "49": "def __init__( self, format: Optional[str] = None, **kwargs ): super().__init__()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, rf_path: str=None):\n        super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1\n",
    "target_code": "\n    def __init__(self):\n        super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "def __init__(self): super(Schaffer, self).__init__() self.number_of_variables = 1"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "1": "def __init__(self, str=None): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "2": "def __init__(): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "3": "def __init__(self, rf_path: Optional[str] = None): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "4": "def __init__(self, str): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "5": "def __init__: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "6": "def __init__(self) -> None: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "7": "def __init__(self): super(Schaffer, self).__init__(rf_path=str) self.number_of_variables = 1",
      "8": "def __init__(self, str = None): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "9": "def __init__(self): super(Schaffer, self).__init__(rf_path=None) self.number_of_variables = 1",
      "10": "def __init__(self): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "11": "def __init__( self): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "12": "def __init__( self, rf_path: Optional[str] = None ): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "13": "def __init__(self, rf_path: Optional[str]=None): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "14": "def __init__(self, str: Optional[str] = None): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "15": "def __init__(self, rf_path: str): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "16": "def __init__self: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "17": "def __init__(self, str=\"\"): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "18": "def __init__(self): super().__init__() self.number_of_variables = 1",
      "19": "def __init__( self, str=None ): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "20": "def __init__: super(Schaffer, self).__init__: self.number_of_variables = 1",
      "21": "def __init__(self, rf_path: str=\"\"): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "22": "def __init__( self) -> None: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "23": "def __init__(self, str=None): super(Schaffer, self).__init__(rf_path=str) self.number_of_variables = 1",
      "24": "def __init__( self ): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "25": "def __init__(self): super(Schaffer, self).__init__self.number_of_variables = 1",
      "26": "def __init__(self): super(Schaffer, self).__init__(str=None) self.number_of_variables = 1",
      "27": "def __init__(self): super().__init__(Schaffer, self).__init__() self.number_of_variables = 1",
      "28": "def __init__(self, str=[]): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "29": "def __init__(self) -> None: super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "30": "def __init__( self, str = None ): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "31": "def __init__(self, rf_path: Optional[str] = None): super(Schaffer, self).__init__(rf_path=rf_path) self.number_of_variables = 1",
      "32": "def __init__(self): super(Schaffer, self).__init__(rf_path=none) self.number_of_variables = 1",
      "33": "def __init__(self): super(Schaffer, self) self.number_of_variables = 1",
      "34": "def __init__(self, str = ''): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "35": "def __init__(self): super(Schaffer, self).__init__(rf_path=Rf_path) self.number_of_variables = 1",
      "36": "def __init__(self: str): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "37": "def __init__( self ) -> None: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "38": "def __init__(self): super().__init__(rf_path=None) self.number_of_variables = 1",
      "39": "def __init__(self): super(Schaffer, self) __init__() self.number_of_variables = 1",
      "40": "def __init__( self: super(Schaffer, self).__init__() self.number_of_variables = 1",
      "41": "def __init__(self, rf_path: Optional[str] = None): super(Schaffer, self).__init__(rf_path=str) self.number_of_variables = 1",
      "42": "def __init__(self ): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "43": "def __init__(self): super().__init__(rf_path=rf_path) self.number_of_variables = 1",
      "44": "def __init__(self) -> None: super(Schaffer, self).__init__(rf_path=str) self.number_of_variables = 1",
      "45": "def __init__(self): super(Schaffer, self).__init__: self.number_of_variables = 1",
      "46": "def __init__self: super(Schaffer, self).__init__self.number_of_variables = 1",
      "47": "def __init__(self): super(Schaffer, self).__init__() self.number_of_variables = 0",
      "48": "def __init__ (self): super(Schaffer, self).__init__() self.number_of_variables = 1",
      "49": "def __init__(1): super(Schaffer, self).__init__() self.number_of_variables = 1"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def run(self, host: str = None, port: int = None, *args, **kwargs):\n        host = host or self.config.HOST\n",
    "target_code": "\n    def run(self, host: Optional[str] = None, port: Optional[int] = None,\n            *args, **kwargs) -> None:\n        host = host or self.config.HOST\n",
    "warning_line": "    def run(self, host: str = None, port: int = None, *args, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " host is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nonebot/nonebot",
    "source_filename": "none/__init__.py",
    "target_filename": "none/__init__.py",
    "source_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd^",
    "target_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd",
    "predictions": [
      "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST"
    ],
    "correct": true,
    "top_five": {
      "0": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "1": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs): host = host or self.config.HOST",
      "2": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None -> None: host = host or self.config.HOST",
      "3": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Optional[str] = None: host = host or self.config.HOST",
      "4": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> bool: host = host or self.config.HOST",
      "5": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Optional[bool] = None: host = host or self.config.HOST",
      "6": "def run( self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs ) -> None: host = host or self.config.HOST",
      "7": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None : host = host or self.config.HOST",
      "8": "def run(self, host: option[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "9": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> str: host = host or self.config.HOST",
      "10": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> False: host = host or self.config.HOST",
      "11": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None - self.config.HOST: host = host or self.config.HOST",
      "12": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Generic[str] = None: host = host or self.config.HOST",
      "13": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> none: host = host or self.config.HOST",
      "14": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Optional[str]: host = host or self.config.HOST",
      "15": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Int: host = host or self.config.HOST",
      "16": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Optional[i] = None: host = host or self.config.HOST",
      "17": "def run(self, host: Optional[Str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "18": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> All: host = host or self.config.HOST",
      "19": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs ) -> None: host = host or self.config.HOST",
      "20": "def ran(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "21": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> null: host = host or self.config.HOST",
      "22": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None if host is None: host = host or self.config.HOST",
      "23": "def run(self, host: Optional[String] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "24": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: self.config.HOST = host",
      "25": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Optional[str] = None -> None: host = host or self.config.HOST",
      "26": "def run(self, host: optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "27": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST:",
      "28": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None - None: host = host or self.config.HOST",
      "29": "def run(self, host: typing.Optional[str] = None, port: typing.Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "30": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None...: host = host or self.config.HOST",
      "31": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None if self.config.HOST:",
      "32": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Unknown: host = host or self.config.HOST",
      "33": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Run(): host = host or self.config.HOST",
      "34": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> True: host = host or self.config.HOST",
      "35": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> int: host = host or self.config.HOST",
      "36": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Null: host = host or self.config.HOST",
      "37": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Yes: host = host or self.config.HOST",
      "38": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) - 1: host = host or self.config.HOST",
      "39": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: config.HOST = host or self.config.HOST",
      "40": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> undefined: host = host or self.config.HOST",
      "41": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> No: host = host or self.config.HOST",
      "42": "def run(self, host, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "43": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: self.config.HOST = host or self.config.HOST",
      "44": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host ou self.config.HOST",
      "45": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> Nothing: host = host or self.config.HOST",
      "46": "def run( host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST",
      "47": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or config.HOST",
      "48": "def run(self, host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs]: host = host or self.config.HOST",
      "49": "def run(host: Optional[str] = None, port: Optional[int] = None, *args, **kwargs) -> None: host = host or self.config.HOST"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> bool:\n        return capability.available(self.agreed_capabilities)\n",
    "target_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> str:\n        return capability.available(self.agreed_capabilities)\n",
    "warning_line": "        return capability.available(self.agreed_capabilities)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/IRCServer.py",
    "target_filename": "src/IRCServer.py",
    "source_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd^",
    "target_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "predictions": [
      "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)"
    ],
    "correct": true,
    "top_five": {
      "0": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "1": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability)) -> str: return capability.available(self.agreed_capabilities)",
      "2": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability): return capability.available(self.agreed_capabilities)",
      "3": "return capability in self.agreed_capabilities def available_capability(self, capability: utils[irc.Capability]) -> str: return capability.available(self.agreed_capabilities)",
      "4": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability, str: str) -> str: return capability.available(self.agreed_capabilities)",
      "5": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability, str: return capability.available(self.agreed_capabilities)",
      "6": "return capability in self.agreed_capabilities def available_capability(self, capability, str: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "7": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) = str(self.agreed_capabilities) return capability.available(self.agreed_capabilities)",
      "8": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "9": "return capability in self.agreed_capabilities def available_capability(self, capability: irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "10": "return capability in self.agreed_capabilities def available_capability(self, capability: str (utils.irc.Capability)) -> str: return capability.available(self.agreed_capabilities)",
      "11": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability): return self.agreed_capabilities return capability.available(self.agreed_capabilities)",
      "12": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability), bool: return capability.available(self.agreed_capabilities)",
      "13": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability): return bool(capability.available(self.agreed_capabilities))",
      "14": "return capability in self.agreed_capabilities def available_capability(self, capability => utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "15": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability)): return capability.available(self.agreed_capabilities)",
      "16": "return capability in self.agreed_capabilities def available_capability(self, capability: str.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "17": "return capability in self.agreed_capabilities def available_capability(self, capability: Optional[utils.irc.Capability]) -> str: return capability.available(self.agreed_capabilities)",
      "18": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability)) return capability.available(self.agreed_capabilities)",
      "19": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability), str: return capability.available(self.agreed_capabilities)",
      "20": "return capability in self.agreed_capabilities def available_capability(self, capability: bool) -> str: return capability.available(self.agreed_capabilities)",
      "21": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) str: return capability.available(self.agreed_capabilities)",
      "22": "return capability in self.agreed_capabilities def available_capability(self, capacity: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "23": "return capability in self.agreed_capabilities return available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "24": "return capability in self.agreed_capabilities def available_capability(self, capability=utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "25": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capacity.available(self.agreed_capabilities)",
      "26": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) || bool: return capability.available(self.agreed_capabilities)",
      "27": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability ) -> str: return capability.available(self.agreed_capabilities)",
      "28": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability -> str: return capability.available(self.agreed_capabilities)",
      "29": "return capability in self.agreed_capabilities def available_capability(self, capability(utils.irc.Capability)) -> str: return capability.available(self.agreed_capabilities)",
      "30": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability()) -> str: return capability.available(self.agreed_capabilities)",
      "31": "return capability in self.agreed_capabilities def available_capability(self, capability(): utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "32": "return capability in self.agreed_capabilities def available_capability(self, capability= utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "33": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability, str: str): return capability.available(self.agreed_capabilities)",
      "34": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability): return return capability.available(self.agreed_capabilities)",
      "35": "return capability in self.agreed_capabilities def available_capability(self, capability in irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "36": "return capability in self.agreed_capabilities def available_capability(self, capability: Utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "37": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability, str: return self.agreed_capabilities return capability.available(self.agreed_capabilities)",
      "38": "return capability in self.agreed_capabilities def available_capability(self, capability: str, utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "39": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability)-> str: return capability.available(self.agreed_capabilities)",
      "40": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "41": "return capability in self.agreed_capabilities def available_capability(self, capability: utils[irc.Capability], str: return capability.available(self.agreed_capabilities)",
      "42": "return capability in self.agreed_capabilities def available_capability(self, capability: str(utils.irc.Capability), str: return capability.available(self.agreed_capabilities)",
      "43": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) return capability.available(self.agreed_capabilities)",
      "44": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability, str: str) return capability.available(self.agreed_capabilities)",
      "45": "return capability in self.agreed_capabilities def available_capability(self, capability = utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities)",
      "46": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) = str: return capability.available(self.agreed_capabilities)",
      "47": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability); return capability.available(self.agreed_capabilities)",
      "48": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities) else:",
      "49": "return capability in self.agreed_capabilities def available_capability(self, capability: utils.irc.Capability) -> str: return capability.available(self.agreed_capabilities) return self.agreed_capabilities"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0\n\n",
    "target_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_line": "        return plans and len(plans) > 0",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "synek/git-plan",
    "source_filename": "git_plan/service/plan.py",
    "target_filename": "git_plan/service/plan.py",
    "source_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc^",
    "target_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "predictions": [
      "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "1": "\"\"\"Check if a plan already exists in the given directory\"\"\" var plans = os.listdir(project.plan_dir) return plans and len(plans) > 0",
      "2": "\"\"\"Check if a plan already exists in the given directory\"\"\" returns lists = os.listdir(project.plan_dir) return lists and len(plans) > 0",
      "3": "\"\"\"Check if a plan already exists in the given directory\"\"\" _plans = os.listdir(project.plan_dir) return _plans and _len(plans) > 0",
      "4": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and bool(plans) > 0",
      "5": "\"\"\"Check if a plan already exists in the given directory\"\"\" returns bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "6": "\"\"\"Check if a plan already exists in the given directory\"\"\" files = os.listdir(project.plan_dir) return files and len(plans) > 0",
      "7": "\"\"\"Check if a plan already exists in the given directory\"\"\" files = os.listdir(project.plan_dir) return lists and len(plans) > 0",
      "8": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return lists and len(plans) > 0",
      "9": "\"\"\"Check if a plan already exists in the given directory\"\"\" exports.plans = os.listdir(project.plan_dir) return exports.plans and len(plans) > 0",
      "10": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and bool(len(plans)) > 0",
      "11": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and bool(plans) > 0",
      "12": "\"\"\"Check if a plan already exists in the given directory\"\"\" Plans = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "13": "\"\"\"Check if a plan already exists in the given directory\"\"\" const plans = os.listdir(project.plan_dir) return plans and len(plans) > 0",
      "14": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and len(plans) > 0",
      "15": "\"\"\"Check if a plan already exists in the given directory\"\"\" bool = bool(os.listdir(project.plan_dir)) return bool(plans, len(plans))",
      "16": "\"\"\"Check if a plan already exists in the given directory\"\"\" _plans = os.listdir(project.plan_dir) return _plans and len(plans) > 0",
      "17": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return plans and bool(len(plans) > 0)",
      "18": "\"\"\"Check if a plan already exists in the given directory\"\"\" lists = os.listdir(project.plan_dir) return lists and len(plans) > 0",
      "19": "\"\"\"Check if a plan already exists in the given directory\"\"\" returns files = os.listdir(project.plan_dir) return files and len(plans) > 0",
      "20": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir), List[str]) return plans and len(plans) > 0",
      "21": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = str(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "22": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir), []) return plans and len(plans) > 0",
      "23": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir)) return lists and len(plans) > 0",
      "24": "\"\"\"Check if a plan already exists in the given directory\"\"\" if bool is not None return os.listdir(project.plan_dir) and len(plans) > 0",
      "25": "\"\"\"Check if a plan already exists in the given directory\"\"\" files = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "26": "\"\"\"Check if a plan already exists in the given directory\"\"\" if not, plans = bool(os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "27": "\"\"\"Check if a plan already exists in the given directory\"\"\" msgs = os.listdir(project.plan_dir) return msgs and len(plans) > 0",
      "28": "\"\"\"Check if a plan already exists in the given directory\"\"\" var plans = os.listdir(project.plan_dir) return plans and bool(plans) > 0",
      "29": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir), bool) return plans and len(plans) > 0",
      "30": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(os.listdir(project.plan_dir), bool(plans)) return plans and len(plans) > 0",
      "31": "\"\"\"Check if a plan already exists in the given directory\"\"\" if not, plans = os.listdir(project.plan_dir) return plans and len(plans) > 0",
      "32": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return bool(plans, len(plans)) > 0",
      "33": "\"\"\"Check if a plan already exists in the given directory\"\"\" options = os.listdir(project.plan_dir) return options and len(plans) > 0",
      "34": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = bool(Os.listdir(project.plan_dir)) return plans and len(plans) > 0",
      "35": "\"\"\"Check if a plan already exists in the given directory\"\"\" _plans = os.listdir(project.plan_dir) return _plans and _ len(plans) > 0",
      "36": "\"\"\"Check if a plan already exists in the given directory\"\"\" bool = bool(os.listdir(project.plan_dir)) return bool(plans, len(plans)) > 0",
      "37": "\"\"\"Check if a plan already exists in the given directory\"\"\" returns lists = os.listdir(project.list_dir) return lists and len(plans) > 0",
      "38": "\"\"\"Check if a plan already exists in the given directory\"\"\" bool = bool(os.listdir(project.plan_dir)) return bool(plans and len(plans) > 0)",
      "39": "\"\"\"Check if a plan already exists in the given directory\"\"\" if not, plans = os.listdir(project.plan_dir) return plans and bool(plans) > 0",
      "40": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return plans and str(plans) > 0",
      "41": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans_dir = os.listdir(project.plan_dir) return plans_dir and len(plans) > 0",
      "42": "\"\"\"Check if a plan already exists in the given directory\"\"\" files = os.listdir(project.plan_dir) return plans and len(plans) > 0",
      "43": "\"\"\"Check if a plan already exists in the given directory\"\"\" return bool(plans) and len(plans) > 0",
      "44": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans_dir = os.listdir(project.plan_dir) return plans_dir and len(plans_dir) > 0",
      "45": "\"\"\"Check if a plan already exists in the given directory\"\"\" os.listdir(project.plan_dir) return bool(plans, len(plans))",
      "46": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return len(plans) > 0",
      "47": "\"\"\"Check if a plan already exists in the given directory\"\"\" bool = bool(os.listdir(project.plan_dir)) return bool(plans, bool) > 0",
      "48": "\"\"\"Check if a plan already exists in the given directory\"\"\" bool = os.listdir(project.plan_dir) return bool(plans, len(plans))",
      "49": "\"\"\"Check if a plan already exists in the given directory\"\"\" plans = os.listdir(project.plan_dir) return lists(plans) > 0"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
    "target_code": "    @classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        return [choice for choice in cls]\n",
    "warning_line": "        return [choice for choice in cls]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 11,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SectorLabs/django-postgres-extra",
    "source_filename": "psqlextra/types.py",
    "target_filename": "psqlextra/types.py",
    "source_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813^",
    "target_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "predictions": [
      "@classmethod def all(cls) -> List[StrEnum]: return [choice for choice in cls]"
    ],
    "correct": false,
    "top_five": {
      "0": "@classmethod def all(cls) -> List[StrEnum]: return [choice for choice in cls]",
      "1": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "2": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "3": "@classmethod def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "4": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return str([choice for choice in cls])",
      "5": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return cls[choice for choice]",
      "6": "@classmethod def all(cls) -> List[StrEnum, PostgresPartitioningMethod]: return [choice for choice in cls]",
      "7": "@classmethod def all(cls) -> str: return [choice for choice in cls]",
      "8": "@classmethod def all(cls) -> List[StrEnum, 'PostgresPartitioningMethod']: return [choice for choice in cls]",
      "9": "@classmethod def all(cls) -> List[StrEnum]: return cls[choice for choice]",
      "10": "@classmethod def all(cls) -> List[StrEnum, List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "11": "@classmethod def all(cls) -> List[StrEnum, [choice for choice in cls]: return [choice for choice in cls]",
      "12": "@classmethod def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "13": "@classmethod def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: return cls[choice for choice]",
      "14": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return List[choice for choice in cls]",
      "15": "@classmethod def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: return str([choice for choice in cls])",
      "16": "@classmethod def all(cls) -> List[StrEnum]: return str([choice for choice in cls])",
      "17": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return cls[choice for choice]",
      "18": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return str(choice for choice in cls)",
      "19": "@classmethod def all(cls) -> [StrEnum, List[\"PostgresPartitioningMethod\"]]: return [choice for choice in cls]",
      "20": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return (choice for choice in cls)",
      "21": "@classmethod def all(cls) -> cls.List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "22": "@classmethod def all(cls) -> List[StrEnum, []: return [choice for choice in cls]",
      "23": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return str([choice for choice in cls])",
      "24": "@classmethod def all(cls) -> Optional[List[\"PostgresPartitioningMethod\"]]: return [choice for choice in cls]",
      "25": "@classmethod def all(cls) -> List[StrEnum, List[\"PostgresPartitioningMethod\"]]: return [choice for choice in cls]",
      "26": "@classmethod def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: return str(choice for choice in cls)",
      "27": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return str( [choice for choice in cls])",
      "28": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return [choice in cls]",
      "29": "@classmethod def all(cls) -> [StrEnum[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "30": "@classmethod def all(cls) -> List[StrEnum, [choice for choice in cls]: return [StrEnum[choice for choice in cls]]",
      "31": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return \"\"\"[choice for choice in cls]\"",
      "32": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return str(choice for choice in cls)",
      "33": "@classmethod def all(cls) -> List['PostgresPartitioningMethod']: return [choice for choice in cls]",
      "34": "@classmethod def all(cls) -> String([\"PostgresPartitioningMethod\"]]: return [choice for choice in cls]",
      "35": "@classmethod def all(cls, str) -> List[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "36": "@classmethod def all(cls) -> List[StrEnum [\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "37": "@classmethod def all(cls) -> List[StrEnum]: return List[choice for choice in cls]",
      "38": "@classmethod def all(cls) -> List[StrEnum[PostgresPartitioningMethod]]: return [choice for choice in cls]",
      "39": "@classmethod def all(cls) -> list[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "40": "@classmethod def all(cls) -> List[StrEnum]: return (choice for choice in cls)",
      "41": "@classmethod def all(cls) -> List[StrEnum]: return [choice in cls]",
      "42": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return (choice for choice in cls)",
      "43": "@classmethod def all(cls) -> String[\"PostgresPartitioningMethod\"]: return [choice for choice in cls]",
      "44": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: assert isinstance(choice, strEnum) return [choice for choice in cls]",
      "45": "@classmethod def all(cls) -> List[\"PostgresPartitioningMethod\"]: return \"\"\"",
      "46": "@classmethod def all(cls) -> List[StrEnum_Method]: return [choice for choice in cls]",
      "47": "@classmethod def all(cls) -> List[StrEnum]: return \"\"\"[choice for choice in cls]\"",
      "48": "@classmethod def all(cls) -> List[StrEnum, PostgresPartitioningMethod]: return cls[choice for choice]",
      "49": "@classmethod def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: return \"\"\"[choice for choice in cls]\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return {\"resistance\": voltage / current}\n\n",
    "target_code": "        return {\"resistance\": voltage / current}\n    else:\n        raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_line": "        return {\"resistance\": voltage / current}",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "electronics/ohms_law.py",
    "target_filename": "electronics/ohms_law.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "return { \"resistance\": str(voltage) / current }"
    ],
    "correct": false,
    "top_five": {
      "0": "return { \"resistance\": str(voltage) / current }",
      "1": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] }",
      "2": "return { \"resistance\": str(voltage / current) }",
      "3": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] {",
      "4": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"resistance\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] }",
      "5": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] \\",
      "6": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"resistance\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] {",
      "7": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Current]]] } \"resistance\": Dict[str, Dict[str]] }",
      "8": "return { \"resistance\": Dict[str, float] }",
      "9": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]]] } \"resistance\": Dict[str, Dict[str]] {",
      "10": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]]] } \"resistance\": Dict[str, Dict[str]] }",
      "11": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] } return { \"resistance\": Dict[str, Dict[str]] {",
      "12": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] } return { \"resistance\": Dict[str, Dict[str]] }",
      "13": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] } return { \"resistance\": Dict[str]] }",
      "14": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, current]]] } \"resistance\": Dict[str, Dict[str]] }",
      "15": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"current\" }",
      "16": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] }",
      "17": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] {",
      "18": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Current]]] } \"resistance\": Dict[str, Dict[str]] {",
      "19": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] } return { \"resistance\": Dict[str, Current]] }",
      "20": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Current]]] } \"resistance\": Dict[str]] }",
      "21": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, C]]] } \"resistance\": Dict[str, Dict[str]] }",
      "22": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]] } \"resistance\": Dict[str, Dict[str]] {",
      "23": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]]] } \"resistance\": Dict[str]] }",
      "24": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"resistance\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] \\",
      "25": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]] } \"resistance\": Dict[str, Dict[str]] }",
      "26": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"current\" {",
      "27": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] ^",
      "28": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] { return { \"resistance: voltage / current }",
      "29": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"voltage\": Dict[current]] }",
      "30": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, current]]] } \"resistance\": Dict[str]] }",
      "31": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]] { \"resistance\": Dict[str, Dict[str]] {",
      "32": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, current]]] } \"resistance\": Dict[str, Dict[str]] {",
      "33": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] { return { \"current\" }",
      "34": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"volt\": Dict[str]] }",
      "35": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, T]]] } \"resistance\": Dict[str, Dict[str]] }",
      "36": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"resistance]] }",
      "37": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]], current]] }",
      "38": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"resistance: voltage / current }",
      "39": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"resistance\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] }",
      "40": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]] } \"resistance\": Dict[str]] }",
      "41": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] { return { \"resistance]] }",
      "42": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } )",
      "43": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"str\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str]]] } return { \"resistance]] }",
      "44": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]]] } \"resistance\": Dict[str, Dict[current]] }",
      "45": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, C]]] } \"resistance\": Dict[str]] }",
      "46": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"resistance\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]] }",
      "47": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] } return { \"resistance\": Dict[str, Dict[str]] \\",
      "48": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, float]] { \"resistance\": Dict[str, Dict[str]] {",
      "49": "return { \"resistance\": Dict[str, Dict[str, float]] } return { \"voltage\": Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str, Dict[str], current]] }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
    "target_code": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_line": "    return origin and issubclass(origin, Collection)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 71,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "konradhalas/dacite",
    "source_filename": "dacite/types.py",
    "target_filename": "dacite/types.py",
    "source_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708^",
    "target_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "predictions": [
      "origin = extract_origin_collection(t) return bool(origin, Collection)"
    ],
    "correct": false,
    "top_five": {
      "0": "origin = extract_origin_collection(t) return bool(origin, Collection)",
      "1": "origin = extract_origin_collection(t) bool = bool return origin and issubclass(origin, Collection)",
      "2": "origin = extract_origin_collection(t) return bool(origin and issubclass(origin, Collection))",
      "3": "origin = extract_origin_collection(t) return bool(origin) and issubclass(origin, Collection)",
      "4": "origin = extract_origin_collection(t) return issubclass(origin, Collection)",
      "5": "origin = extract_origin_collection(t) return origin and issubclass(origin, Collection)",
      "6": "origin = extract_origin_collection(t) return bool(origin, issubclass(origin, Collection))",
      "7": "origin = extract_origin_collection(t) assert isinstance(origin, Collection) return origin and issubclass(origin, Collection)",
      "8": "origin = extract_origin_collection(t) return bool(origin, bool)",
      "9": "origin = extract_origin_collection(t) return bool(origin, 'Collection')",
      "10": "origin = extract_origin_collection(t) assert isinstance(origin, Collection) and issubclass(origin, Collection)",
      "11": "origin = extract_origin_collection(t) return bool(origin && issubclass(origin, Collection))",
      "12": "origin = extract_origin_collection(t) assert origin is not None and issubclass(origin, Collection)",
      "13": "origin = extract_origin_collection(t) bool = true return origin and issubclass(origin, Collection)",
      "14": "origin = extract_origin_collection(t) return bool(origin, isinstance(origin, Collection))",
      "15": "origin = extract_origin_collection(t) assert isinstance(origin, Collection) return isinstance(origin, Collection)",
      "16": "origin = extract_origin_collection(t) return bool(origin,...Collection)",
      "17": "origin = extract_origin_collection(t) isinstance(origin, Collection) return origin and issubclass(origin, Collection)",
      "18": "origin = extract_origin_collection(t) return bool(origin, [])",
      "19": "origin = extract_origin_collection(t) return bool(origin + issubclass(origin, Collection))",
      "20": "origin = extract_origin_collection(t) return bool(origin), issubclass(origin, Collection)",
      "21": "origin = extract_origin_collection(t) bool = bool(origin, Collection) return origin and issubclass(origin, Collection)",
      "22": "origin = extract_origin_collection(t) return bool( origin and issubclass(origin, Collection) )",
      "23": "origin = extract_origin_collection(t) bool = undefined return origin and issubclass(origin, Collection)",
      "24": "origin = extract_origin_collection(t) assert t is not None return origin and issubclass(origin, Collection)",
      "25": "origin = extract_origin_collection(t) issubclass(origin, Collection)",
      "26": "origin = extract_origin_collection(t) return bool(origin, (Collection) => isinstance(origin) and issubclass(origin, Collection)",
      "27": "origin = extract_origin_collection(t) assert isinstance(origin, Collection) return issubclass(origin, Collection)",
      "28": "origin = extract_origin_collection(t) return bool(origin, Collection)",
      "29": "origin = extract_origin_collection(t) assert isinstance(origin, Collection) return isinstance(origin)",
      "30": "origin = extract_origin_collection(t) return bool(origine) and issubclass(origin, Collection)",
      "31": "origin = extract_origin_collection(t) isinstance(origin, Collection) return isinstance(origin, Collection)",
      "32": "origin = extract_origin_collection(t) return bool(origine and issubclass(origin, Collection))",
      "33": "origin = extract_origin_collection(t) return bool(origin, bool.Collection)",
      "34": "origin = extract_origin_collection(t) return undefined and issubclass(origin, Collection)",
      "35": "origin = extract_origin_collection(t) return bool(origin)",
      "36": "origin = extract_origin_collection(t) assert isinstance(origin, Collection) return origin",
      "37": "origin = extract_origin_collection(t) isinstance(origin, Collection) return isinstance(origin)",
      "38": "origin = extract_origin_collection(t) return origin and issubclass(origin, bool)",
      "39": "origin = extract_origin_collection(t) return bool(origin, isinstance(Collection))",
      "40": "origin = extract_origin_collection(t) return source and issubclass(origin, Collection)",
      "41": "origin = extract_origin_collection(t) assert isinstance(origin, Collection)",
      "42": "origin = extract_origin_collection(t) return bool(origin, (Collection))",
      "43": "origin = extract_origin_collection(t) return bool(origin, \"Collection\", bool)",
      "44": "origin = extract_origin_collection(t) return origin and issubclass(origin, [Collection])",
      "45": "origin = extract_origin_collection(t) bool = bool(origin, Collection) return issubclass(origin, Collection)",
      "46": "origin = extract_origin_collection(t) return bool(origin, t)",
      "47": "origin = extract_origin_collection(t) return isinstance(origin, Collection)",
      "48": "origin = extract_origin_collection(t) return bool(origin, bool(Collection))",
      "49": "origin = extract_origin_collection(t) return bool(origin, 'collection')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None\n\n",
    "target_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "sensepost/objection",
    "source_filename": "objection/commands/ios/hooking.py",
    "target_filename": "objection/commands/ios/hooking.py",
    "source_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf^",
    "target_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "predictions": [
      "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return []"
    ],
    "correct": true,
    "top_five": {
      "0": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return []",
      "1": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"\"",
      "2": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "3": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return False",
      "4": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return ''",
      "5": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "6": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return 0",
      "7": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(\"Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "8": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "9": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error(\"Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "10": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return True",
      "11": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Unable to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "12": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return ['Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red']",
      "13": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "14": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "15": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"Failed to list classes with error\"",
      "16": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "17": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Integration class failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "18": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(\"Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "19": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return [\"Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red']",
      "20": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"Error\"",
      "21": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Unable to list classes with error: { '.format(response.error_reason), fg='red')",
      "22": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise ValueError(f'Unable to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "23": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return null",
      "24": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Unsupported to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "25": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') assert class is not None return None",
      "26": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"\"\"",
      "27": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return 'Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "28": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return False",
      "29": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"Y\"",
      "30": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') throw new Error('Class not found')",
      "31": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(\"Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return False",
      "32": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return 'undefined'",
      "33": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"failed to list classes with error\"",
      "34": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"OK\"",
      "35": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return 'Failed to list classes with error'",
      "36": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(Failed to list classes with error: { '0 \\ '.format(response.error_reason), fg='red')",
      "37": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"\",",
      "38": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "39": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return [0]",
      "40": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return (",
      "41": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red'), return []",
      "42": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise ValueError(f'Class not found')",
      "43": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Integration class failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return None",
      "44": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"Unknown class\"",
      "45": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') return \"Yes\"",
      "46": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Loading class failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "47": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise NotImplementedError(f'Unable to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "48": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red')",
      "49": "click.secho('Failed to list classes with error: { 0 } '.format(response.error_reason), fg='red') raise TypeError(f'Unable to list classes with error: { 0 } '.format(response.error_reason), fg='red') return False"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                            return desc\n        return None\n\n",
    "target_code": "                            return desc\n        return \"\"\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 245,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/player.py",
    "target_filename": "tale/player.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "return desc return \"\""
    ],
    "correct": true,
    "top_five": {
      "0": "return desc return \"\"",
      "1": "return desc assert isinstance(str, str) return None",
      "2": "return desc return ''",
      "3": "return desc return []",
      "4": "return desc assert isinstance(str, cb) return None",
      "5": "return desc return str(null, 'utf-8')",
      "6": "return desc assert isinstance(str, str) return \"\"",
      "7": "return desc assert isinstance(str, dc) return None",
      "8": "return desc assert isinstance(str) return None",
      "9": "return desc return False",
      "10": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type\": { } \") return None",
      "11": "return desc return str(str)",
      "12": "return desc assert isinstance(ctx, str) return None",
      "13": "return desc return isinstance(str, str)",
      "14": "return desc assert isinstance(str, str) raise ValueError(f\"Unable to retrieve data from sc: { } \") return None",
      "15": "return desc assert isinstance(str, bool) return None",
      "16": "return desc raise ValueError(f\"Unknown type: { f } \") return None",
      "17": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type: { str } \") return None",
      "18": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type: { str } \")",
      "19": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type: { return None } \")",
      "20": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type: { } \") return None",
      "21": "return desc return 0",
      "22": "return desc raise ValueError(result) return None",
      "23": "return desc assert isinstance(str,...args) return None",
      "24": "return desc assert isinstance(str, str) raise ValueError(f\"Unable to retrieve data from sc: } } \") return None",
      "25": "return desc assert isinstance(str, str) raise ValueError(f\"Internal error: { } \") return None",
      "26": "return desc raise ValueError(f'unknown type') return None",
      "27": "return desc raise ValueError(f\"Unknown type\"]) return None",
      "28": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type.\"+str)",
      "29": "return desc assert isinstance(str, str) raise ValueError(f\"Cannot return str\")",
      "30": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown formatter: { } \") return None",
      "31": "return desc assert isinstance(str, str) raise ValueError(f\"Could not return\")",
      "32": "return desc raise ValueError(f\"Unknown type\": { f } \") return None",
      "33": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type\": { } \")",
      "34": "return desc raise ValueError(f\"Unknown type, { str } \") return None",
      "35": "return desc return str(null, 'null')",
      "36": "return desc raise ValueError(f\"Unknown type: { str } \") return None",
      "37": "return desc assert isinstance(str, args) return None",
      "38": "return desc assert isinstance(str, str) raise ValueError(f\"Unable to retrieve data from sc: { } \")",
      "39": "return desc assert isinstance(str, str) raise ValueError(f\"Couldn't return str\")",
      "40": "return desc return Optional[str]",
      "41": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type, { str } \")",
      "42": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type: { f } \") return None",
      "43": "return desc assert isinstance(str, str) raise ValueError(f\"Str is not None\")",
      "44": "return desc assert isinstance(str, str) raise ValueError(f\"Expected str = { } \")",
      "45": "return desc assert isinstance(str, str) raise ValueError(f\"Unknown type: { } \")",
      "46": "return desc assert isinstance(str, str) return False",
      "47": "return desc return str(null, '')",
      "48": "return desc assert isinstance(str, []) return None",
      "49": "return desc assert isinstance(str, str) raise ValueError(f\"Expected str = { } \") return None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
    "target_code": "    if unit in units:\n        return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    else:\n",
    "warning_line": "        return int(amount[:-1]) * 100_000_000_000 / units[unit]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 144,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/bolt11.py",
    "target_filename": "lnbits/bolt11.py",
    "source_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2^",
    "target_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "predictions": [
      "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit] else:"
    ],
    "correct": false,
    "top_five": {
      "0": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "1": "if unit in units: return int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "2": "if unit in units: return float(amount[:-1]) * 100_000_000000 / units[unit] else:",
      "3": "if unit in units: float = int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "4": "if unit in units: return floating(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "5": "if unit in units: return (float(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "6": "if unit in units: returns float(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "7": "if unit in units: return float(amount[:-1], 100_000_000_000) else:",
      "8": "if unit in units: return float(amount[:-1], 100_000_000_000 / units[unit]) else:",
      "9": "if unit in units: return float(amount[:-1]) * 100_000_000_000/ units[unit] else:",
      "10": "if unit in units: return unit(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "11": "if unit in units: return async(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "12": "if unit in units: return floating(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "13": "if unit in units: return integer(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "14": "if unit in units: return async (amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "15": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit].toLowerCase() else:",
      "16": "if unit in units: return amount * 100_000_000_000 / units[unit] else:",
      "17": "if unit in units: return undefined(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "18": "if unit in units: return float(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "19": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit] else if unit is not None:",
      "20": "if unit in units: return asc(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "21": "if unit in units: return range(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "22": "if unit in units: return float(amount[:-1]) * 100_000_000_000 or float(units[unit]) else:",
      "23": "if unit in units: return int(amount[:-1]) * 100_000_000000 / units[unit] else:",
      "24": "if unit in units: return total(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "25": "if unit in units: value = int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "26": "if unit in units: return $(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "27": "if unit in units: int(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "28": "if unit in units: return list(int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "29": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit].float else:",
      "30": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / unit else:",
      "31": "if unit in units: return int(amount[:-1]) * 100_000_000_000 / unit else:",
      "32": "if unit in units: return floating_amount(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "33": "if unit in units: return sum(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "34": "if unit in units: return bytes(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "35": "if unit in units: return (float(amount[:-1]) * 100_000_000_000 / units[unit]) else:",
      "36": "if unit in units: return float(amount[:-1]) * 100_000_0000_000 / units[unit] else:",
      "37": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / unit[unit] else:",
      "38": "if unit in units: return int(amount[:-100]) * 100_000_000_000 / units[unit] else:",
      "39": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit].decode(unit) else:",
      "40": "if unit in units: returned float(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "41": "if unit in units: return isinstance(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "42": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit].decode() else:",
      "43": "if unit in units: return float(amount[:-100]) * 100_000_000_000 / units[unit] else:",
      "44": "if unit in units: return float(amount[:-1]) * 100_000_000_000 for units[unit] else:",
      "45": "if unit in units: return float(amount[:-1]) * 100_000_000_000 / units[unit].split('') else:",
      "46": "if unit in units: return (int(amount[:-1])) * 100_000_000_000 / units[unit] else:",
      "47": "if unit in units: float(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "48": "if unit in units: return for(amount[:-1]) * 100_000_000_000 / units[unit] else:",
      "49": "if unit in units: return fractions(amount[:-1]) * 100_000_000_000 / units[unit] else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
    "target_code": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_line": "    return subdomain",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/extensions/subdomains/crud.py",
    "target_filename": "lnbits/extensions/subdomains/crud.py",
    "source_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d^",
    "target_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "predictions": [
      "subdomain = await get_subdomain(payment_hash) return Optional[subdomain]"
    ],
    "correct": false,
    "top_five": {
      "0": "subdomain = await get_subdomain(payment_hash) return Optional[subdomain]",
      "1": "subdomain = await get_subdomain(payment_hash) assert subdomain is not None return subdomain",
      "2": "subdomain = await get_subdomain(payment_hash) assert payment_hash is not None return subdomain",
      "3": "subdomain = await get_subdomain(payment_hash) return Subdomain",
      "4": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, PaymentHash) return subdomain",
      "5": "subdomain = await get_subdomain(payment_hash) return Optional[Subdomain]",
      "6": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, payment_hash) return subdomain",
      "7": "subdomain = await get_subdomain(payment_hash) return subdomain",
      "8": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Optional[subdomain]) return subdomain",
      "9": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomains, PaymentHash) return subdomain",
      "10": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, []) return subdomain",
      "11": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomains, payment_hash) return subdomain",
      "12": "subdomain = await get_subdomain(payment_hash) assert payment_hash was not None return subdomain",
      "13": "subdomain = await get_subdomain(payment_hash) return Optional[Subdomains]",
      "14": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Subdomains) return subdomain",
      "15": "subdomain = await get_subdomain(payment_hash) Optional[subdomain] = await get_subdomain(payment_hash)",
      "16": "subdomain = await get_subdomain(payment_hash) Optional[subdomain] = await get_subdomain(payment_hash) return Optional[subdomain]",
      "17": "subdomain = await get_subdomain(payment_hash) Optional[$1] = await get_subdomain(payment_hash) return subdomain",
      "18": "subdomain = await get_subdomain(payment_hash) Optional[Subdomains] = await get_subdomain(payment_hash) return subdomain",
      "19": "subdomain = await get_subdomain(payment_hash) Optional[Subdomains] = await get_subdomain(payment_hash) return Optional[subdomain]",
      "20": "subdomain = await get_subdomain(payment_hash) Optional[Subdomains] = await get_subdomain(payment_hash)",
      "21": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Subdomain) return subdomain",
      "22": "subdomain = await get_subdomain(payment_hash) Optional[Subdomain] = await get_subdomain(payment_hash) return Optional[subdomain]",
      "23": "subdomain = await get_subdomain(payment_hash) Optional[Subdomain] = await get_subdomain(payment_hash) return subdomain",
      "24": "subdomain = await get_subdomain(payment_hash) Optional[Subdomains] = await get_subdomain(payment_hash) return Subdomain",
      "25": "subdomain = await get_subdomain(payment_hash) Optional[subdomain] = await get_subdomain(payment_hash) return subdomain",
      "26": "subdomain = await get_subdomain(payment_hash) return assert subdomain is not None",
      "27": "subdomain = await get_subdomain(payment_hash) if isinstance(subdomain, Optional[subdomain]): return subdomain",
      "28": "subdomain = await get_subdomain(payment_hash) Optional[Subdomain] = await get_subdomain(payment_hash) return Subdomain",
      "29": "subdomain = await get_subdomain(payment_hash) if not isinstance(subdomain, Optional[subdomain]): return subdomain",
      "30": "subdomain = await get_subdomain(payment_hash) Optional[subdomain] = await get_subdomain(payment_hash) return Subdomain",
      "31": "subdomain = await get_subdomain(payment_hash) return Optional[str]",
      "32": "subdomain = await get_subdomain(payment_hash) assert subdomain.isinstance(payment_hash, Subdomain) return subdomain",
      "33": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Payment_hash) return subdomain",
      "34": "subdomain = await get_subdomain(payment_hash) if not subdomain: return subdomain",
      "35": "subdomain = await get_subdomain(payment_hash) Optional[Subdomain] = await get_subdomain(payment_hash)",
      "36": "subdomain = await get_subdomain(payment_hash) assert subdomain has_hash return subdomain",
      "37": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Optional[subdomains]) return subdomain",
      "38": "subdomain = await get_subdomain(payment_hash) if not subdomain: return Subdomain",
      "39": "subdomain = await get_subdomain(payment_hash) if isinstance(subdomain, Subdomains): return subdomain",
      "40": "subdomain = await get_subdomain(payment_hash) Optional[$subdomain] = await get_subdomain(payment_hash) return subdomain",
      "41": "subdomain = await get_subdomain(payment_hash) assert subdomain was not None return subdomain",
      "42": "subdomain = await get_subdomain(payment_hash) return Optional[$subdomain]",
      "43": "subdomain = await get_subdomain(payment_hash) return Optional[subdomain]",
      "44": "subdomain = await get_subdomain(payment_hash), Optional[subdomain] = await get_subdomain(payment_hash, Subdomain) return Optional[subdomain]",
      "45": "subdomain = await get_subdomain(payment_hash) Optional[$subdomain] = await get_subdomain(payment_hash) return $subdomain",
      "46": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomains, []) return subdomain",
      "47": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Optional[Subdomains]) return subdomain",
      "48": "subdomain = await get_subdomain(payment_hash) assert isinstance(subdomain, Optional[$subdomain]) return subdomain",
      "49": "subdomain = await get_subdomain(payment_hash) if isinstance(subdomain, Optional[subdomains]): return subdomain"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n\n",
    "target_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_line": "        return ImageData(self._dto[\"profileiconmax\"])",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `ImageData`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "meraki-analytics/cassiopeia",
    "source_filename": "cassiopeia/core/staticdata/realms.py",
    "target_filename": "cassiopeia/core/staticdata/realms.py",
    "source_changeid": "a26127b190f398137c4cf92469c5de573ce2a018^",
    "target_changeid": "a26127b190f398137c4cf92469c5de573ce2a018",
    "predictions": [
      "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"]))"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"]))",
      "1": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(self._dto[\"profileiconmax\"])",
      "2": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData()",
      "4": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return int(self._dto[\"profileiconmax\"])",
      "15": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return int(ImageData(self._dto[\"profileiconmax\"]))",
      "23": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" return ImageData(int(self._dto[\"profileiconmax\"], # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #1 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
    "target_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            return False\n        return self.parent.left is self.parent.left is self\n\n",
    "warning_line": "        return self.parent and self.parent.left is self",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Optional[bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 435,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/red_black_tree.py",
    "target_filename": "data_structures/binary_tree/red_black_tree.py",
    "source_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2^",
    "target_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "predictions": [
      "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and self.parent.left is self"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and self.parent.left is self",
      "1": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent)",
      "2": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and self.parent.left is self",
      "3": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent and self.parent.left is self)",
      "4": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent is not None and self.parent.left is self",
      "5": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent).left is self",
      "6": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and bool(self.parent.left is self)",
      "7": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return str(self.parent) and self.parent.left is self",
      "8": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) && self.parent.left is self",
      "9": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return type(self.parent) and self.parent.left is self",
      "10": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent is not left and self.parent.left is self",
      "11": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) or (self.parent.left is self)",
      "12": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent.left is self",
      "13": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent), bool(self.parent.left)",
      "14": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and bool(self.parent.left is self)",
      "15": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and bool(self.parent.left)",
      "16": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) or \"left\" is self",
      "17": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self).parent and self.parent.left is self",
      "18": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) or bool(self.parent.left is self)",
      "19": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return (self.parent and self.parent.left is self)",
      "20": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool() and self.parent.left is self",
      "21": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return Bool(self.parent) and self.parent.left is self",
      "22": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool (self.parent) and self.parent.left is self",
      "23": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent if bool is not None and self.parent.left is self",
      "24": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent and bool(self.parent.left))",
      "25": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" bool = true return self.parent and self.parent.left is self",
      "26": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent, self.parent.left)",
      "27": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and is self.parent.left",
      "28": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent if self.parent.left is self",
      "29": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool is not None and self.parent.left is self",
      "30": "\"\"\"Rests true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and self.parent.left is self",
      "31": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" assert self.parent and self.parent.left is self",
      "32": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and return self.parent.left is self",
      "33": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool (self.parent and self.parent.left is self)",
      "34": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) or (self.parent.left is self",
      "35": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and is self.parent.left is self",
      "36": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent) and is self.parent.left is self",
      "37": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent, left is self",
      "38": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent is not null and self.parent.left is self",
      "39": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return parent and parent.left is self",
      "40": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent and self.parent.left is self",
      "41": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent and left is self",
      "42": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent, bool)",
      "43": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent and self.parent.left is self )",
      "44": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent), left is self",
      "45": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent is not none and self.parent.left is self",
      "46": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return bool(self.parent).append(left)",
      "47": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return undefined and self.parent.left is self",
      "48": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return assert self.parent and self.parent.left is self",
      "49": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\" return self.parent if left is not self.parent.left"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n\n",
    "target_code": "\n    def __str__(self) -> str:\n        return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_line": "        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `typing.List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 122,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "target_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298^",
    "target_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "predictions": [
      "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]"
    ],
    "correct": false,
    "top_five": {
      "0": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "1": "def __str__(self) -> List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "2": "def __str__(self) -> typing.List[int], true: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "3": "def __str__(self) -> typing.List[int], false: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "4": "def __str__(self) -> None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "5": "def __str__(self) -> list[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "6": "def __str__(self) -> typing.List[int], None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "7": "def __str__(self) -> Typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "8": "def __str__(self) -> str: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "9": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)]",
      "10": "def __str__(self) -> typing.Error: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "11": "def __str__(self) -> typing.List[int], self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1): return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "12": "def __str__(self) -> TypeError: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "13": "def __str__(self) -> typing.List[int, []: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "14": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] else:",
      "15": "def __str__(self) -> bool: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "16": "def __str__(self) -> typing.List[int], [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "17": "def __str__(self) -> typing.Optional[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "18": "def __str__(self) -> typing.List[int], self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)",
      "19": "def __str__(self) -> typing.List[int]: return self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)",
      "20": "def __str__(self) -> typing.None: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "21": "def __str__(self) -> typing.List[Int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "22": "def __str__(self) -> typing.List[int]: return [ self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1) ]",
      "23": "def __str__(self): return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "24": "def __str__(self) -> typing.Int(self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)) return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "25": "def __str__(self) -> typing.List[int]: return (self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1))",
      "26": "def __str__(self) -> typing.List[int, None]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "27": "def __str__(self) -> typing.List[\"\"]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "28": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise ValueError(f\"Unknown size: { f } \")",
      "29": "def __str__(self) -> typing.List[int, [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "30": "def __str__(self) -> List[Int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "31": "def __str__(self) -> typing.Address: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "32": "def __str__(self) -> typing.Size: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "33": "def __str__(self) -> typing.List[int], self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1): return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)]",
      "34": "def __str__(self) -> []: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "35": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise ValueError(f\"Unknown size: { if self.size } \")",
      "36": "def __str__(self) -> typing.List[int], \"\"\" return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "37": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, int, i, int) for i in range(1, self.size + 1)]",
      "38": "def __str__(self) -> typing.Optional[\"\"]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "39": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise ValueError(f\"Unknown size: { i } \")",
      "40": "def __str__(self) -> typing.Failure: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "41": "def __str__(self) -> typing.List[int]: return _self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)",
      "42": "def __str__(self) -> typing.All[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "43": "def __str__(self) -> typing[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "44": "def __str__(self) -> typing.Change: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
      "45": "def __str__(self) -> typing.List[int], [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)]",
      "46": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise ValueError(f\"Unknown size: { \")",
      "47": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise NotImplementedError",
      "48": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise ValueError(f\"Unknown size: { n \\ n\")",
      "49": "def __str__(self) -> typing.List[int]: return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] raise ValueError(f\"Unknown size: { n \\ \")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if file_hash == \"\":\n            return False\n        try:\n",
    "target_code": "        if file_hash == \"\":\n            return \"\"\n        try:\n",
    "warning_line": "            return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/Trust.py",
    "target_filename": "UM/Trust.py",
    "source_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41^",
    "target_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "predictions": [
      "if file_hash == \"\": return str(false) try:"
    ],
    "correct": false,
    "top_five": {
      "0": "if file_hash == \"\": return str(false) try:",
      "1": "if file_hash == \"\": return str(str) try:",
      "2": "if file_hash == \"\": return bool(false) try:",
      "3": "if file_hash == \"\": return str(true) try:",
      "4": "if file_hash == \"\": return str(str, bool) try:",
      "5": "if file_hash == \"\": assert isinstance(str, str) return False try:",
      "6": "if file_hash == \"\": return str(bool) try:",
      "7": "if file_hash == \"\": assert file_hash is not None return False try:",
      "8": "if file_hash == \"\": assert isinstance(file_hash, str) return False try:",
      "9": "if file_hash == \"\": return bool try:",
      "10": "if file_hash == \"\": return str(null, bool) try:",
      "11": "if file_hash == \"\": return bool(str) try:",
      "12": "if file_hash == \"\": bool = False try:",
      "13": "if file_hash == \"\": return \"\" try:",
      "14": "if file_hash == \"\": return str(False) try:",
      "15": "if file_hash == \"\": return False try:",
      "16": "if file_hash == \"\": return str('') try:",
      "17": "if file_hash == \"\": return bool(int, str) try:",
      "18": "if file_hash == \"\": assert isinstance(false, str) return False try:",
      "19": "if file_hash == \"\": return bool(true) try:",
      "20": "if file_hash == \"\": return assert isinstance(str, str) try:",
      "21": "if file_hash == \"\": str(str) return False try:",
      "22": "if file_hash == \"\": assert isinstance(file_hash, bool) return False try:",
      "23": "if file_hash == \"\": assert isinstance(file_hash, str, bool) return False try:",
      "24": "if file_hash == \"\": bool = false try:",
      "25": "if file_hash == \"\": return bool(False) try:",
      "26": "if file_hash == \"\": return str(false, bool) try:",
      "27": "if file_hash == \"\": str(str) return bool try:",
      "28": "if file_hash == \"\": return bool (false) try:",
      "29": "if file_hash == \"\": bool = true try:",
      "30": "if file_hash == \"\": str(bool) return False try:",
      "31": "if file_hash == \"\": return str(True) try:",
      "32": "if file_hash == \"\": return str(str, str) try:",
      "33": "if file_hash == \"\": return bool(file_hash) try:",
      "34": "if file_hash == \"\": return Str(false) try:",
      "35": "if file_hash == \"\": return str(str, False) try:",
      "36": "if file_hash == \"\": return str(int, bool) try:",
      "37": "if file_hash == \"\": return bool('False') try:",
      "38": "if file_hash == \"\": return str(str, []) try:",
      "39": "if file_hash == \"\": return null try:",
      "40": "if file_hash == \"\": return str(file_hash) try:",
      "41": "if file_hash == \"\": return str(\"\") try:",
      "42": "if file_hash == \"\": return str (str) try:",
      "43": "if file_hash == \"\": return Str(false) try:",
      "44": "if file_hash == \"\": return str(str, \"\") try:",
      "45": "if file_hash == \"\": return str(str, false) try:",
      "46": "if file_hash == \"\": assert isinstance(str, str) return True try:",
      "47": "if file_hash == \"\": assert isinstance(false) return False try:",
      "48": "if file_hash == \"\": bool = bool return False try:",
      "49": "if file_hash == \"\": bool = str try:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": true,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            if target.is_ammo_depot:\n                yield target\n",
    "target_code": "            if target.is_ammo_depot:\n                assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_line": "                yield target",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dcs-liberation/dcs_liberation",
    "source_filename": "game/commander/theaterstate.py",
    "target_filename": "game/commander/theaterstate.py",
    "source_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3^",
    "target_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "predictions": [
      "if target.is_ammo_depot: yield Target"
    ],
    "correct": false,
    "top_five": {
      "0": "if target.is_ammo_depot: yield Target",
      "1": "if target.is_ammo_depot: yield TheaterGroundObject",
      "2": "if target.is_ammo_depot: yield target",
      "3": "if target.is_ammo_depot: yield TheaterGroundObject(target, None)",
      "4": "if target.is_ammo_depot: yield buildingGroundObject(target, TheaterGroundObject)",
      "5": "if target.is_ammo_depot: yield BuildingGroundObject(target, Optional[BuildingGroundObject])",
      "6": "if target.is_ammo_depot: yield TheaterGroundObject(target, BuildingGroundObject)",
      "7": "if target.is_ammo_depot: yield TheaterGroundObject(target, Optional[BuildingGroundObject])",
      "8": "if target.is_ammo_depot: yield build_target",
      "9": "if target.is_ammo_depot: yield buildingGroundObject(target, Optional[BuildingGroundObject])",
      "10": "if target.is_ammo_depot: yield buildingGroundObject(target)",
      "11": "if target.is_ammo_depot: yield TheaterGroundObject(target)",
      "12": "if target.is_ammo_depot: yield buildingGroundObject",
      "13": "if target.is_ammo_depot: yield typing.Iterator[BuildingGroundObject], TheaterGroundObject()",
      "14": "if target.is_ammo_depot: yield type[target] = typing.Iterator[BuildingGroundObject], TheaterGroundObject[]",
      "15": "if target.is_ammo_depot: yield typing.Iterator[BuildingGroundObject], TheaterGroundObject(target, None)",
      "16": "if target.is_ammo_depot: yield isinstance(target, TheaterGroundObject)",
      "17": "if target.is_ammo_depot: yield type[target] = typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]",
      "18": "if target.is_ammo_depot: yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]",
      "19": "if target.is_ammo_depot: yield TheaterGroundObject()",
      "20": "if target.is_ammo_depot: yield TypeError(target, TheaterGroundObject)",
      "21": "if target.is_ammo_depot: yield type: Typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]",
      "22": "if target.is_ammo_depot: yield Typing.Iterator[BuildingGroundObject], TheaterGroundObject()",
      "23": "if target.is_ammo_depot: yield TypeError(target.name, \"ammo_depot\", typing.Iterator[BuildingGroundObject], None, None)",
      "24": "if target.is_ammo_depot: yield TypeError(target.name, \"ammo_depot\", typing.Iterator[BuildingGroundObject], None, TheaterGroundObject)",
      "25": "if target.is_ammo_depot: yield type: Typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, TheaterGroundObject]",
      "26": "if target.is_ammo_depot: yield typeof target == \"object\" && target.is_ammo_depot()",
      "27": "if target.is_ammo_depot: yield Typing.Iterator[BuildingGroundObject], TheaterGroundObject(target, None)",
      "28": "if target.is_ammo_depot: yield TypeError(target.ammo_depot)",
      "29": "if target.is_ammo_depot: yield TheaterGroundObject(target.ammo_depot)",
      "30": "if target.is_ammo_depot: yield TypeError(target, 'ammo_depot')",
      "31": "if target.is_ammo_depot: yield type: Typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, TheaterGroundObject[]]",
      "32": "if target.is_ammo_depot: yield type(target, TheaterGroundObject)",
      "33": "if target.is_ammo_depot: yield type[target] = typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, TheaterGroundObject]",
      "34": "if target.is_ammo_depot: yield TypeError(target.ammo_depot, TheaterGroundObject)",
      "35": "if target.is_ammo_depot: yield type: Typing.Iterator[BuildingGroundObject], TheaterGroundObject[]",
      "36": "if target.is_ammo_depot: yield typing.Iterator[TheaterGroundObject], TheaterGroundObject()",
      "37": "if target.is_ammo_depot: yield TypeError(target, 'BuildingGroundObject')",
      "38": "if target.is_ammo_depot: yield type[target] = typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] return type[ammo_depot]",
      "39": "if target.is_ammo_depot: yield Typing.Iterator[TheaterGroundObject], TheaterGroundObject()",
      "40": "if target.is_ammo_depot: yield typing.Generator[TheaterGroundObject], None, None]",
      "41": "if target.is_ammo_depot: yield TypeError(target.name, \"ammo_depot\", typing.Iterator[BuildingGroundObject], None, TheaterGroundObject])",
      "42": "if target.is_ammo_depot: yield TheaterGroundObject(target);",
      "43": "if target.is_ammo_depot: yield buildingGroundObject(target.ammo_depot)",
      "44": "if target.is_ammo_depot: yield TypeError(target.generator, TheaterGroundObject)",
      "45": "if target.is_ammo_depot: yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[]",
      "46": "if target.is_ammo_depot: yield type[target] = typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, TheaterGroundObject[]]",
      "47": "if target.is_ammo_depot: yield Typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]",
      "48": "if target.is_ammo_depot: yield type = 'TheaterGroundObject' yield type",
      "49": "if target.is_ammo_depot: yield type: Typing.Iterator[BuildingGroundObject], TheaterGroundObject()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        else:\n            return self.error.to_string()\n\n",
    "warning_line": "            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 107,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dagster-io/dagster",
    "source_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "target_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84^",
    "target_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "predictions": [
      "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")"
    ],
    "correct": false,
    "top_five": {
      "0": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "1": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "2": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: return false check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "3": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "4": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return False",
      "5": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "6": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "7": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \")",
      "8": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return False",
      "9": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "10": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "11": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error",
      "12": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return false",
      "13": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return True",
      "14": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return true",
      "15": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: return check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "16": "return self.error.message.strip() + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "17": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "18": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "19": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() else:",
      "20": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None\" check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "21": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise Error(f\"Unexpected error setting: { self.error_source } \") return False",
      "22": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise TypeError(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "23": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "24": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise new Error(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "25": "return self.error.message.strip() + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "26": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error",
      "27": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None and self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "28": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() return False else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "29": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") check.failed(self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "30": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return true",
      "31": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error is not None return self.error.message.strip()",
      "32": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None return self.error.message.strip()",
      "33": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.source is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "34": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return None",
      "35": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip()",
      "36": "return self.error.message.strip() + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ValueError(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "37": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return user_code_error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "38": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error",
      "39": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: return False check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "40": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return false",
      "41": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return elif self.error_source == ErrorSource.FRAMEWORK_ERROR else: check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "42": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") else:",
      "43": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() else:",
      "44": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: check.failed(f\"Unexpected error setting: { self.error_source } \") return True",
      "45": "return self.error.message.strip() + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error is not None check.failed(f\"Unexpected error setting: { self.error_source } \")",
      "46": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error.is not None and f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()",
      "47": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return false",
      "48": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: assert self.error_source is not None check.failed(f\"Unexpected error setting: { self.error_source } \") return False",
      "49": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() elif self.error_source == ErrorSource.FRAMEWORK_ERROR: return self.error.to_string() else: raise ExpressionError(f\"Unexpected error setting: { self.error_source } \") return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            # threading library\n            return None\n        frames: List[Tuple[FrameType, int]] = [\n",
    "target_code": "            # threading library\n            return []\n        frames: List[Tuple[FrameType, int]] = [\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 796,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "plasma-umass/scalene",
    "source_filename": "scalene/scalene_profiler.py",
    "target_filename": "scalene/scalene_profiler.py",
    "source_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58^",
    "target_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "predictions": [
      "# threading library return [] frames: List[Tuple[FrameType, int, FrameType]] = ["
    ],
    "correct": false,
    "top_five": {
      "0": "# threading library return [] frames: List[Tuple[FrameType, int, FrameType]] = [",
      "1": "# threading library return [] frames: List[Tuple[FrameType, int]] = [",
      "2": "# threading library return [] frames: List[Tuple[FrameType, int], FrameType] = [",
      "3": "# threading library return None frames: List[Tuple[FrameType, int]] = [",
      "4": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int]] = [",
      "5": "# threading library return [] frames: List[Tuple[FrameType, int,...]] = [",
      "6": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int]]] = [",
      "7": "# threading library return None frames: List[Tuple[FrameType, int, List[FrameType, int]]] = [",
      "8": "# threading library return [] frames: List[Tuple[FrameType, int, 'FrameType']] = [",
      "9": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, FrameType]] = [",
      "10": "# threading library return [] frames: List[Tuple[FrameType, int, Type]] = [",
      "11": "# threading library return [] frames: List[Tuple[FrameType, int, int]] = [",
      "12": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType, FrameType]] = [",
      "13": "# threading library return None frames: List[Tuple[FrameType, int, List[FrameType, FrameType]] = [",
      "14": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int, List[FrameType]]] = [",
      "15": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, int]] = [",
      "16": "# threading library return [] frames: List[Tuple[Int, FrameType, int]] = [",
      "17": "# threading library return None frames: List[Tuple[FrameType, int, FrameType]] = [",
      "18": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType, None]] = [",
      "19": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int, FrameType]] = [",
      "20": "# threading library return None frames: List[Tuple[FrameType, int, 'FrameType']] = [",
      "21": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, int, Tuple[FrameType, FrameType]]] = [",
      "22": "# threading library return [] frames: List[Tuple[FrameType, int, Optional[FrameType]] = [",
      "23": "# threading library return \"\" frames: List[Tuple[FrameType, int, FrameType]] = [",
      "24": "# threading library return None frames: List[Tuple[FrameType, int,...]] = [",
      "25": "# threading library return None frames: List[Tuple[FrameType, int, List[FrameType, int]] = [",
      "26": "# threading library return List[Tuple[FrameType, int]](FrameType)",
      "27": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType]] = [",
      "28": "# threading library return [] frames: List[Tuple[FrameType, [int], FrameType]] = [",
      "29": "# threading library return [] frames: List[Tuple[FrameType, int, None]] = [",
      "30": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, int, Tuple[FrameType, int]]] = [",
      "31": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, FrameType]] = [",
      "32": "# threading library return None frames: List[Tuple[FrameType, int, List[FrameType, int, List[FrameType]]] = [",
      "33": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType], FrameType]] = [",
      "34": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int], FrameType]] = [",
      "35": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType, Tuple[Int, FrameType]]] = [",
      "36": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType], FrameType]] = [",
      "37": "# threading library return [] frames: List[Tuple[FrameType, int, f]] = [",
      "38": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType, Tuple[FrameType, int]]] = [",
      "39": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int, List[FrameType, FrameType]]] = [",
      "40": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, int, Tuple[FrameType]]] = [",
      "41": "# threading library return None frames: List[Tuple[FrameType, int], FrameType] = [",
      "42": "# threading library return [] frames: List[Tuple[FrameType, int, int, FrameType]] = [",
      "43": "# threading library return [] frames: List[Tuple[FrameType, int, Int]] = [",
      "44": "# threading library return [] frames: List[Tuple[FrameType,...]] = [",
      "45": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, int]]] = [",
      "46": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType]] = [",
      "47": "# threading library return [] frames: List[Tuple[FrameType, int, List[FrameType, int], List[Tuple[FrameType, int]]] = [",
      "48": "# threading library return [] frames: List[Tuple[FrameType, int, [FrameType,...]] = [",
      "49": "# threading library return [] frames: List[Tuple[FrameType, int, Tuple[FrameType, int, Tuple[FrameType, FrameType]] = ["
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n\n",
    "target_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_line": "        return self._mem_slot",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 112,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Qiskit/qiskit-terra",
    "source_filename": "qiskit/pulse/instructions/acquire.py",
    "target_filename": "qiskit/pulse/instructions/acquire.py",
    "source_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23^",
    "target_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "predictions": [
      "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot",
      "1": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self._mem_slot",
      "2": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" assert self.mem_slot is not None return self.mem_slot",
      "3": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" assert self.mem_slot is not None return self._mem_slot",
      "4": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" Optional[MemorySlot] = self._mem_slot",
      "5": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if isinstance(self.mem_slot, MemorySlot): return self.mem_slot",
      "6": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return Self.mem_slot",
      "7": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" raise TypeError(self.mem_slot)",
      "8": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if isinstance(self.mem_slot, MemorySlot): return self._mem_slot",
      "9": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.m_slot",
      "10": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mesh_slot",
      "11": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" Return self.mem_slot",
      "12": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" Optional[MemorySlot] = self._mem_slot return self._mem_slot",
      "13": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback() return self.mem_slot",
      "14": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if not self.mem_slot: return self.mem_slot",
      "15": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" assert self.mem_slot = self.mem_slot",
      "16": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" raise ValueError(f\"Unknown memory slot: { readout } \") return self._mem_slot",
      "17": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if not self._mem_slot: return self._mem_slot",
      "18": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(MemorySlot, MemorySlot) return self._mem_slot",
      "19": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if not self.mem_slot: return self._mem_slot",
      "20": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return MemorySlot(self.mem_slot)",
      "21": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" raise TypeError(f\"Unknown memory slot: { readout } \") return self._mem_slot",
      "22": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self._mem_slot)",
      "23": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self.mem_slot) return self.mem_slot",
      "24": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot raise ValueError(f\"Unknown memory slot: { f } \")",
      "25": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if isinstance(self.mem_slot, MemorySlot) return self._mem_slot",
      "26": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self, MemorySlot) return self.mem_slot",
      "27": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self, MemorySlot) return self._mem_slot",
      "28": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot if isinstance(MemorySlot, MemorySlot)",
      "29": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self._mem_slot) return self._mem_slot",
      "30": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" raise ValueError(f\"Unknown memory slot: { f } \") return self._mem_slot",
      "31": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" Optional[MemorySlot] = self._mem_slot return self.mem_slot",
      "32": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" this._mem_slot = self._mem_slot",
      "33": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" assert self.mem_slot = self._mem_slot",
      "34": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" setMemorySlot(self.mem_slot) return self.mem_slot",
      "35": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.mem_slot # type: Optional[MemorySlot]",
      "36": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" raise TypeError(\"The memory slot which will store the classified readout result.\"\"\" return self.mem_slot",
      "37": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" setMemorySlot(self._mem_slot) return self._mem_slot",
      "38": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if isinstance(self.mem_slot, MemorySlot) return self.mem_slot",
      "39": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return MemorySlot(self._mem_slot)",
      "40": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if isinstance(self.mem_slot): return self.mem_slot",
      "41": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if isinstance(self.mem_slot): return self._mem_slot",
      "42": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(MemorySlot, MemorySlot) return self.mem_slot",
      "43": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" if not self._mem_slot: return self.mem_slot",
      "44": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self._mem_slot) return self.mem_slot",
      "45": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self._mem_slot, MemorySlot)",
      "46": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return Self._mem_slot",
      "47": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" return self.optional[MemorySlot]",
      "48": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" callback(self.mem_slot)",
      "49": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" raise TypeError(\"The memory slot which will store the readout result.\"\"\" return self.mem_slot"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                self._confidence_hi.update(conf_hi)\n            return None\n        else:\n",
    "target_code": "                self._confidence_hi.update(conf_hi)\n            return self\n        else:\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `TimeSeries` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "u8timeseries/timeseries.py",
    "target_filename": "u8timeseries/timeseries.py",
    "source_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c^",
    "target_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "predictions": [
      "self._confidence_hi.update(conf_hi) return [] else:"
    ],
    "correct": false,
    "top_five": {
      "0": "self._confidence_hi.update(conf_hi) return [] else:",
      "1": "self._confidence_hi.update(conf_hi) return \"\" else:",
      "2": "self._confidence_hi.update(conf_hi) return TimeSeries(TimeSeries) else:",
      "3": "self._confidence_hi.update(conf_hi) return 'TimeSeries' else:",
      "4": "self._confidence_hi.update(conf_hi) assert isinstance(conf_hi, TimeSeries) return None else:",
      "5": "self._confidence_hi.update(conf_hi) if conf_hi is not None else:",
      "6": "self._confidence_hi.update(conf_hi) assert conf_hi is not None return None else:",
      "7": "self._confidence_hi.update(conf_hi) return \"\"",
      "8": "self._confidence_hi.update(conf_hi) return TimeSeries(None) else:",
      "9": "self._confidence_hi.update(conf_hi) return 0 else:",
      "10": "self._confidence_hi.update(conf_hi) return True else:",
      "11": "self._confidence_hi.update(conf_hi) return TimeSeries() else:",
      "12": "self._confidence_hi.update(conf_hi) if conf_hi is not None return None else:",
      "13": "self._confidence_hi.update(conf_hi) return \"\"\"",
      "14": "self._confidence_hi.update(conf_hi) if isinstance(TimeSeries, TimeSeries): return None else:",
      "15": "self._confidence_hi.update(conf_hi) return () else:",
      "16": "self._confidence_hi.update(conf_hi) return TimeSeries(TimeSeries()) else:",
      "17": "self._confidence_hi.update(conf_hi) assert self._timeseries is not None else:",
      "18": "self._confidence_hi.update(conf_hi) if isinstance(TimeSeries, TimeSeries) return None else:",
      "19": "self._confidence_hi.update(conf_hi) assert self._timeseries is not None return None else:",
      "20": "self._confidence_hi.update(conf_hi) return TimeSeries(TimeSeries[0]) else:",
      "21": "self._confidence_hi.update(conf_hi) assert conf_hi is not None else:",
      "22": "self._confidence_hi.update(conf_hi) assert isinstance(conf_hi, TimeSeries) else:",
      "23": "self._confidence_hi.update(conf_hi) assert self.isinstance(conf_hi, TimeSeries) return None else:",
      "24": "self._confidence_hi.update(conf_hi) assert self._timestamp() return None else:",
      "25": "self._confidence_hi.update(conf_hi) assert isinstance(conf_hi, TimeSeries) return False else:",
      "26": "self._confidence_hi.update(conf_hi) elif isinstance(TimeSeries, TimeSeries) return None else:",
      "27": "self._confidence_hi.update(conf_hi) return TimeSeries(TimeSeries(TimeSeries)) else:",
      "28": "self._confidence_hi.update(conf_hi) return TimeSeries(TimeSequence) else:",
      "29": "self._confidence_hi.update(conf_hi) return None else:",
      "30": "self._confidence_hi.update(conf_hi) return '' else:",
      "31": "self._confidence_hi.update(conf_hi)",
      "32": "self._confidence_hi.update(conf_hi) setTimeSeries(TimeSeries) return None else:",
      "33": "self._confidence_hi.update(conf_hi) assert isinstance(conf_hi, TimeSeries) return True else:",
      "34": "self._confidence_hi.update(conf_hi) assert isinstance(conf_hi, TimeSeries) return \"\" else:",
      "35": "self._confidence_hi.update(conf_hi) return TimeSeries[0] else:",
      "36": "self._confidence_hi.update(conf_hi) return TimeSeries(False) else:",
      "37": "self._confidence_hi.update(conf_hi) if isinstance(TimeSeries, TimeSeries): return False else:",
      "38": "self._confidence_hi.update(conf_hi) assert self._confidence_hi is not None return None else:",
      "39": "self._confidence_hi.update(conf_hi) return Promise.resolve(TimeSeries) else:",
      "40": "self._confidence_hi.update(conf_hi) if conf_hi is not None:",
      "41": "self._confidence_hi.update(conf_hi) return False else:",
      "42": "self._confidence_hi.update(conf_hi) if isinstance(TimeSeries, TimeSeries): return \"\" else:",
      "43": "self._confidence_hi.update(conf_hi) if isinstance(timeseries, TimeSeries): return None else:",
      "44": "self._confidence_hi.update(conf_hi) if conf_hi is not None: return None else:",
      "45": "self._confidence_hi.update(conf_hi) if conf_hi is not None: return True else:",
      "46": "self._confidence_hi.update(conf_hi) elif isinstance(timeseries, TimeSeries) return None else:",
      "47": "self._confidence_hi.update(conf_hi) assert self._time_series is not None else:",
      "48": "self._confidence_hi.update(conf_hi) if isinstance(TimeSeries, TimeSeries): return TimeSeries() else:",
      "49": "self._confidence_hi.update(conf_hi) if isinstance(TimeSeries, TimeSeries): return True else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def _get_params(self, **kwargs) -> dict:\n        return None\n\n",
    "target_code": "    def _get_params(self, **kwargs) -> dict:\n        return {}\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "tests/models/test_modelmanager.py",
    "target_filename": "tests/models/test_modelmanager.py",
    "source_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb^",
    "target_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "predictions": [
      "def _get_params(self, **kwargs) -> dict: return []"
    ],
    "correct": false,
    "top_five": {
      "0": "def _get_params(self, **kwargs) -> dict: return []",
      "1": "def _get_params(self, **kwargs) -> dict: return ''",
      "2": "def _get_params(self, **kwargs) -> dict: return \"\"",
      "3": "def _get_params(self, **kwargs) -> dict: return 0",
      "4": "def _get_params(self, **kwargs) -> dict: return \"\"\"",
      "5": "def _get_params(self, **kwargs) -> dict: assert isinstance(self, typing.Dict[str, str]) return None",
      "6": "def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[str, str]]: return None",
      "7": "def _get_params(self, **kwargs): return []",
      "8": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[str, typing.Any]) return None",
      "9": "def _get_params(self, **kwargs) -> dict: return typing.Optional[typing.Dict[str, str]]",
      "10": "def _get_params(self, **kwargs) -> dict: return False",
      "11": "def _get_params(self, **kwargs) -> dict: return typing.Dict[str, str]",
      "12": "def _get_params(self, **kwargs) -> typing.Dict: return typing.Optional[typing.Dict[str, str]]",
      "13": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[str, typing.Dict]) return None",
      "14": "def _get_params(self, **kwargs) -> dict: assert isinstance(self, typing.Dict[any, any]) return None",
      "15": "def _get_params(self, **kwargs) -> Optional[typing.Dict[str, str]]: return None",
      "16": "def _get_params(self, **kwargs) -> None: return []",
      "17": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown type: { kwargs } \")",
      "18": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[self, **kwargs]) return None",
      "19": "def _get_params(self, **kwargs) -> dict: return -1",
      "20": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown dict: { kwargs } \")",
      "21": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown format: { kwargs } \")",
      "22": "def _get_params(self, **kwargs) -> Optional[dict]: return None",
      "23": "def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[Any, Any]]: return None",
      "24": "def _get_params(self, **kwargs) -> dict: raise ValueError(\"Unknown dict: { kwargs } \")",
      "25": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown dict type: { kwargs } \")",
      "26": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown type: { kwargs } \") return None",
      "27": "def _get_params(self, **kwargs) -> Optional[Dict[str, str]]: return None",
      "28": "def _get_params(self, **kwargs): return ''",
      "29": "def _get_params(self, **kwargs) -> dict: return None",
      "30": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[str, typing.Alias]) return None",
      "31": "def _get_params(self, **kwargs) -> dict: raise ValueError(\"Unknown dict type: { kwargs } \")",
      "32": "def _get_params(self, **kwargs) -> dict: assert isinstance(self, typing.Dict[**kwargs]) return None",
      "33": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[str, typing.Any]) return \"\"",
      "34": "def _get_params(self, **kwargs) -> Optional[typing.Dict[str, str]]: return Optional[str]",
      "35": "def _get_params(self, **kwargs) -> dict: assert isinstance(self, typing.Dict[Any, Any]) return None",
      "36": "def _get_params(self, **kwargs) -> dict: return 'Unknown type'",
      "37": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown type, { kwargs } \")",
      "38": "def _get_params(self, **kwargs) -> dict: assert isinstance(self, typing.Dict[any], typing.Any]) return None",
      "39": "def _get_params(self, **kwargs) -> typing.Optional[typing.Dict[str, str]]: return []",
      "40": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[str, typing.Any]) return \"\"\"",
      "41": "def _get_params(self, **kwargs) -> typing.Dict: return []",
      "42": "def _get_params(self, **kwargs) -> dict: raise ValueError(\"Unknown type: { kwargs } \")",
      "43": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown dict type: { kwargs } \") return None",
      "44": "def _get_params(self, **kwargs) -> dict: return (",
      "45": "def _get_params(self, **kwargs) -> dict: return dict",
      "46": "def _get_params(self, **kwargs) -> dict: assert isinstance(self, typing.Dict[str,...]) return None",
      "47": "def _get_params(self, **kwargs) -> dict: raise ValueError(f\"Unknown format: { kwargs } \") return None",
      "48": "def _get_params(self, **kwargs) -> dict: return typing.Dict[str,...]",
      "49": "def _get_params(self, **kwargs) -> dict: assert isinstance(str, typing.Dict[str, str]) return None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text\n\n",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_line": "        return text",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Text` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 169,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "willmcgugan/rich",
    "source_filename": "rich/text.py",
    "target_filename": "rich/text.py",
    "source_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06^",
    "target_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "predictions": [
      "render(text, style, emoji=emoji) text.justify = justify return text"
    ],
    "correct": false,
    "top_five": {
      "0": "render(text, style, emoji=emoji) text.justify = justify return text",
      "1": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return text",
      "2": "return render(text, style, emoji=emoji) text.justify = justify return text",
      "3": "render(text, style, emoji=emoji) text.justify = justify return render(text, style, emoji=emoji)",
      "4": "text = render(text, style, emoji=emoji) text.justify = justify return text",
      "5": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render.justify = justify return render",
      "6": "render(text, style, emoji=emoji) return render(text, style, emoji=emoji) text.justify = justify return text",
      "7": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return render(text, style, emoji=emoji)",
      "8": "rendered_text = render(text, style, emoji=emoji) rendered_text.justify = justify return rendered_text",
      "9": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify) return render(text, style, emoji=emoji)",
      "10": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return render(text, emoji=str)",
      "11": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return render(text)",
      "12": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return render(text, emoji=str)",
      "13": "render(text, style, emoji=emoji) text.justify = justify return render(text, style, emoji=str)",
      "14": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return render(text, style, emoji=emoji)",
      "15": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return render",
      "16": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return render(text, emoji=emoji)",
      "17": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return render(text, style, emoji=str)",
      "18": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return text",
      "19": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) return render(text, text.justify = justify) return render(text, style, emoji=emoji)",
      "20": "render(text, style, emoji=emoji) render(text, style, emoji=str) text.justify = justify return text",
      "21": "render(text, style, emoji=emoji) render(text, style, emoji=str) text.justify = justify return render(text, style, emoji=emoji)",
      "22": "render(text, style, emoji=emoji) text.justify = render(text, style, emoji=emoji) return text",
      "23": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return render(text, str)",
      "24": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text, text.justify = justify) return render(text, style, emoji=emoji)",
      "25": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify return render(text, emoji)",
      "26": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify) return text",
      "27": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return render(text, emoji)",
      "28": "render(text, style, emoji=emoji) assert isinstance(text, emoji) return render(text, style, emoji=emoji)",
      "29": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify=justify) return render(text, style, emoji=emoji)",
      "30": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return text",
      "31": "render(text, style, emoji=emoji) return render(text, style, emoji=emoji) text.justify = justify return render",
      "32": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return rendered",
      "33": "render(text, style, emoji=emoji) text.justify = render(Text, emoji=emoji) return text",
      "34": "render(text, style, emoji=emoji) return render(text, style, emoji=str) text.justify = justify return text",
      "35": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) return render(text, text.justify = justify)",
      "36": "rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering: render(text, text.justify = justify return rendering",
      "37": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) return render(text, text.justify = justify) return text",
      "38": "rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering.justify = justify return rendering",
      "39": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify=justify) return text",
      "40": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = justify return render(text, emoji=emoji)",
      "41": "rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering.justify = justify return rendering",
      "42": "render(text, style, emoji=emoji) render(text, style=style, emoji=emoji) render(text.justify=justify) return render(text, style=style, emoji=emoji)",
      "43": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(text.justify = justify) return render(text, style, emoji=str)",
      "44": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = render(Text, emoji=emoji) return text",
      "45": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) return render(Text, text.justify = justify) return render(text, style, emoji=emoji)",
      "46": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) render(Text, text.justify = justify) return render(text, style, emoji=emoji)",
      "47": "rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering: render(text, style, emoji=emoji) rendering: render(text.justify = justify return rendering",
      "48": "render(text, style, emoji=emoji) render(text, style, emoji=emoji) text.justify = emoji return text",
      "49": "render(text, style, emoji=emoji) assert isinstance(Text, emoji) return render(text, style, emoji=emoji)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": true,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2\n\n",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return [matrix1, matrix2]\n\n",
    "warning_line": "        return matrix1, matrix2",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 124,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "target_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2"
    ],
    "correct": false,
    "top_five": {
      "0": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2",
      "1": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2()",
      "2": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, matrix2)",
      "3": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2;",
      "4": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return array1, matrix2",
      "5": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return [matrix1, matrix2]",
      "6": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return list(matrix1, matrix2)",
      "7": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return cb(matrix1, matrix2)",
      "8": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, matrix2)",
      "9": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return list(matrix1, matrix2)",
      "10": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, matrix2);",
      "11": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return \"\"\" matrix1, matrix2",
      "12": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return obj[matrix1, matrix2]",
      "13": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return list(matrix1, list(matrix2))",
      "14": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return [matric1, matrix2]",
      "15": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: assert isinstance(matrices, tuple) return matrix1, matrix2",
      "16": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return str(matrix1, matrix2)",
      "17": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return integer, matrix1, matrix2",
      "18": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return str(matrix1, matrix2)",
      "19": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return ds.map(matrix1, matrix2)",
      "20": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return \"\"\", matrix1, matrix2",
      "21": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: assert isinstance(matrix1, matrix2) and isinstance(matrix2) return matrix1, matrix2",
      "22": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return cb(matrix1, matrix2), cb(matrix3),",
      "23": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matric1, matrix2)",
      "24": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return utils.matrix1, matrix2",
      "25": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return cb(matrix1, matrix2)",
      "26": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return Matrix(matrix1, matrix2)",
      "27": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return Matrix(matric1, matrix2)",
      "28": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return sys.matrix(matrix1, matrix2)",
      "29": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] if isinstance(matrix1, matrix2) and isinstance(matrix2): return matrix1, matrix2",
      "30": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, tuple2])",
      "31": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return (matrix1, matrix2)",
      "32": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return List(matrix1, matrix2)",
      "33": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return f1, matrix2",
      "34": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, matrix2])",
      "35": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2[0]",
      "36": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return Matrix(matrix1, matrix2)",
      "37": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return List(matrix1, matrix2)",
      "38": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: assert isinstance(matrices, list) return matrix1, matrix2",
      "39": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return list(matrix1), matrix2",
      "40": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] if isinstance(matrix1, matrix2): return matrix1, matrix2",
      "41": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return cb(matrix1, matrix2), cb(matrix2),",
      "42": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1] if isinstance(matrix1, matrix2): return isinstance(matrix1, matrix2)",
      "43": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrices, matrix2), tuple(maximum)",
      "44": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return cb, matrix1, matrix2",
      "45": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return Matrix1, matrix2",
      "46": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return matrix1, matrix2 = 0",
      "47": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return return matrix1, matrix2",
      "48": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return tuple(matrix1, tuple2)",
      "49": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: return Tuple(matrix1, matrix2)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": true,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return count_label + short_label\n",
    "target_code": "        return count_label + short_label\n\n  raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_line": "        return count_label + short_label",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 582,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "return count_label + str(short_label)"
    ],
    "correct": false,
    "top_five": {
      "0": "return count_label + str(short_label)",
      "1": "return count_label + str(short_label) raise ValueError(f'unknown type')",
      "2": "return count_label + str(short_label) return False",
      "3": "return count_label + str(short_label) raise ValueError(f\"Str must be a short-label\")",
      "4": "return count_label + str(short_label) return \"\"",
      "5": "return count_label + str(short_label) raise ValueError(f\"Could not count a label\")",
      "6": "return count_label + str(short_label) raise ValueError(f\"Str is not None\")",
      "7": "return count_label + str(short_label) raise ValueError(f\"Unknown label } : { short_label } \")",
      "8": "return count_label + str(short_label) raise ValueError(f\"Unknown label } \")",
      "9": "return count_label + str(short_label) raise ValueError(f\"Short label: { short_label } \")",
      "10": "return count_label + str(short_label) raise ValueError(f\"Unknown label { n\"+short_label)",
      "11": "return count_label + str(short_label) raise ValueError(f\"Could not count the short_label\")",
      "12": "return count_label + str(short_label) raise ValueError(f\"Unknown label { : { short_label } \")",
      "13": "return count_label + str(short_label) raise ValueError(f\"Str must be a short label\")",
      "14": "return count_label + str(short_label) return True",
      "15": "return count_label + str(short_label) raise ValueError(f\"Unknown type, { name } \")",
      "16": "return count_label + str(short_label) raise ValueError(f'Unknown label }'+ short_label)",
      "17": "return count_label + str(short_label) raise ValueError(f\"Success is not None\")",
      "18": "return count_label + str(short_label) raise ValueError(f\"Unknown label { n\" + short_label)",
      "19": "return count_label + str(short_label) raise ValueError(f'Unknown label }'+ label)",
      "20": "return count_label + str(short_label) raise ValueError(f\"Unknown label } if short_label { \")",
      "21": "return count_label + str(short_label) raise ValueError(f\"The label must be a short one\")",
      "22": "return count_label + str(short_label) raise ValueError(f'Unknown label {'+ short_label)",
      "23": "return count_label + str(short_label) raise ValueError(f\"short_label is not None\")",
      "24": "return count_label + str(short_label) raise ValueError(f'unreachable')",
      "25": "return count_label + str(short_label) raise ValueError(f\"Unknown label { n\" + label } n)",
      "26": "return count_label + str(short_label) return \"\"\"",
      "27": "return count_label + str(short_label) return 0",
      "28": "return count_label + str(short_label) raise ValueError(f\"Could not count the label\")",
      "29": "return count_label + str(short_label) raise ValueError(f'Unknown label {'+ label } ')",
      "30": "return count_label + str(short_label) raise ValueError(f\"Str should be None\")",
      "31": "return count_label + str(short_label) raise ValueError(f\"Short label: { label } \")",
      "32": "return count_label + str(short_label) raise ValueError(f'Unknown label { '+short_label)",
      "33": "return count_label + str(short_label) raise ValueError(f\"Short label is not None\")",
      "34": "return count_label + str(short_label) raise ValueError(f\"Unknown label { n \\ n\")",
      "35": "return count_label + str(short_label) raise ValueError(f'Unknown label { n' + short_label)",
      "36": "return count_label + str(short_label) raise ValueError(f\"Could not count the name of the short_label\")",
      "37": "return count_label + str(short_label) return true",
      "38": "return count_label + str(short_label) return None",
      "39": "return count_label + str(short_label) raise ValueError(f\"Unknown label } if short_label } \")",
      "40": "return count_label + str(short_label) raise ValueError(f'Could not count a label')",
      "41": "return count_label + str(short_label) raise ValueError(f\"Unknown label } n\" + short_label)",
      "42": "return count_label + str(short_label) raise ValueError(f\"Unknown label { n\" + label } n\")",
      "43": "return count_label + str(short_label) raise ValueError(f\"Unknown label { n \\ n\"+short_label)",
      "44": "return count_label + str(short_label) raise ValueError(f\"Str must be a short_label\")",
      "45": "return count_label + str(short_label) raise ValueError(f'Unknown label {'+ label } '+short_label)",
      "46": "return count_label + str(short_label) raise ValueError(f\"Unknown label { \")",
      "47": "return count_label + str(short_label) raise ValueError(f'Unknown type')",
      "48": "return count_label + str(short_label) raise ValueError(f'Could not count')",
      "49": "return count_label + str(short_label) raise ValueError(f'unknown type', value)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> bytes:\n    \"\"\"\n",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    \"\"\"\n",
    "warning_line": "    \"\"\"",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bytes` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trezor/trezor-firmware",
    "source_filename": "core/mocks/generated/trezorconfig.pyi",
    "target_filename": "core/mocks/generated/trezorconfig.pyi",
    "source_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058^",
    "target_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "predictions": [
      "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: \"\"\"",
      "1": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return \"\"\"",
      "2": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return bytes",
      "3": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return bytes \"\"\"",
      "4": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): \"\"\"",
      "5": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): return bytes \"\"\"",
      "6": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: bytes: \"\"\"",
      "7": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: assert \"\"\"",
      "8": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: bytes = \"\"\"",
      "9": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return async \"\"\"",
      "10": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): return \"\"\"",
      "11": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return value = \"\"\"",
      "12": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return Bytes(\"\"\"",
      "13": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return [] \"\"\"",
      "14": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: value = \"\"\"",
      "15": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> Optional[int]: \"\"\"",
      "16": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return value=\"\"\"",
      "17": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) return bytes \"\"\"",
      "18": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return '\"'",
      "19": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return extmod/modtrezorconfig/modtrezorconfig.c",
      "20": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False, bytes: \"\"\"",
      "21": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): return bytes",
      "22": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return bytecode \"\"\"",
      "23": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: Bytes = \"\"\"",
      "24": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return byte_bytes(\"\"\"",
      "25": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) return \"\"\"",
      "26": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False, bytes: []) -> None: \"\"\"",
      "27": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return value \"\"\"",
      "28": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> Bytes: \"\"\"",
      "29": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return []",
      "30": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return [\"\"\"]",
      "31": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return values[0] \"\"\"",
      "32": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): assert \"\"\"",
      "33": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return ( \"\"\"",
      "34": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: byte_bytes = \"\"\"",
      "35": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> bytes: \"\"\"",
      "36": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: throw \"\"\"",
      "37": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: bytecode = \"\"\"",
      "38": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): return [] \"\"\"",
      "39": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: bytes = []",
      "40": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> []: \"\"\"",
      "41": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return bytes(\"\"\"",
      "42": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: parse(bytes) \"\"\"",
      "43": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> none: \"\"\"",
      "44": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False): return Bytes(\"\"\"",
      "45": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return parse(bytes)",
      "46": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return true",
      "47": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return [\"\"\"",
      "48": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return parse(bytes) \"\"\"",
      "49": "# extmod/modtrezorconfig/modtrezorconfig.c def get(app: int, key: int, public: bool = False) -> None: return values[0]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        print()\n        return\n    for i in range(len(board)):\n",
    "target_code": "        print()\n        return True\n    for i in range(len(board)):\n",
    "warning_line": "        return",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 56,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "backtracking/n_queens.py",
    "target_filename": "backtracking/n_queens.py",
    "source_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1^",
    "target_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "predictions": [
      "print() return for i in range(len(board)):"
    ],
    "correct": false,
    "top_five": {
      "0": "print() return for i in range(len(board)):",
      "1": "print() return for i in range(len(board)):",
      "2": "print() bool = False return for i in range(len(board)):",
      "3": "print() return for i in range(slot(len(board))):",
      "4": "print() return bool('', '') for i in range(len(board)):",
      "5": "print() return bool('') for i in range(len(board)):",
      "6": "print() return for i in range(str(len(board))):",
      "7": "print() return for i in range(bool(len(board))):",
      "8": "print() return null for i in range(len(board)):",
      "9": "print() return False for i in range(len(board)):",
      "10": "print() return for i in range(parse(len(board))):",
      "11": "print() return for i in range(segment(len(board))):",
      "12": "print() return for i in range(slot(len(board)):",
      "13": "print() return bool(i in range(len(board)))",
      "14": "print() return \"\" for i in range(len(board)):",
      "15": "print() return bool('', i in range(len(board)))",
      "16": "print() return for i in range(fn.len(board)):",
      "17": "print() return bool(null, i in range(len(board)))",
      "18": "print() return for i in range(i, len(board)):",
      "19": "print() return for i in range(a(len(board))):",
      "20": "print() return for i in range(len(board)): return False",
      "21": "print() return for i in range(chalk(len(board))):",
      "22": "print() return for i in range(partial(len(board))):",
      "23": "print() return bool(i, len(board)):",
      "24": "print() return for i in range(print(len(board))):",
      "25": "print() return for i in range(fn(len(board))):",
      "26": "print() return for i in range(nan(len(board))):",
      "27": "print() return for i in range(int(len(board))):",
      "28": "print() return for i in range(typeof len(board)):",
      "29": "print() return i in range(len(board)):",
      "30": "print() return for i in range(bore(len(board)):",
      "31": "print() return for i in range(length(len(board)):",
      "32": "print() return bool(i, len(board)) && i in range(len(board)):",
      "33": "print() return [] for i in range(len(board)):",
      "34": "print() return for i in range((len(board))):",
      "35": "print() return for i in range(len(board, bool)):",
      "36": "print() return for i in range(nan(len(board)):",
      "37": "print() return for i in range(type(len(board))):",
      "38": "print() return for i in range(os.len(board)):",
      "39": "print() return 0 for i in range(len(board)):",
      "40": "print() return for i in range(type(len(board)):",
      "41": "print() return for i in range(arr, len(board)):",
      "42": "print() return true for i in range(len(board)):",
      "43": "print() return value for i in range(len(board)):",
      "44": "print() return for i in range(bore(len(board))):",
      "45": "print() for i in range(len(board)):",
      "46": "print() return for i in range(color(board)):",
      "47": "print() return for i in range(len(board, undefined)):",
      "48": "print() return for i in range(i--len(board)):",
      "49": "print() return for i in range(len(board)): return bool"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
    "target_code": "    \"\"\"\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_line": "    return unicodedata.normalize(",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "oppia/oppia",
    "source_filename": "utils.py",
    "target_filename": "utils.py",
    "source_changeid": "72937725a323b0cc1ccec150c81b041abeacb575^",
    "target_changeid": "72937725a323b0cc1ccec150c81b041abeacb575",
    "predictions": [
      "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "1": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "2": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "3": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "4": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)) return normalized_string.encode('ascii', 'ignore')",
      "5": "\"\"\" normalize( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) )).encode('ascii', 'ignore')",
      "6": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "7": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string)) return normalize( 'ascii', 'ignore')",
      "8": "\"\"\" normalize( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)) ).encode('ascii', 'ignore')",
      "9": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "10": "\"\"\" return normalized_string.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "11": "\"\"\" return str(unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "12": "\"\"\" normalize( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "13": "\"\"\" normalized_strings = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "14": "\"\"\" normalize( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "15": "\"\"\" return str(unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "16": "\"\"\" normalize( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "17": "\"\"\" return str(unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) )).encode('ascii', 'ignore')",
      "18": "\"\"\" normalize( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ) ).encode('ascii', 'ignore')",
      "19": "\"\"\" return unicodedata.normalize( str('NFKD', python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "20": "\"\"\" normalize_string(unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "21": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ) return normalized_string.encode('ascii', 'ignore')",
      "22": "\"\"\" normal_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "23": "\"\"\" normalization.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "24": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "25": "\"\"\" normalize_string( unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) )).encode('ascii', 'ignore')",
      "26": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore') return normalized_string",
      "27": "\"\"\" normal_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "28": "\"\"\" normalize_string(unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "29": "\"\"\" normalization.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "30": "\"\"\" return unicodedata.normalize( str('NFKD'), python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "31": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', (python_utils.UNICODE(input_string)) ).encode('ascii', 'ignore')",
      "32": "\"\"\" bytes = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "33": "\"\"\" return unicodedata.normalize( 'NFKD', python_utils[UNICODE(input_string)]).encode('ascii', 'ignore')",
      "34": "\"\"\" normalization_bytes = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "35": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore' )",
      "36": "\"\"\" str.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "37": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).decode('ascii', 'ignore')",
      "38": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string) ) return normalize( 'ascii', 'ignore')",
      "39": "\"\"\" normalization_str = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')",
      "40": "\"\"\" normalization_.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "41": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string) ).decode('ascii', 'ignore')",
      "42": "\"\"\" return normalized( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "43": "\"\"\" normalized_string = unicodedata.normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') return normalized_string",
      "44": "\"\"\" normalize() return normalize( 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "45": "\"\"\" python_utils.UNICODE(input_string): return unicodedata.normalize( 'NFKD').encode('ascii', 'ignore')",
      "46": "\"\"\" return unicodedata.normalize( \"NFKD\", python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
      "47": "\"\"\" normalize( 'NFKD', python_utils.UNICODE(input_string)).decode('ascii', 'ignore')",
      "48": "\"\"\" normalized_string = python_utils.UNICODE(input_string) return normalized_string.encode('ascii', 'ignore')",
      "49": "\"\"\" normalize( 'NFKD', UNICODE(input_string) ).encode('ascii', 'ignore')"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "target_code": "\n    def __iter__(self) -> \"SuperpropertiesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_line": "        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 197,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/logic/lineage.py",
    "target_filename": "pronto/logic/lineage.py",
    "source_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327^",
    "target_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "predictions": [
      "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __iter__(self) -> \"SuperclassesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "1": "def __iter__(self) -> SuperclassesIterator: return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "2": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "3": "def __iter__(self) -> \"SuperclassesIterator\": assert self.entity is not None return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "4": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()",
      "5": "def __iter__(self) -> \"SuperclassesIterator\": superproperties = self.entity, distance=self.distance, with_self=self.with_self",
      "6": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator",
      "7": "def __iter__(self) -> \"SuperpropertiesIterator\": return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "8": "def __iter__(self) -> \"SuperclassesIterator\": superproperties = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()",
      "9": "def __iter__(self) -> \"SuperclassesIterator\": assert isinstance(self.entity, distance=self.distance, with_self=self.with_self) return SuperpropertiesIterator(self.entity, distance=self.distance)",
      "10": "def __iter__(self) -> 'SuperclassesIterator': return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "11": "def __iter__(self) -> SuperclassesIterator: SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "12": "def __iter__(self) -> \"SuperclassesIterator\": superproperties = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator",
      "13": "def __iter__(self) -> \"SuperclassesIterator\": superpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "14": "def __iter__(self) -> SuperclassesIterator: SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()",
      "15": "def __iter__(self) -> \"SuperclassesIterator\": assert isinstance(self.entity, distance=self.distance, with_self=self.with_self) return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "16": "def __iter__(self) -> SuperclassesIterator: assert self.entity is not None return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "17": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "18": "def __iter__(self) -> SuperClassesIterator: return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "19": "def __iter__(self) -> SuperclassesIterator: return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "20": "def __iter__(self) -> \"SuperclassesIterator\": superproperties = self.entity, distance=self.distance, with_self=self.with_self return superpropertiesIterator",
      "21": "def __iter__(self) -> \"SuperclassesIterator\": return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "22": "def __iter__(self) -> \"SuperclassesIterator\": SuperclassesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "23": "def __iter__(self) -> SuperclassesIterator(): return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "24": "def __iter__(self) -> \"SuperclassesIterator\": SuperclassesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()",
      "25": "def __iter__(self) -> \"SuperpropertiesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "26": "def __iter__(self) -> super(): return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "27": "def __iter__(self) -> 'SuperclassesIterator': SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "28": "def __iter__(self) -> \"SuperclassesIterator\": assert isinstance(self.entity, distance=self.distance, with_self=self.with_self) return SuperpropertiesIterator(self.entity, with_self=self.with_self)",
      "29": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator.call(self.entity, distance=self.distance, with_self=self.with_self)",
      "30": "def __iter__(self) -> \"SuperclassesIterator\": assert self.entity is not None, superpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self",
      "31": "def __iter__(self) -> \"SuperclassesIterator\": return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "32": "def __iter__(self) -> \"SuperclassesIterator\": superclasses = SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "33": "def __iter__(self) -> Optional[\"SuperpropertiesIterator\"]: return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "34": "def __iter__(self) -> SuperpropertiesIterator: return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "35": "def __iter__(self) -> \"SuperclassesIterator\": super() return self.entity, distance=self.distance, with_self=self.with_self",
      "36": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return superpropertiesIterator",
      "37": "def __iter__(self) -> \"SuperclassesIterator\": superclasses = SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "38": "def __iter__(self) -> SuperclassesIterator: SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator",
      "39": "def __iter__(self) -> Super(): return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "40": "def __iter__(self) -> \"SuperclassesIterator\": assert isinstance(self.entity, distance=self.distance, with_self=self.with_self)",
      "41": "def __iter__(self) -> \"SuperclassesIterator\": superproperties = SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "42": "def __iter__(self) -> \"SuperclassesIterator\": SuperclassesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator",
      "43": "def __iter__(self) -> \"SuperclassesIterator\": superpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()",
      "44": "def __iter__(self) -> \"SuperclassesIterator\": assert isinstance(self.entity, distance=self.distance, with_self=self.with_self) return SuperpropertiesIterator()",
      "45": "def __iter__(self) -> \"SuperclassesIterator\": self.entity = self.distance return SuperpropertiesIterator(distance=self.distance, with_self=self.with_self)",
      "46": "def __iter__(self) -> \"SuperclassesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self if self.classesIterator is not None: return SuperpropertiesIterator()",
      "47": "def __iter__(self) -> \"SuperpropertiesIterator\": SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()",
      "48": "def __iter__(self) -> \"SuperclassesIterator\": SuperclassesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator(self.entity, with_self=self.with_self)",
      "49": "def __iter__(self) -> 'SuperclassesIterator': SuperpropertiesIterator = self.entity, distance=self.distance, with_self=self.with_self return SuperpropertiesIterator()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:\n",
    "target_code": ") -> JsonSchema:\n    if is_true_schema(schema) or is_false_schema(schema):\n        return schema\n    if \"anyOf\" in schema:\n",
    "warning_line": "        return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, typing.Any]` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 988,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "IBM/lale",
    "source_filename": "lale/schema_simplifier.py",
    "target_filename": "lale/schema_simplifier.py",
    "source_changeid": "b38267abe490e869338f212179b03521e89013ee^",
    "target_changeid": "b38267abe490e869338f212179b03521e89013ee",
    "predictions": [
      ") -> JsonSchema: if schema is False: return False if \"anyOf\" in schema:"
    ],
    "correct": false,
    "top_five": {
      "0": ") -> JsonSchema: if schema is False: return False if \"anyOf\" in schema:",
      "1": ") -> JsonSchema: if schema is False: return bool(Dict[str, Any]) if \"anyOf\" in schema:",
      "2": ") -> JsonSchema: if schema is False: return True if \"anyOf\" in schema:",
      "3": ") -> JsonSchema: if schema is False: return None if \"anyOf\" in schema:",
      "4": ") -> JsonSchema: if schema is None: return False if \"anyOf\" in schema:",
      "5": ") -> JsonSchema: if schema is None: return None if \"anyOf\" in schema:",
      "6": ") -> JsonSchema: if schema is False: return Dict[str, Any] if \"anyOf\" in schema:",
      "7": ") -> JsonSchema: if schema is False: return bool(Dict[str, any]) if \"anyOf\" in schema:",
      "8": ") -> JsonSchema: if schema is False: return \"\" if \"anyOf\" in schema:",
      "9": ") -> JsonSchema: if schema is False if \"anyOf\" in schema:",
      "10": ") -> JsonSchema: if schema is False: return bool(dict[str, Any]) if \"anyOf\" in schema:",
      "11": ") -> JsonSchema: if schema is False: return [] if \"anyOf\" in schema:",
      "12": ") -> JsonSchema: if schema is False: bool = False if \"anyOf\" in schema:",
      "13": ") -> JsonSchema: if schema is False: return bool(False) if \"anyOf\" in schema:",
      "14": ") -> JsonSchema if schema is False: return False if \"anyOf\" in schema:",
      "15": ") -> JsonSchema: if schema is False: return (Dict[str, Any]) if \"anyOf\" in schema:",
      "16": ") -> JsonSchema: if schema is False: return bool(false) if \"anyOf\" in schema:",
      "17": ") -> JsonSchema: if schema is False: return Dict[str, Any](false) if \"anyOf\" in schema:",
      "18": ") -> JsonSchema: if schema is False: return bool(dict[str, any]) if \"anyOf\" in schema:",
      "19": ") -> JsonSchema: if schema is True: return False if \"anyOf\" in schema:",
      "20": ") -> JsonSchema: if schema is None: return True if \"anyOf\" in schema:",
      "21": ") -> JsonSchema: if schema = False: return False if \"anyOf\" in schema:",
      "22": ") -> JsonSchema: if schema is False: return Dict[str, any] if \"anyOf\" in schema:",
      "23": ") -> JsonSchema: if schema is False: return bool( False ) if \"anyOf\" in schema:",
      "24": ") -> JsonSchema: if schema is False: return Dyct[str, Any] if \"anyOf\" in schema:",
      "25": ") -> JsonSchema: if schema is False: return bool(Dict[str, str]) if \"anyOf\" in schema:",
      "26": ") -> JsonSchema: if schema is NotEnabled: return False if \"anyOf\" in schema:",
      "27": ") -> JsonSchema: return Dict[str, Any](false) if \"anyOf\" in schema:",
      "28": ") -> JsonSchema: if schema is False: return Dyct[str, Any](false) if \"anyOf\" in schema:",
      "29": ") -> JsonSchema: if schema is False: assert isinstance(schema, str) return False if \"anyOf\" in schema:",
      "30": ") -> JsonSchema: if schema is Undefined: return False if \"anyOf\" in schema:",
      "31": ") -> JsonSchema: if schema is False: assert isinstance(str, str) return False if \"anyOf\" in schema:",
      "32": ") -> JsonSchema: if schema is NotEnabled and schema is NotEnabled: return False if \"anyOf\" in schema:",
      "33": ") -> JsonSchema: if schema is False: return False; if \"anyOf\" in schema:",
      "34": ") -> JsonSchema: if schema is False: assert isinstance(str, str) if \"anyOf\" in schema:",
      "35": ") -> JsonSchema: return Dict[str, Any] if \"anyOf\" in schema:",
      "36": ") -> JsonSchema: if schema is False: return bool(Dict[str, Any], False) if \"anyOf\" in schema:",
      "37": ") -> JsonSchema: if schema is not None: return False if \"anyOf\" in schema:",
      "38": ") -> JsonSchema: if schema is False: return bool( False if \"anyOf\" in schema:",
      "39": ") -> JsonSchema: if schema is False: throw new Error(\"Schema is not None\") if \"anyOf\" in schema:",
      "40": ") -> JsonSchema: if schema is False: return bool() if \"anyOf\" in schema:",
      "41": ") -> JsonSchema: if schema is False: return bool('') if \"anyOf\" in schema:",
      "42": ") -> JsonSchema: if schema is NotReady: return False if \"anyOf\" in schema:",
      "43": ") -> JsonSchema: if schema is False: return False, bool = False if \"anyOf\" in schema:",
      "44": ") -> JsonSchema: if schema is False and schema is None: return False if \"anyOf\" in schema:",
      "45": ") -> JsonSchema: return False if \"anyOf\" in schema:",
      "46": ") -> JsonSchema: if schema is False: return bool(Dict[str]) if \"anyOf\" in schema:",
      "47": ") -> JsonSchema: if schema is False: str = str if \"anyOf\" in schema:",
      "48": ") -> JsonSchema: if schema is False: return bool(Dict[str, bool]) if \"anyOf\" in schema:",
      "49": ") -> JsonSchema: if schema is False: return bool(Dict[str, Any], None]) if \"anyOf\" in schema:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n\t\t\treturn se.InvalidSeEbookException\n\n",
    "target_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n\t\t\treturn se.InvalidSeEbookException.code\n\n",
    "warning_line": "\t\t\treturn se.InvalidSeEbookException",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 738,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/executables.py",
    "target_filename": "se/executables.py",
    "source_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0^",
    "target_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "predictions": [
      "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException"
    ],
    "correct": false,
    "top_five": {
      "0": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException",
      "1": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.code",
      "2": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException): return se.InvalidSeEbookException",
      "3": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return int(se.InvalidSeEbookException)",
      "4": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") assert isinstance(se.InvalidSeEbookException) return se.InvalidSeEbookException",
      "5": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") assert se.InvalidSeEbookException return se.InvalidSeEbookException",
      "6": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException[0]",
      "7": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn\u2019t find endnotes.xhtml file\")",
      "8": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return Se.InvalidSeEbookException",
      "9": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if not se.InvalidSeEbookException: return se.InvalidSeEbookException",
      "10": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException, endnotes.xhtml): return se.InvalidSeEbookException",
      "11": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") throw \"Couldn\u2019t find endnotes.xhtml file.\" return se.InvalidSeEbookException",
      "12": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(int)",
      "13": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") assert se.InvalidSeEbookException is not None return se.InvalidSeEbookException",
      "14": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn\u2019t find endnotes.xhtml file.\")",
      "15": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(\"Couldn\u2019t find endnotes.xhtml file.\")",
      "16": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn\u2019t find endnotes.xhtml file.\")",
      "17": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException, int): return se.InvalidSeEbookException",
      "18": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") callback(se.InvalidSeEbookException) return se.InvalidSeEbookException",
      "19": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(false)",
      "20": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn\u2019t find endnotes.xhtml file,\"\")",
      "21": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn't find endnotes.xhtml file\")",
      "22": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(f\"Couldn\u2019t find endnotes.xhtml file.\")",
      "23": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return 'InvalidSeEbookException'",
      "24": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException) return se.InvalidSeEbookException",
      "25": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(f\"Couldn\u2019t find endnotes.xhtml file.\")",
      "26": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException, e): return se.InvalidSeEbookException",
      "27": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException;",
      "28": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.write(int)",
      "29": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") throw \"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException",
      "30": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException, xhtml): return se.InvalidSeEbookException",
      "31": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(error(\"Couldn\u2019t find endnotes.xhtml file\"))",
      "32": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException if isinstance(endnotes.xhtml):",
      "33": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException()",
      "34": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Unable to find endnotes,\")",
      "35": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException), return se.InvalidSeEbookException",
      "36": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") throw \"Couldn\u2019t find endnotes.xhtml file.\" return se.InvalidSeEbookException",
      "37": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Unable to find endnotes,\"\")",
      "38": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(error)",
      "39": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.OutvalidSeEbookException",
      "40": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return self.InvalidSeEbookException",
      "41": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(f\"Couldn\u2019t find endnotes.xhtml file\")",
      "42": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.print(\"Couldn\u2019t find endnotes.xhtml file.\")",
      "43": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return Se.InvalidSeEbookException.code",
      "44": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") assert se.InvalidSeEbookException",
      "45": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") if isinstance(se.InvalidSeEbookException, Exception): return se.InvalidSeEbookException",
      "46": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException.false",
      "47": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") raise TypeError(se.InvalidSeEbookException)",
      "48": "se.print_error(\"Couldn't find endnotes.xhtml file.\") return se.InvalidSeEbookException",
      "49": "se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") return se.InvalidSeEbookException(f\"Couldn\u2019t find endnotes.xhtml file\", int)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @property\n    def layer_name(self) -> str:\n        return self._layer_name\n",
    "target_code": "    @property\n    def layer_name(self) -> typing.Optional[str]:\n        return self._layer_name\n",
    "warning_line": "        return self._layer_name",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/layers.py",
    "target_filename": "volatility/framework/interfaces/layers.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "@property def layer_name(self) -> typing.Optional[str]: return self._layer_name"
    ],
    "correct": true,
    "top_five": {
      "0": "@property def layer_name(self) -> typing.Optional[str]: return self._layer_name",
      "1": "@property def layer_name(self) -> Optional[str]: return self._layer_name",
      "2": "@property def layer_name(self): return self._layer_name",
      "3": "@property def layer_name(self) -> str: return self._layer_name",
      "4": "@property def layer_name(self) -> Typing.Optional[str]: return self._layer_name",
      "5": "@property def layer_name(self) -> typing[str]: return self._layer_name",
      "6": "@property def layer_name(self) -> typing.Optional(str) return self._layer_name",
      "7": "@property def layer_name(self) -> None: return self._layer_name",
      "8": "@property def layer_name(self) -> typing.Optional(str): return self._layer_name",
      "9": "@property def layer_name(self) -> options.Optional[str]: return self._layer_name",
      "10": "@property def layer_name(self) -> Optional[str]: return self._layer_name",
      "11": "@property def layer_name(self): assert self._layer_name is not None return self._layer_name",
      "12": "@property def layer_name(self) -> typing.Optional[str]: if self._layer_name is None return self._layer_name",
      "13": "@property def layer_name(self) -> Optional[Str]: return self._layer_name",
      "14": "@property def layer_name(self) -> Options[str]: return self._layer_name",
      "15": "@property def layer_name(self) -> typing.Optional[typing.Optional[str]]: return self._layer_name",
      "16": "@property def layer_name(self) -> Optional[typing.Optional[str]]: return self._layer_name",
      "17": "@property def layer_name(self) -> typing.Optional[str]: if self._layer_name is None: return self._layer_name",
      "18": "@property def layer_name(self) -> optional[str]: return self._layer_name",
      "19": "@property def layer_name(self) -> Optional[str]: if self._layer_name is None return self._layer_name",
      "20": "@property def layer_name(self) ->Optional[str]: return self._layer_name",
      "21": "@property def layer_name(self) -> Options.Optional[str]: return self._layer_name",
      "22": "@property def layer_name(self) -> TypeError: return self._layer_name",
      "23": "@property def layer_name(self) -> Optional[\"str\"]: return self._layer_name",
      "24": "@property def layer_name(self) -> typing.Optional[str]: if self._layer_name is not None return self._layer_name",
      "25": "@property def layer_name(self, str) -> typing.Optional[str]: return self._layer_name",
      "26": "@property def layer_name(self) -> Optional[[str]]: return self._layer_name",
      "27": "@property def layer_name(self) -> option[str]: return self._layer_name",
      "28": "@property def layer_name(self) -> typing.Optional[str]: assert self._layer_name",
      "29": "@property def layer_name(self) -> (Optional[str]): return self._layer_name",
      "30": "@property def layer_name(self) -> typing.Optional[str].call(self._layer_name) return self._layer_name",
      "31": "@property def layer_name(self) -> opts.Optional[str]: return self._layer_name",
      "32": "@property def layer_name(self) -> typing.Optional[str]: if self._layer_name is not None: return self._layer_name",
      "33": "@property def layer_name(self) -> Optional[str]: if self._layer_name is None: return self._layer_name",
      "34": "@property def layer_name(self) -> Optional[str]: if self._layer_name is not None return self._layer_name",
      "35": "@property def layer_name(self) -> options[str]: return self._layer_name",
      "36": "@property def layer_name(self) -> T.Optional[str]: return self._layer_name",
      "37": "@property def layer_name(self) -> typing.Optional[str]: throw new Error(self._layer_name)",
      "38": "@property def layer_name(self) -> typing.Optional[str]: callback(self._layer_name)",
      "39": "@property def layer_name(self): return str(self._layer_name)",
      "40": "@property def layer_name(self) -> Optional[Str]: return self._layer_name",
      "41": "@property def layer_name(self) -> type: return self._layer_name",
      "42": "@property def layer_name(self) -> typing.Optional[str]: if self._layer_name return self._layer_name",
      "43": "@property def layer_name(self): assert self._layer_name is not None return assert self._layer_name",
      "44": "@property def layer_name(self) -> typing.Optional[str]: callback(self._layer_name) return self._layer_name",
      "45": "@property def layer_name(self) -> []: return self._layer_name",
      "46": "@property def layer_name(self) -> Optional[str]: throw new Error(self._layer_name)",
      "47": "@property def layer_name(self): throw new Error(self._layer_name)",
      "48": "@property def layer_name(self) -> Optional[str]: if self._layer_name is not None: return self._layer_name",
      "49": "@property def layer_name(self) -> typing.Optional[typing.String]: return self._layer_name"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef escape(expr: str) -> None:\n    return expr.replace(\"'\", \"''\")\n",
    "target_code": "\ndef escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")\n",
    "warning_line": "    return expr.replace(\"'\", \"''\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 118,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Shougo/deoplete.nvim",
    "source_filename": "rplugin/python3/deoplete/util.py",
    "target_filename": "rplugin/python3/deoplete/util.py",
    "source_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7^",
    "target_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7",
    "predictions": [
      "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\")"
    ],
    "correct": true,
    "top_five": {
      "0": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\")",
      "1": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\"",
      "2": "def escape(expr: str) -> str: return expr.replace(\"'\", \"'')",
      "3": "def escape(expr: str): return expr.replace(\"'\", \"''\")",
      "4": "def escape(expr: str) -> str: assert isinstance(expr, str) return expr.replace(\"'\", \"''\")",
      "5": "def escape(expr: str) -> Optional[str]: return expr.replace(\"'\", \"''\")",
      "6": "def escape(expr: str): return str(expr.replace(\"'\", \"''\"))",
      "7": "def escape(expr: str) -> str: return str.replace(\"'\", \"''\")",
      "8": "def escape(expr: str): return str.replace(\"'\", \"''\")",
      "9": "def escape(expr, str) -> str: return expr.replace(\"'\", \"''\")",
      "10": "def escape(expr: str) -> str: return expr.replace(\"'\", ''\")",
      "11": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\");",
      "12": "def escape(expr: str): return expr.replace(\"'\", \"''\"",
      "13": "def escape(expr: Optional[str]) -> None: return expr.replace(\"'\", \"''\")",
      "14": "def escape(expr) -> str: return expr.replace(\"'\", \"''\")",
      "15": "def escape(expr: str) -> str: return expr.replace(\"',\" \"''\")",
      "16": "def escape(expr: str) -> str: return exr.replace(\"'\", \"''\")",
      "17": "def escape(expr: str): return str(expr).replace(\"'\", \"''\")",
      "18": "def escape(expr: str) -> str: assert expr.replace(\"'\", \"''\")",
      "19": "def escape(expr: str) -> str: assert isinstance(expr.replace(\"'\", \"''\")) return expr.replace(\"'\", \"''\")",
      "20": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\")",
      "21": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''')",
      "22": "def escape(expr: str): assert isinstance(expr, str) return expr.replace(\"'\", \"''\")",
      "23": "def escape(expr: str, str) -> str: return expr.replace(\"'\", \"''\")",
      "24": "def escape(expr(str) -> str: return expr.replace(\"'\", \"''\")",
      "25": "def escape(expr: str) -> None: return expr.replace(\"'\", \"''\")",
      "26": "def escape(expr: str) -> str: assert isinstance(expr.replace(\"'\", \"''\"))",
      "27": "def escape(expr: str) -> str: return expr.replace(\"'\", '')",
      "28": "def escape(expr: str) -> str: throw new Error(expr.replace(\"'\", \"''\"))",
      "29": "def escape(expr: str) -> str: raise ValueError(expr.replace(\"'\", \"''\"))",
      "30": "def escape(expr: str) -> str: assert expr is not None return expr.replace(\"'\", \"''\")",
      "31": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\" )",
      "32": "def escape(expr: str) -> bool: return expr.replace(\"'\", \"''\")",
      "33": "def escape(expr: str ) -> str: return expr.replace(\"'\", \"''\")",
      "34": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\" elif isinstance(expr, str))",
      "35": "def escape(expr: str) -> str: return expr.replace(\"'\", \"'']",
      "36": "def escape(expr: str) -> str: return expr.replace(\"'\", \"'\"\"",
      "37": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\")",
      "38": "def escape(expr: Optional[str] = None: return expr.replace(\"'\", \"''\")",
      "39": "def escape(expr: str) -> str: return return expr.replace(\"'\", \"''\")",
      "40": "def escape(expr: str) -> str: return expr.replace(\"'\", \"'' \"",
      "41": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\") raise ValueError(f\"Unknown expr: { f } \")",
      "42": "def escape(expr: str) -> str: return expr.replace(\"'\", ''\"",
      "43": "def escape(expr: str): return str(expr.replace(\"'\", \"''\")",
      "44": "def escape(expr: str) -> str: return expr.replace(\"'\", \"''\") raise ValueError(f\"Unknown expr: { f \\ \")",
      "45": "def escape(expr: str) -> str: return expr.replace(\"',\" \"''\"",
      "46": "def escape(expr, str) -> str: return expr.replace(\"'\", \"''\"",
      "47": "def escape(expr: str) -> str: return expr.replace(\"'\", \"'' \")",
      "48": "def escape(expr: str) -> str: return exr.replace(\"'\", \"''\"",
      "49": "def escape(expr: str) -> str: assert isinstance(expr, str) return expr.replace(\"'\", \"'')"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
    "target_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                vty = v.type\n",
    "warning_line": "            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 445,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/Expr.py",
    "target_filename": "WDL/Expr.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)"
    ],
    "correct": false,
    "top_five": {
      "0": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "1": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "2": "k.typecheck(kty) if vty is None or vty is None or vty is None: vty = v.typecheck(kty)",
      "3": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck()",
      "4": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck()",
      "5": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(): vty = v.typecheck(kty)",
      "6": "k.typecheck(kty) if vty == None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "7": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty) else:",
      "8": "k.typecheck(kty) if vty is None or vty == T.Array(t.Any()): vty = v.typecheck(kty)",
      "9": "k.typecheck(kty) if vty is None or vty == None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "10": "k.typecheck(kty) if vty is None or vty is None or vty is None: vty = v.typecheck()",
      "11": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty) else:",
      "12": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map([]): vty = v.typecheck(kty)",
      "13": "k.typecheck(kty) if vty is None and vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "14": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Equal): vty = v.typecheck(kty)",
      "15": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) vty = v.typecheck(kty) if vty is None or vty == T.Map(T.Any()): vty = v.typecheck(kty)",
      "16": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(t.Any()): vty = v.typecheck(kty)",
      "17": "k.typecheck(kty) if vty is None or vty!= None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "18": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.type(kty)",
      "19": "k.typecheck(kty) if vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "20": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty) if vty is None or vty == T.Map(T.Any()):",
      "21": "k.typecheck(kty) if vty is None or vty is None and vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "22": "k.typecheck(kty) if vty == T.Array(T.Any()) or vty == T.Map([]): vty = v.typecheck(kty)",
      "23": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) vty = v.typecheck(kty)",
      "24": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(''): vty = v.typecheck(kty)",
      "25": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == None: vty = v.typecheck(kty)",
      "26": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.type(kty)",
      "27": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) if vty is None or vty == T.Map(): vty = v.typecheck(kty)",
      "28": "k.typecheck(kty) if vty == T.Array(T.Any()) or vty == T.Map(): vty = v.typecheck(kty)",
      "29": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any()): vty = v.typecheck(kty)",
      "30": "k.typecheck(kty) if vty is None or vty == T.Array([T.Any()]): vty = v.typecheck(kty)",
      "31": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty == T.Map(elm, T.Any()): vty = v.typecheck(kty)",
      "32": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.type()",
      "33": "k.typecheck(kty) if vty == T.Array(T.Any()) or vty == T.Map(T.Any()): vty = v.typecheck(kty)",
      "34": "k.typecheck(kty) if vty!= None or vty == T.Array(T.Any()): vty = v.typecheck(kty)",
      "35": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(): vty = v.typecheck(kty)",
      "36": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) if vty is None or vty == T.Map(Equal): vty = v.typecheck(kty)",
      "37": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()): vty = v.type()",
      "38": "k.typecheck(kty) if vty is None or vty == T.Array((T.Any())): vty = v.typecheck(kty)",
      "39": "k.typecheck(kty) if vty is None or vty == T.Array() or vty == T.Map(): vty = v.typecheck(kty)",
      "40": "k.typecheck(kty) if vty is None or vty == None or vty == None: vty = v.typecheck(kty)",
      "41": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) if vty is None or vty == T.Map(T.Any()): vty = v.typecheck(kty)",
      "42": "k.typecheck(kty) if vty is None or vty == T.Array(V.Any()): vty = v.typecheck(kty)",
      "43": "k.typecheck(kty) if vty is None or vty is None or isinstance(T.Any()): vty = v.typecheck(kty)",
      "44": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty) if vty is None or vty is None or vty == T.Map(T.Any()):",
      "45": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.typecheck(kty) if vty is None or vty == T.Map(T.Any()):",
      "46": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.type_check(kty)",
      "47": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(T.Any()): vty = v.type check(kty)",
      "48": "k.typecheck(kty) if vty is None or vty is None or vty == T.Array(V.Any()): vty = v.typecheck(kty)",
      "49": "k.typecheck(kty) if vty is None or vty == T.Array(T.Any()) or vty is None: vty = v.typecheck(kty)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
    "target_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_line": "                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 433,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libp2p/py-libp2p",
    "source_filename": "libp2p/pubsub/gossipsub.py",
    "target_filename": "libp2p/pubsub/gossipsub.py",
    "source_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397^",
    "target_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "predictions": [
      "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], []) )"
    ],
    "correct": false,
    "top_five": {
      "0": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], []) )",
      "1": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[] ] )",
      "2": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[] ) )",
      "3": "selected_peers = GossipSub.select_from_minus( Sequence[Any]( self.degree, num_mesh_peers_in_topic - self.mesh[topic], [] )",
      "4": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], list[] ) )",
      "5": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], [] )",
      "6": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic] ), [] )",
      "7": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[] ] )",
      "8": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[] ) )",
      "9": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, self.mesh[topic], []) )",
      "10": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic]), [] )",
      "11": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[0], List[1], List[2], List[3], List[4], List[5] )",
      "12": "selected_peers = GossipSub.select_from_minus( Set[ID, num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] )",
      "13": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], list[] ) )",
      "14": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic]) )",
      "15": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]) )",
      "16": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - topic), [] )",
      "17": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[]) )",
      "18": "selected_peers = List( GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic]), [] )",
      "19": "selected_peers = GossipSub.select_from_minus( Sequence[any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], []) )",
      "20": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], None) )",
      "21": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[] ], List[] )",
      "22": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List( self.mesh[topic]) )",
      "23": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[0], List[1], List[2], List[3], List[4], List[5] ) )",
      "24": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, set(self.mesh[topic]), [] )",
      "25": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic - self.mesh[topic], List[]) )",
      "26": "selected_peers = List( GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], list[] ) )",
      "27": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, set(self.mesh[topic], List(self.mesh[topic]) )",
      "28": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[], List[] ] )",
      "29": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[0], List[1], List[2] ) )",
      "30": "selected_peers = GossipSub.select_from_minus( Set[ID(self.degree, list(self.mesh[topic]), List[ID]) )",
      "31": "selected_peers = GossipSub.select_from_minus( Sequence[Any]( self.degree, num_mesh_peers_in_topic - self.mesh[topic], ) )",
      "32": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]] )",
      "33": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, num_mesh_peers_in_topic - self.mesh[topic], []) )",
      "34": "selected_peers = GossipSub.select_from_minus( List(self.degree, list(self.mesh[topic], list[]) )",
      "35": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, list(self.mesh[topic], list[]) )",
      "36": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, num_mesh_peers_in_topic - self.mesh[topic], List( self.mesh[topic] ) )",
      "37": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, num_mesh_peers_in_topic - self.mesh[topic], None) )",
      "38": "selected_peers = GossipSub.select_from_minus( Sequence[Any]( self.degree, num_mesh_peers_in_topic - self.mesh[topic], List[] ] )",
      "39": "selected_peers = GossipSub.select_from_minus( List(self.degree, list(self.mesh[topic], List[ID]) )",
      "40": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List[]] )",
      "41": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, self.mesh[topic], []) )",
      "42": "selected_peers = GossipSub.select_from_minus( Sequence[Any](self.degree, num_mesh_peers_in_topic, self.mesh[topic], []) )",
      "43": "selected_peers = GossipSub.select_from_minus( List(self.degree, list(self.mesh[topic]), List(self.mesh[topic], List[ID]) )",
      "44": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, list(self.mesh[topic]), []) )",
      "45": "selected_peers = List(GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], list[] ) )",
      "46": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, num_mesh_peers_in_topic - self.mesh[topic], List(self.mesh[topic], List[ID]) )",
      "47": "selected_peers = GossipSub.select_from_minus( Sequence(self.degree, num_mesh_peers_in_topic - self.mesh[topic], List( self.mesh[topic]) )",
      "48": "selected_peers = GossipSub.select_from_minus( Set(self.degree, set(self.mesh[topic], list(self.mesh[topic])) )",
      "49": "selected_peers = GossipSub.select_from_minus( num_mesh_peers_in_topic - self.degree, list( self.mesh[topic], List( self.mesh[topic] ) )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],\n",
    "target_code": "        restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_line": "            expiration=int(data['expiration']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],"
    ],
    "correct": true,
    "top_five": {
      "0": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "1": "restored = cls( expiration=blockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "2": "restored = cls( expiration=BBCExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "3": "restored = cls( expiration=blockedExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "4": "restored = cls( expiration=Null(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "5": "restored = cls( expiration=ExpirationBlock(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "6": "restored = cls( expiration=BlockExpiration(INT(data['expiration'])), balance_proof=data['balance_proof'],",
      "7": "restored = cls( expiration= BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "8": "restored = cls( expiration=BBCExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "9": "restored = cls( expiration= BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "10": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "11": "restored = cls( expiration=BankExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "12": "restored = cls( expiration=BlockExpiration(Int(data['expiration'])), balance_proof=data['balance_proof'],",
      "13": "restored = cls( expiration=BlockExpiration[int(data['expiration'])), balance_proof=data['balance_proof'],",
      "14": "restored = cls( expiration=Nullstone(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "15": "restored = cls( expiration=NullForEach(int(data['expiration']), balance_proof=data['balance_proof'],",
      "16": "restored = cls( expiration=Int(data['expiration']), balance_proof=data['balance_proof'],",
      "17": "restored = cls( expiration=int(data['expiration']), balance_proof=data['balance_proof'],",
      "18": "restored = cls( expiration=NullForExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "19": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balaance_proof'],",
      "20": "restored = cls( expiration=Expiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "21": "restored = cls( expiration=blockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "22": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "23": "restored = cls( expiration=str(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "24": "restored = cls( expiration=BlockExpiration(int(data['expiration']), balance_proof=data['balance_proof'],",
      "25": "restored = cls( expiration=(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "26": "restored = cls( expiration=BlockExpiration( int(data['expiration'])), balance_proof=data['balance_proof'],",
      "27": "restored = cls( expiration=$(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "28": "restored = cls( expiration=ContractSendChannelUpdateTransfer[int(data['expiration'])), balance_proof=data['balance_proof'],",
      "29": "restored = cls( expiration=DeletedBlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "30": "restored = cls( expiration=False(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "31": "restored = cls( expiration=btn(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "32": "restored = cls( expiration=List(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "33": "restored = cls( expiration=BlockExpiration(INT(data['expiration'])), balance_proof=data['balance_proof'],",
      "34": "restored = cls( expiration=lockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "35": "restored = cls( expiration = BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "36": "restored = cls( expiration=null(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "37": "restored = cls( expiration=String(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "38": "restored = cls( expiration=BlockExpiration(), balance_proof=data['balance_proof'],",
      "39": "restored = cls( expiration=Success(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "40": "restored = cls( expiration=BG(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "41": "restored = cls( expiration=BlockExpiration(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "42": "restored = cls( expiration=Error(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "43": "restored = cls( expiration=BlockExpiration(int(data['expiration']))), balance_proof=data['balance_proof'],",
      "44": "restored = cls( expiration=QueryString(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "45": "restored = cls( expiration=Blacklist(int(data['expiration'])), balance_proof=data['balance_proof'],",
      "46": "restored = cls( expiration= int(data['expiration']), balance_proof=data['balance_proof'],",
      "47": "restored = cls( expiration=args[int(data['expiration'])), balance_proof=data['balance_proof'],",
      "48": "restored = cls( expiration=BlockExpiration(int(data['expiration']]), balance_proof=data['balance_proof'],",
      "49": "restored = cls( expiration=[int(data['expiration'])], balance_proof=data['balance_proof'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )\n",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_line": "        InitializationData(unit_data={}, shared=annotation[\"inputs\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 128,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "target_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )"
    ],
    "correct": false,
    "top_five": {
      "0": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "1": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"] )",
      "2": "assignment.write_assignment_data( InitializationData(unit_data= { } ) )",
      "3": "assignment.write_assignment_data( InitializationData( unit_data= { }, shared=annotation[\"inputs\"] )",
      "4": "assignment_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "5": "assignment.write_assignment_data( InitializationData(unit_data= { } )",
      "6": "assignment.write_assignment_data( InitializationData(unit_data = { }, shared=annotation[\"inputs\"]) )",
      "7": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"], None) )",
      "8": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"] )",
      "9": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"]) shared=annotation[\"inputs\"]",
      "10": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) ) assert unit_data is not None InitializationData(unit_data= { }, shared=annotation[\"inputs\"])",
      "11": "assignment.write_assignment_data( InitializationData(unit_data= { }, list=annotation[\"inputs\"]) )",
      "12": "assignment.write_assignment_data( InitializationData( unit_data= { }, shared=annotation[\"inputs\"] ) -> None:",
      "13": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data= { }, shared=annotation[\"inputs\"]",
      "14": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data= { }, shared=annotation[\"inputs\"] )",
      "15": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = unit_data",
      "16": "assignment.write_assignment_data( InitializationData(unit_data= { } ).eql(shared=annotation[\"inputs\"]) )",
      "17": "assignment.write_assignment_data( InitializationData( unit_data= { }, shared=annotation[\"inputs\"]) )",
      "18": "assignment.write_assignment_data( InitializationData(unit_data= { } ).bind(annotation[\"inputs\"]) )",
      "19": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = [], shared=annotation[\"inputs\"]",
      "20": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"]) shared=annotation[\"inputs\"] InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) )",
      "21": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None )",
      "22": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"]) shared=annotation[\"inputs\"] InitializationData(unit_data= { }, shared=annotation[\"inputs\"])",
      "23": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]",
      "24": "assignment.write_assignment_data( InitializationData(unit_data= { } ).then(share=annotation[\"inputs\"]) )",
      "25": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None, shared=annotation[\"inputs\"] )",
      "26": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) ) -> None:",
      "27": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) ) assert unit_data is None InitializationData(unit_data= { }, shared=annotation[\"inputs\"])",
      "28": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"] ) -> None:",
      "29": "assignment.write_assignment_data( InitializationData(unit_data= { } ).test(annotation[\"inputs\"]) )",
      "30": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"], shared=annotation[\"inputs\"])",
      "31": "assignment.write_assignment_data( InitializationData(unit_data= { } ) elif isinstance(annotation[\"inputs\"]): elif isinstance(annotation[\"inputs\"]): elif isinstance(annotation[\"inputs\"]):",
      "32": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[str, Any]) )",
      "33": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"] )",
      "34": "assignment_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"] )",
      "35": "assignment.write_assignment_data( InitializationData(unit_data= { } ).bind(annotation[\"inputs\"], shared=annotation[\"inputs\"]) )",
      "36": "assignment.write_assignment_data( InitializationData(unit_data= { }, shares=annotation[\"inputs\"]) )",
      "37": "assignment.write_assignment_data( InitializationData(unit_data= { } ) if not unit_data:",
      "38": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"]) shared=annotation[\"inputs\"] InitializationData(unit_data= { }, shared=Dict[str, Any]) )",
      "39": "assignment.write_assignment_data( InitializationData(unit_data= { } ) elif isinstance(annotation[\"inputs\"]): elif isinstance(annotation[\"inputs\"]):",
      "40": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]",
      "41": "assignment.write_assignment_data( InitializationData( unit_data= { }, shared=annotation[\"inputs\"] ) -> None )",
      "42": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"], unit_data) shared=annotation[\"inputs\"]",
      "43": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = []",
      "44": "assignment.write_assignment_data( InitializationData(unit_data= { } ) -> None: unit_data = int(annotation[\"inputs\"], shared=annotation[\"inputs\"]) shared=annotation[\"inputs\"]",
      "45": "assignment.write_assignment_data( InitializationData(unit_data= { }, common=annotation[\"inputs\"]) )",
      "46": "assignment.write_assignment_data( InitializationData( unit_data= { } ), shared=annotation[\"inputs\"] )",
      "47": "assignment.write_assignment_data( InitializationData(unit_data= { } ) elif isinstance(annotation[\"inputs\"]): elif isinstance(annotation[\"inputs\"]) elif isinstance(annotation[\"inputs\"]):",
      "48": "assignment.write_assignment_data( InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]) )",
      "49": "assignment.write_assignment_data( InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) ).decode(\"InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]) )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "target_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_line": "                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 267,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/automagic/windows.py",
    "target_filename": "volatility/framework/automagic/windows.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)"
    ],
    "correct": false,
    "top_five": {
      "0": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "1": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) if not isinstance(physical_layer, str) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "2": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, int, str])",
      "3": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str)",
      "4": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "5": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) if isinstance(physical_layer, str) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "6": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, int, str)",
      "7": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) if hit is not None:",
      "8": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) else:",
      "9": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits__ = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "10": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) assert physical_layer is not None hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "11": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) if hits is not None:",
      "12": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) assert isinstance(physical_layer, str) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "13": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_layer = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "14": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, str[0], str[1])",
      "15": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) if hits is None:",
      "16": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) return hits",
      "17": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, List[PageMapScanner(useful), progress_callback])",
      "18": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_value = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "19": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert physical_layer is not None hits = context.memory[physical_layer].scan(context, str, bool, bytes, int, str])",
      "20": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert physical_layer is not None hits = context.memory[physical_layer].scan(context, bool, bytes, int, str])",
      "21": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) if not isinstance(physical_layer) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "22": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) if not isinstance(physical_layer, str): hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "23": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_str = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "24": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits_layer = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "25": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, str)",
      "26": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert isinstance(str, str)",
      "27": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) if hit is None:",
      "28": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "29": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits= context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "30": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, pagemaps[useful], progress_callback)",
      "31": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], progress_callback)",
      "32": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert physical_layer is not None hits = context.memory[physical_layer].scan(context, str(PageMapScanner(useful), str))",
      "33": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_list = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "34": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits[str] = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "35": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert physical_layer is not None hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str)",
      "36": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert isinstance(physical_layer, str)",
      "37": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) if isinstance(str, str):",
      "38": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits_back = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "39": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_count = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "40": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_file = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "41": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful))",
      "42": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, bool, bytes, str])",
      "43": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits_ = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "44": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) if not isinstance(physical_layer, str) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) else:",
      "45": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hit_files = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "46": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert hit is not None hits = context.memory[physical_layer].scan(context, bool, bytes, int, str])",
      "47": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits_str = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "48": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) assert hits are not None",
      "49": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) if isinstance(physical_layer, str) hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    \"\"\"\n    return bool(name) and name != '_' and len(name) < min_length\n",
    "target_code": "    \"\"\"\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_line": "    return bool(name) and name != '_' and len(name) < min_length",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/wemake-python-styleguide",
    "source_filename": "wemake_python_styleguide/helpers/variables.py",
    "target_filename": "wemake_python_styleguide/helpers/variables.py",
    "source_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9^",
    "target_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "predictions": [
      "\"\"\" return bool(name) and name!= str('_') and len(name)  min_length"
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" return bool(name) and name!= str('_') and len(name)  min_length",
      "1": "\"\"\" return bool(name) and name!= '_' and str(name)  min_length",
      "2": "\"\"\" return bool(name) and name!= '_' and str(len(name))  min_length",
      "3": "\"\"\" return str(bool(name)) and name!= '_' and len(name)  min_length",
      "4": "\"\"\" return bool(name) and name!= str('_')  min_length",
      "5": "\"\"\" return bool(name) and name!= '_' and len(name)  min_length",
      "6": "\"\"\" return str(bool(name)) and name!= str('_') and len(name)  min_length",
      "7": "\"\"\" return bool(name) and name!= String('_') and len(name)  min_length",
      "8": "\"\"\" return bool(name) and name!= str._' and len(name)  min_length",
      "9": "\"\"\" return bool(name) and name!= '_' and str(len(name))  min_length",
      "10": "\"\"\" assert name is not None return bool(name) and name!= '_' and len(name)  min_length",
      "11": "\"\"\" return str(bool(name)) and name!= '_' and str(len(name))  min_length",
      "12": "\"\"\" return bool(name) and name!= str and len(name)  min_length",
      "13": "\"\"\" return bool(name) and name!= False and len(name)  min_length",
      "14": "\"\"\" return str(bool(name) and name!= '_' and len(name))  min_length",
      "15": "\"\"\" return str(bool(name) and name!= '_' and len(name)  min_length)",
      "16": "\"\"\" return str(bool(name)) and name!= '_' and str(name)  min_length",
      "17": "\"\"\" assert isinstance(name, str) return bool(name) and name!= '_' and len(name)  min_length",
      "18": "\"\"\" return bool(name) and name!= len(name)  min_length",
      "19": "\"\"\" return bool(name) and name!= '_' and bool(len(name))  min_length",
      "20": "\"\"\" return bool(name) and name!= \"_\" and len(name)  min_length",
      "21": "\"\"\" return str(bool(name)) and name!= str('_' and len(name))  min_length",
      "22": "\"\"\" return bool(name) and name!= '_' && len(name)  min_length",
      "23": "\"\"\" return bool(name) and name!= str ('_') and len(name)  min_length",
      "24": "\"\"\" return str(bool(name)) and name!= '_' and str(len(name))  min_length",
      "25": "\"\"\" return bool(name) and len(name)!= str('_')  min_length",
      "26": "\"\"\" return bool(name) and name!= str.Sized and len(name)  min_length",
      "27": "\"\"\" return bool(name) and name!= Len(name)  min_length",
      "28": "\"\"\" return bool(name) and name!= str('_'), len(name)  min_length",
      "29": "\"\"\" return bool(name) and name!= Optional['_'] and len(name)  min_length",
      "30": "\"\"\" return bool(name) and name!= Form['_'] and len(name)  min_length",
      "31": "\"\"\" return bool(name) and name!= String('_')  min_length",
      "32": "\"\"\" return str(bool(name) and name!= '_' and len(name)  min_length",
      "33": "\"\"\" return bool(name) and name!= List['_'] and len(name)  min_length",
      "34": "\"\"\" assert isinstance(name, str) and name!= '_' and len(name)  min_length",
      "35": "\"\"\" return str(bool(name) and name!= str('_') and len(name)  min_length)",
      "36": "\"\"\" return str(bool(name) and name!= str('_') and len(name)  min_length",
      "37": "\"\"\" return bool(name) and name!= Undefined and len(name)  min_length",
      "38": "\"\"\" return bool(name) and name!= Str('_') and len(name)  min_length",
      "39": "\"\"\" return bool(name) and name!= Sum('_') and len(name)  min_length",
      "40": "\"\"\" return bool(name) and name!= None and len(name)  min_length",
      "41": "\"\"\" return bool(name) and name!= str('_' and len(name))  min_length",
      "42": "\"\"\" return bool(name) and name!= \"_\" and str(name)  min_length",
      "43": "\"\"\" return bool(name) and name!= ('_') and len(name)  min_length",
      "44": "\"\"\" return bool(name) and name!= String and len(name)  min_length",
      "45": "\"\"\" return bool(name, str) and name!= str('_')  min_length",
      "46": "\"\"\" return bool(name) and name!= str('_') + str(name)  min_length",
      "47": "\"\"\" return str and name!= '_' and len(name)  min_length",
      "48": "\"\"\" return bool(name) and name!= True and len(name)  min_length",
      "49": "\"\"\" return bool(name) and name!= undefined and len(name)  min_length"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        results = self.fit(model)\n        self._set_running_stage(None, model)\n\n",
    "target_code": "        results = self.fit(model)\n        self._running_stage = None\n\n",
    "warning_line": "        self._set_running_stage(None, model)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `LightningEnum` for 1st positional only parameter to call `Trainer._set_running_stage` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1036,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PyTorchLightning/pytorch-lightning",
    "source_filename": "pytorch_lightning/trainer/trainer.py",
    "target_filename": "pytorch_lightning/trainer/trainer.py",
    "source_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b^",
    "target_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b",
    "predictions": [
      "results = self.fit(model) self._running_stage = None"
    ],
    "correct": true,
    "top_five": {
      "0": "results = self.fit(model) self._running_stage = None",
      "1": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "2": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "3": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "4": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "5": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "6": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "7": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.TighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "8": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "9": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "10": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "11": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "12": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "13": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "14": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.RighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "15": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "16": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.L",
      "17": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "18": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "19": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "20": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "21": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "22": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.L",
      "23": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.RighteningEnum.LighteningEnum.RighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "24": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.L",
      "25": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "26": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "27": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "28": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "29": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "30": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "31": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "32": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "33": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.L",
      "34": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum",
      "35": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "36": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "37": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.RighteningEnum.RighteningEnum.RighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "38": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "39": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.RighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "40": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "41": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "42": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.LightningEnum.L",
      "43": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "44": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightenerLightener",
      "45": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "46": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.L",
      "47": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LightningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L",
      "48": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEr",
      "49": "results = self.fit(model) if enum.LighteningEnum is None: self._running_stage = None if enum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LightningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.LighteningEnum.L"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "target_code": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_line": "        self.query_ethereum_tokens(tokens, self.balances[S_ETH])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 131,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rotki/rotki",
    "source_filename": "rotkehlchen/blockchain.py",
    "target_filename": "rotkehlchen/blockchain.py",
    "source_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282^",
    "target_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "predictions": [
      "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'total': tokens"
    ],
    "correct": false,
    "top_five": {
      "0": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "1": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals } )",
      "2": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals }",
      "3": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "4": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals },",
      "5": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "6": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "7": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens = tokens.query_ethereum_tokens() return { 'per_account': self.balances, 'totals': self.totals },",
      "8": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals } ",
      "9": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals } ;",
      "10": "self.owned_eth_tokens.extend(tokens) tokens = tokens.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "11": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens() return { 'per_account': self.balances, 'totals': self.totals },",
      "12": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "13": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "14": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "15": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens() return { 'per_account': self.balances, 'totals': self.totals } )",
      "16": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances) return { 'per_account': self.balances, 'totals': self.totals } )",
      "17": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals },",
      "18": "self.owned_eth_tokens.extend(tokens) tokens = tokens.query_ethereum_tokens(tokens) return { 'per_account': tokens, 'totals': tokens }",
      "19": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens) return { 'per_account': self.balances, 'totals': self.totals } )",
      "20": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "21": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens = tokens.query_ethereum_tokens() return { 'per_account': self.balances, 'totals': self.totals } )",
      "22": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals },",
      "23": "self.owned_eth_tokens.extend(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "24": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "25": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, blockchain.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "26": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens = tokens.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "27": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens[token]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "28": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, Blockchain.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "29": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens[str], self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "30": "self.owned_eth_tokens.extend(tokens) tokens.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals },",
      "31": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens = tokens.query_ethereum_tokens() return { 'per_account': self.balances, 'totals': self.totals }",
      "32": "self.owned_eth_tokens.extend(tokens) tokens = tokens.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals }",
      "33": "self.owned_eth_tokens.extend(tokens) tokens = tokens.query_ethereum_tokens(tokens) return { 'per_account': tokens, 'totals': tokens },",
      "34": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens) return { 'per_account': self.balances, 'totals': self.totals } )",
      "35": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "36": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[ETH]) return { 'per_account': self.balances, 'totals': self.totals }",
      "37": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[ETH]) return { 'per_account': self.balances, 'totals': self.totals },",
      "38": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[Eth]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "39": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, self.balances[ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "40": "self.owned_eth_tokens.extend(tokens) assert self.query_ethereum_tokens(tokens, self.balances[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "41": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, blocks) return { 'per_account': self.balances, 'totals': self.totals },",
      "42": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances) return { 'per_account': self.balances, 'totals': self.totals },",
      "43": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens) return { 'per_account': self.balances, 'totals': self.totals }",
      "44": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens[str], tokens[S_ETH]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "45": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[T]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "46": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[ETD]) return { 'per_account': self.balances, 'totals': self.totals } )",
      "47": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens[token]) return { 'per_account': self.balances, 'totals': self.totals },",
      "48": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, tokens.balances[T]) return { 'per_account': self.balances, 'totals': self.totals },",
      "49": "self.owned_eth_tokens.extend(tokens) self.query_ethereum_tokens(tokens, blocks) return { 'per_account': self.balances, 'totals': self.totals } )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    assert {} == load_data(\n        datadir='',\n        pairs=[],\n",
    "target_code": "    assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_line": "        datadir='',",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 373,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "tests/data/test_history.py",
    "target_filename": "tests/data/test_history.py",
    "source_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf^",
    "target_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "predictions": [
      "assert { } == load_data( datadir=Path(''), pairs=[],"
    ],
    "correct": true,
    "top_five": {
      "0": "assert { } == load_data( datadir=Path(''), pairs=[],",
      "1": "assert { } == load_data( datadir='', pairs=[],",
      "2": "assert { } == load_data( datadir = Path(''), pairs=[],",
      "3": "assert { } == load_data( datadir=path(''), pairs=[],",
      "4": "assert { } == load_data( datadir=Path(''), pairs=[],",
      "5": "assert { } == load_data( datadir=python_path(''), pairs=[],",
      "6": "assert { } == load_data( datadir=Str(''), pairs=[],",
      "7": "assert { } == loading_data( datadir=Path(''), pairs=[],",
      "8": "assert { } == load_data( datadir = PATH(''), pairs=[],",
      "9": "assert { } == load_data( datadir=str(''), pairs=[],",
      "10": "assert { } == load_data( datadir=py(''), pairs=[],",
      "11": "assert { } == load_data( datadir=Polyfill(''), pairs=[],",
      "12": "assert { } == load_data( datadir=python_py(''), pairs=[],",
      "13": "assert { } == load_data( datadir= PATH(''), pairs=[],",
      "14": "assert { \\ == load_data( datadir=Path(''), pairs=[],",
      "15": "assert { } == load_data(datadir=Path(''), pairs=[],",
      "16": "assert { } == load_data( datadir= Path(''), pairs=[],",
      "17": "assert { } == load_data( datadir=String(''), pairs=[],",
      "18": "assert { } == loads( datadir=Path(''), pairs=[],",
      "19": "assert { } == load_data( datadir=Sequence(''), pairs=[],",
      "20": "assert { } == load_data( datadir=Path(str), pairs=[],",
      "21": "assert { } == load_data( datadir= Path(''), pairs=[],",
      "22": "assert { } == load_data( datadir = Path(''), pairs=[],",
      "23": "assert { } == load_data( datadir=Path(''), pairs=[],",
      "24": "assert { } == load_data( datadir=Path([''], pairs=[],",
      "25": "assert { } == load_data( datadir=SinglePath(''), pairs=[],",
      "26": "assert { } == load_data( datasetdir=Path(''), pairs=[],",
      "27": "assert { } == load_data( _datadir=Path(''), pairs=[],",
      "28": "assert { } == load_data( datadir=Map(''), pairs=[],",
      "29": "assert ^ } == load_data( datadir=Path(''), pairs=[],",
      "30": "assert { } == load_data( datadir=python_python_datadir(''), pairs=[],",
      "31": "assert { } == load_data( datadir=python_python_datadir, pairs=[],",
      "32": "assert { } == load_data() datadir=Path(''), pairs=[],",
      "33": "assert { } == load_data( datadir=Path('') ), pairs=[],",
      "34": "assert { } == load_data( datadir=Policy[''], pairs=[],",
      "35": "assert { } == load_data( _datadir=Path(_datadir), pairs=[],",
      "36": "assert { } == load_data( dir=Path(''), pairs=[],",
      "37": "assert { } == load_data( datadir=None, pairs=[],",
      "38": "assert { } == load_data( _datadir='', pairs=[],",
      "39": "assert { } == load_data( datadir=Address(''), pairs=[],",
      "40": "assert { } == load_data( datadir=False, pairs=[],",
      "41": "assert { } == load_data( datadir=[''], pairs=[],",
      "42": "assert { } == load_data( datadir=Sample(''), pairs=[],",
      "43": "assert { } == load_data( datadir=Task[''], pairs=[],",
      "44": "assert { } == load_data( datadir=Array(''), pairs=[],",
      "45": "assert { } == load_data( datadir=State, pairs=[],",
      "46": "assert { } == load_data( datadir = '', pairs=[],",
      "47": "assert { } == load_data( datadir=Params(''), pairs=[],",
      "48": "assert { } == load_data( datadir=Path(datadir'), pairs=[],",
      "49": "assert { } == load_data( datadir=python_python_py(''), pairs=[],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
    "target_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_line": "        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/cli/simple_table.py",
    "target_filename": "airflow/cli/simple_table.py",
    "source_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3^",
    "target_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "predictions": [
      "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys[0].keys()) print(output)"
    ],
    "correct": false,
    "top_five": {
      "0": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys[0].keys()) print(output)",
      "1": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, str]) print(output)",
      "2": "rows = [d.values() for d in data] output = tabulate(int(rows, tablefmt=\"plain\", headers=data[0].keys())) print(output)",
      "3": "rows = [d.values() for d in data] output = tabulate(str(rows, tablefmt=\"plain\", headers=data[0].keys())) print(output)",
      "4": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=str(data[0].keys())) print(output)",
      "5": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, str], str]) print(output)",
      "6": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=keys[0].keys()]) print(output)",
      "7": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=headers[0].keys()) print(output)",
      "8": "rows = [d.values() for d in data] output = tabulate(str(rows, tablefmt=\"plain\", headers=str(data[0].keys())) print(output)",
      "9": "rows = [d.values() for d in data] output = tabulate(_rows, tablefmt=\"plain\", headers=_data[0].keys()) print(output)",
      "10": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=Union[str, str]]) print(output)",
      "11": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[0].keys()]) print(output)",
      "12": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, Dict[str, str], Sequence[str], str]) print(output)",
      "13": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=Union[str, str], str]) print(output)",
      "14": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=KeysView[data[0].keys()]) print(output)",
      "15": "rows = [d.values() for d in data] output = tabulate(str(rows, tablefmt=\"plain\", headers=keys[0].keys())) print(output)",
      "16": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=Union[0].keys()]) print(output)",
      "17": "rows = [d.values() for d in data] output = tabulate(...rows, tablefmt=\"plain\", headers=...data[0].keys()) print(output)",
      "18": "rows = [d.values() for d in data] output = tabulate(...rows, tablefmt=\"plain\", headers=keys[0].keys()) print(output)",
      "19": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=str.keys()) print(output)",
      "20": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys.keys()) print(output)",
      "21": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys[0]) print(output)",
      "22": "rows = [d.values() for d in data] output = tabulate(raw(rows, tablefmt=\"plain\", headers=raw)) print(output)",
      "23": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, Dict[str, str], Sequence[str, str]]) print(output)",
      "24": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys) print(output)",
      "25": "rows = [d.values() for d in data] output = tabulate(columns, tablefmt=\"plain\", headers=keys[0].keys()) print(output)",
      "26": "rows = [d.values() for d in data] output = tabulate(update(rows, tablefmt=\"plain\", headers=data[0].keys())) print(output)",
      "27": "rows = [d.values() for d in data] output = tabulate(r(rows, tablefmt=\"plain\", headers=data[0].keys())) print(output)",
      "28": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Sequence[str, str]) print(output)",
      "29": "rows = [d.values() for d in data] output = tabulate(format(rows, tablefmt=\"plain\", headers=format[0].keys()]) print(output)",
      "30": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys()) print(output)",
      "31": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=str[data[0].keys()]) print(output)",
      "32": "rows = [d.values() for d in data] output = tabulate((rows, tablefmt=\"plain\", headers=data[0].keys())) print(output)",
      "33": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=plain, headers=keys[0].keys()) print(output)",
      "34": "rows = [d.values() for d in data] output = tabulate(Array[rows, tablefmt=\"plain\", headers=data[0].keys()) print(output)",
      "35": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=keys.get(data[0].keys())) print(output)",
      "36": "rows = [d.values() for d in data] output = tabulate(str(rows, tablefmt=\"plain\", headers=str[data[0].keys()]) print(output)",
      "37": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[data[0].keys()]) print(output)",
      "38": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=keys]) print(output)",
      "39": "rows = [d.values() for d in data] output = tabulate([rows, tablefmt=\"plain\", headers=Union[str, Dict[str, str], Sequence[str], str]]) print(output)",
      "40": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=set[0].keys()]) print(output)",
      "41": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers= Union[str, Dict[str, str], Sequence[str], str]) print(output)",
      "42": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, Dict[str, str], Sequence[str], Any]) print(output)",
      "43": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, Dict[str, str], Sequence[str, str]]) print(output)",
      "44": "rows = [d.values() for d in data] output = tabulate(str(rows, tablefmt=\"plain\", headers=str[data[0].keys()])) print(output)",
      "45": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\"] print(output)",
      "46": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=[0].keys()]) print(output)",
      "47": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers=Union[str, Dict[str, str]]) print(output)",
      "48": "rows = [d.values() for d in data] output = tabulate(format(rows, tablefmt=\"plain\", headers=format[0].keys())) print(output)",
      "49": "rows = [d.values() for d in data] output = tabulate(rows, tablefmt=\"plain\", headers= Union[str, Dict[str, str], Sequence[str, str]]) print(output)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
    "target_code": "                r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            except TypeError:\n                intersection_of.append(ont.get_term(typing.cast(str, item)))\n        return frozenset(intersection_of)\n",
    "warning_line": "                intersection_of.append(ont.get_term(item))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 441,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/term.py",
    "target_filename": "pronto/term.py",
    "source_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8^",
    "target_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "predictions": [
      "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)"
    ],
    "correct": false,
    "top_five": {
      "0": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "1": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(str(ont.get_term(item))) return frozenset(intersection_of)",
      "2": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(item) return frozenset(intersection_of)",
      "3": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(t.get_term(item)) return frozenset(intersection_of)",
      "4": "r, t = item intersection_of.append(ont.get_relationship(r)), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "5": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except typeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "6": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ent.get_term(item)) return frozenset(intersection_of)",
      "7": "r, t = item intersection_of.append(on.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "8": "r, t = item intersection_of.append(ent.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "9": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(on.get_term(item)) return frozenset(intersection_of)",
      "10": "r, t = item intersection_of.append(ont.get_relationship(r, ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "11": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(str(ont.get_term(item)) return frozenset(intersection_of)",
      "12": "r, t = item intersection_of.append(t.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "13": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(str, str) return frozenset(intersection_of)",
      "14": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(int(item)) return frozenset(intersection_of)",
      "15": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont[str,...]) return frozenset(intersection_of)",
      "16": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(str(item))) return frozenset(intersection_of)",
      "17": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "18": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) returns frozenset(intersection_of)",
      "19": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) Except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "20": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item), str) return frozenset(intersection_of)",
      "21": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item, str)) return frozenset(intersection_of)",
      "22": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(e.get_term(item)) return frozenset(intersection_of)",
      "23": "r, t = item intersection_of.append(ont.get_relationship(r), t.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "24": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term((item))) return frozenset(intersection_of)",
      "25": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return freezingset(intersection_of)",
      "26": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(str(item)) return frozenset(intersection_of)",
      "27": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(it.get_term(item)) return frozenset(intersection_of)",
      "28": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append((ont.get_term(item))) return frozenset(intersection_of)",
      "29": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(item.get_term) return frozenset(intersection_of)",
      "30": "r, t = item intersection_of.append(ont.get_relationship(r)), ont.get_term(t) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "31": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(iter(item))) return frozenset(intersection_of)",
      "32": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term[item]) return frozenset(intersection_of)",
      "33": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term()) return frozenset(intersection_of)",
      "34": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(iter(ont.get_term(item))) return frozenset(intersection_of)",
      "35": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item) ) return frozenset(intersection_of)",
      "36": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append([ont.get_term(item)]) return frozenset(intersection_of)",
      "37": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ot.get_term(item)) return frozenset(intersection_of)",
      "38": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(est.get_term(item)) return frozenset(intersection_of)",
      "39": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(el.get_term(item)) return frozenset(intersection_of)",
      "40": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t) ) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "41": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(t)) return frozenset(intersection_of)",
      "42": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(str, i)) return frozenset(intersection_of)",
      "43": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) exception TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "44": "r, t = item intersection_of.append(r, ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)",
      "45": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(utf-8) return frozenset(intersection_of)",
      "46": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(ont.get_term(str, item)) return frozenset(intersection_of)",
      "47": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(item, str) return frozenset(intersection_of)",
      "48": "r, t = item intersection_of.append(ont.get_relationship(r), ont.get_term(t)) except TypeError: intersection_of.append(attr, str) return frozenset(intersection_of)",
      "49": "r, t = item intersection_of.append(ont.get_relationship(r)) except TypeError: intersection_of.append(ont.get_term(item)) return frozenset(intersection_of)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    target1, target2 = _get_targets(var, get_players(var), player)\n\n",
    "target_code": "\n    target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_line": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/roles/madscientist.py",
    "target_filename": "src/roles/madscientist.py",
    "source_changeid": "3b3870c9f365944134225c5b7364430c5bce0158^",
    "target_changeid": "3b3870c9f365944134225c5b7364430c5bce0158",
    "predictions": [
      "target1, target2 = _get_targets(var, set_players(var), player)"
    ],
    "correct": false,
    "top_five": {
      "0": "target1, target2 = _get_targets(var, set_players(var), player)",
      "1": "target1, target2 = _get_targets(var, list(get_players(var), player))",
      "2": "target1, target2 = _get_targets(var, list(get_players(var), player)",
      "3": "target1, target2 = _get_targets(var, set(get_players(var), player))",
      "4": "target1, target2 = _get_targets(var, _get_players(var), player)",
      "5": "target1, target2 = typing.List[User](_get_targets(var, get_players(var), player)",
      "6": "target1, target2 = typing.Set[User](_get_targets(var, get_players(var), player)",
      "7": "target1, target2 = typing.Set[User], _get_targets(var, get_players(var), player)",
      "8": "target1, target2 = _get_targets(var, set(get_players(var), player)",
      "9": "target1, target2 = _get_targets(var, group(get_players(var), player))",
      "10": "target1, target2 = _get_targets(var, array(get_players(var), player))",
      "11": "target1, target2 = _get_targets(var, typing.List[User](get_players(var), player))",
      "12": "target1, target2 = _get_targets(var, target.get_players(var), player)",
      "13": "target1, target2 = _get_targets(var, str(get_players(var), player))",
      "14": "target1, target2 = _get_targets(var, type(get_players(var), player))",
      "15": "target1, target2 = _get_targets(var, set_team_players(var), player)",
      "16": "target1, target2 = _get_targets(var, isinstance(get_players(var), player))",
      "17": "target1, target2 = _get_targets(var, get_players(var), player)",
      "18": "target1, target2 = _get_targets(var, target_players(var), player)",
      "19": "target1, target2 = set(_get_targets(var, get_players(var), player)",
      "20": "target1, target2 = _get_targets(var, players.get_players(var), player)",
      "21": "target1, target2 = _get_targets(var, type(get_players(var), player)",
      "22": "target1, target2 = _get_targets(var, typing.Set(get_players(var), player))",
      "23": "target1, target2 = _get_targets(var, set_get_players(var), player)",
      "24": "target1, target2 = _get_targets(var, targeting.get_players(var), player)",
      "25": "target1, target2 = _get_targets(var, List[User](get_players(var), player)",
      "26": "target1, target2 = _get_targets(var, typing.Set[User](var), player)",
      "27": "target1, target2 = _get_targets(var, active_players(var), active_player)",
      "28": "target1, target2 = _get_targets(var, targets[get_players(var), player)",
      "29": "target1, target2 = _get_targets(var, (get_players(var), player))",
      "30": "target1, target2 = _get_targets(var, typing.Set[User], player)",
      "31": "target1, target2 = set(var, get_players(var), player)",
      "32": "target1, target2 = _get_targets(var, List[User](get_players(var), player))",
      "33": "target1, target2 = _get_targets(var, this.get_players(var), player)",
      "34": "target1, target2 = _get_targets(var, Set(get_players(var), player))",
      "35": "target1, target2 = _get_targets(var, target, get_players(var), player)",
      "36": "target1, target2 = _get_targets(var, List(get_players(var), player)",
      "37": "target1, target2 = _get_targets(var, fetch_players(var), player)",
      "38": "target1, target2 = _get_targets(var, lists[get_players(var), player)",
      "39": "var target1, target2 = _get_targets(var, set_players(var), player)",
      "40": "target1, target2 = _get_targets(var, targets[get_players(var], player))",
      "41": "target1, target2 = _get_targets(var, sets(get_players(var), player)",
      "42": "target1, target2 = _get_targets(var, group(get_players(var), player)",
      "43": "target1, target2 = _get_targets(var, typing.List[User](get_players(var), player)",
      "44": "target1, target2 = _get_targets(var, set_list(get_players(var), player))",
      "45": "target1, target2 = (_get_targets(var, get_players(var), player))",
      "46": "target1, target2 = _get_targets(var, List(get_players(var), player))",
      "47": "target1, target2 = _get_targets(var, matches[get_players(var), player)",
      "48": "target1, target2 = _get_targets(var, typing.Set(get_players(var), player)",
      "49": "target1, target2 = _get_targets(var, player.get_players(), player)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "target_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_line": "    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 115,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "datatheorem/strongarm",
    "source_filename": "tests/utils.py",
    "target_filename": "tests/utils.py",
    "source_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36^",
    "target_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "predictions": [
      "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)"
    ],
    "correct": false,
    "top_five": {
      "0": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "1": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert binary is not None analyzer = MachoAnalyzer.get_analyzer(binary)",
      "2": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer()",
      "3": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not binary: assert binary is not None analyzer = MachoAnalyzer.get_analyzer(binary)",
      "4": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() async analyzer = MachoAnalyzer.get_analyzer(binary)",
      "5": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not compiled_code_bin_path: assert binary is not None analyzer = MachoAnalyzer.get_analyzer(binary)",
      "6": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(MachoBinary, compiled_code_bin_path) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "7": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if isinstance(MachoBinary, compiled_code_bin_path) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "8": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(compiled_code_bin_path)",
      "9": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyser = MachoAnalyzer.get_analyzer(binary)",
      "10": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(macro_analyzer, binary) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "11": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(MachoBinary, 'async') analyzer = MachoAnalyzer.get_analyzer(binary)",
      "12": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(MachoBinary, 'Analyzer') analyzer = MachoAnalyzer.get_analyzer(binary)",
      "13": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(MachoBinary, binary) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "14": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(binary, machoAnalyzer) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "15": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if isinstance(macro_analyzer, compiled_code_bin_path) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "16": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not binary: return analyzer = MachoAnalyzer.get_analyzer(binary)",
      "17": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(binary, 'Analyzer') analyzer = MachoAnalyzer.get_analyzer(binary)",
      "18": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if isinstance(macro_analyzer, compiled_code_bin_path): assert isinstance(macro_analyzer, binary) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "19": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if isinstance(macro_analyzer, compiled_code_bin_path): assert isinstance(macro_analyzer, compiled_code_bin_path) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "20": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer[compiled_code_bin_path]",
      "21": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() return compiled_code_bin_path analyzer = MachoAnalyzer.get_analyzer(binary)",
      "22": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert isinstance(macro, binary) analyzer = MachoAnalyzer.get_analyzer(binary)",
      "23": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() solver = MachoParser(compiled_code_bin_path).get_ascii() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "24": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not binary: return assert binary is not None analyzer = MachoAnalyzer.get_analyzer(binary)",
      "25": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() assert config is not None analyzer = MachoAnalyzer.get_analyzer(binary)",
      "26": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not binary is not None: analyzer = MachoAnalyzer.get_analyzer(binary)",
      "27": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(MachoBinary)",
      "28": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() examiner = MachoAnalyzer.get_analyzer(binary)",
      "29": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analysisr = MachoAnalyzer.get_analyzer(binary)",
      "30": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if isinstance(macro_analyzer, compiled_code_bin_path): analyzer = MachoAnalyzer.get_analyzer(binary)",
      "31": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() () analyzer = MachoAnalyzer.get_analyzer(binary)",
      "32": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() solver = MachoParser(compiled_code_bin_path).get_analyzer() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "33": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() optimizer = MachoAnalyzer.get_analyzer(binary)",
      "34": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho.macho_binary.MachoBinary)",
      "35": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macro_analyzer(binary))",
      "36": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not compiled_code_bin_path analyzer = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "37": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho_binary_path)",
      "38": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho_binary.MachoBinary)",
      "39": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho_binary, binary)",
      "40": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho_binary)",
      "41": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macro.MachoBinary)",
      "42": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer() return compiled_code_bin_path",
      "43": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(compiled_code_bin_path, binary)",
      "44": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not compiled_code_bin_path analyzer = MachoParser(compiled_code_bin_path).get_analyzer(binary)",
      "45": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer(get_analyzer(binary))",
      "46": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() analyzer = MachoAnalyzer.get_analyzer(macho_binary_path, binary)",
      "47": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not compiled_code_bin_path analyzer = MachoParser(compiled_code_bin_path).get_ascii() analyzer = MachoAnalyzer.get_analyzer(binary)",
      "48": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not compiled_code_bin_path: analyzer = MachoParser(compiled_code_bin_path).get_analyzer(binary)",
      "49": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice() if not compiled_code_bin_path analyzer = MachoParser(compiled_code_bin_path).get_analyzer_slice() analyzer = MachoAnalyzer.get_analyzer(binary)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "target_code": "                continue\n            assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_line": "            self.__check_destination_memo(account_resp, index, destination)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 410,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/server.py",
    "target_filename": "stellar_sdk/server.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "continue self.__check_destination_memo(account_resp, index, destination)"
    ],
    "correct": false,
    "top_five": {
      "0": "continue self.__check_destination_memo(account_resp, index, destination)",
      "1": "continue self.__check_destination_memo(account_resp, index, destination) assert account is not None self.__check_destination_memo(account_resp, index, destination)",
      "2": "continue self.__check_destination_memo(account_resp, index, destination) assert account_resp is not None self.__check_destination_memo(account_resp, index, destination)",
      "3": "continue self.__check_destination_memo(account_resp, index, destination) if not isinstance(destination): return self.__check_destination_memo(account_resp, index, destination)",
      "4": "continue self.__check_destination_memo(account_resp, index, destination) self.__check_destination_memo(account_resp, index, destination)",
      "5": "continue self.__check_destination_memo(account_resp, index, destination) if destination is not None: self.__check_destination_memo(account_resp, index, destination)",
      "6": "continue self.__check_destination_memo(account_resp, index, destination) return self.__check_destination_memo(account_resp, index, destination)",
      "7": "continue self.__check_destination_memo(account_resp, index, destination) if not account_resp: return self.__check_destination_memo(account_resp, index, destination)",
      "8": "continue self.__check_destination_memo(account_resp, index, destination) if isinstance(destination): return self.__check_destination_memo(account_resp, index, destination)",
      "9": "continue self.__check_destination_memo(account_resp, index, destination) if destination is not None: return self.__check_destination_memo(account_resp, index, destination)",
      "10": "continue assert account_resp is not None self.__check_destination_memo(account_resp, index, destination)",
      "11": "continue self.__check_destination_memo(account_resp, index, destination) self.__check_destination_memo(account_resp, index)",
      "12": "return self.__check_destination_memo(account_resp, index, destination)",
      "13": "continue self.__check_destination_memo(account_resp, index, destination) if not isinstance(destination): self.__check_destination_memo(account_resp, index, destination)",
      "14": "continue self.__check_destination_memo(account_resp, index, destination) if index is not None: return self.__check_destination_memo(account_resp, index, destination)",
      "15": "continue self.__check_destination_memo(account_resp, index, destination) if account_resp is None: return self.__check_destination_memo(account_resp, index, destination)",
      "16": "continue self.__check_destination_memo(account_resp, index, destination) if account_resp is None: self.__check_destination_memo(account_resp, index, destination)",
      "17": "continue self.__check_destination_memo(account_resp, index, destination).decode() self.__check_destination_memo(account_resp, index, destination)",
      "18": "continue self.__check_destination_memo(account_resp, index, destination) return self.__check_destination_memo(account_resp, index)",
      "19": "continue self.__check_destination_memo(account_resp, index, destination) if not isinstance(destination): return self.__check_destination_memo(account_resp, index)",
      "20": "continue self.__check_destination_memo(account_resp, index, destination) if account_resp is not None: self.__check_destination_memo(account_resp, index, destination)",
      "21": "continue self.__check_destination_memo(account_resp, index, destination) if destination is not None: self.__check_destination_memo(account_resp, index)",
      "22": "continue self.__check_destination_memo(account_resp, index, destination) if index is not None: self.__check_destination_memo(account_resp, index, destination)",
      "23": "continue self.__check_destination_memo(account_resp, index, destination) if destination is None: return self.__check_destination_memo(account_resp, index, destination)",
      "24": "continue self.__check_destination_memo(account_resp, index, destination) assert account is not None self.__check_destination_memo(account_resp, index)",
      "25": "continue self.__check_destination_memo(account_resp, index, destination) else: self.__check_destination_memo(account_resp, index, destination)",
      "26": "continue self.__check_destination_memo(account_resp, index, destination) if account is not None: self.__check_destination_memo(account_resp, index, destination)",
      "27": "continue self.__check_destination_memo(account_resp, index, destination).decode('utf-8') self.__check_destination_memo(account_resp, index, destination)",
      "28": "continue self.__check_destination_memo(account_resp, index, destination) if account_resp not None: self.__check_destination_memo(account_resp, index, destination)",
      "29": "continue self.__check_destination_memo(account_resp, index, destination) if destination is None: self.__check_destination_memo(account_resp, index, destination)",
      "30": "continue self.__check_destination_memo(account_resp, index, destination) if not account_resp: return self.__check_destination_memo(account_resp, index)",
      "31": "continue self.__check_destination_memo(account_resp, index, destination) -> None: self.__check_destination_memo(account_resp, index, destination)",
      "32": "continue self.__check_destination_memo(account_resp, index, destination) if index is not None: return self.__check_destination_memo(account_resp, index)",
      "33": "continue self.__check_destination_memo(account_resp, index, destination) if not isinstance(destination): self.__check_destination_memo(account_resp, index)",
      "34": "continue self.__check_destination_memo(account_resp, index, destination) if index is not None: self.__check_destination_memo(account_resp, index)",
      "35": "continue self.__check_destination_memo(account_resp, index, destination) if destination is not None: return self.__check_destination_memo(account_resp, index)",
      "36": "continue self.__check_destination_memo(account_resp, index, destination).__check_memo() self.__check_destination_memo(account_resp, index, destination)",
      "37": "continue self.__check_destination_memo(account_resp, index, destination) self.__check_destination_memo() return self.__check_destination_memo(account_resp, index, destination)",
      "38": "continue self.__check_destination_memo(account_resp(index), destination)",
      "39": "continue self.__check_destination_memo(account_resp, index, destination) if not destination: return self.__check_destination_memo(account_resp, index, destination)",
      "40": "continue self.__check_destination_memo(account_resp, index, destination, Dict()) self.__check_destination_memo(account_resp, index, destination)",
      "41": "continue self.__check_destination_memo(account_resp, index, destination) if isinstance(destination): return self.__check_destination_memo(account_resp, index)",
      "42": "continue self.__check_destination_memo(account_resp, index, destination, Dict[str, Any]) self.__check_destination_memo(account_resp, index, destination)",
      "43": "continue self.__check_destination_memo(account_resp, index, destination).decode() self.__check_destination_memo(account_resp, index)",
      "44": "continue self.__check_destination_memo(account_resp, index, destination) assert account_resp is not None self.__check_destination_memo(account_resp, index)",
      "45": "continue self.__check_destination_memo(account_resp, index, destination) if account_resp is None: return self.__check_destination_memo(account_resp, index)",
      "46": "continue self.__check_destination_memo(account_resp, index, destination) if account_resp is None: self.__check_destination_memo(account_resp, index)",
      "47": "continue self.__check_destination_memo(account_resp, index, destination) self.__check_destination_memo(ccount_resp, index, destination)",
      "48": "continue self.__check_destination_memo(account_resp, index, destination) if destination is None: return self.__check_destination_memo(account_resp, index)",
      "49": "continue self.__check_destination_memo(account_resp, index, destination) if destination is None: self.__check_destination_memo(account_resp, index)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_line": "                    else is_true(simplify(condition))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1357,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "if type(condition) == bool else is_true(simplify(condition)) )"
    ],
    "correct": false,
    "top_five": {
      "0": "if type(condition) == bool else is_true(simplify(condition)) )",
      "1": "if type(condition) == bool else is_true(condition) )",
      "2": "if type(condition) == bool else is_true(Expression(condition)) )",
      "3": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Expression(condition)) )",
      "4": "if type(condition) == bool else is_true(int(condition)) )",
      "5": "if type(condition) == bool else is_true(Create(simplify(condition))) )",
      "6": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Expression(condition)) )",
      "7": "if type(condition) == bool else is_true((condition)) )",
      "8": "if type(condition) == bool else is_true(Bool(simplify(condition))) )",
      "9": "if type(condition) == bool else is_true(Simplify(condition)) )",
      "10": "if type(condition) == bool else is_true(expression) )",
      "11": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Expression) )",
      "12": "if type(condition) == bool else is_true(Optional[simplify(condition])) )",
      "13": "if type(condition) == bool else is_true(False) )",
      "14": "if type(condition) == bool else is_true(async(condition)) )",
      "15": "if type(condition) == bool else is_true(pythril.laser.smt.expression.Expression) )",
      "16": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Expression) )",
      "17": "if type(condition) == bool else is_true(require(simplify(condition))) )",
      "18": "if type(condition) == bool else is_true(insert(condition)) )",
      "19": "if type(condition) == bool else is_true(equal(simplify(condition))) )",
      "20": "if type(condition) == bool else is_true(Issue(simplify(condition))) )",
      "21": "if type(condition) == bool else is_true(basic(condition)) )",
      "22": "if type(condition) == bool else is_true(Create(condition)) )",
      "23": "if type(condition) == bool else is_true(pythril.laser.smt.Expression(condition)) )",
      "24": "if type(condition) == bool else is_true(Equal(simplify(condition))) )",
      "25": "if type(condition) == bool else is_true(Expression.Simplify(condition)) )",
      "26": "if type(condition) == bool else is_true(...condition) )",
      "27": "if type(condition) == bool else is_true(btn.Simplify(condition)) )",
      "28": "if type(condition) == bool else is_true((simplify(condition))) )",
      "29": "if type(condition) == bool else is_true(Expression.simplify(condition)) )",
      "30": "if type(condition) == bool else is_true(expression.Simplify(condition)) )",
      "31": "if type(condition) == bool else is_true(pythril.mythril.laser.smt.expression.Expression) )",
      "32": "if type(condition) == bool else is_true(null, simplify(condition)) )",
      "33": "if type(condition) == bool else is_true(String(condition)) )",
      "34": "if type(condition) == bool else is_true(ctx) )",
      "35": "if type(condition) == bool else is_true(null, simple(condition)) )",
      "36": "if type(condition) == bool else is_true(false) )",
      "37": "if type(condition) == bool else is_true(expression(condition)) )",
      "38": "if type(condition) == bool else is_true(Pool.Simplify(condition)) )",
      "39": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Expression, simple(condition)) )",
      "40": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Simplify(condition)) )",
      "41": "if type(condition) == bool else bool = simple(condition) )",
      "42": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Simplify(condition)) )",
      "43": "if type(condition) == bool else is_true(mythril.laser.smt.expression.Expression, simplify(condition)) )",
      "44": "if type(condition) == bool else is_true(Math.random().Simplify(condition)) )",
      "45": "if type(condition) == bool else is_true(mythril.laser.smt.Expression(condition)) )",
      "46": "if type(condition) == bool else is_true(Alias.Simplify(condition)) )",
      "47": "if type(condition) == bool else bool = Simple(condition) )",
      "48": "if type(condition) == bool else is_true(pythril.laser.smt.expression.Expression(condition)) )",
      "49": "if type(condition) == bool else is_true(mythril.laser.smt.Expression.Simplify(condition)) )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "target_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_line": "                    cmd [\"singularity\", \"build\", name,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/singularity.py",
    "target_filename": "cwltool/singularity.py",
    "source_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61^",
    "target_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "predictions": [
      "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]"
    ],
    "correct": false,
    "top_five": {
      "0": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "1": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "2": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd[\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "3": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"utility\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "4": "name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "5": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd[\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "6": "name = \" ^ }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "7": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"util\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "8": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "9": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, 'docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "10": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [singularity, build, name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "11": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] = []",
      "12": "name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "13": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [singularity, \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "14": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) -> None: cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "15": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name,...\"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "16": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] -> None:",
      "17": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"utilities\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "18": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]:",
      "19": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) callback() cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "20": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) if not name is None: cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "21": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd[singularity, \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "22": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// ^ } \".format(dockerRequirement[\"dockerLoad\"])]",
      "23": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", [build], name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "24": "name = \" ^ }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "25": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) if name is None: cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "26": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) str = str cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "27": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) if name is not None: cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "28": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"building\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "29": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] = []",
      "30": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) assert name is not None cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "31": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\"], \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "32": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] if name is not None:",
      "33": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])] cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "34": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"module\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "35": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", \"build\", name, [\"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "36": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"singularity\", build, name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "37": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\",build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "38": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"global\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "39": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [] = [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])",
      "40": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"container\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "41": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] -> None:",
      "42": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"type\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "43": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd[\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] = []",
      "44": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [[\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "45": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd = [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "46": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd ['singularity', \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "47": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [\"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]:",
      "48": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd [build, name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]",
      "49": "name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) cmd[singularity, build, name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": true,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\\n')\n    elif not order+'\\n' in target:\n",
    "target_code": "    if '--out' in sys.argv:\n        outfile.write(order+'\\n')\n    elif not order+'\\n' in target:\n",
    "warning_line": "        outfile.write(order.encode('utf8')+'\\n')",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 82,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "psychopy/psychopy",
    "source_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "target_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3^",
    "target_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "predictions": [
      "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:"
    ],
    "correct": false,
    "top_five": {
      "0": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "1": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "2": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8'))+' \\ n') elif not order+' \\ n' in target:",
      "3": "if '--out' in sys.argv: outfile.write(order+' \\ n') elif not order+' \\ n' in target:",
      "4": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8') +'\\ n')) elif not order+' \\ n' in target:",
      "5": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "6": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8') +'\\ n') elif not order+' \\ n' in target:",
      "7": "if '--out' in sys.argv: outfile.write(int(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "8": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(str(order.encode('utf8'))) elif not order+' \\ n' in target:",
      "9": "if '--out' in sys.argv: outfile.write(str(order['utf8'])+' \\ n') elif not order+' \\ n' in target:",
      "10": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(order+' \\ n' in target) elif not order+' \\ n' in target:",
      "11": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "12": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n'), str) elif not order+' \\ n' in target:",
      "13": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n') outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "14": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(str(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "15": "if '--out' in sys.argv: outfile.write(outfile.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "16": "if '--out' in sys.argv: outfile.write(txt(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "17": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' ^ n')) elif not order+' \\ n' in target:",
      "18": "if '--out' in sys.argv: outfile.write(bitmap(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "19": "if '--out' in sys.argv: if not sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "20": "if '--out' in sys.argv: outfile.write(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "21": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' ^ n' in target:",
      "22": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(str(order.encode('utf8'))+' \\ n') elif not order+' \\ n' in target:",
      "23": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target: outfile.write(str(order.encode('utf8')+' \\ n'))",
      "24": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' } n' in target:",
      "25": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8') + \" \\ n')) elif not order+' \\ n' in target:",
      "26": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' } n')) elif not order+' \\ n' in target:",
      "27": "if '--out' in sys.argv: outfile.write(format(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "28": "if '--out' in sys.argv: outfile.write(list(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "29": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n') outfile.write(str(order.encode('utf8'))) elif not order+' \\ n' in target:",
      "30": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n') outfile.write(str(order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "31": "if '--out' in sys.argv: outfile.write(os.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "32": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n'), str(str)) elif not order+' \\ n' in target:",
      "33": "if '--out' in sys.argv: outfile.write((order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "34": "if '--out' in sys.argv: outfile.write(list(order.encode('utf8')+' \\ n')) elif not list(order+' \\ n' in target:",
      "35": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(str(order.encode('utf8') +'\\ n')) elif not order+' \\ n' in target:",
      "36": "if '--out' in sys.argv: if not order: outfile.write(str(' \\ n')+' \\ n') elif not order+' \\ n' in target:",
      "37": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')), elif not order+' \\ n' in target:",
      "38": "if '--out' in sys.argv: outfile.write(str(order.encode('Utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "39": "if '--out' in sys.argv: outfile.write(bytes+' \\ n') elif not order+' \\ n' in target:",
      "40": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')] elif not order+' \\ n' in target:",
      "41": "if '--out' in sys.argv: outfile.write(str(order+' \\ n')) elif not order+' \\ n' in target:",
      "42": "if '--out' in sys.argv: if not isinstance(order.encode('utf8')+' \\ n'): outfile.write(str(order.encode('utf8')) +'\\ n') elif not order+' \\ n' in target:",
      "43": "if '--out' in sys.argv: outfile.write(outfile.encode(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "44": "if '--out' in sys.argv: outfile.write(set(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:",
      "45": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target: write(str(order.encode('utf8')+' \\ n'))",
      "46": "if '--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n'), elif not order+' \\ n' in target:",
      "47": "if '--out' in sys.argv: outfile.write(str(order.encode('utf-8')+' \\ n')) elif not order+' \\ n' in target:",
      "48": "if '--out' in sys.argv: outfile.write('+order.encode('utf8')+' \\ n') elif not order+' \\ n' in target:",
      "49": "'--out' in sys.argv: outfile.write(str(order.encode('utf8')+' \\ n')) elif not order+' \\ n' in target:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n\n",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            state[config.url_id] = scrapper_stat\n\n",
    "warning_line": "        state[config.url_id] = scrapper_stat",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "obsei/obsei",
    "source_filename": "obsei/source/reddit_scrapper.py",
    "target_filename": "obsei/source/reddit_scrapper.py",
    "source_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c^",
    "target_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "predictions": [
      "last_index = since_id state[config.url_id] = str(str)"
    ],
    "correct": false,
    "top_five": {
      "0": "last_index = since_id state[config.url_id] = str(str)",
      "1": "last_index = since_id assert isinstance(str, config.url_id) state[config.url_id] = scrapper_stat",
      "2": "last_index = since_id assert since_id state[config.url_id] = scrapper_stat",
      "3": "last_index = since_id assert since_id is not None state[config.url_id] = scrapper_stat",
      "4": "last_index = since_id assert wasinstance(str, config.url_id) state[config.url_id] = scrapper_stat",
      "5": "last_index = since_id assert config.url_id is not None state[config.url_id] = scrapper_stat",
      "6": "last_index = since_id if isinstance(str, config.url_id): state[config.url_id] = scrapper_stat",
      "7": "last_index = since_id state[config.url_id] = str(str(str))",
      "8": "last_index = since_id if not isinstance(str, config.url_id): state[config.url_id] = scrapper_stat",
      "9": "last_index = since_id assert isinstance(str, config.url_id) state[item_id] = scrapper_stat",
      "10": "last_index = since_id state[config.url_id] = str(str) state[config.url_id] = scrapper_stat",
      "11": "last_index = since_id if not isinstance(str, config.url_id): state[str] = scrapper_stat",
      "12": "last_index = since_id assert isinstance(str, config.url_id) state[str] = scrapper_stat",
      "13": "last_index = since_id state[config.url_id] = list(str)",
      "14": "last_index = since_id state[config.url_id] = str(str) if not isinstance(str, config.url_id): assert isinstance(str, config.url_id) state[config.url_id] = scrapper_stat",
      "15": "last_index = since_id assert isinstance(str, config.url_id) state[url_id] = scrapper_stat",
      "16": "last_index = since_id assert last_item is not None state[config.url_id] = scrapper_stat",
      "17": "last_index = since_id if not since_id isinstance(str, config.url_id) = scrapper_stat",
      "18": "last_index = since_id state[config.url_id] = dict() state[str] = scrapper_stat",
      "19": "last_index = since_id state[config.url_id] = dict() state[config.url_id] = scrapper_stat",
      "20": "last_index = since_id if not since_id isinstance(str, config.url_id) = scrapper_stat state[str, config.url_id] = scrapper_stat",
      "21": "last_index = since_id assert isinstance(str, config.url_id) state[config.url_id] = scrapper_stat assert isinstance(str, config.url_id)",
      "22": "last_index = since_id state[config.url_id] = str(str) if not state[config.url_id] = scrapper_stat",
      "23": "last_index = since_id state[config.url_id] = str() state[config.url_id] = scrapper_stat",
      "24": "last_index = since_id if isinstance(str, config.url_id): state[str] = scrapper_stat",
      "25": "last_index = since_id if not since_id state[config.url_id] = scrapper_stat",
      "26": "last_index = since_id state[config.url_id] = str(str(str)) if not state[config.url_id] = scrapper_stat",
      "27": "last_index = since_id state[str, config.url_id] = scrapper_stat",
      "28": "last_index = since_id state[str] = str(str) state[config.url_id] = scrapper_stat",
      "29": "last_index = since_id if not since_id isinstance(str, config.url_id): state[str] = scrapper_stat",
      "30": "last_index = since_id if not since_id isinstance(str, config.url_id): state[config.url_id] = scrapper_stat",
      "31": "last_index = since_id assert since_id state[config.url_id] = scrapper_stat assert since_id is not None state[config.url_id] = scrapper_stat",
      "32": "last_index = since_id assert isinstance(str, config.url_id) state[id] = scrapper_stat",
      "33": "last_index = since_id state[config.url_id] = dict.__set_item__() state[config.url_id] = scrapper_stat",
      "34": "last_index = since_id assert last_id is not None state[config.url_id] = scrapper_stat",
      "35": "last_index = since_id state[config.url_id] = str(str(str)) state[config.url_id] = scrapper_stat",
      "36": "last_index = since_id state[config.url_id] = str() state[str] = scrapper_stat",
      "37": "last_index = since_id state[config.url_id] = dict(str)",
      "38": "last_index = since_id state[config.url_id] = config.url_id",
      "39": "last_index = since_id if isinstance(str, config.url_id): state[config.url_id] = scrapper_stat if isinstance(str, config.url_id):",
      "40": "last_index = since_id state[config.url_id] = str(str) if not since_id state[config.url_id] = scrapper_stat",
      "41": "last_index = since_id assert isinstance(str, config.url_id) state[config.url_id] = scrapper_stat if isinstance(str, config.url_id)",
      "42": "last_index = since_id state[config.url_id] = str(str) state[url_id] = scrapper_stat",
      "43": "last_index = since_id state[config.url_id] = \"\" state[config.url_id] = scrapper_stat",
      "44": "last_index = since_id if not since_id isinstance(str, config.url_id) = scrapper_stat state[config.url_id] = str",
      "45": "last_index = since_id assert state[config.url_id] = scrapper_stat",
      "46": "last_index = since_id if not since_id state[config.url_id] = dict.__set_item__(str) state[config.url_id] = scrapper_stat",
      "47": "last_index = since_id state[config.url_id] = str(str) if not isinstance(str, config.url_id) state[config.url_id] = scrapper_stat",
      "48": "last_index = since_id state[config.url_id] = dict() state[url_id] = scrapper_stat",
      "49": "last_index = since_id state[config.url_id] = str(str(str)) if not isinstance(str, config.url_id) state[config.url_id] = scrapper_stat"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            data,\n            1337,\n            'promote',\n",
    "target_code": "            data,\n            UserID(1337),\n            'promote',\n",
    "warning_line": "            1337,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `UserID` for 2nd positional only parameter to call `JubeatProp._modify_profile` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/tests/test_JubeatProp.py",
    "target_filename": "bemani/tests/test_JubeatProp.py",
    "source_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7^",
    "target_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7",
    "predictions": [
      "data, UserID(1337), 'promote',"
    ],
    "correct": true,
    "top_five": {
      "0": "data, UserID(1337), 'promote',",
      "1": "data, userID(1337), 'promote',",
      "2": "data, UserID(1337), 'promote',",
      "3": "data, UsersID(1337), 'promote',",
      "4": "data, UserID(1377), 'promote',",
      "5": "data, UserID.UserID(1337), 'promote',",
      "6": "data, UserID(1337), 'promote',",
      "7": "data, UserID(1367), 'promote',",
      "8": "data, UserID (1337), 'promote',",
      "9": "data, UserID(1337), 'Promote',",
      "10": "data, UserID(1397), 'promote',",
      "11": "data, UserID.ID(1337), 'promote',",
      "12": "data: UserID(1337), 'promote',",
      "13": "data.UserID(1337), 'promote',",
      "14": "data.userID(1337), 'promote',",
      "15": "data, UserID.userID(1337), 'promote',",
      "16": "data, UserID(1337), \"Promote\", 'promote',",
      "17": "data, UserID(1307), 'promote',",
      "18": "data, UserID(1317), 'promote',",
      "19": "data, UserID(1336), 'promote',",
      "20": "data, username, UserID(1337), 'promote',",
      "21": "data, usernameID(1337), 'promote',",
      "22": "data, UserID(1387), 'promote',",
      "23": "data = UserID(1337), 'promote',",
      "24": "data, UserID(1337), 'property',",
      "25": "data,userID(1337), 'promote',",
      "26": "data, UserID(1337), ['promote',",
      "27": "data, UserID(1337), 'promote',",
      "28": "data, UserID(1339), 'promote',",
      "29": "data, UserID(1337), 'property', 'promote',",
      "30": "data, UserID=1337), 'promote',",
      "31": "data, UserID = 1337, 'promote',",
      "32": "data, UserID(1337), \"promote\",",
      "33": "data, UserID_1337), 'promote',",
      "34": "data, UserID(137), 'promote',",
      "35": "data, UserID337, 'promote',",
      "36": "data, UserID(1337), 'property_id', 'promote',",
      "37": "data, UserID(2013), 'promote',",
      "38": "data, UserID(1337), 'promote', raise ValueError(\"UserID not found!\"),",
      "39": "data, UserID(1337), 'promote', raise ValueError('UserID must be UserID.')",
      "40": "data, UserID(1337), 'promote', raise ValueError('UserID not found'),",
      "41": "data, UserID(1337), 'promote', raise ValueError('UserID not found!'),",
      "42": "data, UserID(1337), 'promote', raise ValueError('UserID must be UserID first.')",
      "43": "data, UserID(1337), 'promote', raise ValueError('UserID not found!')",
      "44": "data, UserID(1337), 'promote', raise ValueError('UserID not found.')",
      "45": "data, UserID(1347), 'promote',",
      "46": "data, UserID(1337), 'promote', raise ValueError(f'UserID not found!'),",
      "47": "data, UsersID(1337), 'promote',",
      "48": "data, BenutzerID(1337), 'promote',",
      "49": "data, UserID(1337), 'promote', raise ValueError('UserID must be UserID first'),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "target_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_line": "                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 547,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "electrumsv/electrumsv",
    "source_filename": "examples/applications/restapi/handler_utils.py",
    "target_filename": "examples/applications/restapi/handler_utils.py",
    "source_changeid": "2132e0922ed952c7eb61f639b57182657532a757^",
    "target_changeid": "2132e0922ed952c7eb61f639b57182657532a757",
    "predictions": [
      "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0])"
    ],
    "correct": false,
    "top_five": {
      "0": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0])",
      "1": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data)",
      "2": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2)",
      "3": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data_2)",
      "4": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data, Optional[bytes])",
      "5": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[1])",
      "6": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0], key.derivation_data[1])",
      "7": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): assert key.derivation_data2 is not None derivation_path = unpack_derivation_path(key.derivation_data2)",
      "8": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data1)",
      "9": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): if key.derivation_data is None: derivation_path = unpack_derivation_path(key.derivation_data2)",
      "10": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]]",
      "11": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[2])",
      "12": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]) else:",
      "13": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data).derivation_path()",
      "14": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data);",
      "15": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data.split())",
      "16": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data, Optional[str])",
      "17": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): assert key.derivation_data is not None derivation_path = unpack_derivation_path(key.derivation_data2)",
      "18": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data, 2)",
      "19": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): if key.derivation_data2 is None: derivation_path = unpack_derivation_path(key.derivation_data2)",
      "20": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0], key.derivation_data])",
      "21": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] if key.derivation_data is not None:",
      "22": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key[key.derivation_data])",
      "23": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path()",
      "24": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0].derivation_data])",
      "25": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data2[0])",
      "26": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] if key.derivation_data is None:",
      "27": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data).decode()",
      "28": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0], Key.derivation_data[1])",
      "29": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data.split(2))",
      "30": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] if key.derivation_data2 is not None:",
      "31": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data())",
      "32": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data) else:",
      "33": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data, [])",
      "34": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data).remove()",
      "35": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] if key.derivation_data2 is None:",
      "36": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key[derivation_data])",
      "37": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data.join(\"\"))",
      "38": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0], key.derivation_data[2])",
      "39": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data, 2)",
      "40": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data_1)",
      "41": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] if key.derivation_data is None: else:",
      "42": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] if key.derivation_data is not None: else:",
      "43": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data=0)",
      "44": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data1, key.derivation_data2)",
      "45": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data(key.derivation_data))",
      "46": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data); else:",
      "47": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data[0]] )",
      "48": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data1).derivation_path()",
      "49": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): derivation_path = unpack_derivation_path(key.derivation_data0, key.derivation_data2)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        return Interpreter(self.pipeline, context=init_context, config=self.config)\n\n",
    "target_code": "\n        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_line": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 190,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crownpku/Rasa_NLU_Chi",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "return Interpreter(self.pipeline, context=init_context, config=self.config)"
    ],
    "correct": false,
    "top_five": {
      "0": "return Interpreter(self.pipeline, context=init_context, config=self.config)",
      "1": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any])",
      "2": "return Interpreter(self.pipeline, context=entity.init_context, config=entity.config)",
      "3": "return Interpreter(self.pipeline, context=RasaNLUContext, config=self.config)",
      "4": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any])",
      "5": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any])",
      "6": "return Interpreter(self.pipeline, context=init_context, config=dict[str, Any])",
      "7": "return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any])",
      "8": "return Interpreter(self.pipeline, context=Init_context, config=self.config)",
      "9": "return Interpreter(self.pipeline, context=init_context, config=str.config)",
      "10": "return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any])",
      "11": "return Interpreter(self.pipeline, context=init_context, config=init_config)",
      "12": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any])",
      "13": "return Interpreter(self.pipeline, context=entities.init_context, config=entities.config)",
      "14": "return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any]) return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any])",
      "15": "return Interpreter(self.pipeline, context=init_context, config=self.config) raise NotImplementedError",
      "16": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=self.config)",
      "17": "return Interpreter(self.pipeline, context=Entity.init_context, config=Entity.config.config)",
      "18": "return Interpreter(self.pipeline, context=Dict[str, Any])",
      "19": "return Interpreter(self.pipeline, context=init_context, config=str(self.config))",
      "20": "return Interpreter(self.pipeline, context=init_context, config=init_context)",
      "21": "return Interpreter(self.pipeline, context=init_context, config=self.config.str())",
      "22": "return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())",
      "23": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any]) return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any])",
      "24": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=Dict[str], config=Dict[str, Any])",
      "25": "return Interpreter(self.pipeline, context=str, config=init_context)",
      "26": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any]) return Interpreter(self.pipeline, context=Init_context, config=Dict[str, Any])",
      "27": "return Interpreter(self.pipeline, context=str, config=self.config)",
      "28": "return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any]) return Interpreter(self.pipeline, context=Init_context, config=Dict[str, Any])",
      "29": "return Interpreter(self.pipeline, context=init_context, config=dict(self.config))",
      "30": "return Interpreter(self.pipeline, context=init_context, config=Dict(self.config))",
      "31": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=self.config)",
      "32": "return Interpreter(self.pipeline, context=text, config=self.config)",
      "33": "return Interpreter(self.pipeline, context=init_context, config=RasaNLUConfig(self.config))",
      "34": "return Interpreter(self.pipeline, context=init_context, config=self.config.list)",
      "35": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=self.config",
      "36": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any]) return Interpreter(self.pipeline, context=Dict[str], config=Dict[str, Any])",
      "37": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=Init_context, config=Dict[str, Any])",
      "38": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=Dict[str])",
      "39": "return Interpreter(self.pipeline, context=init_context, config=self.config.dict())",
      "40": "return Interpreter(self.pipeline, context=to_init_context, config=to_self.config)",
      "41": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=Dict[init_context], config=Dict[str, Any])",
      "42": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) raise ValueError(\"Dict[str, Any] is not None\")",
      "43": "return Interpreter(self.pipeline, context=Dict[str, Any]), config=Dict[str, Any]) return Interpreter(self.pipeline, context=init_context, config=Interpreter.config.config)",
      "44": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=Dict[str, Any])",
      "45": "return Interpreter(self.pipeline, context=init_context, config=Base64.config)",
      "46": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) raise TypeError(\"Dict[str, Any] is not None\")",
      "47": "return Interpreter(self.pipeline, context=args.init_context, config=self.config)",
      "48": "return Interpreter(self.pipeline, context=Dict[str, Any], config=self.config)",
      "49": "return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) return Interpreter(self.pipeline, context=RasaNLUContext(init_context), config=Dict[str, Any])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": true,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)\n",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_line": "                           scale,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 883,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/draw_commands.py",
    "target_filename": "arcade/draw_commands.py",
    "source_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd^",
    "target_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "predictions": [
      "draw_texture_rectangle(center_x, center_y, texture, scale, angle=angle, alpha=alpha)"
    ],
    "correct": true,
    "top_five": {
      "0": "draw_texture_rectangle(center_x, center_y, texture, scale, angle=angle, alpha=alpha)",
      "1": "draw_texture_rectangle(center_x, center_y, texture, angle=angle, alpha=alpha)",
      "2": "draw_texture_rectangle(center_x, center_y, texture, scale, texture, angle=angle, alpha=alpha)",
      "3": "draw_texture_rectangle(center_x, center_y, scale, texture, angle=angle, alpha=alpha)",
      "4": "draw_texture_rectangle(center_x, center_y, texture_texture, scale, texture, angle=angle, alpha=alpha)",
      "5": "draw_texture_rectangle(center_x, center_y, height, texture, angle=angle, alpha=alpha)",
      "6": "draw_texture_rectangle(center_x, center_y, texture, scale=arcade.Texture, angle=angle, alpha=alpha)",
      "7": "draw_texture_rectangle(center_x, center_y, texture.Texture, scale, texture, angle=angle, alpha=alpha)",
      "8": "draw_texture_rectangle(center_x, center_y, depth, texture, angle=angle, alpha=alpha)",
      "9": "draw_texture_rectangle(center_x, center_y, texture=texture, angle=angle, alpha=alpha)",
      "10": "draw_texture_rectangle(center_x, center_y, texture, scale=texture, angle=angle, alpha=alpha)",
      "11": "draw_texture_rectangle(center_x, center_y, texturized_texture, scale, texture, angle=angle, alpha=alpha)",
      "12": "draw_texture_rectangle(center_x, center_y, color, texture, angle=angle, alpha=alpha)",
      "13": "draw_texture_rectangle(center_x, center_y, font_type, texture, angle=angle, alpha=alpha)",
      "14": "draw_texture_rectangle(center_x, center_y, alpha=alpha, scale=angle, texture=texture, angle=angle, alpha=alpha)",
      "15": "draw_texture_rectangle(center_x, center_y, angle=angle, alpha=alpha)",
      "16": "draw_texture_rectangle(center_x, center_y, gesture_texture, scale, gesture_texture, angle=angle, alpha=alpha)",
      "17": "draw_texture_rectangle(center_x, center_y, scale=angle, texture=texture, angle=angle, alpha=alpha)",
      "18": "draw_texture_rectangle(center_x, center_y, texturization.Texture, scale, texture, angle=angle, alpha=alpha)",
      "19": "draw_texture_rectangle(center_x, center_y, geometry, scale, texture, angle=angle, alpha=alpha)",
      "20": "draw_texture_rectangle(center_x, center_y, texture, scale=args, angle=angle, alpha=alpha)",
      "21": "draw_texture_rectangle(center_x, center_y, texture, scale=Radius, angle=angle, alpha=alpha)",
      "22": "draw_texture_rectangle(center_x, center_y, font_texture, scale, texture, angle=angle, alpha=alpha)",
      "23": "draw_texture_rectangle(center_x, center_y, texture_color, scale, texture, angle=angle, alpha=alpha)",
      "24": "draw_texture_rectangle(center_x, center_y, animation_texture, scale, texture, angle=angle, alpha=alpha)",
      "25": "draw_texture_rectangle(center_x, center_y, texture, size, angle=angle, alpha=alpha)",
      "26": "draw_texture_rectangle(center_x, center_y, texture.Texture, scale, angle=angle, alpha=alpha)",
      "27": "draw_texture_rectangle(center_x, center_y, (scale, texture, angle=angle, alpha=alpha)",
      "28": "draw_texture_rectangle(center_x, center_y, font_type, scale, texture, angle=angle, alpha=alpha)",
      "29": "draw_texture_rectangle(center_x, center_y, Texture, scale, texture, angle=angle, alpha=alpha)",
      "30": "draw_texture_rectangle(center_x, center_y, color, scale, texture, angle=angle, alpha=alpha)",
      "31": "draw_texture_rectangle(center_x, center_y, (scale, texture), angle=angle, alpha=alpha)",
      "32": "draw_texture_rectangle(center_x, center_y,..., scale, texture, angle=angle, alpha=alpha)",
      "33": "draw_texture_rectangle(center_x, center_y, gesture_texture, scale, texture, angle=angle, alpha=alpha)",
      "34": "draw_texture_rectangle(center_x, center_y, resolution, texture, angle=angle, alpha=alpha)",
      "35": "draw_texture_rectangle(center_x, center_y, canvas_texture, scale, texture, angle=angle, alpha=alpha)",
      "36": "draw_texture_rectangle(center_x, center_y, thickness, texture, angle=angle, alpha=alpha)",
      "37": "draw_texture_rectangle(center_x, center_y, approx.scale, texture, angle=angle, alpha=alpha)",
      "38": "draw_texture_rectangle(center_x, center_y, size, texture, angle=angle, alpha=alpha)",
      "39": "draw_texture_rectangle(center_x, center_y, texture(texture), angle=angle, alpha=alpha)",
      "40": "draw_texture_rectangle(center_x, center_y, elevation, texture, angle=angle, alpha=alpha)",
      "41": "draw_texture_rectangle(center_x, center_y, texture, scale=angle, alpha=alpha)",
      "42": "draw_texture_rectangle(center_x, center_y, texture_type, scale=texture_type, angle=angle, alpha=alpha)",
      "43": "draw_texture_rectangle(center_x, center_y, texture, depth, angle=angle, alpha=alpha)",
      "44": "draw_texture_rectangle(center_x, center_y, texture, texture, angle=angle, alpha=alpha)",
      "45": "draw_texture_rectangle(center_x, center_y, texture, scale = 0, angle=angle, alpha=alpha)",
      "46": "draw_texture_rectangle(center_x, center_y, gesture_texture, texture, angle=angle, alpha=alpha)",
      "47": "draw_texture_rectangle(center_x, center_y, texture, scale=r, angle=angle, alpha=alpha)",
      "48": "draw_texture_rectangle(center_x, center_y, texture(scala, center_y), angle=angle, alpha=alpha)",
      "49": "draw_texture_rectangle(center_x, center_y, (scale, texture, angle=angle), alpha=alpha)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelSettled.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 542,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier']),",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_address=to_canonical_address(data['block_address']),",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_name=to_canonical_address(data['token_network_name']),",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_address=to_canonical_address(data['token_network_address(data['token_net",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_proxy=typing.BlockNumber(to_canonical_address(data['block_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CaseID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), isinstance=to_canonical_address(data['isinstance']),",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CallableID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_proxy=typing.BlockNumber(to_canonical_address(data['block_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_proxy=to_canonical_address(data['block_proxy']),",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CachedID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=typing.to_canonical_address(data['token_network_identifier']),",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), has_address=to_canonical_address(data['has_address']),",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_number=typing.BlockNumber(int(data['block_number']),",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_proxy=typing.BlockNumber(to_canonical_address(data['block_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.Int(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.BlockID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_proxy=typing.BlockNumber(to_canonical_address(data['block_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_proxy_",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier']),",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_address=typing.BlockNumber(int(data['block_address']),",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), other_network_identifier=to_canonical_address(data['other_network_identifier']),",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_number=typing.BlockNumber(to_canonical_address(data['block_number']),",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_name=typing.BlockNumber(int(data['block_name'])),",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CallID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_id=typing.BlockID(int(data['block_id'])),",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), list_id=to_canonical_address(data['list_id']),",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier_name']),",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_id=to_canonical_address(data['token_network_id_name']),",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']))), block_number=typing.BlockNumber(int(data['block_number'])),",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_net",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_id=to_canonical_address(data['token_id']),",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_id=to_canonical_address(data['token_network_id_type']),",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), transaction_id=to_canonical_address(data[' transaction_id']),",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_address(",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), number=typing.Number(number),",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_network_identifier=to_canonical_address(data['block_network_identifier']),",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.Number(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_id=to_canonical_address(data['token_network_id']),",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.Optional[typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])),",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_id=to_canonical_address(data['token_network_id_address(data['token_net",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_identifier=to_canonical_address(data['token_network_identifier_identifier']),",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), ),",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_identifier=typing.BlockNumber(int(data['block_identifier'])),",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), token_network_id=to_canonical_address(data['token_network_identifier']),",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_address=typing.BlockAddress(data['block_address']),",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), block_identifier=typing.BlockID(int(data['block_identifier'])),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    )\n                result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "target_code": "                    )\n                result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "warning_line": "                result = json_loads(serialized)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `json_loads` but got `bytearray`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 189,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jamesoff/simplemonitor",
    "source_filename": "simplemonitor/Loggers/network.py",
    "target_filename": "simplemonitor/Loggers/network.py",
    "source_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd^",
    "target_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd",
    "predictions": [
      ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])"
    ],
    "correct": true,
    "top_five": {
      "0": ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "1": ") result = bytearray(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "2": ") result = byte_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "3": ") result = bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "4": ") result = json_loads(bytearray(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "5": ") result_bytes = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "6": ") result = json_loads(byte_array(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "7": ") result = json_loads(bytebytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "8": ") result = json_loads(bytes(bytes)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "9": ") result = json_loads(byte_length(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "10": ") result = json_loads(bytelength(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "11": ") result_bytes = json_loads(bytebytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "12": ") result = json_loads(byte_bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "13": ") result = bytearrays(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "14": ") result = json_loads(bytearrays(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "15": ") result_bytes = json_loads(byte_bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "16": ") result = byte_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "17": ") result = json_loads(bytearr(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "18": ") result = json_loads(byte_arrays(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "19": ") result.bytes = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "20": ") result = json_loads(bytebyte_length(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "21": ") result = byte_load(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "22": ") result = parse_bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "23": ") result = json_loads(byte_args(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "24": ") result = msg(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "25": ") result = bytebytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "26": ") result = int(json_loads(serialized)) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "27": ") result = bytearray_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "28": ") result_stream = json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "29": ") result = json_loads(bytearray) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "30": ") result = serialized(bytes) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "31": ") result = json_loads(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "32": ") result = serialized(bytearray) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "33": ") result_bytes = bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "34": ") result = params(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "35": ") result = bits(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "36": ") result = _bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "37": ") result = json_loads() self.simplemonitor.update_remote_monitor(result, addr[0])",
      "38": ") result = byte_loads(serialized); self.simplemonitor.update_remote_monitor(result, addr[0])",
      "39": ") result = json_loads(byte_array) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "40": ") result = b_bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "41": ") result = byte_length(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "42": ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, bytes[0])",
      "43": ") result = bytearr(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "44": ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, addingr[0])",
      "45": ") result = bytelength(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "46": ") result=bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "47": ") result = bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "48": ") result = from_bytes(serialized) self.simplemonitor.update_remote_monitor(result, addr[0])",
      "49": ") result = json_loads(bytes(serialized)) self.simplemonitor.update_remote_monitor(result, byte[0])"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            target_state=data['target_state'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `TargetTask.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 223,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier']), target_state=data['target_state'],",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_name=typing.ChannelID(int(data['channel_name'])), target_state=data['target_state'],",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifiable=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_ident=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']), target_state=data['target_state'],",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=typing.ChannelID(int(data['token_network_identifier'])), target_state=data['target_state'],",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_id=typing.ChannelID(int(data['channel_id'])), target_state=data['target_state'],",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'](int(data['channel_identifier'])), target_state=data['target_state'],",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], token_network_identifier=to_canonical_address(data['token_network_identifier']),",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'], target_state=data['target_state'],",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CaseID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']))), target_state=data['target_state'],",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = Typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(INT(data['channel_identifier'])), target_state=data['target_state'],",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier_=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], block_number=to_canonical_address(data['block_number']),",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(Int(data['channel_identifier'])), target_state=data['target_state'],",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), _channel_identifier=typing.ChannelID(int(data['_channel_identifier'])), target_state=data['target_state'],",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier']], target_state=data['target_state'],",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']]), target_state=data['target_state'],",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_address=typing.ChannelID(int(data['channel_address'])), target_state=data['target_state'],",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CachedID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier_number=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.Int(int(data['channel_identifier'])), target_state=data['target_state'],",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CaseInt(int(data['channel_identifier'])), target_state=data['target_state'],",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), source_identifier=typing.ChannelID(int(data['source_identifier'])), target_state=data['target_state'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identificator=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "32": "token_network_identifier=to_canonic_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing_.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_number=typing.ChannelID(int(data['channel_number'])), target_state=data['target_state'],",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], block_id=to_canonical_address(data['block_id']),",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), goal_state=data['target_state'],",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], block_name=to_canonical_address(data['block_name']),",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_resolver=typing.ChannelID(int(data['channel_resolver'])), target_state=data['target_state'],",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID (int(data['channel_identifier'])), target_state=data['target_state'],",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), _channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifying=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'],",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), path_identifier=typing.ChannelID(int(data['path_identifier'])), target_state=data['target_state'],",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], network_address=to_canonical_address(data['network_address']),",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], other_network_identifier=to_canonical_address(data['other_network_identifier']),",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'] )), target_state=data['target_state'],",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], other_address=to_canonical_address(data['other_address']),",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], block_address=to_canonical_address(data['block_address']),",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.Int(data['channel_identifier']), target_state=data['target_state'],",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_code=typing.ChannelID(int(data['channel_code'])), target_state=data['target_state'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "target_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "1": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, normalizer)",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_izer)",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Allennlp.nn.regularizers.RegularizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: None = None, ) -> None: super().__init__(vocab, regularizer)",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Allennlp.nn.regularizers.RegularizerApplicator() = None, ) -> None: super().__init__(vocab, regularizer)",
      "8": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer) -> None:",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = Allennlp.nn.regularizers.RegularizerApplicator(), ) -> None: super().__init__(vocab, regularizer)",
      "10": "initializer: InitializerApplicator = InitializeApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: None, ) -> None: super().__init__(vocab, regularizer)",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, () -> None: super().__init__(vocab, regularizer)",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None ) -> None: super().__init__(vocab, regularizer)",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__()(vocab, regularizer)",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_init__)",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) = None: super().__init__(vocab, regularizer)",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None super().__init__(vocab, regularizer)",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), regex: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer) -> None",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_id)",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None,...) -> None: super().__init__(vocab, regularizer)",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> Optional[RegularizerApplicator]: super().__init__(vocab, regularizer)",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), regularizer= Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regalizer)",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_item)",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab,'regularizer')",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None,) -> None: super().__init__(vocab, regularizer)",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, realizer)",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg__)",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ): super().__init__(vocab, regularizer)",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Allennlp.nn.RegularizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_applicator)",
      "34": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None = None, ) -> None: super().__init__(vocab, regularizer)",
      "35": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, normalizer)",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer).__init__()",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, [])",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regexp)",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer) else:",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), normalizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regeditor)",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), regularizer = Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regualizer)",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, Regularizer)",
      "45": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_izer)",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> none: super().__init__(vocab, regularizer)",
      "47": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_str)",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 79,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/graph_parser.py",
    "target_filename": "allennlp/models/graph_parser.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "1": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, normalizer)",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_izer)",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Allennlp.nn.regularizers.RegularizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: None = None, ) -> None: super().__init__(vocab, regularizer)",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Allennlp.nn.regularizers.RegularizerApplicator() = None, ) -> None: super().__init__(vocab, regularizer)",
      "8": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer) -> None:",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = Allennlp.nn.regularizers.RegularizerApplicator(), ) -> None: super().__init__(vocab, regularizer)",
      "10": "initializer: InitializerApplicator = InitializeApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: None, ) -> None: super().__init__(vocab, regularizer)",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, () -> None: super().__init__(vocab, regularizer)",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None ) -> None: super().__init__(vocab, regularizer)",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__()(vocab, regularizer)",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_init__)",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) = None: super().__init__(vocab, regularizer)",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None super().__init__(vocab, regularizer)",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), regex: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer) -> None",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_id)",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None,...) -> None: super().__init__(vocab, regularizer)",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> Optional[RegularizerApplicator]: super().__init__(vocab, regularizer)",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), regularizer= Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regalizer)",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_item)",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab,'regularizer')",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None,) -> None: super().__init__(vocab, regularizer)",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, realizer)",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg__)",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ): super().__init__(vocab, regularizer)",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Allennlp.nn.RegularizerApplicator = None, ) -> None: super().__init__(vocab, regularizer)",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_applicator)",
      "34": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None = None, ) -> None: super().__init__(vocab, regularizer)",
      "35": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, normalizer)",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer).__init__()",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, [])",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regexp)",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer) else:",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), normalizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regeditor)",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), regularizer = Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regularizer)",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regualizer)",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, Regularizer)",
      "45": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_izer)",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> none: super().__init__(vocab, regularizer)",
      "47": "initializer: InitializeApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, regex)",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, reg_str)",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), regularizer: Optional[RegularizerApplicator] = None, ) -> None: super().__init__(vocab, )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "target_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_line": "        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 103,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/common/logging.py",
    "target_filename": "allennlp/common/logging.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))"
    ],
    "correct": false,
    "top_five": {
      "0": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "1": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "2": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "3": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") level = logging._nameToLevel.get(level_name, logging.INFO)",
      "4": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[logging.INFO]",
      "5": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[level_name, logging.INFO]",
      "6": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") level = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "7": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "8": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") level_name = logging._nameToLevel.get(level_name, logging.INFO)",
      "9": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NO = logging._nameToLevel.get(level_name, logging.INFO)",
      "10": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel(level_name, logging.INFO)",
      "11": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "12": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "13": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[get(level_name, logging.INFO)]",
      "14": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") level_name = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "15": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NAME = logging._nameToLevel.get(level_name, logging.INFO)",
      "16": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"); LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "17": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NAME = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "18": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[get(level_name, logging.INFO))",
      "19": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, [logging.INFO])",
      "20": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = str(logging._nameToLevel.get(level_name, logging.INFO))",
      "21": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel[get(level_name, logging.INFO)",
      "22": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"); level = logging._nameToLevel.get(level_name, logging.INFO)",
      "23": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NO = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "24": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\", []) LEVEL = logging._nameToLevel[level_name, logging.INFO]",
      "25": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NUMBER = logging._nameToLevel.get(level_name, logging.INFO)",
      "26": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"); LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "27": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NODE = logging._nameToLevel.get(level_name, logging.INFO)",
      "28": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[logger.INFO]",
      "29": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel[logging.INFO]",
      "30": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") Level = logging._nameToLevel.get(level_name, logging.INFO)",
      "31": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") level = logging._nameToLevel.get(level_name, logging.INFO)",
      "32": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[get(level_name, logging.INFO)",
      "33": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") Level = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "34": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, typing.INFO)",
      "35": "else: os.environ[level_name] = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "36": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\", []) LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "37": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[level_name], logging.INFO",
      "38": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel[get(level_name, str(logging.INFO))",
      "39": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel[level_name, logging.INFO]",
      "40": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL_NUMBER = logging._nameToLevel.get(level_name, str(logging.INFO))",
      "41": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\", \"\") LEVEL = logging._nameToLevel[level_name, logging.INFO]",
      "42": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, type(logging.INFO))",
      "43": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, options.logging.INFO)",
      "44": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] LEVEL = logging._nameToLevel[logging.INFO].get(level_name)",
      "45": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, self.logging.INFO)",
      "46": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, \"INFO\")",
      "47": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel[get(level_name, logging.INFO))",
      "48": "else: level_name = os.environ[\"ALLENNLP_LOG_LEVEL\", \"\") LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "49": "else: level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") LEVEL = logging._nameToLevel.get(level_name, this.logging.INFO)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
    "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_line": "            user_token",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algolia/algoliasearch-client-python",
    "source_filename": "algoliasearch/insights_client_async.py",
    "target_filename": "algoliasearch/insights_client_async.py",
    "source_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395^",
    "target_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "predictions": [
      "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "1": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__()",
      "2": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "3": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__().__init__( insights_client._transporter, user_token)",
      "4": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "5": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__(), user_token: insights_client._transporter = insights_client._transporter",
      "6": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter) -> None super(UserInsightsClientAsync, self).__init__()",
      "7": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__().__init__()",
      "8": "def __init__( self, insights_client, user_token ): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "9": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token = insights_client._transporter.__init__()",
      "10": "def __init__( self, insights_client, user_token ): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__()",
      "11": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__(insights_client._transporter, user_token)",
      "12": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token: insights_client._transporter = insights_client._transporter",
      "13": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__(), user_token: insights_client._transporter = insights_client._transporter.__init__()",
      "14": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__(insights_client._transporter, user_token)",
      "15": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter) -> None super(UserInsightsClientAsync, self).__init__().__init__( insights_client._transporter, user_token)",
      "16": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self, insights_client._transporter, user_token)",
      "17": "def __init__( self, insights_client, user_token ): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token )",
      "18": "def __init__(self, insights_client, user_token): # type: (Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "19": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token )",
      "20": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token = insights_client._transporter",
      "21": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__(), user_token: insights_client._transporter",
      "22": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token, str: def __init__(self, insights_client, user_token) )",
      "23": "def __init__( self, insights_client, user_token ): # type: (InsightsClient, Transporter, InsightsConfig ) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "24": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__().___init__( insights_client._transporter, user_token)",
      "25": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() self.__transporter = insights_client._transporter.__init__() user_token = user_token",
      "26": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token: insights_client._transporter = insights_client._transporter.__init__()",
      "27": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() __init__( insights_client._transporter, user_token)",
      "28": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token = insights_client._transporter(user_token)",
      "29": "def __init__(self, insights_client, user_token): # type: (Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__()",
      "30": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() self.__init__( insights_client._transporter, user_token)",
      "31": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token: insights_client._transporter = insights_client._transporter",
      "32": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__().__init__().__init__( insights_client._transporter, user_token)",
      "33": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) def __init__(self, insights_client, user_token)",
      "34": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() self.__transporter.__init__(user_token)",
      "35": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super().__init__( insights_client._transporter, user_token)",
      "36": "def __init__(self, insights_client, user_token, InsightsConfig): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "37": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter) -> None super(UserInsightsClientAsync, self).__init__(), user_token: insights_client._transporter = insights_client._transporter",
      "38": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) return user_token",
      "39": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() self._init__(insights_client._transporter, user_token)",
      "40": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token: insights_client._transporter.__init__()",
      "41": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token )",
      "42": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() user_token: def __init__(self, insights_client, user_token)",
      "43": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token, str)",
      "44": "def __init__(self, insights_client, user_token): # type: (UserInsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "45": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token",
      "46": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token) )",
      "47": "# type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() self.__init__(insights_client._transporter, user_token)",
      "48": "def __init__( self, insights_client, user_token ): # type: (InsightsClient, Transporter) -> None super(UserInsightsClientAsync, self).__init__( insights_client._transporter, user_token)",
      "49": "def __init__(self, insights_client, user_token): # type: (InsightsClient, Transporter, InsightsConfig) -> None super(UserInsightsClientAsync, self).__init__() self.__transporter = insights_client._transporter.__init__( user_token)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_line": "FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 29,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quay/quay",
    "source_filename": "test/specs.py",
    "target_filename": "test/specs.py",
    "source_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04^",
    "target_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "predictions": [
      "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\""
    ],
    "correct": false,
    "top_five": {
      "0": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "1": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\")).hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "2": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "3": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "4": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "5": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(sha256:\" + hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "6": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + hashlib.sha256('fake').hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "7": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()] FAKE_IMAGE_ID = \"fake-image\"",
      "8": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(sha256:) + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "9": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(sha256:1) + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "10": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "11": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\")).hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "12": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "13": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "14": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = null + \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "15": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest) FAKE_IMAGE_ID = \"fake-image\"",
      "16": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = decode(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "17": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + str(hashlib.sha256('fake').hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "18": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256, \"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "19": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256().hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "20": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256' + hashlib.sha256('fake').hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "21": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + str(hashlib.sha256('fake')).hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "22": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "23": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256.hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "24": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256[\"fake\"].hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "25": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(sha256:\") + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "26": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + args.hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "27": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = [] FAKE_IMAGE_ID = \"fake-image\"",
      "28": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:1\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "29": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\") + str(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "30": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\")).hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "31": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256('fake').hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "32": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = dir(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "33": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = null += \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "34": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str('sha256:' + hashlib.sha256('fake').hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "35": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + block(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "36": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = dir(sha256:\" + hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "37": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + decode(hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "38": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "39": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\")) FAKE_IMAGE_ID = \"fake-image\"",
      "40": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = isinstance(sha256, hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "41": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256) + \"fake\" FAKE_IMAGE_ID = \"fake-image\"",
      "42": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(sha256:] + hashlib.sha256(\"fake\").hexdigest()) FAKE_IMAGE_ID = \"fake-image\"",
      "43": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + hashlib.sha256[\"fake\"].hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "44": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + hashlib.sha256.hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "45": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = Hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\"",
      "46": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256() FAKE_IMAGE_ID = \"fake-image\"",
      "47": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = str(hashlib.sha256) FAKE_IMAGE_ID = \"fake-image\"",
      "48": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\")] FAKE_IMAGE_ID = \"fake-image\"",
      "49": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST ='sha256:' + hashlib.sha256() FAKE_IMAGE_ID = \"fake-image\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
    "target_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_line": "            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 201,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "borglab/gtsfm",
    "source_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "target_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_changeid": "26f76a40e21bd082123f275404efca964faa59b9^",
    "target_changeid": "26f76a40e21bd082123f275404efca964faa59b9",
    "predictions": [
      "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2] )"
    ],
    "correct": false,
    "top_five": {
      "0": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2] )",
      "1": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ], two_view_reports_dict )",
      "2": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ] )",
      "3": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( [i0, i1, i2] )",
      "4": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, (i0, i1, i2), two_view_reports_dict )",
      "5": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, i0, i1, i2 )",
      "6": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, int, int] )",
      "7": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( Tuple[int, int, int](i0, i1, int), two_view_reports_dict )",
      "8": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( (i2Ri1_dict, [i0, i1, i2] ), two_view_reports_dict )",
      "9": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( (i2Ri1_dict, [i0, i1, i2] ) )",
      "10": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "11": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( Tuple[int, int, int](i0, i1, i2), two_view_reports_dict )",
      "12": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 [], two_view_reports_dict )",
      "13": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2].decode(two_view_reports_dict ) )",
      "14": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( (i2Ri1_dict, [i0, i1, i2]), two_view_reports_dict )",
      "15": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], list[two_view_reports_dict] )",
      "16": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2].concat(two_view_reports_dict ) )",
      "17": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, list(i0, i1, i2), two_view_reports_dict )",
      "18": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], tuple[int, int, int] )",
      "19": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( assert isinstance(i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "20": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( assert i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "21": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( (i2Ri1_dict, i0, i1, i2), two_view_reports_dict )",
      "22": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, i0, i1, i2 ), two_view_reports_dict )",
      "23": "cycle_error, max_rot_error, max_trans_error = count_cycle_error( i2Ri1_dict, [i0, i1, i2] )",
      "24": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( Int(i2Ri1_dict), [i0, i1, i2], two_view_reports_dict )",
      "25": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], [two_view_reports_dict )",
      "26": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ], one_view_reports_dict )",
      "27": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], [two_view_reports_dict ] )",
      "28": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int(i0, i1, int), two_view_reports_dict )",
      "29": "cycle_error, max_rot_error, max_trans_error = computation_cycle_error( i2Ri1_dict, [i0, i1, i2] )",
      "30": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( (i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict) )",
      "31": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ].decode(two_view_reports_dict ) )",
      "32": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict ) )",
      "33": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( [i0, i1, int, int] )",
      "34": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int(i0, i1, int) ), two_view_reports_dict )",
      "35": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ], [two_view_reports_dict )",
      "36": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( [i2Ri1_dict, [i0, i1, i2] )",
      "37": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( int(i0, i1, i2), two_view_reports_dict )",
      "38": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( (i2Ri1_dict, [i0, i1, i2], list[two_view_reports_dict] )",
      "39": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict) )",
      "40": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], list( two_view_reports_dict ) )",
      "41": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( compute_cycle_error( i2Ri1_dict, [i0, i1, i2 ], two_view_reports_dict )",
      "42": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( compute_cycle_error( i2Ri1_dict, [i0, i1, i2] ) )",
      "43": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], dict )",
      "44": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( Tuple(i0, i1, i2), two_view_reports_dict )",
      "45": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( [ i2Ri1_dict, [i0, i1, i2] )",
      "46": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [] ) )",
      "47": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( assert i2Ri1_dict, [i0, i1, i2] )",
      "48": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( compute_cycle_error( i2Ri1_dict, [i0, i1, i2], two_view_reports_dict )",
      "49": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( i2Ri1_dict, [i0, i1, i2].decode(two_view_reports_dict, [] ) )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "target_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_line": "        return cls(minimum=minimum, maximum=maximum)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 437,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/collection.py",
    "target_filename": "pystac/collection.py",
    "source_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93^",
    "target_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "predictions": [
      "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)"
    ],
    "correct": false,
    "top_five": {
      "0": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "1": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") max: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "2": "@classmethod def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "3": "@classmethod def from_dict(cls, d: Dict[str, Any], type: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "4": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, max=maximum)",
      "5": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximal: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "6": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Optional[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "7": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = Get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = Get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "8": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any): minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "9": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximal=maximum)",
      "10": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "11": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum) return cls(minimum=minimum, maximum=maximum)",
      "12": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=minum)",
      "13": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": Minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "14": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maxim=maximum)",
      "15": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return",
      "16": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d[\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d[\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "17": "@classmethod def from_dict(cls, d: Dict[str, Any], type: Optional[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "18": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[V] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[V] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "19": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = require(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = require(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "20": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum,",
      "21": "@classmethod def from_dict(cls, d: Dict[str, Any], typing: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "22": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]: minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "23": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=minimum)",
      "24": "@classmethod def from_dict(cls: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "25": "@classmethod def from_dict(cls, d: Dict[str, Any]), typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "26": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum,",
      "27": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimal: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "28": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "29": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum",
      "30": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minim: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "31": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]]: minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "32": "@classmethod def from_dict(cls, d: Dict[str, Any], Typo[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "33": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")",
      "34": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d[\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "35": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "36": "@classmethod def from_dict(cls, d: Dict[str, Any] -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "37": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum) -> \"RangeSummary\"",
      "38": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) = \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "39": "@classmethod def from_dict(cls, d: Dict[str, Any], Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "40": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=minimum)",
      "41": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum]",
      "42": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> 'RangeSummary[T]': minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "43": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "44": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum) -> \"RangeSummary",
      "45": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") returns cls(minimum=minimum, maximum=maximum)",
      "46": "@classmethod def from_dict(cls, d: Dict[str, Any] typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "47": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": min: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum)",
      "48": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") max: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, max=maximum)",
      "49": "@classmethod def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") return cls(minimum=minimum, maximum=maximum):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n\n",
    "target_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_line": "        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 550,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "samschott/maestral",
    "source_filename": "maestral/cli.py",
    "target_filename": "maestral/cli.py",
    "source_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97^",
    "target_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "predictions": [
      "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[\"gui\"])"
    ],
    "correct": false,
    "top_five": {
      "0": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[\"gui\"])",
      "1": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=extras.gui)",
      "2": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple[str,...])",
      "3": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"]))",
      "4": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"])",
      "5": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements= maestral_dist.requires(extras=[\"gui\"])",
      "6": "maestral_dist = pkg_resources.get_distribution(\"maestral\") if not isinstance(extras, gui) requirements = maestral_dist.requires(extras=[\"gui\"])",
      "7": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=tuple[\"gui\"])",
      "8": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=List[\"gui\"])",
      "9": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=params.gui)",
      "10": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=Tuple[\"gui\"])",
      "11": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(gui=extras)",
      "12": "maestral_dist = pkg_resources.get_distribution(\"maestral\") extras = [\"gui\"] requirements = maestral_dist.requires(extras=[\"gui\"])",
      "13": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requires = maestral_dist.requires(extras=[\"gui\"])",
      "14": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements=maestral_dist.requires(extras=[\"gui\"])",
      "15": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras==[\"gui\"])",
      "16": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple(\"gui\"])",
      "17": "maestral_dist = pkg_resources.get_distribution(\"maestral\") extras = pkg_resources.Distribution.requires(extras=[\"gui\"]) requirements = maestral_dist.requires(extras=[\"gui\"])",
      "18": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist[\"gui\"]",
      "19": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=pkg_resources.Distribution.requires(\"gui\"))",
      "20": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=modules.gui)",
      "21": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(typing.Tuple[str,...])",
      "22": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple(\"gui\"))",
      "23": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires([\"gui\"])",
      "24": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=[])",
      "25": "maestral_dist = pkg_resources.get_distribution(\"maestral\") required_requires = maestral_dist.requires(extras=[\"gui\"])",
      "26": "maestral_dist = pkg_resources.get_distribution(\"maestral\") extras = pkg_resources.Distribution.requires(\"gui\") requirements = maestral_dist.requires(extras=[\"gui\"])",
      "27": "maestral_dist = pkg_resources.get_distribution(\"maestral\") _requires = maestral_dist.requires(extras=[\"gui\"])",
      "28": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras= [\"gui\"])",
      "29": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typeof args[\"gui\"])",
      "30": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=list[\"gui\"])",
      "31": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requires=maestral_dist.requires(extras=[\"gui\"])",
      "32": "maestral_dist = pkg_resources.get_distribution(\"maestral\") extras = pkg_resources.Distribution.requires(extras) requirements = maestral_dist.requires(extras=[\"gui\"])",
      "33": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=Pkg_resources.Distribution.Requires(\"gui\"))",
      "34": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements_= maestral_dist.requires(extras=[\"gui\"])",
      "35": "maestral_dist = pkg_resources.get_distribution(\"maestral\") prerequisites = maestral_dist.requires(extras=[\"gui\"])",
      "36": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=['gui'])",
      "37": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple(\"gui\"]))",
      "38": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requests = maestral_dist.requires(extras=[\"gui\"])",
      "39": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=gui)",
      "40": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typeof extras[\"gui\"])",
      "41": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = [])",
      "42": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras = [\"gui\"])",
      "43": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=pkg_resources.Distribution.requires[\"gui\"])",
      "44": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=class.gui)",
      "45": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=Pkg_resources.Distribution.requires(\"gui\"))",
      "46": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras= [])",
      "47": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typeof extras == \"gui\")",
      "48": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"], []))",
      "49": "maestral_dist = pkg_resources.get_distribution(\"maestral\") requirements = maestral_dist.requires(extras=pkg_resources.Distribution.requires(\"gui\"))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],\n",
    "target_code": "        restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 739,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],"
    ],
    "correct": true,
    "top_five": {
      "0": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "1": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "2": "restored = cls( payment_identifier=PaymentID(INT(data['payment_identifier'])), reason=data['reason'],",
      "3": "restored = cls( PaymentID=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "4": "restored = cls( payments_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "5": "restored = cls( payment_identifier = PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "6": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "7": "restored = cls( payment_ident=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "8": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier']), reason=data['reason'],",
      "9": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "10": "restored= cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "11": "restored = cls( payment_identifier=PaymentId(int(data['payment_identifier'])), reason=data['reason'],",
      "12": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])) ), reason=data['reason'],",
      "13": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), value=data['value'], reason=data['reason'],",
      "14": "restored = cls( payment_identifier=PaymentID(Int(data['payment_identifier'])), reason=data['reason'],",
      "15": "restored = cls( payment_identifier=PaymentIdentifiable(int(data['payment_identifier'])), reason=data['reason'],",
      "16": "restored = cls( payment_identifier=paymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "17": "restored = cls( payment_identifier=PaymentIdentifier(int(data['payment_identifier'])), reason=data['reason'],",
      "18": "restored = cls( payment_identifier=PaymentID(int(data['payment_ident'])), reason=data['reason'],",
      "19": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])) -> None, reason=data['reason'],",
      "20": "restored = cls( payment_identifier=PaymentID[int(data['payment_identifier'])), reason=data['reason'],",
      "21": "restored = cls( payment_identifier=Payment ID(int(data['payment_identifier'])), reason=data['reason'],",
      "22": "restored = cls( transaction_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "23": "restored = cls( payment_identifier=PaymentIdentifiableId(int(data['payment_identifier'])), reason=data['reason'],",
      "24": "restored = cls( payment_identifier= PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "25": "restored = cls( payments=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "26": "restored = cls( payment_identifier=PaymentIdentifiableObject(int(data['payment_identifier'])), reason=data['reason'],",
      "27": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'], transaction_identifier=PaymentID(int(data['operation_identifier'])),",
      "28": "restore = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "29": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "30": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=int(data['reason'],",
      "31": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'] )), reason=data['reason'],",
      "32": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reasons=data['reason'],",
      "33": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'], transaction_identifier=PaymentID(int(data['transaction_identifier'])),",
      "34": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "35": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier']]), reason=data['reason'],",
      "36": "restored = cls( payment_identifier=PaymentID(int(data['PaymentID'])), reason=data['reason'],",
      "37": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'], transaction_identifier=PaymentID(int(data[' transaction_identifier'])),",
      "38": "restored = cls(payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "39": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'], token_address=to_canonical_address(data['token_address'],",
      "40": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reasoning=data['reason'],",
      "41": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'], transaction_identifier=PaymentID(int(data['contract_identifier'])),",
      "42": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), purpose=data['reason'],",
      "43": "restored = cls( credit_identifier=PaymentID(int(data['credit_identifier'])), reason=data['reason'],",
      "44": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), cause=data['reason'],",
      "45": "restored = cls( payment_identifier=paymentID(int(data['payment_identifier'])), reason=data['reason'],",
      "46": "restored = cls( payment_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'], token=to_canonical_address(data['token']),",
      "47": "restored = cls( payment_identifier=PaidmentID(int(data['payment_identifier'])), reason=data['reason'],",
      "48": "restored = cls( payment_identifier=WalletID(int(data['payment_identifier'])), reason=data['reason'],",
      "49": "restored = cls( receipt_identifier=PaymentID(int(data['payment_identifier'])), reason=data['reason'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "target_code": "    if expected_failure is not None:\n        assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_line": "        assert_code_snippet_fails(after, state, expected_failure)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quantumlib/Cirq",
    "source_filename": "cirq/docs/snippets_test.py",
    "target_filename": "cirq/docs/snippets_test.py",
    "source_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995^",
    "target_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "predictions": [
      "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure))"
    ],
    "correct": false,
    "top_five": {
      "0": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure))",
      "1": "if expected_failure is not None: assert_code_snippet_fails(after, state, expected_failure)",
      "2": "if expected_failure is not None: assert_code_snippet_fails(after, state, [expected_failure])",
      "3": "if expected_failure is not None: assert_code_snippet_fails(after, state, assert_code_snippet_failure)",
      "4": "if expected_failure is not None: assert_code_snippet_fails(after, state, \"expected_failure\")",
      "5": "if expected_failure is not None: assert_code_snippet_fails(after, state, bool(expected_failure))",
      "6": "if expected_failure is not None: assert_code_snippet_fails(str(after, state, expected_failure))",
      "7": "if expected_failure is not None: assert_code_snippet_fails(after, state, _expected_failure)",
      "8": "if expected_failure is not None: assert_code_snippet_fails(after, state, 'expected_failure')",
      "9": "if expected_failure is not None: assert_code_snippet_fails(after, state, (expected_failure == state))",
      "10": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(state, str(expected_failure))",
      "11": "if expected_failure is not None: assert_code_snippet_fails(after, state, isinstance(expected_failure)) assert_code_snippet_fails(state, isinstance(expected_failure))",
      "12": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_fails(state, str(expected_failure))",
      "13": "if expected_failure is not None: assert_code_snippet_fails(after, state, code_snippet_failure)",
      "14": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snip",
      "15": "if expected_failure is not None: assert_code_snippet_fails(after, state, self.expected_failure)",
      "16": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_cache is not None",
      "17": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(state, str(expected_cache))",
      "18": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(state, str(expected_cache)",
      "19": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(state, str(expected_failure))",
      "20": "if expected_failure is not None: assert_code_snippet_fails(after, state, assert_code_snippet_failure) assert_code_snippet_fails(state, assert_code_snippet_failure)",
      "21": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_str(state, str(expected_failure))",
      "22": "if expected_failure is not None: assert_code_snippet_fails(after, state, null, expected_failure)",
      "23": "if expected_failure is not None: assert_code_snippet_fails(after, state, isinstance(expected_failure))",
      "24": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None",
      "25": "if expected_failure is not None: assert_code_snippet_fails(after, state, msg_expected_failure) assert_code_snippet_fails(state, msg_expected_failure)",
      "26": "if expected_failure is not None: assert_code_snippet_fails(after, state, assert_code_snippet_failure is None) assert_code_snippet_fails(state, assert_code_snippet_failure)",
      "27": "if expected_failure is not None: assert_code_snippet_fails(after, state, next_failure)",
      "28": "if expected_failure is not None: assert_code_snippet_fails(after, state, msg_expected_failure)",
      "29": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is None assert_code_snip",
      "30": "if expected_failure is not None: assert_code_snippet_fails(after, state, args[expected_failure]) assert_code_snippet_fails(state, args[expected_failure])",
      "31": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_str(state, str(expected_cache))",
      "32": "if expected_failure is not None: assert_code_snippet_fails(after, state, # type: str(expected_failure)) assert_code_snippet_fails(state, # type: str(expected_failure))",
      "33": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(after, state, str(expected_failure))",
      "34": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None",
      "35": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_str(state, str(expected_failure))",
      "36": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None",
      "37": "if expected_failure is not None: assert_code_snippet_fails(after, state,...expected_failure)",
      "38": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(before, state, str(expected_fail",
      "39": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(before, state, str(expected_failure))",
      "40": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_f",
      "41": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(after, state, str(expected_cache",
      "42": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is None assert_code_snippet_fails(state, str(expected_cache))",
      "43": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(str(state, str(expected_cache",
      "44": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_fails(state, str(expected_cache",
      "45": "if expected_failure is not None: assert_code_snippet_fails(after, state, assert_code_snippet_failure is None) assert_code_snippet_fails(state, assert_code_snippet_failure is None)",
      "46": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_cache is None assert_code_snippet_fails",
      "47": "if expected_failure is not None: assert_code_snippet_fails(after=state, expected_failure)",
      "48": "if expected_failure is not None: assert_code_snippet_fails(after, state, str(expected_failure)) assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is not None assert_code_snippet_cache is None assert_code_snippet_fails(state, str(expected_failure))",
      "49": "if expected_failure is not None: assert_code_snippet_fails(after, state, el.expected_failure)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n\n",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_line": "        save_pickle(self.ec_data, self.save_path)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "target_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_changeid": "1de404c11bc5f40b766e966573506921980ff524^",
    "target_changeid": "1de404c11bc5f40b766e966573506921980ff524",
    "predictions": [
      "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))"
    ],
    "correct": false,
    "top_five": {
      "0": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))",
      "1": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "2": "log.info(f\"Saving model to { self.save_path } \") self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))",
      "3": "log.info(f\"Saving model to { self.save_path } \") self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "4": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, lists[self.save_path])",
      "5": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) else:",
      "6": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, List[save_path])",
      "7": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, List(self.save_path))",
      "8": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, str(self.save_path))",
      "9": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) saved_pickle(self.ec_data, list(self.save_path))",
      "10": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, List[self.save_path])",
      "11": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True, Dict[str, Any]) save_pickle(self.ec_data, self.save_path)",
      "12": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data)",
      "13": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) return self.ec_data",
      "14": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path) )",
      "15": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) return save_pickle(self.ec_data, list(self.save_path))",
      "16": "log.info(f\"Saving model to { self.save_path } \") save_pickle(self.ec_data, list(self.save_path))",
      "17": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents = True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path))",
      "18": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, dict)",
      "19": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list[self.save_path])",
      "20": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) saved_pickle(self.ec_data, self.save_path)",
      "21": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) assert self.ec_data is not None save_pickle(self.ec_data, list(self.save_path))",
      "22": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) else: assert self.ec_data is not None save_pickle(self.ec_data, list(self.save_path))",
      "23": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=False, exist_ok=False) save_pickle(self.ec_data, self.save_path)",
      "24": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle( self.ec_data, list(self.save_path) )",
      "25": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) assert self.ec_data is not None save_pickle(self.ec_data, self.save_path)",
      "26": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) if self.ec_data is None save_pickle(self.ec_data, list(self.save_path))",
      "27": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) Save_pickle(self.ec_data, list(self.save_path))",
      "28": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, lists(self.save_path))",
      "29": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) return save_pickle(self.ec_data)",
      "30": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) return save_pickle(self.ec_data, self.save_path)",
      "31": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) if not self.ec_data:",
      "32": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True, DiCT) save_pickle(self.ec_data, self.save_path)",
      "33": "log.info(f\"Saving model to { self.save_path } \") _self.save_path.parent.mkdir(parents=True, exist_ok=True) _ save_pickle(self.ec_data, _self.save_path)",
      "34": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, saved_path)",
      "35": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) if self.ec_data is None save_pickle(self.ec_data, self.save_path)",
      "36": "log.info(f\"Saving model to { self.save_path } \") self.save_path.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, lists[self.save_path])",
      "37": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, save_path)",
      "38": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, List[typing.Any], self.save_path)",
      "39": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents = True, exist_ok=True) save_pickle(self.ec_data, self.save_path)",
      "40": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) raise ValueError(f\"Saving model to { self.save_path } \")",
      "41": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, List[any], self.save_path)",
      "42": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) if self.ec_data is None save_pickle(self.ec_data)",
      "43": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, dict(self.save_path))",
      "44": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) } )",
      "45": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) else: assert self.ec_data is not None save_pickle(self.ec_data)",
      "46": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) saving_pickle(self.ec_data, list(self.save_path))",
      "47": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, List[any])",
      "48": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=True, exist_ok=True) save_pickle(self.ec_data, list(self.save_path)) assert self.ec_data is not None save_pickle(self.ec_data)",
      "49": "log.info(f\"Saving model to { self.save_path } \") self.save_path.parent.mkdir(parents=False, exist_ok=False) save_pickle(self.ec_data, list(self.save_path))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
    "target_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            context.add_layer(obj)\n",
    "warning_line": "            context.add_layer(obj)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 635,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/configuration.py",
    "target_filename": "volatility/framework/interfaces/configuration.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj)"
    ],
    "correct": false,
    "top_five": {
      "0": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj)",
      "1": "obj = self._construct_class(context, config_path, args) if obj is not None: if obj is not None: context.add_layer(obj)",
      "2": "obj = self._construct_class(context, config_path, args) if obj is not None: assert isinstance(obj, interfaces.layers.DataLayerInterface) context.add_layer(obj)",
      "3": "obj = self._construct_class(context, config_path, args) if obj is not None: if obj is None: context.add_layer(obj)",
      "4": "obj = self._construct_class(context, config_path, args) if obj is None: context.add_layer(obj)",
      "5": "obj = self._construct_class(context, config_path, args) if obj is not None: assert isinstance(interfaces.layers.DataLayerInterface, obj) context.add_layer(obj)",
      "6": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None and isinstance(interfaces.layers.DataLayerInterface) context.add_layer(obj)",
      "7": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None, context.add_layer(obj)",
      "8": "obj = self._construct_class(context, config_path, args) if obj is not None: if isinstance(obj, interfaces.layers.DataLayerInterface): context.add_layer(obj)",
      "9": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None: context.add_layer(obj)",
      "10": "obj = self._construct_class(context, config_path, args) if obj is not None: interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args) context.add_layer(obj)",
      "11": "obj = self._construct_class(context, config_path, args) if obj is not None: assert isinstance(interfaces.layers.DataLayerInterface) context.add_layer(obj)",
      "12": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None. context.add_layer(obj)",
      "13": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None context.add_layer(obj)",
      "14": "obj = self._construct_class(context, config_path, args) if obj is not None: obj.interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args) context.add_layer(obj)",
      "15": "obj = self._construct_class(context, config_path, args) if obj is Not None: context.add_layer(obj)",
      "16": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj, config_path)",
      "17": "obj = self._construct_class(context, config_path, args) if obj is not None: global.context.add_layer(obj)",
      "18": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None and node.interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args) context.add_layer(obj)",
      "19": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None; context.add_layer(obj)",
      "20": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj, DataLayerInterface)",
      "21": "obj = self._construct_class(context, config_path, args) if obj is not None: assert isinstance(obj, Interfaces.layers.DataLayerInterface) context.add_layer(obj)",
      "22": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj) if obj is not None:",
      "23": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj) else self._construct_class(context, config_path, args)",
      "24": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None.context.add_layer(obj)",
      "25": "obj = self._construct_class(context, config_path, args) if obj is not None: if isinstance(interfaces.layers.DataLayerInterface): context.add_layer(obj)",
      "26": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj, [])",
      "27": "obj = self._construct_class(context, config_path, args) if obj is not None: obj.layers = interfaces.layers.DataLayerInterface(obj) context.add_layer(obj)",
      "28": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface) context.add_layer(obj)",
      "29": "obj = self._construct_class(context, config_path, args) if obj is not None: if isinstance(interfaces.layers.DataLayerInterface, obj): context.add_layer(obj)",
      "30": "obj = self._construct_class(context, config_path, args) if obj is not None: obj.layers = interfaces.layers.DataLayerInterface() context.add_layer(obj)",
      "31": "obj = self._construct_class(context, config_path, args) if obj is not None: interface.add_layer(obj)",
      "32": "obj = self._construct_class(context, config_path, args) assert isinstance(obj, interfaces.layers.DataLayerInterface) context.add_layer(obj)",
      "33": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layers(obj)",
      "34": "obj = self._construct_class(context, config_path, args) if obj is not None: interfaces.layers.DataLayerInterface = self._construct_class(context, config_path) context.add_layer(obj)",
      "35": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer( obj )",
      "36": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj.config_path)",
      "37": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer((obj))",
      "38": "obj = self._construct_class(context, config_path, args) if obj is not None: obj.interfaces.layers.DataLayerInterface = self._construct_class(context, config_path) context.add_layer(obj)",
      "39": "obj = self._construct_class(context, config_path, args) if obj is not None: assert obj is not None and isinstance(interfaces.layers.DataLayerInterface, ObjectInterface) context.add_layer(obj)",
      "40": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj) if obj is None:",
      "41": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj.DataLayerInterface)",
      "42": "obj = self._construct_class(context, config_path, args) if obj is not None: obj.interface.add_layer(obj)",
      "43": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj, args)",
      "44": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(Obj)",
      "45": "obj = self._construct_class(context, config_path, args) if obj is not None: this.interface.add_layer(obj)",
      "46": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_interface(obj)",
      "47": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj) self._construct_class(context, config_path, args)",
      "48": "obj = self._construct_class(context, config_path, args) if obj is not None: context.add_layer(obj);",
      "49": "obj = self._construct_class(context, config_path, args) if obj is NOT None: context.add_layer(obj)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, {})\n        # put delegation last by default\n",
    "target_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_line": "            delegator.delegations = Delegations({}, {})",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 354,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theupdateframework/python-tuf",
    "source_filename": "tests/repository_simulator.py",
    "target_filename": "tests/repository_simulator.py",
    "source_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3^",
    "target_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "predictions": [
      "if delegator.delegations is None: # put delegation last by default"
    ],
    "correct": false,
    "top_five": {
      "0": "if delegator.delegations is None: # put delegation last by default",
      "1": "if delegator.delegations is None: delegator.delegations = Delegations() # put delegation last by default",
      "2": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]]( { }, { } ) # put delegation last by default",
      "3": "if delegator.delegations is None: delegator.delegations = OrderedDict[str, DelegatedRole]( { }, { } ) # put delegation last by default",
      "4": "if delegator.delegations is None: delegator.delegations = Delegations(OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "5": "if delegator.delegations is None: delegator.delegations = OrderedDict(Delegations( { }, { } )) # put delegation last by default",
      "6": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole], OrderedDict[str, DelegatedRole]]( { }, { } ) # put delegation last by default",
      "7": "if delegator.delegations is None: delegator.delegations = Delegations( { }, OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "8": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole, OrderedDict[str, DelegatedRole]]( { }, { } ) # put delegation last by default",
      "9": "if delegator.delegations is None: delegator.delegations = Delegations[orderedDict[str, DelegatedRole]]( { }, { } ) # put delegation last by default",
      "10": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]]() # put delegation last by default",
      "11": "if delegator.delegations is None: delegator.delegations = Delegations('OrderedDict[str, DelegatedRole]') # put delegation last by default",
      "12": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]] ( { }, { } ) # put delegation last by default",
      "13": "if delegator.delegations is None: delegator.delegations = Delegations( { }, { } ) # put delegation last by default",
      "14": "if delegator.delegations is None: delegator.delegations = Delegations( \"OrderedDict[str, DelegatedRole]\" ) # put delegation last by default",
      "15": "if delegator.delegations is None: delegator.delegations = Delegations('OrderedDict[str, DelegatedRole]', OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "16": "if delegator.delegations is None: delegator.delegations = OrderedDict[str, DelegatedRole]() # put delegation last by default",
      "17": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]]( { } ) # put delegation last by default",
      "18": "if delegator.delegations is None: delegator.delegations = Delegations( { }, \"OrderedDict[str, DelegatedRole]]()) # put delegation last by default",
      "19": "if delegator.delegations is None: delegator.delegations = OrderedDict(Delegations( { }, { } ) ) # put delegation last by default",
      "20": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole], OrderedDict[str, DelegatedRole]]() # put delegation last by default",
      "21": "if delegator.delegations is None: delegator.delegations = Delegations('OrderedDict[str, DelegatedRole, OrderedDict[str, DelegatedRole]]') # put delegation last by default",
      "22": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole], OrderedDict[str, DelegatedRole]] ( { }, { } ) # put delegation last by default",
      "23": "if delegator.delegations is None: delegator.delegations = Delegations( { }, []) # put delegation last by default",
      "24": "if delegator.delegations is None: delegator.delegations = Delegations('OrderedDict[str, DelegatedRole]', DelegatedRole, OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "25": "if delegator.delegations is None: delegator.delegations = OrderedDict(Delegations( { }, { } ) # put delegation last by default",
      "26": "if delegator.delegations is None: delegator.delegations = Delegations( { }, 'OrderedDict[str, DelegatedRole]') # put delegation last by default",
      "27": "if delegator.delegations is None: delegator.delegations = Delegations( { }, \"OrderedDict[str, DelegatedRole]] ) # put delegation last by default",
      "28": "if delegator.delegations is None: assert isinstance(Delegation, DelegatedRole, OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "29": "if delegator.delegations is None: delegator.delegations = Delegations( { }, \"OrderedDict[str, DelegatedRole]]) # put delegation last by default",
      "30": "if delegator.delegations is None: delegator.delegations = Delegations( { }, 'OrderedDict[str, DelegatedRole]]()) # put delegation last by default",
      "31": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole], OrderedDict[str, DelegatedRole]]( { } ) # put delegation last by default",
      "32": "if delegator.delegations is None: delegator.delegations() = Delegations( { }, { } ) # put delegation last by default",
      "33": "if delegator.delegations is None: delegator.delegations = Delegations('OrderedDict[str, DelegatedRole]', DelegatedRole) # put delegation last by default",
      "34": "if delegator.delegations is None: node.delegations = Delegations( { }, { } ) # put delegation last by default",
      "35": "if delegator.delegations is None: delegator.delegations = Delegations[str, DelegatedRole]( { }, { } ) # put delegation last by default",
      "36": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole, OrderedDict[str, DelegatedRole]]( { } ) # put delegation last by default",
      "37": "if delegator.delegations is None: delegator.delegations = OrderedDict(Delegations.OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "38": "if delegator.delegations is None: delegator.delegations = Delegations(\"OrderedDict[str, DelegatedRole]\") # put delegation last by default",
      "39": "if delegator.delegations is None: delegator.delegations_ = Delegations( { }, { } ) # put delegation last by default",
      "40": "if delegator.delegations is None: delegator.delegations = Delegations(\"OrderedDict[str, DelegatedRole]\") # put delegation last by default",
      "41": "if delegator.delegations is None: delegator.delegations = Delegations( { }, Organisational[Dict[str, DelegatedRole]]) # put delegation last by default",
      "42": "if delegator.delegations is None: delegator.delegations = Delegations[OrderedDict[str, DelegatedRole, OrderedDict[str], DelegatedRole]]( { }, { } ) # put delegation last by default",
      "43": "if delegator.delegations is None: delegator.delegations = Delegations( { }, () => OrderedDict[str, DelegatedRole]) # put delegation last by default",
      "44": "if delegator.delegations is None: self.delegations = Delegations( { }, { } ) # put delegation last by default",
      "45": "if delegator.delegations is None: delegator.delegations = Delegations( { }, Organisational[Dict[str, DelegatedRole]] ) # put delegation last by default",
      "46": "if delegator.delegations is None: delegator.delegations = OrderedDict(Delegations.OrderedDict(str, DelegatedRole)) # put delegation last by default",
      "47": "if delegator.delegations is None: delegator.delegations = OrderedDict[str, DelegatedRole]( } }, { } ) # put delegation last by default",
      "48": "if delegator.delegations is None: delegator.delegations = Delegations(\"OrderedDict[str, DelegatedRole]]( { }, { } ) # put delegation last by default",
      "49": "if delegator.delegations is None: delegator.delegations = Delegations( { }, 'OrderedDict[str, DelegatedRole]] ) # put delegation last by default"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                        if isinstance(loss, Tuple):\n                            average_over += loss[1]\n",
    "target_code": "\n                        if isinstance(loss, tuple):\n                            average_over += loss[1]\n",
    "warning_line": "                        if isinstance(loss, Tuple):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing._SpecialForm`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 472,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/trainers/trainer.py",
    "target_filename": "flair/trainers/trainer.py",
    "source_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054^",
    "target_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054",
    "predictions": [
      "if isinstance(loss, tuple): average_over += loss[1]"
    ],
    "correct": true,
    "top_five": {
      "0": "if isinstance(loss, tuple): average_over += loss[1]",
      "1": "if isinstance(loss, Tuple): average_over += loss[1]",
      "2": "if isinstance(str(loss, Tuple)): average_over += loss[1]",
      "3": "if isinstance(loss, Optional[Tuple]): average_over += loss[1]",
      "4": "if isinstance(str(loss, tuple)): average_over += loss[1]",
      "5": "if tuple = isinstance(loss, Tuple): average_over += loss[1]",
      "6": "if isinstance(lodash, Tuple): average_over += loss[1]",
      "7": "if tuple = isinstance(loss, tuple): average_over += loss[1]",
      "8": "if isinstance(str(loss, tuple): average_over += loss[1]",
      "9": "if isinstance(tuple): average_over += loss[1]",
      "10": "if isinstance(loss): average_over += loss[1]",
      "11": "if isinstance(tuple, loss): average_over += loss[1]",
      "12": "if tuple_isinstance(loss, Tuple): average_over += loss[1]",
      "13": "if not isinstance(loss, tuple): average_over += loss[1]",
      "14": "if index isinstance(loss, tuple): average_over += loss[1]",
      "15": "if isinstance(loss, Tuple): average_over += loss[1]",
      "16": "if loss isinstance(Tuple): average_over += loss[1]",
      "17": "if loss isinstance(tuple): average_over += loss[1]",
      "18": "if isinstance( loss, tuple ): average_over += loss[1]",
      "19": "if elif isinstance(loss, tuple): average_over += loss[1]",
      "20": "if tuple isinstance(loss, tuple): average_over += loss[1]",
      "21": "if _tuple_isinstance(loss, Tuple): average_over += loss[1]",
      "22": "if tuple isinstance(loss, Tuple): average_over += loss[1]",
      "23": "if isinstance(str(loss, Tuple): average_over += loss[1]",
      "24": "if isinstance(loss, 'Tuple'): average_over += loss[1]",
      "25": "if isinstance(str, tuple): average_over += loss[1]",
      "26": "if isinstance(null, Tuple): average_over += loss[1]",
      "27": "if isinstance(str(loss), Tuple): average_over += loss[1]",
      "28": "if tuple.isinstance(loss, Tuple): average_over += loss[1]",
      "29": "if isinstance([loss, tuple]): average_over += loss[1]",
      "30": "if isinstance(loss, tuple ): average_over += loss[1]",
      "31": "if isinstance(str, Tuple): average_over += loss[1]",
      "32": "if isinstance(index, tuple): average_over += loss[1]",
      "33": "if isinstance(none, Tuple): average_over += loss[1]",
      "34": "if isinstance(loss, tuple): average_over += tuple[1]",
      "35": "if isinstance(null, tuple): average_over += loss[1]",
      "36": "if not isinstance(loss, Tuple): average_over += loss[1]",
      "37": "if isinstance(output, Tuple): average_over += loss[1]",
      "38": "if Tuple.isinstance(loss): average_over += loss[1]",
      "39": "if isinstance(result, Tuple): average_over += loss[1]",
      "40": "if isinstance(loss, tuple: average_over += loss[1]",
      "41": "if index isinstance(loss, index): average_over += loss[1]",
      "42": "if isinstance(win, tuple): average_over += loss[1]",
      "43": "if loss = isinstance(Tuple): average_over += loss[1]",
      "44": "if isinstance(undefined, Tuple): average_over += loss[1]",
      "45": "if isinstance(obj, loss): average_over += loss[1]",
      "46": "if elif isinstance(loss, tuple): average_over += elif loss[1]",
      "47": "if loss = isinstance(tuple): average_over += loss[1]",
      "48": "if isinstance(win, Tuple): average_over += loss[1]",
      "49": "if isinstance(loss, tuple): average_over += tuple(loss[1])"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            deposit_transaction=data['deposit_transaction'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelNewBalance.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'](int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], token_network_identifier=to_canonical_address(data['token_network_identifier']),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifiable=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=to_canonical_address(data['deposit_transaction'],",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(INT(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], block_number=to_canonical_address(data['block_number']),",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']))), deposit_transaction=data['deposit_transaction'],",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_name=typing.ChannelID(int(data['channel_name'])), deposit_transaction=data['deposit_transaction'],",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = Typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_ident=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'], deposit_transaction=data['deposit_transaction'],",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(Int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], other_address=to_canonical_address(data['other_address']),",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'] + int(data['channel_identifier']), deposit_transaction=data['deposit_transaction'],",
      "19": "token_network_identifier=to_canonic_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_id=typing.ChannelID(int(data['channel_id'])), deposit_transaction=data['deposit_transaction'],",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], token_network_name=to_canonical_address(data['token_network_name']),",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing_.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier = typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'] or typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier_=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], transaction_id=to_canonical_address(data['transaction_id']),",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=typing.ChannelID(int(data['token_network_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CaseID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier= typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], row_number=to_canonical_address(data['row_number']),",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], block_address=to_canonical_address(data['block_address']),",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing['channel_identifier'], deposit_transaction=data['deposit_transaction'],",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier']]), deposit_transaction=data['deposit_transaction'],",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], other_network_identifier=to_canonical_address(data['other_network_identifier']),",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], token_network_address=to_canonical_address(data['token_network_identifier']),",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], token_network_number=to_canonical_address(data['token_network_number']),",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], number=to_canonical_address(data['number']),",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], transaction_id=to_canonical_address(data[' transaction_id']),",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], click_address=to_canonical_address(data['click_address']),",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], value=to_canonical_address(data['value']),",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.CachedID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifying=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], block_id=to_canonical_address(data['block_id']),",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], transaction_address=to_canonical_address(data['transaction_address']),",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID (int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier_number=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'],",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], row_address=to_canonical_address(data['row_address']),",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], click_id=to_canonical_address(data['click_id']),",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], token_address=to_canonical_address(data['token_address']),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
    "target_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
    "warning_line": "            label_probs.append(Label(idx, conf.item()))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "target_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402^",
    "target_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "predictions": [
      "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs"
    ],
    "correct": false,
    "top_five": {
      "0": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs",
      "1": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs",
      "2": "for idx, conf in enumerate(softmax): label_probs.append(Str(Label(idx, conf.item()))) return label_probs",
      "3": "for idx, conf in enumerate(softmax): return label_probs.append(Label(idx, str(conf.item())))",
      "4": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(idx, str(conf.item()))",
      "5": "for idx, conf in enumerate(softmax): label_probs.append(str(Label(idx, conf.item()))) return label_probs",
      "6": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs",
      "7": "for idx, conf in enumerate(softmax): label_probs.append(List(idx, conf.item())) return label_probs",
      "8": "for idx, conf in enumerate(softmax): label_probs.append(label(idx, str(conf.item()))) return label_probs",
      "9": "for idx, conf in enumerate(softmax): label_probs.append(Int(Label(idx, conf.item()))) return label_probs",
      "10": "for idx, conf in enumerate(softmax): label_probs.append(Str(Label(idx, conf.item()))) return label_probs",
      "11": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx, str(conf.item())))",
      "12": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx), str(conf.item()))",
      "13": "for idx, conf in enumerate(softmax): return label_probs.append(Label(idx, conf.item()))",
      "14": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item(), str))) return label_probs",
      "15": "for idx, conf in enumerate(softmax): label_probs.append(label(idx, conf.item())) return label_probs",
      "16": "for idx, conf in enumerate(softmax): label_probs.append(List(Label(idx, conf.item()))) return label_probs",
      "17": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item(), str)) return label_probs",
      "18": "for idx, conf in enumerate(softmax): assert idx is not None and label_probs.append(Label(idx, conf.item())) return label_probs",
      "19": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, int(conf.item()))) return label_probs",
      "20": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()), str)) return label_probs",
      "21": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(label(idx, str(conf.item()))",
      "22": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(label(str(idx), str(conf.item()))",
      "23": "for idx, conf in enumerate(softmax): assert idx is not None label_probs.append(Label(idx, conf.item())) return label_probs",
      "24": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx))",
      "25": "for idx, conf in enumerate(softmax): assert isinstance(label(idx, conf.item())) return label_probs",
      "26": "for idx, conf in enumerate(softmax): label_probs.append(str(label(idx, conf.item()))) return label_probs",
      "27": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx)), str(conf.item()))",
      "28": "for idx, conf in enumerate(softmax): label_probs.append(String(idx, conf.item())) return label_probs",
      "29": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(label(str(idx, str(conf.item())))",
      "30": "for idx, conf in enumerate(softmax): label_probs.append(String(Label(idx, conf.item()))) return label_probs",
      "31": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx, conf.item()))",
      "32": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx), conf.item()))",
      "33": "for idx, conf in enumerate(softmax): label_probs.append(Str(Label(idx, conf.item()))) return label_probs.append(Label(idx, conf.item()))",
      "34": "for idx, conf in enumerate(softmax): Label._probs.append(Label(idx, conf.item())) return label_probs",
      "35": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(str(idx, conf.item()))",
      "36": "for idx, conf in enumerate(softmax): label_probs.append(Int(label(idx, conf.item()))) return label_probs",
      "37": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item(), str))) return label_probs.append(Label(idx, str(conf.item()))",
      "38": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Str(idx, str(conf.item()))",
      "39": "for idx, conf in enumerate(softmax): label_probs.append(Str(Label(idx, conf.item()))) return label_probs.append(Label(idx, str(conf.item()))",
      "40": "for idx, conf in enumerate(softmax): label_probs.append(Address(idx, conf.item())) return label_probs",
      "41": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, list(conf.item()))) return label_probs",
      "42": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Str(label(idx, str(conf.item())))",
      "43": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item())) ) return label_probs",
      "44": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx = 0, conf.item())) return label_probs",
      "45": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs[0]",
      "46": "for idx, conf in enumerate(softmax): label_probs.append(Str(label(idx, conf.item()))) return label_probs",
      "47": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Label(idx))",
      "48": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, conf.item())) return label_probs.append(str(idx, conf.item()))",
      "49": "for idx, conf in enumerate(softmax): label_probs.append(Label(idx, str(conf.item()))) return label_probs.append(Str(idx, str(conf.item()))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=int(data['channel_identifier']),\n        )\n",
    "target_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n        )\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `RouteState.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 679,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), )"
    ],
    "correct": true,
    "top_five": {
      "0": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), )",
      "1": "node_address=to_canonical_address(data['node_address']), channel_identifier= Typing.ChannelID(int(data['channel_identifier'])), )",
      "2": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])) )",
      "3": "node_address=to_canonical_address(data['node_address']), channel_identifier = Typing.ChannelID(int(data['channel_identifier'])), )",
      "4": "node_address=to_canonical_address(data['node_address']), channel_identifier = typing.ChannelID(int(data['channel_identifier'])), )",
      "5": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(Int(data['channel_identifier'])), )",
      "6": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(INT(data['channel_identifier'])), )",
      "7": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), )",
      "8": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.CaseID(int(data['channel_identifier'])), )",
      "9": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ):",
      "10": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ),",
      "11": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing['channel_identifier'](int(data['channel_identifier'])), )",
      "12": "node_address=to_canonical_address(data['node_address']), channel_identifier= typing.ChannelID(int(data['channel_identifier'])), )",
      "13": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) -> None:",
      "14": "node_address=to_canonical_address(data['node_address']), channel_identifiable=typing.ChannelID(int(data['channel_identifier'])), )",
      "15": "node_address=to_canonical_address(data['node_address']), channel_identifier_=typing.ChannelID(int(data['channel_identifier'])), )",
      "16": "node_address=to_canonical_address(data['node_address']), channel_identifier_=typing.ChannelID(int(data['channel_identifier_])), )",
      "17": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.Int(int(data['channel_identifier'])), )",
      "18": "node_address=to_canonical_address(data['node_address']), channel_name=typing.ChannelID(int(data['channel_name'])), )",
      "19": "node_address=to_canonical_address(data['node_address']), channel_id=typing.ChannelID(int(data['channel_id'])), )",
      "20": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])),",
      "21": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing_.ChannelID(int(data['channel_identifier'])), )",
      "22": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier']), )",
      "23": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.CachedID(int(data['channel_identifier'])), )",
      "24": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.Callable(int(data['channel_identifier'])), )",
      "25": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID (int(data['channel_identifier'])), )",
      "26": "node_address=to_canonical_address(data['node_address']), channel_identifier_number=typing.ChannelID(int(data['channel_identifier_number'])), )",
      "27": "node_address=to_canonical_address(data['node_address']), path_identifier=typing.ChannelID(int(data['path_identifier'])), )",
      "28": "node_address=to_canonical_address(data['node_address']), canal_identifier=typing.ChannelID(int(data['channel_identifier'])), )",
      "29": "node_address=to_canonical_address(data['node_address']), channels=typing.ChannelID(int(data['channel_identifier'])), )",
      "30": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier']]), )",
      "31": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.CaseInt(int(data['channel_identifier'])), )",
      "32": "node_address=to_canonical_address(data['node_address']), channel_identifier =typing.ChannelID(int(data['channel_identifier'])), )",
      "33": "node_address=to_canonical_address(data['node_address']), channel_identifier_=typing.ChannelID(int(data['channel_identifier_'])), )",
      "34": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.Optional[int(data['channel_identifier'])), )",
      "35": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing['channel_identifier']), )",
      "36": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])),...)",
      "37": "node_address=to_canonical_address(data['node_address']), type=typing.ChannelID(int(data['type'])), )",
      "38": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.CanonicalID(int(data['channel_identifier'])), )",
      "39": "node_address=to_canonical_address(data['node_address']), channel_ident=typing.ChannelID(int(data['channel_identifier'])), )",
      "40": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelIdentifier(int(data['channel_identifier'])), )",
      "41": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.CHANNELID(int(data['channel_identifier'])), )",
      "42": "node_address=to_canonical_address(data['node_address']), source_identifier=typing.ChannelID(int(data['source_identifier'])), )",
      "43": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) is not None:",
      "44": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.CacheID(int(data['channel_identifier'])), )",
      "45": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])) ), )",
      "46": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.Callback(int(data['channel_identifier'])), )",
      "47": "node_address=to_canonical_address(data['node_address']), channel_identifier: typing.ChannelID(int(data['channel_identifier'])), )",
      "48": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.Channel ID(int(data['channel_identifier'])), )",
      "49": "node_address=to_canonical_address(data['node_address']), # type: Typing.ChannelID(int(data['channel_identifier'])), )"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
    "target_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
    "warning_line": "                new_value = self._handle_Subscript(value)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Instagram/LibCST",
    "source_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "target_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8^",
    "target_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "predictions": [
      "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)"
    ],
    "correct": false,
    "top_five": {
      "0": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "1": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is not None new_value = self._handle_Subscript(value)",
      "2": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert value is not None new_value = self._handle_Subscript(value)",
      "3": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "4": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(base.value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "5": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert cst.Subscript is not None new_value = self._handle_Subscript(value)",
      "6": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(value, Subscript) new_value = self._handle_Subscript(value)",
      "7": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is not None and new_value = self._handle_Subscript(value)",
      "8": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "9": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, Subscript): new_value = self._handle_Subscript(value)",
      "10": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): value = self._handle_Subscript(value)",
      "11": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): return self._handle_Subscript(value)",
      "12": "new_value = self._handle_NameOrAttribute(value) assert isinstance(base.value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "13": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is instance(value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "14": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "15": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value or cst.Subscript): new_value = self._handle_Subscript(value)",
      "16": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(base.value, Subscript) new_value = self._handle_Subscript(value)",
      "17": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): elif isinstance(value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "18": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is not None: new_value = self._handle_Subscript(value)",
      "19": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript) elif isinstance(value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "20": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript) elif isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "21": "new_value = self._handle_NameOrAttribute(value) elif isinstance(value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "22": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value or cst.Subscript): assert new_value is not None new_value = self._handle_Subscript(value)",
      "23": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if isinstance(value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "24": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): self._handle_Subscript(value)",
      "25": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(value, cst.Subscript, value) new_value = self._handle_Subscript(value)",
      "26": "new_value = self._handle_NameOrAttribute(value) elif isinstance(value, cst.Subscript): assert new_value is not None new_value = self._handle_Subscript(value)",
      "27": "new_value = self._handle_NameOrAttribute(value) assert new_value isinstance(base.value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "28": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if cst.Subscript is not None: new_value = self._handle_Subscript(value)",
      "29": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(base.value, cst.Subscript, value) new_value = self._handle_Subscript(value)",
      "30": "new_value = self._handle_NameOrAttribute(value) elif cst.Subscript isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "31": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(value, value) new_value = self._handle_Subscript(value)",
      "32": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript) && new_value = self._handle_Subscript(value)",
      "33": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert isinstance(value, sub.value) new_value = self._handle_Subscript(value)",
      "34": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, expression.Subscript): new_value = self._handle_Subscript(value)",
      "35": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if isinstance(base.value, cst.Subscript): new_value = self._handle_Subscript(value)",
      "36": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert base.value is not None new_value = self._handle_Subscript(value)",
      "37": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert base is not None new_value = self._handle_Subscript(value)",
      "38": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value is instance(value) new_value = self._handle_Subscript(value)",
      "39": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert new_value = self._handle_Subscript(value)",
      "40": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if isinstance(value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "41": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): return new_value",
      "42": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if isinstance(value, cst.Subscript): assert new_value is not None new_value = self._handle_Subscript(value)",
      "43": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if isinstance(base.value, cst.Subscript) new_value = self._handle_Subscript(value)",
      "44": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, sub.value): new_value = self._handle_Subscript(value)",
      "45": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): assert self._handle_Subscript(value)",
      "46": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base[value], cst.Subscript]): new_value = self._handle_Subscript(value)",
      "47": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, cst.Subscript): if isinstance(value, Subscript): new_value = self._handle_Subscript(value)",
      "48": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value and cst.Subscript): new_value = self._handle_Subscript(value)",
      "49": "new_value = self._handle_NameOrAttribute(value) elif isinstance(base.value, base.Subscript): new_value = self._handle_Subscript(value)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": true,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.load(json_fp)\n            for jd in json_data:\n",
    "warning_line": "                json_data = json.loads(json_fp)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "target_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:"
    ],
    "correct": false,
    "top_five": {
      "0": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: for jd in json_data:",
      "1": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): return json_data = json.loads(json_fp) for jd in json_data:",
      "2": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not json_fp: return json_data for jd in json_data:",
      "3": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): json_data = json.loads(json_fp) for jd in json_data:",
      "4": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: var json_data = json.loads(json_fp) for jd in json_data:",
      "5": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not json_fp: return json_data.loads(json_fp) for jd in json_data:",
      "6": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, Bytes): json_data = json.loads(json_fp) for jd in json_data:",
      "7": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): return json_data for jd in json_data:",
      "8": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, Bytes): return json_data = json.loads(json_fp) for jd in json_data:",
      "9": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): return json_data.loads(json_fp) for jd in json_data:",
      "10": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: assert json_fp is not None and json_data = json.loads(json_fp) for jd in json_data:",
      "11": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if json_fp is not None: json_data = json.loads(json_fp) for jd in json_data:",
      "12": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: assert json_data is not None and json_fp = json.loads(json_fp) for jd in json_data:",
      "13": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if json_fp is not None: return json_data = json.loads(json_fp) for jd in json_data:",
      "14": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): json_data = json.loads(io.TextIOWrapper(json_fp)) for jd in json_data:",
      "15": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bool): json_data = json.loads(json_fp) for jd in json_data:",
      "16": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, Bytes): return json_data for jd in json_data:",
      "17": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = typing.Union[bytes, str](json_fp) for jd in json_data:",
      "18": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = tuple(json_fp) for jd in json_data:",
      "19": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if json_fp is not None: return json_data.loads(json_fp) for jd in json_data:",
      "20": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, Bytes): return json_data.loads(json_fp) for jd in json_data:",
      "21": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): assert isinstance(json_fp, bytes) for jd in json_data:",
      "22": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, io.TextIOWrapper): json_data = json.loads(json_fp) for jd in json_data:",
      "23": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = Array.prototype.slice.call(json.loads(json_fp)) for jd in json_data:",
      "24": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, TextIOWrapper): json_data = json.loads(json_fp) for jd in json_data:",
      "25": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = typing.Union[bytes, str](json_fp) for jd in json_data:",
      "26": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if json_fp is not None: return json_data for jd in json_data:",
      "27": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, io.TextIOWrapper): json_data = json.loads(io.TextIOWrapper(json_fp)) for jd in json_data:",
      "28": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.utils.loads(json_fp) for jd in json_data:",
      "29": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bool): return json_data = json.loads(json_fp) for jd in json_data:",
      "30": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.parse(json_fp) for jd in json_data:",
      "31": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not json_fp is not None: json_data = json.loads(json_fp) for jd in json_data:",
      "32": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, Bytes): json_data = json.loads(io.TextIOWrapper(json_fp)) for jd in json_data:",
      "33": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): return json_data = json.loads(io.TextIOWrapper(json_fp)) for jd in json_data:",
      "34": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: return json_data.loads(json_fp) for jd in json_data:",
      "35": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytecode): json_data = json.loads(bytecode(json_fp)) for jd in json_data:",
      "36": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = typing.Union[bytes, str] for jd in json_data:",
      "37": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = json.utils(json_fp) for jd in json_data:",
      "38": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: json_data = fp.load(json_fp) for jd in json_data:",
      "39": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not isinstance(json_fp, bytes): return json_data = json.loads(json_fp) for jd in json_data:",
      "40": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not json_fp: return json_data = json.loads(json_fp) for jd in json_data:",
      "41": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not isinstance(json_fp, bytes): json_data = json.loads(json_fp) for jd in json_data:",
      "42": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytes): json_data = json.loads(str(json_fp)) for jd in json_data:",
      "43": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, json_data): for jd in json_data:",
      "44": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytecode): return json_data = json.loads(bytecode(json_fp)) for jd in json_data:",
      "45": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, bytecode): json_data = json.loads(bytecode.bytes(json_fp)) for jd in json_data:",
      "46": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if not json_fp: return json_data for jd in json_data",
      "47": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, io.TextIOWrapper): return json_data = json.loads(json_fp) for jd in json_data:",
      "48": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if isinstance(json_fp, io.TextIOWrapper): return json_data for jd in json_data:",
      "49": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: if json_fp is not None: json_data = json.loads(type(json_fp)) for jd in json_data:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table\n\n",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                tables[name] = table\n\n",
    "warning_line": "                tables[table.name] = table",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "source_filename": "transformers4rec/torch/features/embedding.py",
    "target_filename": "transformers4rec/torch/features/embedding.py",
    "source_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7^",
    "target_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "predictions": [
      "features_dim[name] = table.dim if table.name is not None: tables[table.name] = table"
    ],
    "correct": false,
    "top_five": {
      "0": "features_dim[name] = table.dim if table.name is not None: tables[table.name] = table",
      "1": "features_dim[name] = table.dim if table.name is None and table.name not in tables: tables[table.name] = table",
      "2": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = table",
      "3": "features_dim[name] = table.dim if table.name is not None and table.name not in tables: tables[table.name] = table",
      "4": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = dict(table.name)",
      "5": "features_dim[name] = table.dim if table.name not in tables: assert table.name is not None tables[table.name] = table",
      "6": "features_dim[name] = table.dim if table.name is not None and table[table.name] = table",
      "7": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = dict()",
      "8": "features_dim[name] = table.dim if table.name in tables is not None: tables[table.name] = table",
      "9": "features_dim[name] = table.dim if table.name in tables: tables[table.name] = table",
      "10": "features_dim[name] = table.dim if table.name is None in tables: tables[table.name] = table",
      "11": "features_dim[name] = table.dim if table.name is not None and table.name is not None: tables[table.name] = table",
      "12": "features_dim[name] = table.dim if table.name in table: tables[table.name] = table",
      "13": "features_dim[name] = table.dim if name is not None and table.name not in tables: tables[table.name] = table",
      "14": "features_dim[name] = table.dim if table.name is not None in tables: tables[table.name] = table",
      "15": "features_dim[name] = table.dim if table.name not in tables: if table.name not in tables: tables[table.name] = table",
      "16": "features_dim[name] = table.dim if table.name not in tables: \"\" tables[table.name] = table",
      "17": "features_dim[name] = table.dim if table.name in dict: tables[table.name] = table",
      "18": "features_dim[name] = table.dim if table.name is None not in tables: tables[table.name] = table",
      "19": "features_dim[name] = table.dim if table.name is None and table.name is not in tables: tables[table.name] = table",
      "20": "features_dim[name] = table.dim if table.name in table is not None: tables[table.name] = table",
      "21": "features_dim[name] = table.dim if table.name not in tables: dict() tables[table.name] = table",
      "22": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = \"\"",
      "23": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = list(table.name)",
      "24": "features_dim[name] = table.dim if table.name not in tables: dict[table.name] = table",
      "25": "features_dim[name] = table.dim if table.name not in tables: options[table.name] = table",
      "26": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = dict[table.name]",
      "27": "features_dim[name] = table.dim if table.name is None: tables[table.name] = table",
      "28": "features_dim[name] = table.dim if table.name is None and table.name in tables: tables[table.name] = table",
      "29": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = []",
      "30": "features_dim[name] = table.dim if table.name in table: tables[table.name] = dict(table.name)",
      "31": "features_dim[name] = table.dim if table.name not in tables: rows[table.name] = table",
      "32": "features_dim[name] = table.dim if table.name in tables: tables[table.name] = dict(table.name)",
      "33": "features_dim[name] = table.dim if table.name not in tables: arguments[table.name] = table",
      "34": "features_dim[name] = table.dim if table.name is not None and tables[table.name] = table",
      "35": "features_dim[name] = table.dim if table.name not in tables: dict(table.name) = tables[table.name]",
      "36": "features_dim[name] = table.dim if table.name in dict is not None: tables[table.name] = table",
      "37": "features_dim[name] = table.dim if list(table.name) not in tables: lists[table.name] = table",
      "38": "features_dim[name] = table.dim if table.name in table is None: tables[table.name] = table",
      "39": "features_dim[name] = table.dim if table.name in table: tables[table.name] = dict()",
      "40": "features_dim[name] = table.dim if table.name is not None but tables[table.name] = table",
      "41": "features_dim[name] = table.dim if name of table.name not in tables: tables[table.name] = table",
      "42": "features_dim[name] = table.dim if table.name in tables: tables[table.name] = dict()",
      "43": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = dict.__setitem__()",
      "44": "features_dim[name] = table.dim if table.name in tables: \"\" tables[table.name] = table",
      "45": "features_dim[name] = table.dim if table.name in table: \"\" tables[table.name] = table",
      "46": "features_dim[name] = table.dim if table.name not in tables: lists[table.name] = table",
      "47": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = list[table.name]",
      "48": "features_dim[name] = table.dim if table.name and table.name not in tables: tables[table.name] = table",
      "49": "features_dim[name] = table.dim if table.name not in tables: tables[table.name] = list(table)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )\n",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_line": "            current_htlc_signatures=[],",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 477,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "spesmilo/electrum",
    "source_filename": "electrum/lnpeer.py",
    "target_filename": "electrum/lnpeer.py",
    "source_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2^",
    "target_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "predictions": [
      "current_commitment_signature=None, current_htlc_signatures=bytes, )"
    ],
    "correct": false,
    "top_five": {
      "0": "current_commitment_signature=None, current_htlc_signatures=bytes, )",
      "1": "current_commitment_signature=None, current_htlc_signatures=bytes(), )",
      "2": "current_commitment_signature=None, current_htlc_signatures= Bytes([], ) )",
      "3": "current_commitment_signature=None, current_htlc_signatures=None, )",
      "4": "current_commitment_signature=None, current_htlc_signatures=List[], )",
      "5": "current_commitment_signature=None, current_htlc_signatures= None, )",
      "6": "current_commitment_signature=None, current_htlc_signatures= bytes, )",
      "7": "current_commitment_signature=None, current_htlc_signatures=[], )",
      "8": "current_commitment_signature=None, current_htlc_signatures= Bytes([], []) )",
      "9": "current_commitment_signature=None, current_htlc_signatures=[] )",
      "10": "current_commitment_signature=None, current_htlc_signatures= Bytes(), )",
      "11": "current_commitment_signature=None, current_htlc_signatures= Bytes([], []), )",
      "12": "current_commitment_signature=None, current_htlc_signatures= [], )",
      "13": "current_commitment_signature=None, current_htlc_signatures= [] )",
      "14": "current_commitment_signature=None, current_htlc_signatures= Bytes([], [], ) )",
      "15": "current_commitment_signature=None, current_htlc_signatures= Bytes([]), )",
      "16": "current_commitment_signature=None, current_htlc_signatures=bytes() )",
      "17": "current_commitment_signature=None, current_htlc_signatures=Bytes([], ) )",
      "18": "current_commitment_signature=None, current_htlc_signatures=List[] )",
      "19": "current_commitment_signature=None, current_htlc_signatures=bytes, )",
      "20": "current_commitment_signature=None, current_htlc_signatures= Bytes([], Bytes) )",
      "21": "current_commitment_signature=None, current_htlc_signatures='', )",
      "22": "current_commitment_signature=None, current_htlc_signatures= Bytes, )",
      "23": "current_commitment_signature=None, current_htlc_signatures=\"\", )",
      "24": "current_commitment_signature=None, current_htlc_signatures=Bytes([], [], ) )",
      "25": "current_commitment_signature=None, current_htlc_signatures=False, )",
      "26": "current_commitment_signature=None, current_htlc_signatures = Bytes([], ) )",
      "27": "current_commitment_signature=None, current_htlc_signatures=Binary, )",
      "28": "current_commitment_signature=None, current_htlc_signatures=Array([], ) )",
      "29": "current_commitment_signature=None, current_htlc_signatures=bytes([], ) )",
      "30": "current_commitment_signature=None, current_htlc_signatures= Bytes([]) )",
      "31": "current_commitment_signature=None, current_htlc_signatures= Bytes( [], ) )",
      "32": "current_commitment_signature=None, current_htlc_signatures= \"\", )",
      "33": "current_commitment_signature=None, current_htlc_signatures=quotes.bytes(), )",
      "34": "current_commitment_signature=None, current_htlc_signatures=Binary([], ) )",
      "35": "current_commitment_signature=None, current_htlc_signatures=Bytes([], []), )",
      "36": "current_commitment_signature=None, current_htlc_signatures=Yes, )",
      "37": "current_commitment_signature=None, current_htlc_signatures=Bytes([], Bytes) )",
      "38": "current_commitment_signature=None, current_htlc_signatures=Bytes([]), )",
      "39": "current_commitment_signature=None, current_htlc_signatures=bytes_only, )",
      "40": "current_commitment_signature=None, current_htlc_signatures=Array([], bytes) )",
      "41": "current_commitment_signature=None, current_htlc_signatures=Bytes[], )",
      "42": "current_commitment_signature=None, current_htlc_signatures=Array.protocol.__init__, )",
      "43": "current_commitment_signature=None, current_htlc_signatures=Bytes([], []) )",
      "44": "current_commitment_signature=None, current_htlc_signatures=bytes_0, )",
      "45": "current_commitment_signature=None, current_htlc_signatures= null, )",
      "46": "current_commitment_signature=None, current_htlc_signatures= Bytes([], [], )",
      "47": "current_commitment_signature=None, current_htlc_signatures= None )",
      "48": "current_commitment_signature=None, current_htlc_signatures= Bytes([], bytes) )",
      "49": "current_commitment_signature=None, htlc_signatures=bytes, )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    with proc as nix_env:\n        return parse_packages_xml(nix_env.stdout)\n",
    "target_code": "    with proc as nix_env:\n        assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_line": "        return parse_packages_xml(nix_env.stdout)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 258,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Mic92/nixpkgs-review",
    "source_filename": "nixpkgs_review/review.py",
    "target_filename": "nixpkgs_review/review.py",
    "source_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a^",
    "target_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "predictions": [
      "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout))"
    ],
    "correct": false,
    "top_five": {
      "0": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout))",
      "1": "with proc as nix_env: assert nix_env.stdout is not None return parse_packages_xml(nix_env.stdout)",
      "2": "with proc as nix_env: return bytes(parse_packages_xml(nix_env.stdout))",
      "3": "with proc as nix_env: assert isinstance(nix_env, IO[bytes]) return parse_packages_xml(nix_env.stdout)",
      "4": "with proc as nix_env: return IO[bytes](nix_env.stdout)",
      "5": "with proc as nix_env: return Bytes(parse_packages_xml(nix_env.stdout))",
      "6": "with proc as nix_env: return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "7": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout))",
      "8": "with proc as nix_env: return IO[bytes](parse_packages_xml(stdout))",
      "9": "with proc as nix_env: assert isinstance(nix_env.stdout, IO[bytes]) return parse_packages_xml(nix_env.stdout)",
      "10": "with proc as nix_env: assert nix_env is not None return parse_packages_xml(nix_env.stdout)",
      "11": "with proc as nix_env: IO[bytes] = { nix_env.stdout } return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "12": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout)).decode(IO[bytes])",
      "13": "with proc as nix_env: return isinstance(parse_packages_xml(nix_env.stdout))",
      "14": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout)) else:",
      "15": "with proc as nix_env: call IO[bytes](IO[bytes]) return parse_packages_xml(IO[bytes](nix_env.stdout)",
      "16": "with proc as nix_env: return utils.parse_packages_xml(nix_env.stdout)",
      "17": "with proc as nix_env: return Optional[IO[bytes]](parse_packages_xml(nix_env.stdout))",
      "18": "with proc as nix_env: IO[bytes] = [] return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "19": "with proc as nix_env: assert nix_env.stdout is not None return parse_packages_xml(stdout)",
      "20": "with proc as nix_env: assert isinstance(nix_env, IO[bytes]) return parse_packages_xml(stdout)",
      "21": "with proc as nix_env: if nix_env.stdout is None: return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "22": "with proc as nix_env: return IO.bytes(parse_packages_xml(nix_env.stdout))",
      "23": "with proc as nix_env: IO[bytes] = { } return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "24": "with proc as nix_env: return (parse_packages_xml(nix_env.stdout))",
      "25": "with proc as nix_env: call IO[bytes](IO[bytes]) return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "26": "with proc as nix_env: assert nix_env.stdout is not None return parse_packages_xml(Nix_env.stdout)",
      "27": "with proc as nix_env: return IO[bytes](parse_packages_xml(stdout, nix_env.stdout))",
      "28": "with proc as nix_env: return IO[bytes](parse_packages_xml(tmp_nix_env.stdout))",
      "29": "with proc as nix_env: return Parse_packages_xml(IO[bytes](nix_env.stdout))",
      "30": "with proc as nix_env: return IObytes(parse_packages_xml(nix_env.stdout))",
      "31": "with proc as nix_env: return bool(parse_packages_xml(nix_env.stdout))",
      "32": "with proc as nix_env: return IO(parse_packages_xml(nix_env.stdout))",
      "33": "with proc as nix_env: return IO_bytes(parse_packages_xml(nix_env.stdout))",
      "34": "with proc as nix_env: return IO[bytes](parse_packages_xml( nix_env.stdout) )",
      "35": "with proc as nix_env: return None(parse_packages_xml(nix_env.stdout))",
      "36": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout)).decode()",
      "37": "with proc as nix_env: IO[bytes] = [ IO[bytes] ] return parse_packages_xml(nix_env.stdout)",
      "38": "with proc as nix_env: return IO[bytes](parse_packages_xml(io[bytes]) nix_env.stdout)",
      "39": "with proc as nix_env: return OK(parse_packages_xml(nix_env.stdout))",
      "40": "with proc as nix_env: return parse_packages_xml(bytes_list(nix_env.stdout))",
      "41": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout) )",
      "42": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout)),",
      "43": "with proc as nix_env: return TypeError(parse_packages_xml(nix_env.stdout))",
      "44": "with proc as nix_env: assert nix_env.stdout is not None return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "45": "with proc as nix_env: IO[bytes] = [ IO[bytes] ] return parse_packages_xml(IO[bytes](nix_env.stdout))",
      "46": "with proc as nix_env: if nix_env.stdout is None: return parse_packages_xml(nix_env.stdout)",
      "47": "with proc as nix_env: return IO[bytes](parse_packages_xml(nix_env.stdout));",
      "48": "with proc as nix_env: return Optional[IO[bytes]](parse_packages_xml(nix_env.stdout)]",
      "49": "with proc as nix_env: assert nix_env.stdout is not None return parse_packages_xml(nix_env.stdout"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_line": "        player.init_names(self._name, title, self.description, self.short_description)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/charbuilder.py",
    "target_filename": "tale/charbuilder.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)"
    ],
    "correct": false,
    "top_five": {
      "0": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "1": "player.init_gender(self.gender) title = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "2": "player.init_gender(self.gender) title = None if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "3": "player.init_gender(self.gender) title = None if self.title is not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "4": "player.init_gender(self.gender) title = None if self.title == self._name else self.title else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "5": "player.init_gender(self.gender) if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "6": "player.init_gender(self.gender) name = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "7": "player.init_gender(self.gender) title = None if self.title === self._name else self.title else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "8": "player.init_gender(self.gender) title = None if self.title && self.title else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "9": "player.init_gender(self.gender) if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "10": "player.init_gender(self.gender) self.title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "11": "player.init_gender(self.gender) title = None if self.title == self._name else self.title if self.title is not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "12": "player.init_gender(self.gender) title = None if self.title == self._name else self.title self.init_names(self._name, title, self.description, self.short_description)",
      "13": "player.init_gender(self.gender) title = None if self.title == self._name else self.title return player.init_names(self._name, title, self.description, self.short_description)",
      "14": "player.init_gender(self.gender) title = None if self.title is None else self.title else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "15": "player.init_gender(self.gender) title = None if self.title == or self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "16": "player.init_gender(self.gender) title = None if self.title == self._name else self.title is not None player.init_names(self._name, title, self.description, self.short_description)",
      "17": "player.init_gender(self.gender) title = None if self.title == self._name else self.title.player.init_names(self._name, title, self.description, self.short_description)",
      "18": "player.init_gender(self.gender) self.title = None if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "19": "player.init_gender(self.gender) name = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "20": "player.init_gender(self.gender) title = None if self.title == self._name else self.title assert title is not None player.init_names(self._name, title, self.description, self.short_description)",
      "21": "player.init_gender(self.gender) if self.title == self._name else self.title if self.title is not None player.init_names(self._name, title, self.description, self.short_description)",
      "22": "player.init_gender(self.gender) title = None if self.title == self._name else self.title if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "23": "player.init_gender(self.gender) title = None if self.title == self._name else self.title assert title is not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "24": "player.init_gender(self.gender) title = None if self.title === self._name else self.title if self.title is not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "25": "player.init_gender(self.gender) title = None if self.title ==/self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "26": "player.init_gender(self.gender) title = None if self.title == self._name else self.title = None player.init_names(self._name, title, self.description, self.short_description)",
      "27": "player.init_gender(self.gender) title = None if self.title== self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "28": "player.init_gender(self.gender) if self.title is None if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "29": "player.init_gender(self.gender) title = None if self.title == self._name else self.title.name player.init_names(self._name, title, self.description, self.short_description)",
      "30": "player.init_gender(self.gender) title = None if self.title === self._name else self.title return player.init_names(self._name, title, self.description, self.short_description)",
      "31": "player.init_gender(self.gender) self.title = None if self.title is not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "32": "player.init_gender(self.gender) _title = None if self.title == self._name else self.title player.init_names(self._name, _title, self.description, self.short_description)",
      "33": "player.init_gender(self.gender) title = None if self.title === self._name else self.title self.init_names(self._name, title, self.description, self.short_description)",
      "34": "player.init_gender(self.gender) title = None if self.title === self._name else self.title.player.init_names(self._name, title, self.description, self.short_description)",
      "35": "player.init_gender(self.gender) var title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "36": "player.init_gender(self.gender) title = None if self.title == self._name else self.title if self.title is not None player.init_names(self._name, title, self.description, self.short_description)",
      "37": "player.init_gender(self.gender) title = None if self.title!== self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "38": "player.init_gender(self.gender) if self.title is None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "39": "player.init_gender(self.gender) title = None if self.title === self._name else self.title = None player.init_names(self._name, title, self.description, self.short_description)",
      "40": "player.init_gender(self.gender) title= None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "41": "player.init_gender(self.gender) self.title = None if self.title === self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "42": "player.init_gender(self.gender) title = None if self.title == '' else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "43": "player.init_gender(self.gender) title = None if self.title === self._name else self.title assert title is not None player.init_names(self._name, title, self.description, self.short_description)",
      "44": "player.init_gender(self.gender) title = None if self.title === self._name else self.title is not None player.init_names(self._name, title, self.description, self.short_description)",
      "45": "player.init_gender(self.gender) Title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "46": "player.init_gender(self.gender) if self.title == self._name else self.title if self.title is None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "47": "player.init_gender(self.gender) title = None if self.title == self._name else self.title.init_names(self._name, title, self.description, self.short_description)",
      "48": "player.init_gender(self.gender) title = None if self.title not None else self.title player.init_names(self._name, title, self.description, self.short_description)",
      "49": "player.init_gender(self.gender) title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_line": "    op_node = compile_type_check_op(expr, ctx=ctx)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 91,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/expr.py",
    "target_filename": "edb/edgeql/compiler/expr.py",
    "source_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb^",
    "target_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "predictions": [
      "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)"
    ],
    "correct": false,
    "top_five": {
      "0": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "1": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "2": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "3": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert expr is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "4": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert isinstance(expr, ctx=ctx) op_node = compile_type_check_op(expr, ctx=ctx)",
      "5": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert op is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "6": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert op is not None: op_node = compile_type_check_op(expr, ctx=ctx)",
      "7": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "8": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert ctx is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "9": "def compile_IsOp( expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "10": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert expr is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "11": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert isinstance(expr, ctx=ctx) op_node = compile_type_check_op(expr, ctx=ctx)",
      "12": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert op is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "13": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert expr is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "14": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert op is not None: op_node = compile_type_check_op(expr, ctx=ctx)",
      "15": "def compile_IsOp( expr: *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "16": "def compile_IsOp( expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "17": "def compile_IsOp( expr: IsOp, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "18": "def compile_IsOp( expr: *, ctx: context.ContextLevel) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "19": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert expr is not None and op_node = compile_type_check_op(expr, ctx=ctx)",
      "20": "def compile_IsOp( expr, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "21": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert isolator is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "22": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert ctx is not None and op_node = compile_type_check_op(expr, ctx=ctx)",
      "23": "def compile_IsOp( expr: qlast.Base*, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "24": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel, op_node = compile_type_check_op(expr, ctx=ctx)",
      "25": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert ctx is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "26": "def compile_IsOp( expr: qlast.IsOp, *, ctx: context.ContextLevel ) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "27": "def compile_IsOp( expr: qlast.Math, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "28": "def compile_IsOp( expr: *, ctx: context.ContextLevel) -> irast.Set: assert expr is not None op_node = compile_type_check_op(expr, ctx=ctx)",
      "29": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set : op_node = compile_type_check_op(expr, ctx=ctx)",
      "30": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert op is not None, op_node = compile_type_check_op(expr, ctx=ctx)",
      "31": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> Irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "32": "def compile_IsOp( expr, *, ctx: context.ContextLevel) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "33": "def compile_IsOp( expr: qlast.Set, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "34": "def compile_IsOp( expr: qlast.Base *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "35": "def compile_IsOp( expr: IsOp, *, ctx: context.ContextLevel) -> irast.Set: assert op_node = compile_type_check_op(expr, ctx=ctx)",
      "36": "def compile_IsOp( expr: *, ctx: context.ContextLevel ) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "37": "def compile_IsOp( expr: qlast.String, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "38": "def compile_IsOp( expr: Base, *, ctx: context.ContextLevel) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "39": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert ctx=ctx, op_node = compile_type_check_op(expr, ctx=ctx)",
      "40": "def compile_IsOp( expr, *, ctx: context.ContextLevel ) -> irast.Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "41": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: node = compile_type_check_op(expr, ctx=ctx)",
      "42": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> Set: op_node = compile_type_check_op(expr, ctx=ctx)",
      "43": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: return compile_type_check_op(expr, ctx=ctx)",
      "44": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert isinstance(expr, op_node, qlast.Base) op_node = compile_type_check_op(expr, ctx=ctx)",
      "45": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: self = compile_type_check_op(expr, ctx=ctx)",
      "46": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert isinstance(expr, op_node, qlast.IsOp) op_node = compile_type_check_op(expr, ctx=ctx)",
      "47": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert isinstance(expr, ctx=ctx) op_node = compile_type_check_op(expr, *ctx=ctx)",
      "48": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: assert isinstance(expr, op_node = compile_type_check_op(expr, ctx=ctx)",
      "49": "def compile_IsOp( expr: qlast.Base, *, ctx: context.ContextLevel ) -> irast.Set: assert isinstance(expr, op_node, qlast.Base) op_node = compile_type_check_op(expr, ctx=ctx)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": true,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)\n",
    "target_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_line": "            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args) updates = component.pipeline_init(*args)"
    ],
    "correct": false,
    "top_five": {
      "0": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args) updates = component.pipeline_init(*args)",
      "1": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) updates = component.pipeline_init(*args)",
      "2": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str) updates = component.pipeline_init(*args)",
      "3": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict()) updates = component.pipeline_init(*args)",
      "4": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "5": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, dict) updates = component.pipeline_init(*args)",
      "6": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.context) updates = component.pipeline_init(*args)",
      "7": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.id) updates = component.pipeline_init(*args)",
      "8": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get('pipeline_init')) updates = component.pipeline_init(*args)",
      "9": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.text()) updates = component.pipeline_init(*args)",
      "10": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.name) updates = component.pipeline_init(*args)",
      "11": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get()) updates = component.pipeline_init(*args)",
      "12": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\") updates = component.pipeline_init(*args)",
      "13": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.append(args) updates = component.pipeline_init(*args)",
      "14": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict()) updates = component.pipeline_init(*args)",
      "15": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict) updates = component.pipeline_init(*args)",
      "16": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.result) updates = component.pipeline_init(*args)",
      "17": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str()) updates = component.pipeline_init(*args)",
      "18": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init) updates = component.pipeline_init(*args)",
      "19": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.trim()) updates = component.pipeline_init(*args)",
      "20": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, str(self.config)) updates = component.pipeline_init(*args)",
      "21": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.text) updates = component.pipeline_init(*args)",
      "22": "for component in self.pipeline: assert component.pipeline_init_args() is not None args = rasa_nlu.components.fill_args(context, self.config) updates = component.pipeline_init(*args)",
      "23": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.encode()) updates = component.pipeline_init(*args)",
      "24": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.el) updates = component.pipeline_init(*args)",
      "25": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._args) updates = component.pipeline_init(*args)",
      "26": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.isinstance(args)) updates = component.pipeline_init(*args)",
      "27": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict) updates = component.pipeline_init(*args)",
      "28": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.required) updates = component.pipeline_init(*args)",
      "29": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get_args()) updates = component.pipeline_init(*args)",
      "30": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.setup()) updates = component.pipeline_init(*args)",
      "31": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.index) updates = component.pipeline_init(*args)",
      "32": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get().get()) updates = component.pipeline_init(*args)",
      "33": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, dict[self.config]) updates = component.pipeline_init(*args)",
      "34": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.status) updates = component.pipeline_init(*args)",
      "35": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.length) updates = component.pipeline_init(*args)",
      "36": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.__args) updates = component.pipeline_init(*args)",
      "37": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.cache) updates = component.pipeline_init(*args)",
      "38": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.list()) updates = component.pipeline_init(*args)",
      "39": "for component in self.pipeline: args_init = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "40": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init()) updates = component.pipeline_init(*args)",
      "41": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.request) updates = component.pipeline_init(*args)",
      "42": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.split('.')) updates = component.pipeline_init(*args)",
      "43": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.results) updates = component.pipeline_init(*args)",
      "44": "for component in self.pipeline: assert component.pipeline_init_args() is not None args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) updates = component.pipeline_init(*args)",
      "45": "for component in self.pipeline: assert component.pipeline_init_args() is not None args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) updates = component.pipeline_init(*args)",
      "46": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.split('')) updates = component.pipeline_init(*args)",
      "47": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args()) updates = component.pipeline_init(*args)",
      "48": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.attr('pipeline_init')) updates = component.pipeline_init(*args)",
      "49": "for component in self.pipeline: args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.attr(\"pipeline_init\") updates = component.pipeline_init(*args)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                new = Or(new, key_argument != index_argument)\n\n",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_line": "                new = Or(new, key_argument != index_argument)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1374,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "new = Or(new, key_argument!= index_argument)"
    ],
    "correct": false,
    "top_five": {
      "0": "new = Or(new, key_argument!= index_argument)",
      "1": "new = Or(new, key_argument == index_argument)",
      "2": "new = Or(new, key_argument!= index_argument) if key_argument is not None:",
      "3": "new = Or(new, key_argument!= index_argument) if key_argument is None:",
      "4": "new = Or(new, bool(key_argument!= index_argument))",
      "5": "new = Or(new, key_argument is not None!= index_argument)",
      "6": "new = Or(or(new, key_argument!= index_argument))",
      "7": "new = Or(new, key_argument!= index_argument) raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\")",
      "8": "new = Or(new, key_argument!= index_argument) if index_argument is not None:",
      "9": "new = or(new, key_argument!= index_argument)",
      "10": "new = bool(or(new, key_argument!= index_argument))",
      "11": "new = Or(null, key_argument!= index_argument)",
      "12": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\")",
      "13": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\")",
      "14": "new = Or(new, key_argument!= index_argument) assert key_argument is not None",
      "15": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\")",
      "16": "new = Or(new, key_argument!= index_argument) if index_argument is None:",
      "17": "new = Or(new, or(key_argument!= index_argument))",
      "18": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") return new = Or(new, key_argument!= index_argument)",
      "19": "new = Or(new[key_argument]!= index_argument)",
      "20": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\") return new = Or(new, key_argument!= index_argument)",
      "21": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type,\"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\")",
      "22": "new = Or(new, key_argument!= index_argument) if key_argument is None: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\")",
      "23": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\") new = Or(new, key_argument!= index_argument)",
      "24": "new = Or(new, key_argument!= index_argument) if index_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\")",
      "25": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\")",
      "26": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\"); raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\")",
      "27": "new = Or(new, key_argument!= index_argument) if index_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") return new = Or(new, key_argument!= index_argument)",
      "28": "new = Or(new, key_argument(!index_argument))",
      "29": "new = Or(bool(new, key_argument!= index_argument))",
      "30": "new = Or(new, key_argument!= index_argument) assert new is not None",
      "31": "new = Or(new, key_argument!= index_argument) if key_argument is None: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\") return new = Or(new, key_argument!= index_argument)",
      "32": "new = Or(new, key_argument!= index_argument) if key_argument is None: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\") new = Or(new, key_argument!= index_argument)",
      "33": "new = Or(new, key_argument!= index_argument) if index_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\")",
      "34": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\");",
      "35": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.\"\")",
      "36": "new = Or(new, bool(key_argument!= index_argument)) raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\")",
      "37": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") return new = Or(new, key_argument!= index_argument)",
      "38": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\"); raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") return new = Or(new, key_argument!= index_argument)",
      "39": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\")",
      "40": "new = Or(new, key_argument!= index_argument) if index_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\")",
      "41": "new = Or(new, key_argument!= index_argument) if not index_argument: raise ValueError(\"Mythril.laser.smt.bool.Bool is not None\")",
      "42": "new = Or(new, key_argument!= index_argument) raise ValueError(\"Mythril.laser.smt.bool.Bool\")",
      "43": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\"); raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.Bool\")",
      "44": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\"); raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\")",
      "45": "new = bool(Or(new, key_argument!= index_argument))",
      "46": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type,\"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\");",
      "47": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool.Bool\")",
      "48": "new = Or(new, key_argument!= bool)",
      "49": "new = Or(new, key_argument!= index_argument) if key_argument is not None: raise ValueError(f\"Unknown type\", \"mythril.laser.smt.bool.Bool\") raise ValueError(\"Unknown type\", \"mythril.laser.smt.bool.Bool\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_line": "    (\"read_map\", [T.File()], T.Map(None), _notimpl),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/StdLib.py",
    "target_filename": "WDL/StdLib.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([]), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),"
    ],
    "correct": false,
    "top_five": {
      "0": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([]), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "1": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "2": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "3": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([]), None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "4": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Any()], None], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "5": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "6": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "7": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(()), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "8": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\"\", T.Any()], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "9": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([0], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "10": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(False), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "11": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "12": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Bottom(T.Any()), None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "13": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Bottom()), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "14": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Equal(T.Any()), None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "15": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(\"\", None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "16": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Equal), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "17": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([0], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "18": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "19": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "20": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Base, T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "21": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\",T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "22": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\"\"], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "23": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\", T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "24": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Bottom(1)), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "25": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\", T.Any()], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "26": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(''), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "27": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(_notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "28": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([], None], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "29": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Any()), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "30": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Any()], T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "31": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\",T.Any()], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "32": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\"\", T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "33": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Any(), T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "34": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None, None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "35": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([[T.Any()], T.Any()], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "36": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([t.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "37": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "38": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([T.Any()]), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "39": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([], T.Any()), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "40": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map((T.Any()), None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "41": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Optional[\"\"], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "42": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([0], None], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "43": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(False), None), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "44": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([\"\", None], None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "45": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([, T.Any()], None], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "46": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map([], _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "47": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(\",\",\")), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "48": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(Right, None), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "49": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), (\"read_map\", [T.File()], T.Map(...), _notimpl), (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_line": "            amount=int(data['amount']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 598,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=to_canonical_address(data['amount']), initiator=to_canonical_address(data['initiator']),",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_identifier=TokenAmount(int(data['token_identifier'])), token_amount=TokenAmount(int(data['token_amount'])), initiator=to_canonical_address(data['initiator']),",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_identifier=to_canonical_address(data['token_identifier']), token_amount=TokenAmount(int(data['token_amount'])), initiator=to_canonical_address(data['initiator']),",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_net",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_identifier']),",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), token_amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiater=to_canonical_address(data['initiator']),",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_identifier_to_net",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_identifier_address(data['token_net",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_identifier_token_net",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_identifier=TokenAmount(int(data['identifier'])), token_amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), token_amount=TokenAmount(int(data['token_network_identifier'])), initiator=to_canonical_address(data['initiator']),",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_name=to_canonical_address(data['token_network_name']),",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), token_network_identifier=to_canonical_address(data['token_network_identifier']), initiator=to_canonical_address(data['initiator']),",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initial_address=to_canonical_address(data['initiator']),",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), token_amount=TokenAmount(int(data['token_network_identifier']), initiator=to_canonical_address(data['initiator']),",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(Int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(to_canonical_address(data['identifier'])), amount=TokenAmount(to_canonical_address(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_address(data['token_net",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_data_identifier_]),",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_identifier_]),",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), token_amount=TokenAmount(int(data['token_amount'])), initiator=to_canonical_address(data['initiator']),",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_name=to_canonical_address(data['token_network_name'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=to_canonical_address(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_net",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_name=to_canonical_address(data['token_network_name_name_name_name_name_name_name_name_name_name_name_name_",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=TokenAmount(int(data['token_network_identifier'])), token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=to_canonical_address(data['token_network_net",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenId(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=$(int(data['identifier'])), amount=$(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_identifier=TokenAmount(int(data['token_identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), token_amount=TokenAmount(int(data['token_amount'])), initiator=to_canonical_address(data['initiator']),",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(to_canonical_address(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_identifier_",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=TokenAmount(int(data['token_network_identifier'])), token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=TokenAmount(int(data['token_network_identifier']), amount=to_canonical_address(data['token_net",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=ID(int(data['identifier'])), amount=ID(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_networking_net",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_token_net",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), init=to_canonical_address(data['initiator']),",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=int(data['identifier']), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmountOrNumber(int(data['identifier'])), amount=TokenAmountOrNumber(int(data['amount'])), initiator=to_canonical_address(data['initiator']),",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=TokenAmount(int(data['token_network_identifier'])), token_network_identifier=to_canonical_address(data['token_network_identifier']), token_network_identifier=TokenAmount(int(data['token_network_identifier']), amount=to_to_canonical_address(data['token_net",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_data_identifier_to_net",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_identifier=to_canonical_address(data['token_network_data_identifier']),",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), token_network_network_identifier=to_canonical_address(data['token_network_net"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "target_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "warning_line": "        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `frozenset[str]` for 5th parameter `step_metadata_keys` to call `BuilderConfig.__init__` but got `typing.Set[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 210,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/datasets",
    "source_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "target_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "source_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f^",
    "target_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f",
    "predictions": [
      "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),"
    ],
    "correct": true,
    "top_five": {
      "0": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "1": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), has_policy_metadata=True,",
      "2": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), )",
      "3": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), ),",
      "4": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset( [_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "5": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]) ), ),",
      "6": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS=True, _QVEL=True, _ACTION_LOG_PROBS]), ),",
      "7": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
      "8": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), )",
      "9": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "10": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset(([_QPOS, _QVEL, _ACTION_LOG_PROBS])), ),",
      "11": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset((_QPOS, _QVEL, _ACTION_LOG_PROBS)), ),",
      "12": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS], ), ),",
      "13": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "14": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),...)",
      "15": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS], _QVEL, _ACTION_LOG_PROBS]), ),",
      "16": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), step_metadata_keys=frozenset([_ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "17": "file_suffix='_medium_expert-v2', step_metadata_keys = frozenfrozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "18": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ACTION_LOG_PROBS]),",
      "19": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_POS, _QVEL, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "20": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL], _ACTION_LOG_PROBS]), ),",
      "21": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), log_metadata=True,",
      "22": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "23": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ALGORITHM, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "24": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset((_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "25": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),...",
      "26": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "27": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_AQPOS, _QVEL, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "28": "file_suffix='_medium_expert-v2', step_metadata_keys = frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "29": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QUOTE, _QVEL, _ACTION_LOG_PROBS]), ),",
      "30": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "31": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, [_ACTION_LOG_PROBS]), ),",
      "32": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_POS, _QVEL, _ACTION_LOG_PROBS]),",
      "33": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ALGORITHM, _ACTION_LOG_PROBS]),",
      "34": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_COMMON_METADATA]),",
      "35": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset(),",
      "36": "file_suffix='_medium_expert-v2', StepMetadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "37": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ACTION_LOG_PROBS]), all_metadata_keys=frozenset([_ACTION_LOG_PROBS]),",
      "38": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
      "39": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS1, _QVEL, _ACTION_LOG_PROBS]), ),",
      "40": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_AQPOS, _QVEL, _ACTION_LOG_PROBS]), ),",
      "41": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), step_metadata_keys=frozenset([_ALGORITHM, _ACTION_LOG_PROBS]), has_policy_metadata=True,",
      "42": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ALGORITHM]),",
      "43": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QUVEL, _ACTION_LOG_PROBS]), ),",
      "44": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), debug_metadata=True,",
      "45": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]], ),",
      "46": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_ALGORITHM], ),",
      "47": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, [ACTION_LOG_PROBS]), ),",
      "48": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), all_metadata_keys=frozenset([_AQPOS, _QVEL, _ACTION_LOG_PROBS]),",
      "49": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]) ), )"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ngroup_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n\n",
    "target_code": "\ngroup_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_line": "    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "intel/dffml",
    "source_filename": "dffml/operation/output.py",
    "target_filename": "dffml/operation/output.py",
    "source_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3^",
    "target_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "predictions": [
      "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" )"
    ],
    "correct": false,
    "top_five": {
      "0": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" )",
      "1": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\") )",
      "2": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any]) )",
      "3": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec )",
      "4": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition[GroupBySpec] )",
      "5": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any]) )",
      "6": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple(GroupBySpec) )",
      "7": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" spec=GroupBySpec )",
      "8": "group_by_spec = Definition( name=\"group_by_spec\", primitive=Dict[str, Any] )",
      "9": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\"=NamedTuple(GroupBySpec) )",
      "10": "group_by_spec = Definition( name=\"group_by_spec\", primitive=Dict[str, Any] )",
      "11": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]] )",
      "12": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" )",
      "13": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=List[GroupBySpec] )",
      "14": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any] )",
      "15": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.GroupBySpec )",
      "16": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any]), spec=GroupBySpec )",
      "17": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = \"GroupBySpec\" )",
      "18": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\"), spec=GroupBySpec )",
      "19": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec )",
      "20": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple[Dict[str, Any]] )",
      "21": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\"] )",
      "22": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NumericTuple(Dict[str, Any]) )",
      "23": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = None, spec=GroupBySpec )",
      "24": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any])\", spec=GroupBySpec )",
      "25": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\"=NamedTuple(), spec=GroupBySpec )",
      "26": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = False )",
      "27": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" + spec=GroupBySpec )",
      "28": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" ), spec=GroupBySpec )",
      "29": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple(GroupBySpec ) )",
      "30": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any] )",
      "31": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" == NamedTuple(GroupBySpec) )",
      "32": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple() )",
      "33": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\"=namedTuple(GroupBySpec) )",
      "34": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\"), spec=GroupBySpec )",
      "35": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" + name=\"group_by_spec\", spec=GroupBySpec )",
      "36": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.NamedTuple(GroupBySpec) )",
      "37": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition[GroupBySpec, GroupBySpec] )",
      "38": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" + \"GroupBySpec\" )",
      "39": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition[GroupBySpec] )",
      "40": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Tuple(GroupBySpec) )",
      "41": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple[GroupBySpec] )",
      "42": "group_by_spec = Definition( name=\"group_by_spec\", primitive=NamedTuple(), spec=GroupBySpec )",
      "43": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" -- spec=GroupBySpec )",
      "44": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" == \"GroupBySpec\" )",
      "45": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" + name=\"group_by_spec\" )",
      "46": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any] \")",
      "47": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = False, spec=GroupBySpec )",
      "48": "group_by_spec = Definition( name=\"group_by_spec\" ), primitive=\"Dict[str, Any]\" spec=GroupBySpec )",
      "49": "group_by_spec = Definition( name=\"group_by_spec\", primitive=\"Dict[str, Any]\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode(from_zip_code)\n        to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "target_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode.create(from_zip_code)\n        to_zip_code = ZipCode.create(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "warning_line": "        to_zip_code = ZipCode(to_zip_code)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `ZipCode.__init__` but got `Union[ZipCode, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 326,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "olist/correios",
    "source_filename": "correios/client.py",
    "target_filename": "correios/client.py",
    "source_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457^",
    "target_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457",
    "predictions": [
      "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\","
    ],
    "correct": false,
    "top_five": {
      "0": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "1": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.Append(from_zip_code) to_zip_code = ZipCode.Append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "2": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode(from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "3": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.decode(from_zip_code) to_zip_code = ZipCode.decode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "4": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.concat(from_zip_code) to_zip_code = ZipCode.concat(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "5": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.prototype.str(from_zip_code) to_zip_code = ZipCode.prototype.str(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "6": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.prototype.append(from_zip_code) to_zip_code = ZipCode.prototype.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "7": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.init(from_zip_code) to_zip_code = ZipCode.init(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "8": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode[from_zip_code] to_zip_code = ZipCode[to_zip_code] result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "9": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZIPCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "10": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.call(from_zip_code) to_zip_code = ZipCode.call(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "11": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.protocol.append(from_zip_code) to_zip_code = ZipCode.protocol.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "12": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.Append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "13": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.split(from_zip_code) to_zip_code = ZipCode.split(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "14": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.protocol.str(from_zip_code) to_zip_code = ZipCode.protocol.str(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "15": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.add(from_zip_code) to_zip_code = ZipCode.add(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "16": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.str(from_zip_code) to_zip_code = ZipCode.str(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "17": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.create(from_zip_code) to_zip_code = ZipCode.create(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "18": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.Equal(from_zip_code) to_zip_code = ZipCode.Equal(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "19": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode() to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "20": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.int(from_zip_code) to_zip_code = ZipCode.int(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "21": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.encode(from_zip_code) to_zip_code = ZipCode.encode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "22": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.get(from_zip_code) to_zip_code = ZipCode.get(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "23": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.protocol(from_zip_code) to_zip_code = ZipCode.protocol(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "24": "to_zip_code: str(Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "25": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.convert(from_zip_code) to_zip_code = ZipCode.convert(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "26": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.protocol[from_zip_code] to_zip_code = ZipCode.protocol[to_zip_code] result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "27": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.Apply(from_zip_code) to_zip_code = ZipCode.Apply(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "28": "to_zip_code: Union[zip_code, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "29": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.Protocol(from_zip_code) to_zip_code = ZipCode.Protocol(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "30": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZIPCode.decode(from_zip_code) to_zip_code = ZipCode.decode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "31": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.__init(from_zip_code) to_zip_code = ZipCode.__init(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "32": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZIPCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "33": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.resolve(from_zip_code) to_zip_code = ZipCode.resolve(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "34": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode() to_zip_code = ZipCode() result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "35": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.extend(from_zip_code) to_zip_code = ZipCode.extend(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "36": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.env(from_zip_code) to_zip_code = ZipCode.env(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "37": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZIPCode.Append(from_zip_code) to_zip_code = ZipCode.Append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "38": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = Optional[ZipCode](from_zip_code) to_zip_code = Optional[ZipCode, str](to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "39": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.equal(from_zip_code) to_zip_code = ZipCode.equal(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "40": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZIPCode.append(from_zip_code) to_zip_code = ZIPCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "41": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = Optional[ZipCode](from_zip_code) to_zip_code = ZipCode(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "42": "to_zip_code: str) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "43": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "44": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.convert() to_zip_code = ZipCode.convert(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "45": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.__init__() to_zip_code = ZipCode.__init__(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "46": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.convert_to_zip_code to_zip_code result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "47": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.__init__() to_zip_code = ZipCode.__init__() result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "48": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code: to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "49": "to_zip_code: Union[ZipCode, str]) -> bool: from_zip_code = ZipCode.append(from_zip_code) to_zip_code = ZipCode.append(to_zip_code) result = self._auth_call(\"verificaDisponibilidadeServico\", )"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": true,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
    "target_code": "        if not self.check_enable_mode():\n            new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_line": "            output += self.send_command_timing(",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 65,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ktbyers/netmiko",
    "source_filename": "netmiko/dell/dell_isilon_ssh.py",
    "target_filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8^",
    "target_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "predictions": [
      "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):"
    ],
    "correct": false,
    "top_five": {
      "0": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "1": "if not self.check_enable_mode(): return self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "2": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt, str) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "3": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt = False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "4": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt=False, strip_command=False) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "5": "if not self.check_enable_mode(): assert isinstance(str, str) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "6": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=None, strip_command=None ) if re.search(pattern, output, flags=re_flags):",
      "7": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt, flags=re_flags) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "8": "if not self.check_enable_mode(): assert self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "9": "if not self.check_enable_mode(): assert cmd is not None output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "10": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=flags):",
      "11": "if not self.check_enable_mode(): self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "12": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=None ) if re.search(pattern, output, flags=re_flags):",
      "13": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt = False ) if re.search(pattern, output, flags=re_flags):",
      "14": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt, dict) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "15": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False) if re.search(pattern, output, flags=re_flags):",
      "16": "if not self.check_enable_mode(): if not self.check_enable_mode: output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "17": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags ):",
      "18": "if not self.check_enable_mode(): assert isinstance( cmd, strip_prompt, str) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "19": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=True, strip_command=True ) if re.search(pattern, output, flags=re_flags):",
      "20": "if not self.check_enable_mode(): assert isinstance( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "21": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt = false, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "22": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt = None, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "23": "if not self.check_enable_mode(): input += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "24": "if not self.check_enable_mode(): if not self.check_enable_mode() output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "25": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=Null, strip_command=Null ) if re.search(pattern, output, flags=re_flags):",
      "26": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False ) if re.search(pattern, output, flags=re_flags):",
      "27": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False, ) if re.search(pattern, output, flags=re_flags):",
      "28": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt=False, strip_command=False) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=None ) if re.search(pattern, output, flags=re_flags):",
      "29": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt = False, strip_command = False ) if re.search(pattern, output, flags=re_flags):",
      "30": "if not self.check_enable_mode(): if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "31": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt=False, strip_command=False) output += self.send_command_timing( cmd, strip_prompt=False ) if re.search(pattern, output, flags=re_flags):",
      "32": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt, str=False ) if re.search(pattern, output, flags=re_flags):",
      "33": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt(False), strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "34": "if not self.check_enable_mode(): return self.send_command_timing( cmd, strip_prompt = False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "35": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=Undefined, strip_command=Undefined ) if re.search(pattern, output, flags=re_flags):",
      "36": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=false ) if re.search(pattern, output, flags=re_flags):",
      "37": "if not self.check_enable_mode(): output += self.send_command_timing( cb, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "38": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=Any ) if re.search(pattern, output, flags=re_flags):",
      "39": "if not self.check_enable_mode(): output += self.send_command_timing( cmd[strip_prompt]=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "40": "if not self.check_enable_mode(): output += self.send_command_timing( dict( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "41": "if not self.check_enable_mode(): output = self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "42": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt=False, strip_command=False) output += self.send_command_timing( cmd, strip_prompt=False, strip_command=True ) if re.search(pattern, output, flags=re_flags):",
      "43": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt(false), strip_command(false) ) if re.search(pattern, output, flags=re_flags):",
      "44": "if not self.check_enable_mode(): assert isinstance(cmd, strip_prompt=False, strip_command=False) if re.search(pattern, output, flags=re_flags):",
      "45": "if not self.check_enable_mode(): if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False )",
      "46": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=false, strip_command=false ) if re.search(pattern, output, flags=re_flags):",
      "47": "if not self.check_enable_mode(): if re.search(pattern, output, flags=re_flags): output += self.send_command_timing( cmd, strip_prompt=False, strip_command=False ) if re.search(pattern, output, flags=re_flags):",
      "48": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt=\"False\", strip_command=\"\") if re.search(pattern, output, flags=re_flags):",
      "49": "if not self.check_enable_mode(): output += self.send_command_timing( cmd, strip_prompt, flags=re_flags ) if re.search(pattern, output, flags=re_flags):"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_line": "                cached_trial.distributions[param_name] = dists",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "optuna/optuna",
    "source_filename": "optuna/storages/cached_storage.py",
    "target_filename": "optuna/storages/cached_storage.py",
    "source_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb^",
    "target_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "predictions": [
      "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal"
    ],
    "correct": false,
    "top_five": {
      "0": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "1": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(distributions.BaseDistribution) updates.params[param_name] = param_value_internal",
      "2": "dists[param_name] = dists cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "3": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(distributions.BaseDistribution, dists) updates.params[param_name] = param_value_internal",
      "4": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(dists.BaseDistribution) updates.params[param_name] = param_value_internal",
      "5": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(distributions.BaseDistribution), updates.params[param_name] = param_value_internal",
      "6": "dists[param_name] = distribution cached_trial.distributions[parm_name] = dists updates.params[param_name] = param_value_internal",
      "7": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict.base_distribution updates.params[param_name] = param_value_internal",
      "8": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists update_params[param_name] = param_value_internal",
      "9": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "10": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict[str, distributions.BaseDistribution] updates.params[param_name] = param_value_internal",
      "11": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict() updates.params[param_name] = param_value_internal",
      "12": "dists[param_name] = distribution cached_trial.distributions[param_name] = Dists updates.params[param_name] = param_value_internal",
      "13": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(dists) updates.params[param_name] = param_value_internal",
      "14": "dists[param_name] = distribution cached_trial.distributions[param_name] = deps updates.params[param_name] = param_value_internal",
      "15": "dists[param_name] = distribution cached_trial.distributions[param_name] = str updates.params[param_name] = param_value_internal",
      "16": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(dists.BaseDistribution), updates.params[param_name] = param_value_internal",
      "17": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists if isinstance(distributions.BaseDistribution) updates.params[param_name] = param_value_internal",
      "18": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict.Dict[str, dict.BaseDistribution] updates.params[param_name] = param_value_internal",
      "19": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict._base_distribution updates.params[param_name] = param_value_internal",
      "20": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict[str, dists] updates.params[param_name] = param_value_internal",
      "21": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(distributions.BaseDistribution), dists updates.params[param_name] = param_value_internal",
      "22": "dists[param_name] = Distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "23": "dists[param_name] = distribution cached_trial.distributions[param_name] = ( dists updates.params[param_name] = param_value_internal",
      "24": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[parm_name] = param_value_internal",
      "25": "dists[param_name] = distribution cached_trial.distributions[param_name] = (distributions.BaseDistribution) updates.params[param_name] = param_value_internal",
      "26": "dists[param_name] = distribution cached_trial.distributions[param_name] = param_value_internal updates.params[param_name] = param_value_internal",
      "27": "dists[param_name] = distribution cached_trial.distributions[param_name] = disks updates.params[param_name] = param_value_internal",
      "28": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(dists, dict) updates.params[param_name] = param_value_internal",
      "29": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict.__setitem__() updates.params[param_name] = param_value_internal",
      "30": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists releases.params[param_name] = param_value_internal",
      "31": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict(dists, dists) updates.params[param_name] = param_value_internal",
      "32": "dists[param_name] = dict cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "33": "dists[param_name] = distribution cached_trial.distributions[param_name] = del updates.params[param_name] = param_value_internal",
      "34": "dists[param_name] = distribution cached_trial.distributions[param_name] = dict[str, dict] updates.params[param_name] = param_value_internal",
      "35": "dists[param_name] = distribution cached_trial.distributions[param_name] = dits updates.params[param_name] = param_value_internal",
      "36": "dists[parm_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "37": "dists[param_name] = distributed cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal",
      "38": "dists[param_name] = distribution cached_trial.distributions[param_name] = ints updates.params[param_name] = param_value_internal",
      "39": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal.get_value() updates.params[param_name] = param_value_internal",
      "40": "dists[param_name] = distribution cached_trial.distributions[param_name] = \"\" updates.params[param_name] = param_value_internal",
      "41": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists upgrades.params[param_name] = param_value_internal",
      "42": "dists[param_name] = distribution cached_trial.distributions[param_name]= dists updates.params[param_name] = param_value_internal",
      "43": "dists[param_name] = distribution cached_trial.distributions[param_name] = decs updates.params[param_name] = param_value_internal",
      "44": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal_value",
      "45": "dists[param_name] = distribution cached_trial.distributions[param_name] = dests updates.params[param_name] = param_value_internal",
      "46": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updated_params[param_name] = param_value_internal",
      "47": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal updates.params[param_name] = param_value_internal",
      "48": "dists[param_name] = distribution cached_trial.distributions[param_name] = undefined updates.params[param_name] = param_value_internal",
      "49": "dists[param_name] = distribution cached_trial.distributions[param_name] = param_value_internal updates.params[param_name] = param_value_internal updates.params[param_name] = param_value_internal"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
    "target_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_line": "        ret = perform_krb181_workaround(principal)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 117,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/security/kerberos.py",
    "target_filename": "airflow/security/kerberos.py",
    "source_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0^",
    "target_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "predictions": [
      "time.sleep(1.5) ret = str(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:"
    ],
    "correct": false,
    "top_five": {
      "0": "time.sleep(1.5) ret = str(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "1": "time.sleep(1.5) ret = krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "2": "time.sleep(1.5) ret = self.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "3": "time.sleep(1.5) ret = cls.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "4": "time.sleep(1.5) return ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "5": "time.sleep(1.5) assert krb181 is not None ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "6": "time.sleep(1.5) assert isinstance(principal, str) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "7": "time.sleep(1.5) let ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "8": "time.sleep(1.5) assert ret is not None if exit_on_fail and ret!= 0:",
      "9": "time.sleep(1.5) ret = cb(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "10": "time.sleep(1.5) assert str = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "11": "time.sleep(1.5) ret = python.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "12": "time.sleep(1.5) ret = sys.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "13": "time.sleep(1.5) assert ret is not None and ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "14": "time.sleep(1.5) ret = eval(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "15": "time.sleep(1.5) ret = os.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "16": "time.sleep(1.5) ret = pytorch(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "17": "time.sleep(1.5) if isinstance(principal, str) and ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "18": "time.sleep(1.5) ret = execute_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "19": "time.sleep(1.5) if ret is not None and ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "20": "time.sleep(1.5) ret = dc.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "21": "time.sleep(1.5) ret = fs.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "22": "time.sleep(1.5) ret = str(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "23": "time.sleep(1.5) ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "24": "time.sleep(1.5) ret = ctx.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "25": "time.sleep(1.5) assert krb181 is not None ret = krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "26": "time.sleep(1.5) ret = np.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "27": "time.sleep(1.5) assert ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "28": "time.sleep(1.5) ret = t.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "29": "time.sleep(1.5) ret = krb181[principal] if exit_on_fail and ret!= 0:",
      "30": "time.sleep(1.5) ret = normal(perform_krb181_workaround(principal)) if exit_on_fail and ret!= 0:",
      "31": "time.sleep(1.5) assert ret = krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "32": "time.sleep(1.5) var ret = perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "33": "time.sleep(1.5) ret = \"perform_krb181_workaround(principal)\" if exit_on_fail and ret!= 0:",
      "34": "time.sleep(1.5) ret = Perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "35": "time.sleep(1.5) str = ret.perform_krb181_workaround(principal) if exit_on_fail and str!= 0:",
      "36": "time.sleep(1.5) ret = make_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "37": "time.sleep(1.5) self.ret = perform_krb181_workaround(principal) if exit_on_fail and self.ret!= 0:",
      "38": "time.sleep(1.5) ret = \"perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:",
      "39": "time.sleep(1.5) ret = elif isinstance(principal, str) if exit_on_fail and ret!= 0:",
      "40": "time.sleep(1.5) ret = krb181(principal) if exit_on_fail and ret!= 0:",
      "41": "time.sleep(1.5) ret = ret.workaround(principal) if exit_on_fail and ret!= 0:",
      "42": "time.sleep(1.5) self.ret = perform_krb181_workaround(principal) if self.exit_on_fail and self.ret!= 0:",
      "43": "time.sleep(1.5) ret = krb181_workaround(principal); if exit_on_fail and ret!= 0:",
      "44": "time.sleep(1.5) ret = assertprincipal is not None if exit_on_fail and ret!= 0:",
      "45": "time.sleep(1.5) ret = cast(str(principal)) if exit_on_fail and ret!= 0:",
      "46": "time.sleep(1.5) ret = super().workaround(principal) if exit_on_fail and ret!= 0:",
      "47": "time.sleep(1.5) assert isinstance(principal, ret) if exit_on_fail and ret!= 0:",
      "48": "time.sleep(1.5) self.ret = perform_krb181_workaround(principal) if self.exit_on_fail and ret!= 0:",
      "49": "time.sleep(1.5) str = ret.perform_krb181_workaround(principal) if exit_on_fail and ret!= 0:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "target_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            return\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_line": "        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 111,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "paul-nameless/tg",
    "source_filename": "tg/controllers.py",
    "target_filename": "tg/controllers.py",
    "source_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744^",
    "target_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "predictions": [
      "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)"
    ],
    "correct": false,
    "top_five": {
      "0": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "1": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "2": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "3": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "4": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs if not chat_id: return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "5": "chat_id = self.model.chats.id_by_index(self.model.current_chat) assert chat_id is not None return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "6": "chat_id = self.model.chats.id_by_index(self.model.current_chat) return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "7": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id and msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "8": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id += 1, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "9": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids=self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "10": "chat_id = self.model.chats.id_by_index(self.model.current_chat) assert chat_id is not None return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "11": "chat_id = self.model.chats.id_by_index(self.model.current_chat) assert chat_id is not None return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "12": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None: self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "13": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) return",
      "14": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id was not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "15": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None, msg_ids = msg_ids self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "16": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) else:",
      "17": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return msg_ids(self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "18": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id += self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "19": "chat_id = self.model.chats.id_by_index(self.model.current_chat) return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "20": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id = 0, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "21": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id.replace(self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "22": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id.call(self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "23": "chat_id = self.model.chats.id_by_index(self.model.current_chat) assert self.model.yanked_msgs is not None return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "24": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None assert chat_id is not None assert msg_ids are not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "25": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id.result(msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "26": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs if not chat_id: assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "27": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id += 1) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "28": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id.int(msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "29": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id += self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "30": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id.result(msg_ids=self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "31": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None and self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "32": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "33": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) if not",
      "34": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id=0, msg_ids=self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "35": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) if not chat_id:",
      "36": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) else:",
      "37": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id or (msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "38": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) if not",
      "39": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id and (msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "40": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, str(msg_ids))",
      "41": "chat_id = self.model.chats.id_by_index(self.model.current_chat) return from_chat_id, msg_ids = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "42": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id.add_msgs(self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "43": "chat_id = self.model.chats.id_by_index(self.model.current_chat) return from_chat_id, msg_ids = self.model.yanked_msgs if not chat_id: return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "44": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id if not chat_id: return self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "45": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return (from_chat_id, msg_ids = self.model.yanked_msgs) self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "46": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, [msg_ids] = self.model.yanked_msgs self.tg.forward_msgs(chat_id, from_chat_id, [msg_ids])",
      "47": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) else:",
      "48": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs return self.tg.forward_msgs(chat_id, from_chat_id, str(msg_ids))",
      "49": "chat_id = self.model.chats.id_by_index(self.model.current_chat) if not self.model.yanked_msgs: return from_chat_id, msg_ids = self.model.yanked_msgs assert chat_id is not None self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) else:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    company: ormar.String(max_length=200)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    company = ormar.String(max_length=200)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_unique_constraints.py",
    "target_filename": "tests/test_unique_constraints.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company= ormar.String(max_length=200)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) company = ormar.String(max_length=200) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nclass BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n  \"\"\"Generic TFX example gen base executor.\n",
    "target_code": "\nclass BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  \"\"\"Generic TFX example gen base executor.\n",
    "warning_line": "    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "target_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor."
    ],
    "correct": false,
    "top_five": {
      "0": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor.",
      "1": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "2": "class BaseExampleGenExecutor( base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "3": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.",
      "4": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "5": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.",
      "6": "class BaseExampleGenExecutor(bc.ABC): \"\"\"Generic TFX example gen base executor.",
      "7": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.\"\"\"",
      "8": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.\"\"\"",
      "9": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor. \"\"\"Generic TFX example gen tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"\"",
      "10": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor. \"\"\"Generic TFX example gen tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"",
      "11": "class BaseExampleGenExecutor((base_beam_executor.BaseBeamExecutor)): \"\"\"Generic TFX example gen base executor.",
      "12": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.\"\"\"\"",
      "13": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.\"\"\"\"",
      "14": "class BaseExampleGenExecutor( tfx.dsl.components.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.",
      "15": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"",
      "16": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"",
      "17": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"",
      "18": "class BaseExampleGenExecutor(bfx.dsl.components.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "19": "class BaseExampleGenExecutor( (abc.ABC) => tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "20": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor. \"\"\"Generic TFX example gen tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"",
      "21": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor. \"\"\"Generic TFX example gen tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"\"",
      "22": "class BaseExampleGenExecutor(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "23": "class BaseExampleGenExecutor( base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.",
      "24": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.GenericExampleExecutor\"\"\"\"",
      "25": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExampleExecutor\"\"\"\"",
      "26": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.GenericExampleExecutor\"\"\"\"",
      "27": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.\"\"\"",
      "28": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor.\"\"\"",
      "29": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor. \"\"\"Generic TFX example gen tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"\"\"",
      "30": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"",
      "31": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.",
      "32": "class BaseExampleGenExecutor( (abc.ABC) => tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"",
      "33": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.Tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"\"",
      "34": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.\"\"\"\"",
      "35": "class BaseExampleGenExecutor( with_metaclass(abc.ABC) => tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"",
      "36": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"",
      "37": "class BaseExampleGenExecutor(abc.ABC): \"\"\"Generic TFX example gen base executor.\"\"\"\"",
      "38": "class BaseExampleGenExecutor( tfx.dsl.components.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.",
      "39": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"",
      "40": "class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor. \"\"\"Generic TFX example gen tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\"\"\"\"",
      "41": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"",
      "42": "class BaseExampleGenExecutor( (abc.ABC) => tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"",
      "43": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.\"\"\"",
      "44": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \"\"\"Generic TFX example gen base executor.GenericExampleExecutor\"\"\"",
      "45": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.GenericExecutor\"\"\"\"\"",
      "46": "class BaseExampleGenExecutor( tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \"\"\"Generic TFX example gen base executor.GenericExampleExecutor\"\"\"",
      "47": "class BaseExampleGenExecutor(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "48": "class BaseExampleGenExecutor( tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.",
      "49": "class BaseExampleGenExecutor( (abc.ABC) => tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \"\"\"Generic TFX example gen base executor.GenericExampleExecutor\"\"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": true,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nclass BaseHandler(with_metaclass(abc.ABCMeta, object)):\n  \"\"\"Base Handler for CLI.\n",
    "target_code": "\nclass BaseHandler(abc.ABC):\n  \"\"\"Base Handler for CLI.\n",
    "warning_line": "class BaseHandler(with_metaclass(abc.ABCMeta, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/tools/cli/handler/base_handler.py",
    "target_filename": "tfx/tools/cli/handler/base_handler.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI."
    ],
    "correct": true,
    "top_five": {
      "0": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.",
      "1": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "2": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC",
      "3": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI",
      "4": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "5": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.\"CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "6": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "7": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI",
      "8": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.\"CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "9": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "10": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI",
      "11": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "12": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI",
      "13": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI",
      "14": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.\"CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "15": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI",
      "16": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "17": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "18": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.\"CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "19": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "20": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "21": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.\"CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "22": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "23": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "24": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "25": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "26": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "27": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "28": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "29": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "30": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLIC",
      "31": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "32": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "33": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "34": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.",
      "35": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "36": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "37": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLIC",
      "38": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.",
      "39": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.DI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "40": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "41": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.",
      "42": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "43": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.DLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "44": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "45": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLIC",
      "46": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLIC",
      "47": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI",
      "48": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC.CLI.CLIC.CLI",
      "49": "class BaseHandler(abc.ABC): \"\"\"Base Handler for CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLI.CLIC."
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        unconf_lith_id: int,\n        edges: Array[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
    "target_code": "        unconf_lith_id: int,\n        edges: np.ndarray,\n        centroids: Dict[int, np.ndarray]\n",
    "warning_line": "        edges: Array[int, ..., 2],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `nptyping.Array[(int, ..., 2)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 361,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cgre-aachen/gempy",
    "source_filename": "gempy/assets/topology.py",
    "target_filename": "gempy/assets/topology.py",
    "source_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098^",
    "target_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098",
    "predictions": [
      "unconf_lith_id: int, edges: np.ndarray, centroids: Dict[int, np.ndarray]"
    ],
    "correct": true,
    "top_five": {
      "0": "unconf_lith_id: int, edges: np.ndarray, centroids: Dict[int, np.ndarray]",
      "1": "unconf_lith_id: int, edges: Dict[int,..., 2], centroids: Dict[int, np.ndarray]",
      "2": "unconf_lith_id: int, edges: np.Ndarray, centroids: Dict[int, np.ndarray]",
      "3": "unconf_lith_id: int, edges: np.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "4": "unconf_lith_id: int, edges: int, centroids: Dict[int, np.ndarray]",
      "5": "unconf_lith_id: int, edges: np[int,..., 2], centroids: Dict[int, np.ndarray]",
      "6": "unconf_lith_id: int, edges: Optional[Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "7": "unconf_lith_id: int, edges: List[int,..., 2], centroids: Dict[int, np.ndarray]",
      "8": "unconf_lith_id: int, edges: np.Dict[int,..., 2], centroids: Dict[int, np.ndarray]",
      "9": "unconf_lith_id: int, edges: str, centroids: Dict[int, np.ndarray]",
      "10": "unconf_lith_id: int, edges: Optional[Array[int,..., 2], centroids: Optional[Dict[int, np.ndarray]]",
      "11": "unconf_lith_id: int, edges: str.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "12": "unconf_lith_id: int, edges: np.Tree.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "13": "unconf_lith_id: int, edges: np.Model.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "14": "unconf_lith_id: int, edges: python.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "15": "unconf_lith_id: int, edges: Optional[Array[int],..., 2], centroids: Dict[int, np.ndarray]",
      "16": "unconf_lith_id: int, edges: Dyant.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "17": "unconf_lith_id: int, edges: Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "18": "unconf_lith_id: int, edges: np.type[int,..., 2], centroids: Dict[int, np.ndarray]",
      "19": "unconf_lith_id: int, edges: npType[int,..., 2], centroids: Dict[int, np.ndarray]",
      "20": "unconf_lith_id: int, edges: Dict[int,..., 2], centroids: Dict[int, np.ndarray]",
      "21": "unconf_lith_id: int, edges: np.ndarray, centroids: Dict[int, int, np.ndarray]",
      "22": "unconf_lith_id: int, edges: np.number[int,..., 2], centroids: Dict[int, np.ndarray]",
      "23": "unconf_lith_id: int, edges: Array[str,..., 2], centroids: Dict[int, np.ndarray]",
      "24": "unconf_lith_id: int, edges: ndarray, centroids: Dict[int, np.ndarray]",
      "25": "unconf_lith_id: int, edges: np.Node[int,..., 2], centroids: Dict[int, np.ndarray]",
      "26": "unconf_lith_id: int, edges: Dyent.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "27": "unconf_lith_id: int, edges: np.type.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "28": "unconf_lith_id: int, edges: np.dist.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "29": "unconf_lith_id: int, edges: options.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "30": "unconf_lith_id: int, edges: np.layer.Array[int,..., 2], centroids: Dict[int, np.ndarray]",
      "31": "unconf_lith_id: int, edges: List[int], centroids: Dict[int, np.ndarray]",
      "32": "unconf_lith_id: int, edges: [int,..., 2], centroids: Dict[int, np.ndarray]",
      "33": "unconf_lith_id: int, edges: Dict[int,..., 2), centroids: Dict[int, np.ndarray]",
      "34": "unconf_lith_id: int, edges: Int[int], centroids: Dict[int, np.ndarray]",
      "35": "unconf_lith_id: int, edges: Dyct[int,..., 2], centroids: Dict[int, np.ndarray]",
      "36": "unconf_lith_id: int, edges: Int[int,..., 2], centroids: Dict[int, np.ndarray]",
      "37": "unconf_lith_id: int, edges: np.Class[int,..., 2], centroids: Dict[int, np.ndarray]",
      "38": "unconf_lith_id: int, edges: np.layer[int,..., 2], centroids: Dict[int, np.ndarray]",
      "39": "unconf_lith_id: int, edges: np.int, centroids: Dict[int, np.ndarray]",
      "40": "unconf_lith_id: int, edges: Optional[Array[int,..., 2]], centroids: Dict[int, np.ndarray]",
      "41": "unconf_lith_id: int, edges: np[int], centroids: Dict[int, np.ndarray]",
      "42": "unconf_lith_id: int, edges: np.ndarray[int], centroids: Dict[int, np.ndarray]",
      "43": "unconf_lith_id: int, edges: Array[int], centroids: Dict[int, np.ndarray]",
      "44": "unconf_lith_id: int, edges: \"\", centroids: Dict[int, np.ndarray]",
      "45": "unconf_lith_id: int, edges: Int, centroids: Dict[int, np.ndarray]",
      "46": "unconf_lith_id: int, edges: np.Array[int], centroids: Dict[int, np.ndarray]",
      "47": "unconf_lith_id: int, edges: null, centroids: Dict[int, np.ndarray]",
      "48": "unconf_lith_id: int, edges: np.type[int], centroids: Dict[int, np.ndarray]",
      "49": "unconf_lith_id: int, edges: [], centroids: Dict[int, np.ndarray]"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nRemoteMethod = namedtuple('RemoteMethod',\n                          'method config_section kwargs priority',\n                          verbose=False)\n\"\"\"RemotedMethod is used by other modules that want to register a method to\n",
    "target_code": "\nRemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'])\n\"\"\"RemotedMethod is used by other modules that want to register a method to\n",
    "warning_line": "                          verbose=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Final[False]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/mode_controller.py",
    "target_filename": "mpf/core/mode_controller.py",
    "source_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7^",
    "target_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7",
    "predictions": [
      "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to"
    ],
    "correct": true,
    "top_five": {
      "0": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "1": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "2": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', ['kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "3": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "4": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], verbose=True) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "5": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "6": "RemoteMethod = namedtuple('RemoteMethod', ['method config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "7": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "8": "RemoteMethod = namedtuple('RemoteMethod', \"method config_section kwargs priority\") \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "9": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section, 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "10": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "11": "RemoteMethod = namedtuple('RemoteMethod', ('method', ['config_section', 'kwargs', 'priority'])) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "12": "RemoteMethod = namedtuple('RemoteMethod') \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "13": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', ['priority', 'kwargs']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "14": "RemoteMethod = namedtuple('RemoteMethod', ['method', ['config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "15": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by others modules that want to register a method to",
      "16": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'Kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "17": "RemoteMethod= namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "18": "RemoteMethod = namedtuple('RemoteMethod', ('method', 'config_section', 'kwargs', 'priority')) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "19": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority', 'false']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "20": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'] ) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "21": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "22": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "23": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'context', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "24": "RemoteMethod = namedtuple('RemoteMethod','method', ['config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "25": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', \"'\"]) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "26": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', \"kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "27": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs','priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "28": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs'], verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "29": "RemoteMethod = namedtuple('RemoteMethod', \"method config_section kwargs priority\", verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "30": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', ['priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "31": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "32": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'previous']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "33": "RemoteMethod = namedtuple('RemoteMethod', ('method', 'config_section', [kwargs', 'priority'])) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "34": "RemoteMethod = namedtuple('RemoteMethod',['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "35": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', [kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "36": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section'], verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "37": "RemoteMethod_list = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "38": "RemoteMethod = namedtuple('RemoteMethod', Optional[method]='config_section', verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "39": "RemoteMethod = namedtuple('RemoteMethod', false) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "40": "RemoteMethod = namedtuple('RemoteMethod','method config_section kwargs priority', verbose=False) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "41": "RemoteMethod = namedtuple('RemoteMethod', \"method config_section kwargs priority\"); \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "42": "RemoteMethod = namedtuple('RemoteMethod', ('method config_section kwargs priority')) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "43": "RemoteMethod = namedtuple('RemoteMethod', \"method config_section kwargs priority\", verbose=True) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "44": "RemoteMethod = namedtuple('RemoteMethod', ('method', 'config_section', kwargs priority')) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "45": "RemoteMethod = namedtuple('RemoteMethod', () =>'method config_section kwargs priority') \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "46": "RemoteMethod = namedtuple('RemoteMethod', ('method config_section kwargs', [])) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "47": "RemoteMethod = namedtuple('RemoteMethod', (\"method config_section\", \"kwargs priority\")) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "48": "RemoteMethod = namedtuple('RemoteMethod', (\"method config_section\": { } kwargs priority\")) \"\"\"RemotedMethod is used by other modules that want to register a method to",
      "49": "RemoteMethod = namedtuple('RemoteMethod', \"method config_section\" kwargs priority\") \"\"\"RemotedMethod is used by other modules that want to register a method to"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.Boolean(default=False)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    completed= ormar.Boolean(default=False)\n\n",
    "warning_line": "    completed: ormar.Boolean(default=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Boolean($parameter$default = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "1": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed = ormar.Boolean(default=False)",
      "2": "id = ormar.Integer(primary_key=True) text= ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "3": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed=ormar.Boolean(default=False)",
      "4": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=True)",
      "5": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) finished= ormar.Boolean(default=False)",
      "6": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(Default=False)",
      "7": "id= ormar.Integer(primary_key=True) text= ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "8": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default= False)",
      "9": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) complete= ormar.Boolean(default=False)",
      "10": "id= ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "11": "id = ormar.Integer(primary_key=True) texte = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "12": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean (default=False)",
      "13": "id = ormar.Integer(primary_key=True) texts = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "14": "id = ormar.Integer(primary_key=True)text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "15": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= isinstance(ormar.Boolean(default=False))",
      "16": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= eithermar.Boolean(default=False)",
      "17": "id = ormar.Integer(primary_key=True) string = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "18": "id = ormar.Integer(primary_key=True) string= ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "19": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=50) completed= ormar.Boolean(default=False)",
      "20": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completion= ormar.Boolean(default=False)",
      "21": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar[default=False]",
      "22": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Bool(default=False)",
      "23": "id is not None: ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "24": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Bottom(default=False)",
      "25": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar[default=False)",
      "26": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Bean(default=False)",
      "27": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) done= ormar.Boolean(default=False)",
      "28": "id = ormar.Integer(primary_key=True) text += ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "29": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500), completed= ormar.Boolean(default=False)",
      "30": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=false)",
      "31": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean[default=False)",
      "32": "id = ormar.Integer(primary_key=True), text = ormar.String(max_length=500), completed= ormar.Boolean(default=False)",
      "33": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=None)",
      "34": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=5000) completed= ormar.Boolean(default=False)",
      "35": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean( default=False)",
      "36": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= oumar.Boolean(default=False)",
      "37": "id = ormar.Integer(primary_key=True, text = ormar.String(max_length=500), completed= ormar.Boolean(default=False)",
      "38": "id: ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "39": "id = ormar.Integer(primary_key=True) text = ormar.String[max_length=500] completed= ormar.Boolean(default=False)",
      "40": "id = ormar.Integer(primary_key=True) text: ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "41": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.BottomBase(default=False)",
      "42": "id = ormar.Integer(primary_key=True, text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "43": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ORMAR.Boolean(default=False)",
      "44": "id = ormar.Integer(primary_key=True) Text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "45": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Base(default=False)",
      "46": "id = ormar.Indeger(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default=False)",
      "47": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.Boolean(default = False)",
      "48": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= odermar.Boolean(default=False)",
      "49": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) completed= ormar.BottomList(default=False)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):\n    \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\n",
    "target_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]:\n    \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\n",
    "warning_line": "      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(kubernetes.client.V1Job)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster"
    ],
    "correct": true,
    "top_five": {
      "0": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "1": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.",
      "2": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\"\"\"",
      "3": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "4": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster \"\"\"",
      "5": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_JOB: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "6": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster job\"\"\"",
      "7": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "8": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> kubernetes.client.V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "9": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> VocabJob: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "10": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Type[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "11": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\"\"",
      "12": "preemptible_tpu: bool = True, tpu_driver: str = (k.DEFAULT_TPU_DRIVER)) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "13": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> JOB: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "14": "preemptible_tpu: bool = True, tpu_driver: str = (k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "15": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> kubernetes[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "16": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> None: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "17": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\"\"\",",
      "18": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster cluster",
      "19": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster'\"\"",
      "20": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster job.",
      "21": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "22": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> 'V1Job': \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "23": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_JOB: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "24": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.\"\"\"",
      "25": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.",
      "26": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster:",
      "27": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster instance.",
      "28": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster job\"\"",
      "29": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Options[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "30": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.",
      "31": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_JOB: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.",
      "32": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> TypeError: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "33": "preemptible_tpu: bool = True, tpu_driver: str = [k.DEFAULT_TPU_DRIVER] -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "34": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster call.",
      "35": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster cluster\"\"\"",
      "36": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\"\"\"\"",
      "37": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> List[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "38": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "39": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster of containers\"\"\"",
      "40": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_JOB: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster \"\"\"",
      "41": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster. \"\"\"",
      "42": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Pos[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "43": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster\"\"\"",
      "44": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> kubernetes.client.V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster.",
      "45": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> bool = False: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "46": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster \"\"\"",
      "47": "preemptible_tpu: str = k.DEFAULT_TPU_DRIVER, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster",
      "48": "preemptible_tpu: bool = True, tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> k.DEFAULT_V1Job: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster \"\"\"",
      "49": "preemptible_tpu: bool = True, tpu_driver: str = str.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \"\"\"creates a simple kubernetes job (1 container, 1 pod) for this cluster"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):\n    \"\"\"Abstract class for all components.\n",
    "target_code": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=_Maker):\n    \"\"\"Abstract class for all components.\n",
    "warning_line": "class Component(with_metaclass(_Maker, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jwkvam/bowtie",
    "source_filename": "bowtie/_component.py",
    "target_filename": "bowtie/_component.py",
    "source_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1^",
    "target_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "predictions": [
      "# pylint: disable=too-few-public-methods class Component(metaclass=_Maker): \"\"\"Abstract class for all components."
    ],
    "correct": true,
    "top_five": {
      "0": "# pylint: disable=too-few-public-methods class Component(metaclass=_Maker): \"\"\"Abstract class for all components.",
      "1": "# pylint: disable=too-few-public-methods class Component(metaclass: \"\"\"Abstract class for all components.",
      "2": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"): \"\"\"Abstract class for all components.",
      "3": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"]): \"\"\"Abstract class for all components.",
      "4": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"\"): \"\"\"Abstract class for all components.",
      "5": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"\"\"): \"\"\"Abstract class for all components.",
      "6": "# pylint: disable=too-few-public-methods class Component(metaclass=_Maker, object): \"\"\"Abstract class for all components.",
      "7": "# pylint: disable=too-few-public-methods class Component: \"\"\"Abstract class for all components.",
      "8": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"\"): \"\"\"Abstract class for all components.",
      "9": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"\"): \"\"\"Abstract class for all components.",
      "10": "# pylint: disable=too-few-public-methods class Component(mit_metaclass(_Maker, object)): \"\"\"Abstract class for all components.",
      "11": "# pylint: disable=too-few-public-methods class Component[metaclass=\"bowtie._component._Maker\"]: \"\"\"Abstract class for all components.",
      "12": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"): \"\"\"Abstract class for all components.",
      "13": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"): \"\"\"Abstract class for all components.",
      "14": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", object): \"\"\"Abstract class for all components.",
      "15": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"\"): \"\"\"Abstract class for all components.",
      "16": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"]): \"\"\"Abstract class for all components.",
      "17": "# pylint: disable=too-few-public-methods class Component(Metaclass: \"\"\"Abstract class for all components.",
      "18": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"): \"\"\"Abstract class for all components.",
      "19": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\", object): \"\"\"Abstract class for all components.",
      "20": "# pylint: disable=too-few-public-methods class Component(Object): \"\"\"Abstract class for all components.",
      "21": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=_Maker): \"\"\"Abstract class for all components.",
      "22": "# pylint: disable=too-few-public-methods class Component(): \"\"\"Abstract class for all components.",
      "23": "# pylint: disable=too-few-public-methods class Component(object): \"\"\"Abstract class for all components.",
      "24": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"\"): \"\"\"Abstract class for all components.",
      "25": "# pylint: disable=too-few-public-methods class Component(os.metaclass(_Maker, object)): \"\"\"Abstract class for all components.",
      "26": "# pylint: disable=too-few-public-methods class Component(metaclass_Maker): \"\"\"Abstract class for all components.",
      "27": "# pylint: disable=too-few-public-methods class Component[metaclass=_Maker]: \"\"\"Abstract class for all components.",
      "28": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"\"]): \"\"\"Abstract class for all components.",
      "29": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\" ): \"\"\"Abstract class for all components.",
      "30": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\"]: \"\"\"Abstract class for all components.",
      "31": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"object\"): \"\"\"Abstract class for all components.",
      "32": "# pylint: disable=too-few-public-methods class Component(subclasses of Bowtie._component._Maker): \"\"\"Abstract class for all components.",
      "33": "# pylint: disable=too-few-public-methods class Component(_Maker): \"\"\"Abstract class for all components.",
      "34": "# pylint: disable=too-few-public-methods class Component(metaclass = _Maker): \"\"\"Abstract class for all components.",
      "35": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"\", object): \"\"\"Abstract class for all components.",
      "36": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=_Object): \"\"\"Abstract class for all components.",
      "37": "# pylint: disable=too-few-public-methods class Component(mit(_Maker, object)): \"\"\"Abstract class for all components.",
      "38": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"\"\"): \"\"\"Abstract class for all components.",
      "39": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"\"): \"\"\"Abstract class for all components.",
      "40": "# pylint: disable=too-few-public-methods class Component[metaclass=\"bowtie._component._Maker\", object]: \"\"\"Abstract class for all components.",
      "41": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", Metaclass[object]): \"\"\"Abstract class for all components.",
      "42": "# pylint: disable=too-few-public-methods class Component(subobject): \"\"\"Abstract class for all components.",
      "43": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker, object\"): \"\"\"Abstract class for all components.",
      "44": "# pylint: disable=too-few-public-methods class Component(metaclass(_Maker, object)): \"\"\"Abstract class for all components.",
      "45": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"_Maker\"): \"\"\"Abstract class for all components.",
      "46": "# pylint: disable=too-few-public-methods class Component(self.metaclass(_Maker, object)): \"\"\"Abstract class for all components.",
      "47": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"]): \"\"\"Abstract class for all components.",
      "48": "# pylint: disable=too-few-public-methods class Component(with_metaclass(_Maker, object)): \"\"\"Abstract class for all components.",
      "49": "# pylint: disable=too-few-public-methods class Component(metaclass=\"bowtie._component._Maker\" in object): \"\"\"Abstract class for all components."
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 35,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fastapi/docs001.py",
    "target_filename": "docs_src/fastapi/docs001.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "33": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # #",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # #",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # #",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # #",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # #",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        \"\"\"\n",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        \"\"\"\n",
    "warning_line": "    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "golemfactory/clay",
    "source_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "target_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6^",
    "target_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "predictions": [
      "awaited_messages: typing.Optional[list] = None ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "awaited_messages: typing.Optional[list] = None ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "1": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "2": "awaited_messages: typing.Optional[list] = None ) -> bool: \"\"\"",
      "3": "awaited_messages: typing.Optional[list] = None ) -> None: \"\"\"",
      "4": "awaited_messages: typing.Optional[list] = None ) -> Optional[match]: \"\"\"",
      "5": "awaited_messages: typing.Optional[list] = None ) -> Match: \"\"\"",
      "6": "awaited_messages: typing.Optional[list] = None ) -> Optional[Match]: \"\"\"",
      "7": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[Match]]: \"\"\"",
      "8": "awaited_messages: typing.Optional[list] = None ) -> Optional[[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "9": "awaited_messages: typing.Optional[list] = None ) -> list[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "10": "awaited_messages: typing.Optional[list] = None ) -> Optional[bool]: \"\"\"",
      "11": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Match]: \"\"\"",
      "12": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[match]]: \"\"\"",
      "13": "awaited_messages: typing.Optional[list] = None ) -> Optional[type]: \"\"\"",
      "14": "awaited_messages: typing.Optional[list] = None ) -> List[ typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "15": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]: \"\"\"",
      "16": "awaited_messages: typing.Optional[list] = None ) -> bool == None: \"\"\"",
      "17": "awaited_messages: typing.Optional[list] = None ) -> bool[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "18": "awaited_messages: typing.Optional[list] = None ) -> List[ typing.Optional[bool], typing.Optional[typing.Match] ]: \"\"\"",
      "19": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[Match]): \"\"\"",
      "20": "awaited_messages: typing.Optional[list] = None ) -> list: \"\"\"",
      "21": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \"\"\"",
      "22": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool]]: \"\"\"",
      "23": "awaited_messages: typing.Optional[list] = None ) -> typing.Optional[bool]: \"\"\"",
      "24": "awaited_messages: typing.Optional[list] = None ) -> Optional[match[typing.bool], typing.Optional[typing.Match]]: \"\"\"",
      "25": "awaited_messages: typing.Optional[list] = None ) -> Optional[str]: \"\"\"",
      "26": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.bool], typing.Optional[typing.Match]: \"\"\"",
      "27": "awaited_messages: typing.Optional[list] = None ) -> List[str]: \"\"\"",
      "28": "awaited_messages: typing.Optional[list] = None ) -> Optional[match[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "29": "awaited_messages: typing.Optional[list] = None ) -> bool[typing.Optional[match]]: \"\"\"",
      "30": "awaited_messages: typing.Optional[list] = None ) -> str: \"\"\"",
      "31": "awaited_messages: typing.Optional[list] = None ) -> Optional[[typing.Optional[bool], typing.Optional[Match]]: \"\"\"",
      "32": "awaited_messages: typing.Optional[list] = None ) -> List[typing.Optional[bool], typing.Optional[match]]: \"\"\"",
      "33": "awaited_messages: typing.Optional[list] = None ) -> List[typing.Optional[bool], typing.Optional[Match]]: \"\"\"",
      "34": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[setting.Match]]: \"\"\"",
      "35": "awaited_messages: typing.Optional[list] = None ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"\"",
      "36": "awaited_messages: typing.Optional[list] = None ) -> Optional[bool], typing.Optional[Match]: \"\"\"",
      "37": "awaited_messages: typing.Optional[list] = None ) -> bool[typing.Optional[Match]]: \"\"\"",
      "38": "awaited_messages: typing.Optional[list] = None ) -> (typing.Optional[bool], typing.Optional[match]): \"\"\"",
      "39": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]] = \"\"\"",
      "40": "awaited_messages: typing.Optional[list] = None ) -> Optional[[typing.Optional[bool], typing.Optional[match]]: \"\"\"",
      "41": "awaited_messages: typing.Optional[list] = None ) -> Optional[optional[typing.Match]]: \"\"\"",
      "42": "awaited_messages: typing.Optional[list] = None ) -> Optional[int], typing.Optional[Match]: \"\"\"",
      "43": "awaited_messages: typing.Optional[list] = None ) -> List[type]: \"\"\"",
      "44": "awaited_messages: typing.Optional[list] = None ) -> List[typing.Optional[bool], typing.Optional[typing.Match]] = \"\"\"",
      "45": "awaited_messages: typing.Optional[list] = None ) -> Optional[optional[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"",
      "46": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]]: \"\"\"\"",
      "47": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing[bool], typing.Optional[typing.Match]]: \"\"\"",
      "48": "awaited_messages: typing.Optional[list] = None ) -> Optional[typing.Optional[bool], typing.Optional[type]]: \"\"\"",
      "49": "awaited_messages: typing.Optional[list] = None ) -> List[\"Match\"]: \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True, autoincrement=False)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True, autoincrement=False)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True, autoincrement=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True, $parameter$autoincrement = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 20,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_same_table_joins.py",
    "target_filename": "tests/test_more_same_table_joins.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "36": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "38": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "39": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "40": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #",
      "42": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # #",
      "46": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True, autoincrement=False) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    @staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
    "target_code": "    @staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_line": "    def center(a: [\"Point2\"]) -> \"Point2\":",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[sc2.position.Point2]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BurnySc2/python-sc2",
    "source_filename": "sc2/position.py",
    "target_filename": "sc2/position.py",
    "source_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53^",
    "target_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "predictions": [
      "@staticmethod def center(a: List[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\""
    ],
    "correct": false,
    "top_five": {
      "0": "@staticmethod def center(a: List[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "1": "@staticmethod def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "2": "@staticmethod def center(a: Union[List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "3": "@staticmethod def center(a: Optional[[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "4": "@staticmethod def center(a: str[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "5": "@staticmethod def center(a: Union[Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "6": "@staticmethod def center(a: Union[sc2.position.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "7": "@staticmethod def center(a: Union[Set[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "8": "@staticmethod def center(a: Union[List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "9": "@staticmethod def center(a: Union[Position[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "10": "@staticmethod def center(a: List[sc2.position.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "11": "@staticmethod def center(a: Union[Point2]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "12": "@staticmethod def center(a: Union[sc2.position[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "13": "@staticmethod def center(a: Union[Sc2.position.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "14": "@staticmethod def center(a: Union[Position[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "15": "@staticmethod def center(a: Union[Group[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "16": "@staticmethod def center(a: Union[String[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "17": "@staticmethod def center(a: Optional[List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "18": "@staticmethod def center(a: Union[Sc2.position[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "19": "@staticmethod def center(a: Union[Group[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "20": "@staticmethod def center(a: Union[Set[\"Point2\"]], List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "21": "@staticmethod def center(a: Union[Mapping[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "22": "@staticmethod def center(a: list[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "23": "@staticmethod def center(a: Union[List[\"Point2\"]], List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "24": "@staticmethod def center(a: Union[Point2\"], List[Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "25": "@staticmethod def center(a: Union[sc2.position.Point2]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "26": "@staticmethod def center(a: Union[classes.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "27": "@staticmethod def center(a: Union[list[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "28": "@staticmethod def center(a: str(\"Point2\"])) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "29": "@staticmethod def center(a: List[sc2.position.Point2]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "30": "@staticmethod def center(a: Union[position[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "31": "@staticmethod def center(a: Union[Point2\", List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "32": "@staticmethod def center(a: Union[Set[\"Point2\"]], List[\"Point2\"]] -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "33": "@staticmethod def center(a: Union[Number, List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "34": "@staticmethod def center(a: List[Sc2.position.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "35": "@staticmethod def center(a: Union[Class[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "36": "@staticmethod def center(a: List[List[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "37": "@staticmethod def center(a: str.List[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "38": "@staticmethod def center(a: None) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "39": "@staticmethod def center(a: Union[sc2.position.Point2]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "40": "@staticmethod def center(a: Union[set[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "41": "@staticmethod def center(a: Union[Organization[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "42": "@staticmethod def center(a: Optional[\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "43": "@staticmethod def center(a: Union[types.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "44": "@staticmethod def center(a: Union[[\"Point2\"]]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "45": "@staticmethod def center(a: List[\"Point2\"]) -> List[Point2\"]: \"\"\" Returns the central point for points in list \"\"\"",
      "46": "@staticmethod def center(a: str(\"Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "47": "@staticmethod def center(a: str.Point2\"]) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "48": "@staticmethod def center(a: str) -> \"Point2\": \"\"\" Returns the central point for points in list \"\"\"",
      "49": "@staticmethod def center(a: Status.Point2) -> Status.Point2: \"\"\" Returns the central point for points in list \"\"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": false,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "2": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "3": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "5": "id = ormar.Integer(primary_key=True) name = ormar[max_length=100] category= ormar.ForeignKey(Category, nullable=True)",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=150) category= ormar.ForeignKey(Category, nullable=True)",
      "7": "id= ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "8": "id = ormar.Integer(primary_key=True) name = oumar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) Category= ormar.ForeignKey(Category, nullable=True)",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String[max_length=100] category= ormar.ForeignKey(Category, nullable=True)",
      "11": "id = ormar.Indeger(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String( max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "13": "id = ormar.Integer(primary_key=True), name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "14": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "15": "id: ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=101) category= ormar.ForeignKey(Category, nullable=True)",
      "17": "id = ormar.Integer(primary_key=True) name = ormar[max_length=100] category = ormar.ForeignKey(Category, nullable=True)",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(Max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100), category= ormar.ForeignKey(Category, nullable=True)",
      "20": "id = oumar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=150) category = ormar.ForeignKey(Category, nullable=True)",
      "22": "id = ormar.Integer(primary_key=True), name = ormar.String(max_length=100), category= ormar.ForeignKey(Category, nullable=True)",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=1000) category= ormar.ForeignKey(Category, nullable=True)",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length= 100) category= ormar.ForeignKey(Category, nullable=True)",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = oumar.ForeignKey(Category, nullable=True)",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= oumar.ForeignKey(Category, nullable=True)",
      "27": "id = ormar.Integer(primary_key=True ) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "28": "id = ormar.Integer(primary_key=True) name = oumar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) Category = ormar.ForeignKey(Category, nullable=True)",
      "30": "id = ormar.Integer(primary_key=True) username = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "31": "id = ormar.Integer(primary_key=True) name = (ormar.String(max_length=100)) category= ormar.ForeignKey(Category, nullable=True)",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String()(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "33": "id = ormar.Integer(primary_key=True) name += ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "34": "id = ormar.Integer(primary_key=True) name: ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "35": "id = ormar.Integer(primary_key=True, name = ormar.String(max_length=100)) category= ormar.ForeignKey(Category, nullable=True)",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String[max_length=100] category = ormar.ForeignKey(Category, nullable=True)",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) categories= ormar.ForeignKey(Category, nullable=True)",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) if name is not None:",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.STRING(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "40": "id = ormar.Integer(primary_key=True), name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=200) category= ormar.ForeignKey(Category, nullable=True)",
      "42": "id = ormar.Indeger(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(Max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String( max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=110) category= ormar.ForeignKey(Category, nullable=True)",
      "46": "id = ormar.Integer(primary_key=True) name = str(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) if name is not None:",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category(nullable=True)",
      "49": "id = ormar[primary_key=True] name = ormar[max_length=100] category= ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fields/docs003.py",
    "target_filename": "docs_src/fields/docs003.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # #",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray():\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        if np.max(X) <= 2:\n",
    "target_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        if np.max(X) <= 2:\n",
    "warning_line": "    def predict(self, X: np.ndarray) -> np.ndarray():",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `np.ndarray()` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 116,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scikit-learn-contrib/MAPIE",
    "source_filename": "mapie/tests/test_classification.py",
    "target_filename": "mapie/tests/test_classification.py",
    "source_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f^",
    "target_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "predictions": [
      "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:"
    ],
    "correct": true,
    "top_five": {
      "0": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "1": "def predict(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "2": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "3": "def predict(self, X: Optional[np.ndarray]) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: Optional[np.ndarray]) -> np.ndarray: if np.max(X) = 2:",
      "4": "def predict(self, X: np.ndarray) -> np.ndarray: return np[1, 2, 1] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "5": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array[1, 2, 1] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "6": "def predict(self, X: np.ndarray) -> Optional[np.ndarray]: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> Optional[np.ndarray]: if np.max(X) = 2:",
      "7": "def predict(self, X: Optional[np.ndarray]) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: Optional[np.ndarray]) -> np.ndarray(): if np.max(X) = 2:",
      "8": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) >= 2:",
      "9": "def predict(self, X: np.ndarray) -> np.ndarray: return np.Array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "10": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "11": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]); def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "12": "def predict(self, X: Optional[np.ndarray]) -> Optional[np.ndarray]: return np.array([1, 2, 1]) def predict_proba(self, X: Optional[np.ndarray]) -> Optional[np.ndarray]: if np.max(X) = 2:",
      "13": "def predict(self, X: np.ndarray) -> np.ndarray: return [np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "14": "def predict(self, X: Optional[np.ndarray]) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: Optional[np.ndarray]) -> np.ndarray(): if np.max(X) = 2:",
      "15": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) == 2:",
      "16": "def predict(self, X: np.ndarray) -> np.ndarray: return np[1, 2, 1] def predict_proba(self, X: np.ndarray) -> np[ndarray]: if np.max(X) = 2:",
      "17": "def predict(self, X: np.ndarray) -> np.ndarray: return [np.array[1, 2, 1]] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "18": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1], 0) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "19": "def predict(self, X: np.ndarray) -> np.ndarray: assert np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "20": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray() if np.max(X) = 2:",
      "21": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray if np.max(X) = 2:",
      "22": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1],...) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "23": "def predict(self, X: np.ndarray) -> np.ndarray: return np[1, 2, 1] def predict_proba(self, X: np.ndarray) -> np[Ndarray]: if np.max(X) = 2:",
      "24": "def predict(self, X: np.ndarray) -> np.ndarray: return np[[1, 2, 1]] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "25": "def predict(self, X: np.ndarray) -> np.ndarray: return self.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "26": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]), def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "27": "def predict(self, X: np.ndarray) -> np.ndarray: def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "28": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1],...) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "29": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1], np.ndarray) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "30": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1],...]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "31": "def predict(self, X: Optional[np.ndarray]) -> Optional[np.ndarray]: return np.array([1, 2, 1]) def predict_proba(self, X: Optional[np.ndarray]) -> np.ndarray(): if np.max(X) = 2:",
      "32": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array() def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "33": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1,2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "34": "def predict(self, X: np.ndarray) -> np.ndarray: return array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "35": "def predict(self, X: np.ndarray) -> np.ndarray(): return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray(): if np.max(X) = 2:",
      "36": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X)= 2:",
      "37": "def predict(self, X: np.ndarray) -> np.ndarray: return ([1, 2, 1]) np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "38": "def predict(self, X: np.ndarray) -> np.ndarray: return [[1, 2, 1]] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "39": "def predict(self, X: np.ndarray) -> np.ndarray: return np[1. 2, 1] def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "40": "def predict(self, X: np.ndarray) -> np.ndarray_: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray_: if np.max(X) = 2:",
      "41": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1], x) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "42": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2):",
      "43": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([2, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "44": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]): def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "45": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "46": "def predict( self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "47": "def predict(self, X: np.ndarray) -> np.ndarray: return np[[1, 2, 1]] def predict_proba(self, X: np.ndarray) -> np[ndarray]: if np.max(X) = 2:",
      "48": "def predict(self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1, 1]) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:",
      "49": "def predict( self, X: np.ndarray) -> np.ndarray: return np.array([1, 2, 1] ) def predict_proba(self, X: np.ndarray) -> np.ndarray: if np.max(X) = 2:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
    "target_code": "\ndef __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
    "warning_line": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(str, str, str)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 19,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "ciphers/trafid_cipher.py",
    "target_filename": "ciphers/trafid_cipher.py",
    "source_changeid": "60895366c0f50844af2737130ed98c2510e90060^",
    "target_changeid": "60895366c0f50844af2737130ed98c2510e90060",
    "predictions": [
      "def __decryptPart(messagePart: str, character2Number: dict) -> dict: tmp, thisPart = \"\", \"\""
    ],
    "correct": false,
    "top_five": {
      "0": "def __decryptPart(messagePart: str, character2Number: dict) -> dict: tmp, thisPart = \"\", \"\"",
      "1": "def __decryptPart(messagePart: str, character2Number: dict) -> str: tmp, thisPart = \"\", \"\"",
      "2": "def __decryptPart(messagePart: str, character2Number: dict) -> tmp: tmp, thisPart = \"\", \"\"",
      "3": "def __decryptPart(messagePart: str, character2Number: dict) -> elif isinstance(str, str, str): tmp, thisPart = \"\", \"\"",
      "4": "def __decryptPart(messagePart: str, character2Number: dict) -> '': tmp, thisPart = \"\", \"\"",
      "5": "def __decryptPart(messagePart: str, character2Number: dict) -> dict: tmp, thisPart = \"\", \"\"\"",
      "6": "def __decryptPart(messagePart: str, character2Number: dict) -> bool: tmp, thisPart = \"\", \"\"",
      "7": "def __decryptPart(messagePart: str, character2Number: dict) -> dict[str, str, str]: tmp, thisPart = \"\", \"\"",
      "8": "def __decryptPart(messagePart: str, character2Number: dict) -> def __decryptPart[str, str, str]: tmp, thisPart = \"\", \"\"",
      "9": "def __decryptPart(messagePart: str, character2Number: dict) -> tmp: tmp, thisPart = \"\", \"\"\"",
      "10": "def __decryptPart(messagePart: str, character2Number: dict) -> msg: tmp, thisPart = \"\", \"\"",
      "11": "def __decryptPart(messagePart: str, character2Number: dict) -> str: tmp, thisPart = \"\", \"\"\"",
      "12": "def __decryptPart(messagePart: str, character2Number: dict) -> str: tmp, thisPart = \"\", \"\"",
      "13": "def __decryptPart(messagePart: str, character2Number: dict) -> args[str, str, str]: tmp, thisPart = \"\", \"\"",
      "14": "def __decryptPart(messagePart: str, character2Number: dict) -> List[str, str, str]: tmp, thisPart = \"\", \"\"",
      "15": "def __decryptPart(messagePart: str, character2Number: dict) -> cb(str, str, str): tmp, thisPart = \"\", \"\"",
      "16": "def __decryptPart(messagePart: str, character2Number: dict) -> __decryptPart[str, str, str]: tmp, thisPart = \"\", \"\"",
      "17": "def __decryptPart(messagePart: str, character2Number: dict) -> null: tmp, thisPart = \"\", \"\"",
      "18": "def __decryptPart(messagePart: str, character2Number: dict) -> None: tmp, thisPart = \"\", \"\"",
      "19": "def __decryptPart(messagePart: str, character2Number: dict) -> cb (str, str, str): tmp, thisPart = \"\", \"\"",
      "20": "def __decryptPart(messagePart: str, character2Number: dict) -> tmp: thisPart = \"\", \"\"",
      "21": "def __decryptPart(messagePart: str, character2Number: dict) -> int = (str, str, str): tmp, thisPart = \"\", \"\"",
      "22": "def __decryptPart(messagePart: str, character2Number: dict) -> os.encrypt(str, str, str): tmp, thisPart = \"\", \"\"",
      "23": "def __decryptPart(messagePart: str, character2Number: dict) -> encrypt(str, str, str): tmp, thisPart = \"\", \"\"",
      "24": "def __decryptPart(messagePart: str, character2Number: dict) -> str[str, str, str]: tmp, thisPart = \"\", \"\"",
      "25": "def __decryptPart(messagePart: str, character2Number: dict) -> def __decryptPart(str: str, character2Number: dict): tmp, thisPart = \"\", \"\"",
      "26": "def __decryptPart(messagePart: str, character2Number: dict) -> cb(): tmp, thisPart = \"\", \"\"",
      "27": "def __decryptPart(messagePart: str, character2Number: dict) -> def __decryptPart(str, str, str): tmp, thisPart = \"\", \"\"",
      "28": "def __decryptPart(messagePart: str, character2Number: dict) -> apl[str, str, str]: tmp, thisPart = \"\", \"\"",
      "29": "def __decryptPart(messagePart: str, character2Number: dict) -> 'f': tmp, thisPart = \"\", \"\"",
      "30": "def __decryptPart(messagePart: str, character2Number: dict) -> uint32: tmp, thisPart = \"\", \"\"",
      "31": "def __decryptPart(messagePart: str, character2Number: dict) -> dc: tmp, thisPart = \"\", \"\"",
      "32": "def __decryptPart(messagePart: str, character2Number: dict) -> undefined: tmp, thisPart = \"\", \"\"",
      "33": "def __decryptPart(messagePart: str, character2Number: dict) -> dic: tmp, thisPart = \"\", \"\"",
      "34": "def __decryptPart(messagePart: str, character2Number: dict) -> utf-8: tmp, thisPart = \"\", \"\"",
      "35": "def __decryptPart(messagePart: str, character2Number: dict) -> '': tmp, thisPart = \"\", \"\"\"",
      "36": "def __decryptPart(messagePart: str, character2Number: dict) -> def __decryptPart(): tmp, thisPart = \"\", \"\"",
      "37": "def __decryptPart(messagePart: str, character2Number: dict) -> elif isinstance(str, str, str): tmp, thisPart = \"\", \"\"\"",
      "38": "def __decryptPart(messagePart: str, character2Number: dict) -> cb[str, str, str]: tmp, thisPart = \"\", \"\"",
      "39": "def __decryptPart(messagePart: str, character2Number: dict) -> tmp: thisPart = \"\", \"\"\"",
      "40": "def __decryptPart(messagePart: str, character2Number: dict) -> 0: tmp, thisPart = \"\", \"\"",
      "41": "def __decryptPart(messagePart: str, character2Number: dict): tmp, thisPart = \"\", \"\"",
      "42": "def __decryptPart(messagePart: str, character2Number: dict) -> def __decryptPart[str, str, str]: tmp, thisPart = \"\", \"\"\"",
      "43": "def __decryptPart(messagePart: str, character2Number: dict) -> func: tmp, thisPart = \"\", \"\"",
      "44": "def __decryptPart(messagePart: str, character2Number: dict) -> bool: tmp, thisPart = \"\", \"\"\"",
      "45": "def __decryptPart(messagePart: str, character2Number: dict) -> block: tmp, thisPart = \"\", \"\"",
      "46": "def __decryptPart(messagePart: str, character2Number: dict) -> str: tmp, thisPart = \"\", \"\"\"",
      "47": "def __decryptPart(messagePart: str, character2Number: dict) -> e: tmp, thisPart = \"\", \"\"",
      "48": "def __decryptPart(messagePart: str, character2Number: dict) -> f: tmp, thisPart = \"\", \"\"",
      "49": "def __decryptPart(messagePart: str, character2Number: dict) -> kwargs: tmp, thisPart = \"\", \"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 58,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar.ForeignKey(Category)"
    ],
    "correct": false,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar.ForeignKey(Category)",
      "1": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar.ForeignKey(Category)",
      "2": "id = ormar.Integer(primary_key=True) text= ormar.String(max_length=500) category= ormar.ForeignKey(Category)",
      "3": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "4": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category: ormar.ForeignKey(Category)",
      "5": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "6": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] = ormar[str]",
      "7": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]",
      "8": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]",
      "9": "id= ormar.Integer(primary_key=True) text= ormar.String(max_length=500) category= ormar.ForeignKey(Category)",
      "10": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] = ormar[str]",
      "11": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str]",
      "12": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] or",
      "13": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "14": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] or",
      "15": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "16": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str]",
      "17": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "18": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str] = ormar[str]",
      "19": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str]",
      "20": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str]",
      "21": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] =",
      "22": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str]",
      "23": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] = ormar[str]",
      "24": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str]",
      "25": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str] or",
      "26": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] = ormar[str] =",
      "27": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str]",
      "28": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "29": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str]",
      "30": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] or",
      "31": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str] = ormar[str]",
      "32": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str]",
      "33": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] =",
      "34": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] or",
      "35": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] or",
      "36": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] =",
      "37": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] or",
      "38": "id= ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar.ForeignKey(Category)",
      "39": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str] or",
      "40": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str]",
      "41": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] =",
      "42": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]",
      "43": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str]",
      "44": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] = ormar[str] =",
      "45": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str]",
      "46": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] ormar[str] = ormar[str] ormar[str]",
      "47": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category = ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str] =",
      "48": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str] ormar[str]",
      "49": "id = ormar.Integer(primary_key=True) text = ormar.String(max_length=500) category= ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str] ormar[str]] ormar[str] = ormar[str] ormar[str] = ormar[str] or"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category, nullable=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_fastapi_usage.py",
    "target_filename": "tests/test_fastapi_usage.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category: ormar.ForeignKey(Category, nullable=True)",
      "3": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "4": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, Nullable=True)",
      "6": "id= ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, NULLABLE=True)",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, Nullable=True)",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100), category= ormar.ForeignKey(Category, nullable=True)",
      "10": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, NULLABLE=True)",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) Category = ormar.ForeignKey(Category, nullable=True)",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, boolable=True)",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100), category = ormar.ForeignKey(Category, nullable=True)",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category[nullable]=True)",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, bool=True)",
      "17": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, boolable=True)",
      "19": "id = ormar.Integer(primary_key=True), name = ormar.String(max_length=100), category = ormar.ForeignKey(Category, nullable=True)",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(category, nullable=True)",
      "21": "id = ormar.Integer(primary_key=True), name = ormar.String(max_length=100), category= ormar.ForeignKey(Category, nullable=True)",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, not_nullable=True)",
      "23": "id = ormar.Indeger(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(category, nullable=True)",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category,...nullable=True)",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category is not None: ormar.ForeignKey(Category, nullable=True)",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category[nullable]=True)",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, bool=True)",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category,...nullable=True)",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, non-nullable=True)",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, 'nullable'=True)",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = oumar.ForeignKey(Category, nullable=True)",
      "33": "id: ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "34": "id = ormar.Integer(primary_key=True) name is ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nollable=True)",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=150) category = ormar.ForeignKey(Category, nullable=True)",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category[Nullable]=True)",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, args=True)",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) categories= ormar.ForeignKey(Category, nullable=True)",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, \"nullable\", True)",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, \"nullable\"=True)",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=\"\")",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, \"nullable\"=True)",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) Category= ormar.ForeignKey(Category, nullable=True)",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, \"nullable\", True)",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, args=True)",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category(nullable=True)",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, str=True)",
      "49": "id = ormar.Indeger(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.String(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n\n",
    "target_code": "\n    id = ormar.String(primary_key=True, default=key, max_length=8)\n    name = ormar.String(max_length=32)\n\n",
    "warning_line": "    id: ormar.String(primary_key=True, default=key, max_length=8)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_non_integer_pkey.py",
    "target_filename": "tests/test_non_integer_pkey.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32)",
      "1": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id= ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32)",
      "3": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id= ormar.String(primary_key=True, default=key, max_length=8) name= ormar.String(max_length=32)",
      "27": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "33": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "37": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "39": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "40": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #",
      "42": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # #",
      "44": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # #",
      "46": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # #",
      "47": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # #",
      "49": "id = ormar.String(primary_key=True, default=key, max_length=8) name = ormar.String(max_length=32) $parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length=8) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,\n",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_line": "      command: Optional(List[str]) = None,",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,"
    ],
    "correct": true,
    "top_five": {
      "0": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "1": "experiment: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "2": "experiments: Iterable[conf.Experiment], command: Optional[List[str], None] = None, args: Optional[List[str]] = None,",
      "3": "experiments: Iterable[conf.Experiment], command: Iterable[List[str]] = None, args: Optional[List[str]] = None,",
      "4": "experiments: Iterable[conf.Experiment], command: Optional[List[str]], args: Optional[List[str]] = None,",
      "5": "experiments: Iterable[conf.Experiment], command: Optional[List[str,...]] = None, args: Optional[List[str]] = None,",
      "6": "experiments: Iterable[conf.Experiment], command: Optional[List[str], List[str]] = None, args: Optional[List[str]] = None,",
      "7": "experiments: Iterable[conf.Experiment], command: Optional[list[str]] = None, args: Optional[List[str]] = None,",
      "8": "experiments: Iterable[conf.Experiment], command: None, args: Optional[List[str]] = None,",
      "9": "experiments: Iterable[conf.Experiment], command: Optional[List[str, str]] = None, args: Optional[List[str]] = None,",
      "10": "experiments: Iterable[conf.Experiment], command: Iterable[List[str]] = None, args: Iterable[List[str]] = None,",
      "11": "experiments: Iterable[conf.Experiment], command: Optional[List[str,]] = None, args: Optional[List[str]] = None,",
      "12": "experiments: Iterable[conf.Experiment], command: Optional[[List[str]] = None, args: Optional[List[str]] = None,",
      "13": "experiments: Iterable[conf.Experiment], command: Optional[List[str] ] = None, args: Optional[List[str]] = None,",
      "14": "experiments: Iterable[conf.Experiment], command: Optional[List[str].name] = None, args: Optional[List[str]] = None,",
      "15": "experiments: Iterable[conf.Experiment], command: Optional[List[str], []] = None, args: Optional[List[str]] = None,",
      "16": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[list[str]] = None,",
      "17": "experiments: Iterable[conf.Experiment], command: Optional[List[str]| None] = None, args: Optional[List[str]] = None,",
      "18": "experiments: Iterable[conf.Experiment], command: Optional[List[str].str] = None, args: Optional[List[str]] = None,",
      "19": "experiments: Iterable[conf.Experiment], command: Optional[Experiment] = None, args: Optional[List[str]] = None,",
      "20": "experiments: Iterable[conf.Experiment], command: Optional[Label[str]] = None, args: Optional[List[str]] = None,",
      "21": "experiments: Iterable[conf.Experiment], command: Optional[List[str ]] = None, args: Optional[List[str]] = None,",
      "22": "experiments: Iterable[conf.Experiment], command: Optional[List[str, list]] = None, args: Optional[List[str]] = None,",
      "23": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = none, args: Optional[List[str]] = None,",
      "24": "experiments: Iterable[conf.Experiment], command: Optionally[List[str]] = None, args: Optionally[List[str]] = None,",
      "25": "experiments: Iterable[conf.Experiment], command: Optional[str] = None, args: Optional[List[str]] = None,",
      "26": "experiments: Iterable[conf.Experiment], command: Optional[List[str, []] = None, args: Optional[List[str]] = None,",
      "27": "experiment: Iterable[conf.Experiment], command: Optional[List[str], None] = None, args: Optional[List[str]] = None,",
      "28": "experiments: Iterable[conf.Experiment], command: Options[List[str]] = None, args: Optional[List[str]] = None,",
      "29": "experiments: Iterable[conf.Experiment], command: Optional[Example] = None, args: Optional[List[str]] = None,",
      "30": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] | None = None, args: Optional[List[str]] = None,",
      "31": "experiments: Iterable[conf.Experiment], command: NotIterable[List[str]] = None, args: Optional[List[str]] = None,",
      "32": "experiments: Iterable[conf.Experiment], command: Optional[List[str]].Default = None, args: Optional[List[str]] = None,",
      "33": "experiments: Iterable[conf.Experiment), command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "34": "experiments: Iterable[conf.Experiment], command: Optional[Str] = None, args: Optional[List[str]] = None,",
      "35": "experiments: Iterable[conf.Experiment], command: String(List[str]) = None, args: Optional[List[str]] = None,",
      "36": "experiments: Iterable[conf.Experiment], command(List[str]) = None, args: Optional[List[str]] = None,",
      "37": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = Nothing, args: Optional[List[str]] = None,",
      "38": "experiments: Iterable[conf.Experiment], command: Optional[List[str], args: Optional[List[str]] = None,",
      "39": "experiments: Iterable[conf.Experiment], command: Optional[List[str]) = None, args: Optional[List[str]] = None,",
      "40": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,",
      "41": "experiments: Iterable[conf.Experiment], command: Optionally[List[str]] = None, args: Optional[List[str]] = None,",
      "42": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optionally[List[str]] = None,",
      "43": "experiments: Iterable[conf.Experiment], command = None, args: Optional[List[str]] = None,",
      "44": "experiments: Iterable[conf.Experiment], command: Optional[listen] = None, args: Optional[List[str]] = None,",
      "45": "experiments: Iterable[conf.Experiment], command: Optional[List.str] = None, args: Optional[List[str]] = None,",
      "46": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Options[List[str]] = None,",
      "47": "experiments: Iterable[conf.Experiment], command: Optional[list[str]] = None, args: Optional[list[str]] = None,",
      "48": "experiments: Iterable[conf.Experiment], command: List[str] = None, args: Optional[List[str]] = None,",
      "49": "experiments: Iterable[conf.Experiment], command: Optional[List[str]] = None, args: Optional[List[str]] = None,..."
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata\n",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata\n",
    "warning_line": "    def setMetaData(self, metadata: Dict[str: Any]) -> None:",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/PluginObject.py",
    "target_filename": "UM/PluginObject.py",
    "source_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9^",
    "target_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "predictions": [
      "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]): return self._metadata"
    ],
    "correct": false,
    "top_five": {
      "0": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]): return self._metadata",
      "1": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str, Any]: return self._metadata",
      "2": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "3": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, Optional[Dict[str]] = None: return self._metadata",
      "4": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata",
      "5": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]]) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "6": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, Optional[Dict[str]]: return self._metadata",
      "7": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]]: return self._metadata",
      "8": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata) -> Dict[str, Any]: return self._metadata",
      "9": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData() -> Dict[str, Any]: return self._metadata",
      "10": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, options: Optional[Dict[str]] = None: return self._metadata",
      "11": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]) -> None: return self._metadata",
      "12": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]]) -> None: self._metadata = metadata def getMetaData(self, Optional[Dict[str]]: return self._metadata",
      "13": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: self._metadata = metadata def getMetaData(self, Optional[Dict[str, Any]]: return self._metadata",
      "14": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str]) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str]: return self._metadata",
      "15": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, optional[Dict[str]] = None: return self._metadata",
      "16": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, optional[Dict[str]]: return self._metadata",
      "17": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]) -> Dict[str, Any]: return self._metadata",
      "18": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]: return self._metadata",
      "19": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]): self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]): return self._metadata",
      "20": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str], Any]] = None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata",
      "21": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str]): return self._metadata",
      "22": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, metadata: Optional[Dict[str]] = None: return self._metadata",
      "23": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: self._metadata = metadata def getMetaData(self, metadata: Optional[Dict[str, Any]]: return self._metadata",
      "24": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str]) -> None: return self._metadata",
      "25": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]): self._metadata = metadata def getMetaData(self) -> Dict[str, Any]: return self._metadata",
      "26": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str]) -> Dict[str]: return self._metadata",
      "27": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Any): return self._metadata",
      "28": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str], Any]] -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata",
      "29": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata",
      "30": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self.metadata = metadata def getMetaData(self, metadata: Dict[str, Any]): return self._metadata",
      "31": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self.metadata = metadata def getMetaData(self) -> Dict[str, Any]: return self._metadata",
      "32": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: self._metadata = metadata def getMetaData(self, options: Optional[Dict[str, Any]]: return self._metadata",
      "33": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]] = None) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata",
      "34": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]]] -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "35": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str, Any]]) -> None: self._metadata = metadata def getMetaData(self, optional[Dict[str, Any]]: return self._metadata",
      "36": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Optional[Dict[str, Any]]: return self._metadata",
      "37": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str], Any]]) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str, Any]]: return self._metadata",
      "38": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData() -> Optional[Dict[str]]: return self._metadata",
      "39": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "40": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None): self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "41": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "42": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None ) -> None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "43": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str], Any]] = None: self._metadata = metadata def getMetaData(self) -> Optional[Dict[str]]: return self._metadata",
      "44": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str]) -> Any: return self._metadata",
      "45": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Any) -> None: self._metadata = metadata def getMetaData(self) -> Dict[str, Any]: return self._metadata",
      "46": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, metadata: Optional[Dict[str]]: return self._metadata",
      "47": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, Optional[Dict[str]] -> None: return self._metadata",
      "48": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Optional[Dict[str]] = None) -> None: self._metadata = metadata def getMetaData(self, options: Optional[Dict[str]]: return self._metadata",
      "49": "# The metadata of the plugin is set at the moment it is loaded. def setMetaData(self, metadata: Dict[str, Any]) -> None: self._metadata = metadata def getMetaData(self, metadata: Dict[str, Any]) -> Any: return self._metadata"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_line": "        plane: [str, Plane],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[str, vedo.Plane]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 336,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "brainglobe/brainrender",
    "source_filename": "brainrender/scene.py",
    "target_filename": "brainrender/scene.py",
    "source_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6^",
    "target_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "predictions": [
      "self, plane: vedo.Plane, actors=None,"
    ],
    "correct": false,
    "top_five": {
      "0": "self, plane: vedo.Plane, actors=None,",
      "1": "self, plane: Optional[[str, Plane], actors=None,",
      "2": "self, plane: Optional[str, Plane], actors=None,",
      "3": "self, plane: Optional[[str, Plane]], actors=None,",
      "4": "self, plane: Optional[Plane], actors=None,",
      "5": "self, plane: List[str, Plane], actors=None,",
      "6": "self, plane: [str, Plane], actors=None,",
      "7": "self, plane: vedo[str, Plane], actors=None,",
      "8": "self, plane = [str, Plane], actors=None,",
      "9": "self, plane: Optional[Pool, List] = [str, Plane], actors=None,",
      "10": "self, plane: Optional[Plane] = [str, Plane], actors=None,",
      "11": "self, plane: Type[str, Plane], actors=None,",
      "12": "self, plane: Optional[[str, Plane], vedo.Plane] = [str, Plane], actors=None,",
      "13": "self, plane: Optional[Pool, Plane], actors=None,",
      "14": "self, plane: vedo.Vedo.Plane, actors=None,",
      "15": "self, plane: Optional[Pool] = [str, Plane], actors=None,",
      "16": "self, plane: Vedo.Plane, actors=None,",
      "17": "self, plane: Optional[Str, Plane], actors=None,",
      "18": "self, plane: Optional[Pool, vedo.Plane] = [str, Plane], actors=None,",
      "19": "self, plane=Vedo.Plane, actors=None,",
      "20": "self, plane: \"Vedo.Plane\", actors=None,",
      "21": "self, plane: Optional[Pool][str, Plane], actors=None,",
      "22": "self, plane: Optional[Pool, Str] = [str, Plane], actors=None,",
      "23": "self, plane: Optional[Pool, Str], actors=None,",
      "24": "self, plane: Optional[Pool, vedo.Plane], actors=None,",
      "25": "self, plane: Optional[[str, Plane]] = [str, Plane], actors=None,",
      "26": "self, plane: Map[str, Plane], actors=None,",
      "27": "self, plane: Optional[[str, Plane], vedo.Plane] = None, actors=None,",
      "28": "self, plane: Mock[str, Plane], actors=None,",
      "29": "self, plane: Model[str, Plane], actors=None,",
      "30": "self, plane: V[str, Plane], actors=None,",
      "31": "self, plane: Element[str, Plane], actors=None,",
      "32": "self, plane: str(Plane), actors=None,",
      "33": "self, plane: Optional[Pool, str], actors=None,",
      "34": "self, plane: Plane, actors=None,",
      "35": "self, plane: Optional[[str, Plane], actor=None,",
      "36": "self, plane: T.Vedo.Plane, actors=None,",
      "37": "self, plane: Expression[str, Plane], actors=None,",
      "38": "self, plane: Optional[Pool, vedo.Plane] = None, actors=None,",
      "39": "self, plane: Optional[[str, Plane]] = None, actors=None,",
      "40": "self, plane: option[str, Plane], actors=None,",
      "41": "self, plane: [str, Plane] actors=None,",
      "42": "self, plane: \"\", actors=None,",
      "43": "self, plane: Optional[\"Plane\", Plane], actors=None,",
      "44": "self, plane: Optional[[str, Plane], vedo.Plane]: Optional[str], actors=None,",
      "45": "self, plane: list[str, Plane], actors=None,",
      "46": "self, plane: Form[str, Plane], actors=None,",
      "47": "self, plane: Optional[[str, Plane], vedo.Plane] = False, actors=None,",
      "48": "self, plane: Optional[[str, Plane], vedo.Plane] = (str, Plane), actors=None,",
      "49": "self, plane: (str, Plane), actors=None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 48,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True)",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category= ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) category = ormar.ForeignKey(Category, nullable=True) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        text: Optional[Text],\n        sender_id: [Optional[Text]],\n        metadata: Optional[Dict],\n",
    "target_code": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
    "warning_line": "        sender_id: [Optional[Text]],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[typing.Optional[typing.Text]]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/core/channels/webexteams.py",
    "target_filename": "rasa/core/channels/webexteams.py",
    "source_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2^",
    "target_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2",
    "predictions": [
      "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],"
    ],
    "correct": true,
    "top_five": {
      "0": "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],",
      "1": "text: Optional[Text], sender_id: Optional[Text]], metadata: Optional[Dict],",
      "2": "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],",
      "3": "text: Optional[Text], sender_id: Optional[Text] + sender_id, metadata: Optional[Dict],",
      "4": "text: Optional[Text], sender_id: Optional[Optional[Text]], metadata: Optional[Dict],",
      "5": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text] and sender_id: Optional[Text] and metadata: Optional[Dict],",
      "6": "text: Optional[Text], sender_id: Optional[Text][0], metadata: Optional[Dict],",
      "7": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text] and sender_id: Optional[Text], metadata: Optional[Dict],",
      "8": "text: Optional[Text], sender_id: Optional[Text], metadata: Optional[Dict],",
      "9": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text], metadata: Optional[Dict],",
      "10": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text], metadata: Optional[Dict],",
      "11": "text: Optional[Text], sender_id: Optional[Text] == None, metadata: Optional[Dict],",
      "12": "text: Optional[Text], sender_id: Optional[Text] + [], metadata: Optional[Dict],",
      "13": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text]], metadata: Optional[Dict],",
      "14": "text: Optional[Text], sender_id: Optional[Text] -> None, metadata: Optional[Dict],",
      "15": "text: Optional[Text], sender_id: Optional[Text][], metadata: Optional[Dict],",
      "16": "text: Optional[Text], sender_id: Optional[Text] = false, metadata: Optional[Dict],",
      "17": "text: Optional[Text], sender_id: Optional[Text] [], metadata: Optional[Dict],",
      "18": "text: Optional[Text], sender_id: Optional[Text](sender_id), metadata: Optional[Dict],",
      "19": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text]? sender_id : Optional[Text] : metadata: Optional[Dict],",
      "20": "text: Optional[Text], sender_id: Optional[Text]!= null], metadata: Optional[Dict],",
      "21": "text: Optional[Text], sender_id: List[Optional[Text]], metadata: Optional[Dict],",
      "22": "text: Optional[Text], sender_id: Optional[Text] || [], metadata: Optional[Dict],",
      "23": "text: Optional[Text], sender_id = [Optional[Text]], metadata: Optional[Dict],",
      "24": "text: Optional[Text], sender_id: Optional[Editor.Optional[Text]], metadata: Optional[Dict],",
      "25": "text: Optional[Text], sender_id: Optional[Text] (), metadata: Optional[Dict],",
      "26": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text], metadata: Optional[Dict],",
      "27": "text: Optional[Text], senter_id: Optional[Text], metadata: Optional[Dict],",
      "28": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text]? sender_id: Optional[Text] : metadata: Optional[Dict],",
      "29": "text: Optional[Text], sender_id=[Optional[Text]], metadata: Optional[Dict],",
      "30": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text]? sender_id : Optional[Text], metadata: Optional[Dict],",
      "31": "text: Optional[Text], sender_id: Optional[Text] + ', metadata: Optional[Dict],",
      "32": "text: Optional[Text], sender_id: Optional[Text] && sender_id: Optional[Text]], metadata: Optional[Dict],",
      "33": "text: Optional[Text], sender_id: Optional[Text] -> Text, metadata: Optional[Dict],",
      "34": "text: Optional[Text], sender_id: Text, metadata: Optional[Dict],",
      "35": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text] if sender_id is None: metadata: Optional[Dict],",
      "36": "text: Optional[Text], sender_id: Optional[Text] if not sender_id: Optional[Text]] metadata: Optional[Dict],",
      "37": "text: Optional[Text], sender_id: Optional[Text]), metadata: Optional[Dict],",
      "38": "text: Optional[Text]], sender_id: Optional[Text], metadata: Optional[Dict],",
      "39": "text: Optional[Text], sender_id: Optional[Text] || None, metadata: Optional[Dict],",
      "40": "text: Optional[Text], sending_id: Optional[Text], metadata: Optional[Dict],",
      "41": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text] and sender_id: Optional[Text]], metadata: Optional[Dict],",
      "42": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text] and metadata: Optional[Dict],",
      "43": "text: Optional[Text], sender_id: Optional[Text][0]], metadata: Optional[Dict],",
      "44": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text] and sender_id: Optional[Dict], metadata: Optional[Dict],",
      "45": "text: Optional[Text], sender_id: Options.Optional[Text], metadata: Optional[Dict],",
      "46": "text: Optional[Text], sender_id: Optional[Text] + sender_id_id_id, metadata: Optional[Dict],",
      "47": "text: Optional[Text], sender_id: Optional[Text] or None, metadata: Optional[Dict],",
      "48": "text: Optional[Text], sender_id: Optional[Text] and sender_id: Optional[Text] and sender_id: Optional[Text] + [], metadata: Optional[Dict],",
      "49": "text: Optional[Text], sender_id: Optional[Text] - None, metadata: Optional[Dict],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\ndef ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    magic = pi * sqrt(2) / smoothing\n",
    "target_code": "\ndef ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    magic = pi * sqrt(2) / smoothing\n",
    "warning_line": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `type(pandas.Series)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "freqtrade/indicator_helpers.py",
    "target_filename": "freqtrade/indicator_helpers.py",
    "source_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c^",
    "target_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "predictions": [
      "def ehlers_super_smoother(series: Series, smoothing: float = 6): magic = pi * sqrt(2) / smoothing"
    ],
    "correct": false,
    "top_five": {
      "0": "def ehlers_super_smoother(series: Series, smoothing: float = 6): magic = pi * sqrt(2) / smoothing",
      "1": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str: magic = pi * sqrt(2) / smoothing",
      "2": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: magic = pi * sqrt(2) / smoothing",
      "3": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> [Series]: magic = pi * sqrt(2) / smoothing",
      "4": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> tuple[Series]: magic = pi * sqrt(2) / smoothing",
      "5": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> \"Series\": magic = pi * sqrt(2) / smoothing",
      "6": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas[Series]: magic = pi * sqrt(2) / smoothing",
      "7": "def ehlers_super_smoother(series: Series, smoothing: float, series=Series): magic = pi * sqrt(2) / smoothing",
      "8": "def ehlers_super_smoother(series: Series, smoothing: float, Series): magic = pi * sqrt(2) / smoothing",
      "9": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series: magic = pi * sqrt(2) / smoothing",
      "10": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> 'Series': magic = pi * sqrt(2) / smoothing",
      "11": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas[Series]: magic = pi * sqrt(2) / smoothing",
      "12": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> spandas.Series: magic = pi * sqrt(2) / smoothing",
      "13": "def ehlers_super_smoother(series: Series, smoothing: float = 6) ->'series': magic = pi * sqrt(2) / smoothing",
      "14": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type[Series]: magic = pi * sqrt(2) / smoothing",
      "15": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List['Series']: magic = pi * sqrt(2) / smoothing",
      "16": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list[Series]: magic = pi * sqrt(2) / smoothing",
      "17": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type[Series]: magic = pi * sqrt(2) / smoothing",
      "18": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Series: magic = pi * sqrt(2) / smoothing",
      "19": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> spandas[Series]: magic = pi * sqrt(2) / smoothing",
      "20": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pi[Series]: magic = pi * sqrt(2) / smoothing",
      "21": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str = magic = pi * sqrt(2) / smoothing",
      "22": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> python_type: magic = pi * sqrt(2) / smoothing",
      "23": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type__: magic = pi * sqrt(2) / smoothing",
      "24": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Platform[Series]: magic = pi * sqrt(2) / smoothing",
      "25": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas.Series: magic = pi * sqrt(2) / smoothing",
      "26": "def ehlers_super_smoother(series: Series, smoothing: float, Series) -> Series: magic = pi * sqrt(2) / smoothing",
      "27": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: magic = pi * sqrt(2) / smoothing",
      "28": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Model[Series]: magic = pi * sqrt(2) / smoothing",
      "29": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> series: magic = pi * sqrt(2) / smoothing",
      "30": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Set[Series]: magic = pi * sqrt(2) / smoothing",
      "31": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list['Series']: magic = pi * sqrt(2) / smoothing",
      "32": "def ehlers_super_smoother(series: Series, smoothing: float, series): magic = pi * sqrt(2) / smoothing",
      "33": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> bool = \"Series\": magic = pi * sqrt(2) / smoothing",
      "34": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas['Series']: magic = pi * sqrt(2) / smoothing",
      "35": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[\"Series\"]: magic = pi * sqrt(2) / smoothing",
      "36": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[ Series ]: magic = pi * sqrt(2) / smoothing",
      "37": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> f: magic = pi * sqrt(2) / smoothing",
      "38": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type(Series): magic = pi * sqrt(2) / smoothing",
      "39": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Phadragon[Series]: magic = pi * sqrt(2) / smoothing",
      "40": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Polyfill: magic = pi * sqrt(2) / smoothing",
      "41": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type: magic = pi * sqrt(2) / smoothing",
      "42": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> perf: magic = pi * sqrt(2) / smoothing",
      "43": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Union[Series, Series]: magic = pi * sqrt(2) / smoothing",
      "44": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> bool = true: magic = pi * sqrt(2) / smoothing",
      "45": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type: magic = pi * sqrt(2) / smoothing",
      "46": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pi: magic = pi * sqrt(2) / smoothing",
      "47": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pid: magic = pi * sqrt(2) / smoothing",
      "48": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> bool: magic = pi * sqrt(2) / smoothing",
      "49": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Phadragon.Type[Series]: magic = pi * sqrt(2) / smoothing"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": true,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    album = ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 41,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_foreign_keys.py",
    "target_filename": "tests/test_foreign_keys.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id = ormar.Integer(primary_key=True) album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100)",
      "3": "id = ormar.Integer(primary_key=True) album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") title= ormar.String(max_length=100)",
      "4": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "45": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") title = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "33": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # #",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # #",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # #",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # #",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # #",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # #",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "target_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_line": "    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 43,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Flax-Network/flax-blockchain",
    "source_filename": "src/util/Conditions.py",
    "target_filename": "src/util/Conditions.py",
    "source_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f^",
    "target_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "predictions": [
      "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:"
    ],
    "correct": true,
    "top_five": {
      "0": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:",
      "1": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] for _ in conditions:",
      "2": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = ( { } for _ in conditions:",
      "3": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions:",
      "4": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d = Dict[ConditionOpcode, List[ConditionVarPair]] for _ in conditions:",
      "5": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = } } for _ in conditions:",
      "6": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = \\ } for _ in conditions:",
      "7": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = { } for _ in conditions:",
      "8": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = = { } for _ in conditions:",
      "9": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair, None]] = { } for _ in conditions:",
      "10": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = ^ } for _ in conditions:",
      "11": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = [] for _ in conditions:",
      "12": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair], None] = { } for _ in conditions:",
      "13": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } _ in conditions:",
      "14": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = []",
      "15": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = d[condition_opcode] for _ in conditions:",
      "16": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: -> Dict[ConditionOpcode, List[ConditionVarP",
      "17": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = d.slice(src.types.condition_opcodes.ConditionOpcode, List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:",
      "18": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = ( { } for _ in conditions:",
      "19": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: List[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:",
      "20": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]] = Dict[ConditionOpcode, List[ConditionVarP",
      "21": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = \"\"\" for _ in conditions:",
      "22": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = _ in conditions:",
      "23": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: Dict[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:",
      "24": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = (\"\") for _ in conditions:",
      "25": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = * * conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: -> Dict[ConditionOpcode, List[ConditionVarP",
      "26": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "27": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = d.slice(src.types.condition_opcodes.ConditionOpcode, List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]]:",
      "28": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode: List[ConditionVarPair]] = } } for _ in conditions:",
      "29": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "30": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = dict() for _ in conditions:",
      "31": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: List[ConditionOpcode] = Dict[ConditionOpcode, List[ConditionVarPair]] for _ in conditions:",
      "32": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "33": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = d[conditionOpcode] for _ in conditions:",
      "34": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "35": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "36": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "37": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "38": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "39": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = * * conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d = Dict[ConditionOpcode, List[ConditionVarP",
      "40": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "41": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "42": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = * * conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]] = Dict[ConditionOpcode, List[ConditionVarP",
      "43": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "44": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "45": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Optional[Dict[ConditionOpcode, List[ConditionVarPair]]] = { } for _ in conditions:",
      "46": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: _ = conditions_by_opcode(conditions) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "47": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
      "48": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = d.slice(src.types.condition_opcodes.ConditionOpcode, List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]] = { } for _ in conditions:",
      "49": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: d: Dict[ConditionOpcode, List[ConditionVarPair]] = def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            else:\n                extra_info = [] # type: [str]\n                if subtype_label is not None:\n",
    "target_code": "            else:\n                extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_line": "                extra_info = [] # type: [str]",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `\"[str]\"` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checker.py",
    "target_filename": "mypy/checker.py",
    "source_changeid": "021283f03639d185c3a0985684a94307c9fcc15b^",
    "target_changeid": "021283f03639d185c3a0985684a94307c9fcc15b",
    "predictions": [
      "else: extra_info = [] if subtype_label is not None:"
    ],
    "correct": false,
    "top_five": {
      "0": "else: extra_info = [] if subtype_label is not None:",
      "1": "else: extra_info = [] # type: List[str] if subtype_label is not None:",
      "2": "else: extra_info = [] # type: Optional[str] if subtype_label is not None:",
      "3": "else: extra_info = [] # type: [str] if subtype_label is not None:",
      "4": "else: extra_info = [] # type: \"\"\" if subtype_label is not None:",
      "5": "else: extra_info = [] # type: '' if subtype_label is not None:",
      "6": "else: extra_info = [] # type: Optional[[str]] if subtype_label is not None:",
      "7": "else: extra_info = [] # type: Expression[str] if subtype_label is not None:",
      "8": "else: extra_info = [] # type: Type[str] if subtype_label is not None:",
      "9": "else: extra_info = [] # type: str if subtype_label is not None:",
      "10": "else: extra_info = [] # type: String] if subtype_label is not None:",
      "11": "else: extra_info: '' + [str] if subtype_label is not None:",
      "12": "else: extra_info: \"\"\"[str]\" if subtype_label is not None:",
      "13": "else: extra_info = [] # type: Union[str, str] if subtype_label is not None:",
      "14": "else: extra_info = [] # type: Alternative[str] if subtype_label is not None:",
      "15": "else: extra_info = [] # type: angular[str] if subtype_label is not None:",
      "16": "else: extra_info = [] # type: args[str] if subtype_label is not None:",
      "17": "else: extra_info = [] # type: t[str] if subtype_label is not None:",
      "18": "else: extra_info = [] # type: Index[str] if subtype_label is not None:",
      "19": "else: extra_info = [] # type: Argument[str] if subtype_label is not None:",
      "20": "else: extra_info = [] # type: typing.Optional[str] if subtype_label is not None:",
      "21": "else: extra_info = [] # type: tuple[str] if subtype_label is not None:",
      "22": "else: extra_info = [] # type: \"\" if subtype_label is not None:",
      "23": "else: extra_info = [] # type: Element[str] if subtype_label is not None:",
      "24": "else: extra_info = [] # type: Union[str] if subtype_label is not None:",
      "25": "else: extra_info = [] # type: choice[str] if subtype_label is not None:",
      "26": "else: extra_info = '' # type: '' if subtype_label is not None:",
      "27": "else: extra_info = [] # type: list[str] if subtype_label is not None:",
      "28": "else: extra_info = [] # type: Searchable[str] if subtype_label is not None:",
      "29": "else: extra_info = [] # type: Union[str,...] if subtype_label is not None:",
      "30": "else: extra_info = [] # type: type[str] if subtype_label is not None:",
      "31": "else: extra_info = [] # type: Typo[str] if subtype_label is not None:",
      "32": "else: extra_info = [] # type: 'f' if subtype_label is not None:",
      "33": "else: extra_info: \"\"\" + [str] if subtype_label is not None:",
      "34": "else: add_info = [] # type: [str] if subtype_label is not None:",
      "35": "else: extra_info = [] # type: Union[str, List[str]] if subtype_label is not None:",
      "36": "else: extra_info = [] # type: \"\"\"\" if subtype_label is not None:",
      "37": "else: extra_info = [] # type:'str' if subtype_label is not None:",
      "38": "else: extra_info: str = [] if subtype_label is not None:",
      "39": "else: extra_info: [str] if subtype_label is not None:",
      "40": "else: extra_info = [] # type: [] if subtype_label is not None:",
      "41": "else: extra_info = [] # type: String if subtype_label is not None:",
      "42": "else: extra_info: '' if subtype_label is not None:",
      "43": "else: extra_info = [] # type: Union[str, List] if subtype_label is not None:",
      "44": "else: extra_info = str # type: str if subtype_label is not None:",
      "45": "else: extra_info = [] # type: Union[str, str]] if subtype_label is not None:",
      "46": "else: extra_info = \"\"\" if subtype_label is not None:",
      "47": "else: extra_info: \"\"\" if subtype_label is not None:",
      "48": "else: extra_info = str if subtype_label is not None:",
      "49": "else: extra_info = '' if subtype_label is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=40)\n\n",
    "warning_line": "    name: ormar.String(max_length=40)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 40)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_many_to_many.py",
    "target_filename": "tests/test_many_to_many.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40)",
      "1": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "39": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # #",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # #",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # #",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # #",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # #",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # #",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=40) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
    "target_code": "\n    def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_line": "    def add(self, predicted: List[str], labels: List[str]) -> None:",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "asyml/texar-pytorch",
    "source_filename": "texar/torch/run/metric/generation.py",
    "target_filename": "texar/torch/run/metric/generation.py",
    "source_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3^",
    "target_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "predictions": [
      "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):"
    ],
    "correct": false,
    "top_five": {
      "0": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "1": "def add(self, predicted: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "2": "def add(self, predicted: List[str], labels: StreamingMetric()) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "3": "def add(self, predicted: List[str], labels: StreamingMetric) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "4": "def add(self, predicted, labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "5": "def add(self, predicted: List[str]), labels: List[str]: for (reference, hypothesis) in zip(labels, predicted):",
      "6": "def add(self, predicted: StreamingMetric[List[str], labels: StreamingMetric[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "7": "def add(self, predicted: Optional[List[str], labels: Optional[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "8": "def add(self, predicted: List[str], labels: List[str]): for (reference, hypothesis) in zip(labels, predicted):",
      "9": "def add(self, predicted: List[str], labels: StreamingMetric[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "10": "def add(self, predicted: List[str], labels: Optional[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "11": "def add(self, predicted: StreamingMetric[List[str]], labels: StreamingMetric[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "12": "def add(self, predicted: Union[List[str], labels: Union[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "13": "def add( self, predicted: List[str], labels: List[str] ) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "14": "def add(self, predicted: List[str] ) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "15": "def add(self, predicted: List[str]] -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "16": "def add(self, predicted: List[str], labels: StreamingMetric[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "17": "def add(self, predicted, labels: StreamingMetric) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "18": "def add(self, predicted: List[str], labels: StreamingMetric]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "19": "def add(self, predicted: Optional[List[str]], labels: Optional[List[str]]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "20": "def add(self, predicted: StreamingMetric[List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "21": "def add(self, predicted: List[str]), labels: List[str] -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "22": "def add(self, predicted: List[str], labels: List[str] -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "23": "def add(self, predicted: _List[str], labels: _List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "24": "def add(self, predicted: list[str], labels: list[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "25": "def add(self, predicted: List[str]): for (reference, hypothesis) in zip(labels, predicted):",
      "26": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels):",
      "27": "def add(self, predicted: List[str], labels: List[str]: for (reference, hypothesis) in zip(labels, predicted):",
      "28": "def add(self, predicted: List[str, labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "29": "def add(self, predicted: List[str]], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "30": "def add(self, predicted, labels, str: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "31": "def add(self, predicted: Union[List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "32": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted) -> List[str]:",
      "33": "def add(self, predicted: Array[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "34": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted) -> bool:",
      "35": "def add( self, predicted: List[str] ) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "36": "def add(self, predicted, labels, List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "37": "def add(self, predicted: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted) -> List[str]:",
      "38": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): def add(self, predicted: List[str], labels: List[str]) -> None:",
      "39": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): def add(self, predicted: List[str], labels: List[str]) -> bool:",
      "40": "def add(self, predicted: List[str]], labels: List[str]: for (reference, hypothesis) in zip(labels, predicted):",
      "41": "def add(self, predicted: bool, labels: bool) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "42": "def add(self, predicted: List[str] -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "43": "def add(self, predicted: List[str], labels: StreamingMetric): for (reference, hypothesis) in zip(labels, predicted):",
      "44": "def add(self, predicted, labels, StreamingMetric) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "45": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): def add(self, predicted: List[str], labels: List[str]) -> List[str]:",
      "46": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted) -> None:",
      "47": "def add(self, predicted: '', labels: '') -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "48": "def add(self, predicted, labels,...) -> None: for (reference, hypothesis) in zip(labels, predicted):",
      "49": "def add(self, predicted: List[str], labels: List[str]) -> None: for (reference, hypothesis) in zip(labels, predicted): add(self, predicted: List[str], labels: List[str]) -> bool:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
    "target_code": "\n    def fit(self, ts):\n        super().fit(ts)\n        # Check univariate time series\n",
    "warning_line": "    def fit(self, ts, component_index: Optional[int] = None):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 218,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "darts/models/theta.py",
    "target_filename": "darts/models/theta.py",
    "source_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3^",
    "target_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "predictions": [
      "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series"
    ],
    "correct": false,
    "top_five": {
      "0": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series",
      "1": "def fit(self, ts, component_index: Optional[int] = None) -> None: super().fit(ts, component_index) # Check univariate time series",
      "2": "def fit(self, ts, component_index=None): super().fit(ts, component_index=None) # Check univariate time series",
      "3": "def fit(self, ts): super().fit(ts, component_index) # Check univariate time series",
      "4": "def fit(self, ts, component_index = None): super().fit(ts, component_index) # Check univariate time series",
      "5": "def fit(self, ts, component_index=None, series_index=None): super().fit(ts, component_index=None) # Check univariate time series",
      "6": "def fit( self, ts, component_index: Optional[int] ): super().fit( ts, component_index ) # Check univariate time series",
      "7": "def fit( self, ts, component_index: Optional[int] = None ): super().fit( ts, component_index ) # Check univariate time series",
      "8": "def fit(self, ts, component_index: Optional[int]): super().fit(ts, component_index) # Check univariate time series",
      "9": "def fit(self, ts, component_index=None, component_index=None): super().fit(ts, component_index=None) # Check univariate time series",
      "10": "def fit(self, ts, component_index: Optional[int]!= None): super().fit(ts, component_index) # Check univariate time series",
      "11": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index, series) # Check univariate time series",
      "12": "def fit( self, ts, component_index: Optional[int] = None ) -> None: super().fit( ts, component_index) # Check univariate time series",
      "13": "def fit(self, ts, component_index=None, series_length=None): super().fit(ts, component_index=None) # Check univariate time series",
      "14": "def fit(self, ts, component_index: Optional[int] = None) -> None: # Check univariate time series",
      "15": "def fit(self, ts, component_index: Optional[int] = \"\"): super().fit(ts, component_index) # Check univariate time series",
      "16": "def fit( self, ts, component_index: Optional[int] = None ) -> None: super().fit( ts, component_index ) # Check univariate time series",
      "17": "def fit( self, ts, component_index: Optional[int] = None ): super().fit( ts, component_index) # Check univariate time series",
      "18": "def fit(self, ts, component_index: Optional[int] | None = None): super().fit(ts, component_index) # Check univariate time series",
      "19": "def fit( self, ts, component_index=None ): super().fit( ts, component_index=None ) # Check univariate time series",
      "20": "def fit(self, ts: Optional[int], component_index: Optional[int] = None): super().fit(ts, component_index: Optional[int]) # Check univariate time series",
      "21": "def fit(self, ts: Optional[int], component_index: Optional[int] = None): super().fit(ts: Optional[int]) # Check univariate time series",
      "22": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index.length) # Check univariate time series",
      "23": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index, []) # Check univariate time series",
      "24": "def fit(self, ts, component_index: Optional[int], None = None): super().fit(ts, component_index) # Check univariate time series",
      "25": "def fit(self, ts, component_index: Optional[int]? None : super().fit(ts, component_index) # Check univariate time series",
      "26": "def fit(self, ts, component_index: Optional[int] -> None): super().fit(ts, component_index) # Check univariate time series",
      "27": "def fit(self, ts, component_index: Optional[int] = None ): super().fit(ts, component_index) # Check univariate time series",
      "28": "def fit( self, ts, component_index: Optional[int] = None ): super().fit( self, ts, component_index ) # Check univariate time series",
      "29": "def fit( self, ts, component_index: Optional[int] ) -> None: super().fit( ts, component_index ) # Check univariate time series",
      "30": "def fit(self, ts, component_index: Optional[int] = \"\"): super().fit(ts, component_index) # Check univariate time series",
      "31": "def fit( self, ts, component_index: Optional[int] ): super().fit( ts, component_index) # Check univariate time series",
      "32": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series.",
      "33": "def fit( self, ts, component_index: Optional[int] = None ) -> None: super().fit(ts, component_index) # Check univariate time series",
      "34": "def fit( self, ts, component_index: Optional[int] ) -> None: super().fit( ts, component_index) # Check univariate time series",
      "35": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index=None) # Check univariate time series",
      "36": "def fit(self, ts: Optional[int], component_index: Optional[int] = None): super().fit(ts, component_index) # Check univariate time series",
      "37": "def fit(self, ts, component_index: Optional[int] is None): super().fit(ts, component_index) # Check univariate time series",
      "38": "def fit(self, ts, component_index: Optional[int] = False): super().fit(ts, component_index) # Check univariate time series",
      "39": "def fit(self, ts, component_index: Optional[int]] = None): super().fit(ts, component_index) # Check univariate time series",
      "40": "def fit(self, ts, component_index: Optional[int], None = None) -> None: super().fit(ts, component_index) # Check univariate time series",
      "41": "def fit(self, ts, component_index: Optional[int]=None): super().fit(ts, component_index) # Check univariate time series",
      "42": "def fit(self, ts, component_index: Optional[int] = 0): super().fit(ts, component_index) # Check univariate time series",
      "43": "def fit(self, ts, component_index = None) -> None: super().fit(ts, component_index) # Check univariate time series",
      "44": "def fit(self, ts, component_index: Optional[int] = None): super().fit(ts, component_index); # Check univariate time series",
      "45": "def fit( self, ts, component_index = None ): super().fit( ts, component_index ) # Check univariate time series",
      "46": "def fit(self, ts, component_index: Optional[int] = []): super().fit(ts, component_index) # Check univariate time series",
      "47": "def fit(self, ts, component_index: Optional[int] = -1): super().fit(ts, component_index) # Check univariate time series",
      "48": "def fit(self, ts: Optional[int], component_index: Optional[int] = None): super().fit(ts: Optional[int], component_index: None) # Check univariate time series",
      "49": "def fit(self, ts, component_index: Optional[int]? None : super().fit(ts, component_index) : # Check univariate time series"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \"\"\"\n        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":\n        \"\"\"Create a xor expression.\n",
    "target_code": "        \"\"\"\n        if not isinstance(other, BitVec):\n            other = BitVec(z3.BitVecVal(other, self.size()))\n        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \"\"\"Create a xor expression.\n",
    "warning_line": "    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 145,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/smt/bitvecfunc.py",
    "target_filename": "mythril/laser/smt/bitvecfunc.py",
    "source_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9^",
    "target_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "predictions": [
      "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \"\"\"Create a xor expression."
    ],
    "correct": false,
    "top_five": {
      "0": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "1": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "2": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, int]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "3": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[BitVec, int]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "4": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "5": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, BitVec]) -> BitVecFunc: \"\"\"Create a xor expression.",
      "6": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[int, \"BitVec]\") -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "7": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "8": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str]]]]) -> \"BitVecFun",
      "9": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[int, BitVec]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "10": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "11": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Int, BitVec]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "12": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression",
      "13": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, BitVec]]: \"\"\"Create a xor expression.",
      "14": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, \"BitVec]\") -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "15": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "16": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, St]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "17": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, BitVec]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "18": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, BitVec]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "19": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]]) -> \"BitVecFun",
      "20": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[int, \"BitVec]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "21": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "22": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, BitVec]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "23": "\"\"\" return _arithmetic_helper(self, other, operator.or_) -> BitVecFunc: \"\"\"Create a xor expression.",
      "24": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, BitVec]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "25": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "26": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[int, \"BitVec\"]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "27": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[\"BitVec\", \"BitVec\"]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "28": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, BitVec]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "29": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str,...]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "30": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]])) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "31": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"Create",
      "32": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, BitVec]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "33": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "34": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, BitVec]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "35": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "36": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]])] -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "37": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]]) -> \"BitVecFunc\": \"\"\"",
      "38": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[BitVec, int], BitVecFunc]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "39": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression. __xor__(self, other: Union[str, Union[str, Union[str]])",
      "40": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, BitVec]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "41": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str,...]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "42": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str]]]]]) -> \"BitVecFun",
      "43": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[BitVec], int]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "44": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str,...]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "45": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union]]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression",
      "46": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "47": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, int]]]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "48": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[Union[\"BitVec\", \"BitVec\", \"BitVecFunc\"]) -> \"BitVecFunc\": \"\"\"Create a xor expression.",
      "49": "\"\"\" return _arithmetic_helper(self, other, operator.or_) def __xor__(self, other: Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, Union[str, St]]])) -> \"BitVecFunc\": \"\"\"Create a xor expression."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
    "target_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_line": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "target_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28^",
    "target_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "predictions": [
      "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)"
    ],
    "correct": false,
    "top_five": {
      "0": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "1": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "2": "def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "3": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "4": "def setTargetBedTemperature(self, printer, temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "5": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "6": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "7": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> None: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "8": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "9": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> bool: self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "10": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(temperature)) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "11": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> float: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "12": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"], temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "13": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "14": "def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'float'): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "15": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int) -> float: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "16": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) -> None:",
      "17": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "18": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) -> bool:",
      "19": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> int: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "20": "def setTargetBedTemperature(self, printer: float, temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "21": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: \"LegacyUM3PrinterOutputController.setTargetBedTemperature\"): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "22": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float: int self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "23": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int) -> None: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "24": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float ): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "25": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float: self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "26": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: 0): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "27": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: floatingPoint): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "28": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> bool: data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "29": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature=0): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "30": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(t) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "31": "def setTargetBedTemperature(self, printer, temperature=PrinterOutputModel): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "32": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "33": "def setTargetBedTemperature( self, printer: \"PrinterOutputModel\", temperature: float ): data = str(temperature ) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "34": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int) -> str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "35": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> bool: self._output_device.put(\"printer/bed/temperature/target\", bool, on_finished=self._onPutBedTemperatureCompleted)",
      "36": "def setTargetBedTemperature( self, printer: \"PrinterOutputModel\", temperature: float ): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "37": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): data = float(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "38": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = float(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "39": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> float: self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "40": "def setTargetBedTemperature(self, printer: int, temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "41": "def setTargetBedTemperature(self, printer: UnionPrinterOutputModel, temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "42": "def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "43": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float) -> str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "44": "def setTargetBedTemperature(self, printer, temperature: int): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "45": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted):",
      "46": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temp) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "47": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): data = str(temperature) self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted\")",
      "48": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> bool: self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) -> bool:",
      "49": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_line": "    def pop(self, index: int = -1) -> NoReturn: ...",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 52,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pallets/werkzeug",
    "source_filename": "src/werkzeug/datastructures.pyi",
    "target_filename": "src/werkzeug/datastructures.pyi",
    "source_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3^",
    "target_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "predictions": [
      "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:..."
    ],
    "correct": false,
    "top_five": {
      "0": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "1": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int == -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "2": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int, SupportsIndex) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "3": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "4": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: list[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "5": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: List[int], value: V) -> NoReturn:... def pop(self, index: List[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "6": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: List[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "7": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index == -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "8": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index:... def reverse(self) -> NoReturn:...",
      "9": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: list[int], value: V) -> NoReturn:... def pop(self, list[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "10": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index: List[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "11": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "12": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = 0) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "13": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: list = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "14": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: str = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "15": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: List[int], value: V) -> NoReturn:... def pop(self, Index[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "16": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "17": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: list[int], value: V) -> NoReturn:... def pop(self, list[index] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "18": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int,... def reverse(self) -> NoReturn:...",
      "19": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int == 1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "20": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int == 0) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "21": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index: Int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "22": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value:...) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "23": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: Index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "24": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "25": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "26": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int === -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "27": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index == 1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "28": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: List[int]) -> NoReturn:... def pop(self, index: List[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "29": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int == -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "30": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index: Index) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "31": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: index || int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "32": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, value: List[int]) -> NoReturn:... def pop(self, index: List[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "33": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self, int) -> NoReturn:...",
      "34": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "35": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int || -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "36": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: list[int], value: V) -> NoReturn:... def pop(self, index: list[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "37": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int, SupportsIndex) -> NoReturn:... def reverse(self, int) -> NoReturn:...",
      "38": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int - 1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "39": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index: Index[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "40": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: Int, value: V) -> NoReturn:... def pop(self, index:... def reverse(self) -> NoReturn:...",
      "41": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos, value: V) -> NoReturn:... def pop(self, index: List[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "42": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int || -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "43": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value:...) -> NoReturn:... def pop(self, index: int, SupportsIndex) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "44": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos, value: V) -> NoReturn:... def pop(self, index: list[int] = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "45": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int = = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "46": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value:...) -> NoReturn:... def pop(self, index: int == -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "47": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos, value: V) -> NoReturn:... def pop(self, index: int = -1) -> NoReturn:... def reverse(self) -> NoReturn:...",
      "48": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int =... def reverse(self) -> NoReturn:...",
      "49": "def extend(self, values: Iterable[V]) -> NoReturn:... def insert(self, pos: int, value: V) -> NoReturn:... def pop(self, index: int == -1) -> NoReturn:... def reverse(self, int) -> NoReturn:..."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        return cls(\n",
    "warning_line": "    def from_dict(",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1769,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/messages.py",
    "target_filename": "raiden/messages.py",
    "source_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd^",
    "target_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "predictions": [
      "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls("
    ],
    "correct": false,
    "top_five": {
      "0": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "1": "def from_dict( cls: typing.Optional[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "2": "def from_dict( cls: typing.T_UpdatePFS, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "3": "def from_dict( cls, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "4": "def from_dict( cls: typing.Optional[typing.Type[T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "5": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ): return cls(",
      "6": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_Message: return cls(",
      "7": "def from_dict( cls: typing.Instance[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "8": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "9": "def from_dict( cls: typing.Type[type.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "10": "def from_dict( cls: typing.Optional[ typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "11": "def from_dict( cls: typing.Type[ typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "12": "def from_dict( cls: typing.Default[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "13": "def from_dict( cls: typing.Optional[typing.T_UpdatePFS], data: typing.Dict, ): return cls(",
      "14": "def from_dict( cls: typing.Class[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "15": "def from_dict( cls: typing.type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "16": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, () -> typing.T_UpdatePFS: return cls(",
      "17": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict,...) -> typing.T_UpdatePFS: return cls(",
      "18": "def from_dict( cls: typing.Callable[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "19": "def from_dict( cls: typing.Type[typing.T_UpdatePFS, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "20": "def from_dict( cls: typing.Dict, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "21": "def from_dict( cls: typing.Optional[typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "22": "def from_dict( cls: typing.Set[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "23": "def from_dict( cls = typing.Type[typing.T_UpdatePFS], data = typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "24": "def from_dict( cls: typing.Message.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "25": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, \"\" ) -> typing.T_UpdatePFS: return cls(",
      "26": "def from_dict( cls: typing.Type[ Typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "27": "def from_dict( cls: typing.Message[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "28": "def from_dict( cls: typing.Variable[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "29": "def from_dict( cls: typing.Optional[typing.T_UpdatePFS], data: typing.Dict, ] -> typing.T_UpdatePFS: return cls(",
      "30": "def from_dict( cls: Typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "31": "def from_dict( cls = typing.Type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "32": "def from_dict( cls: typing.Type(typing.T_UpdatePFS), data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "33": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, ] -> typing.T_UpdatePFS: return cls(",
      "34": "def from_dict( cls: typing.Object[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "35": "def from_dict( cls: typing.Message, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "36": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, from_dict) -> typing.T_UpdatePFS: return cls(",
      "37": "def from_dict( cls: typing.Optional[typing.Type[Message], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "38": "def from_dict( cls: type[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "39": "def from_dict( cls: typing.Type[typing.T_UpdatePFS]), data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "40": "def from_dict( cls: typing.Optional[typing.Type[T_UpdatePFS], data: typing.Dict, ] -> typing.T_UpdatePFS: return cls(",
      "41": "def from_dict( cls, data, from_dict: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "42": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, int: ) -> typing.T_UpdatePFS: return cls(",
      "43": "def from_dict( cls, data, from_dict: typing.Dict) -> typing.T_UpdatePFS: return cls(",
      "44": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, from_dict, ) -> typing.T_UpdatePFS: return cls(",
      "45": "def from_dict( cls: typing.Optional[typing.T_UpdatePFS], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "46": "def from_dict( cls: typing.Type[Message], data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "47": "def from_dict( cls: typing.Type[typing.T_UpdatePFS], data: typing.Dict, UpdatePFS, ) -> typing.T_UpdatePFS: return cls(",
      "48": "def from_dict( cls: typing.UpdatePFS, data: typing.Dict, ) -> typing.T_UpdatePFS: return cls(",
      "49": "def from_dict( cls, data, ) -> typing.T_UpdatePFS: return cls("
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_line": "    team: Optional[Team] = ormar.ForeignKey(Team)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "1": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "3": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "4": "id= ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "5": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "6": "id = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "7": "id: int = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "8": "id= ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "9": "id: int = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "10": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "11": "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "12": "id = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "13": "id = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "14": "id = ormar.Integer(primary_key=True) team_value = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "15": "id: int = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "16": "id: int = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "17": "id=ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "18": "id = ormar.Integer(primary_key=True) team_key = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "19": "id= ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "20": "id = ormar.Integer(primary_key=True) team_name = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "21": "id: int = ormar.Integer(primary_key=True) team: Optional[Team] = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "22": "id: ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "23": "id = ormar.Integer(primary_key=True) group= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "24": "id = ormar.Integer(primary_key=True) team: Optional[Ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "25": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email isinstance(str, ormar.String(max_length=100))",
      "26": "id = ormar.Integer(primary_key=True) team_list = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "27": "id = ormar.Integer(primary_key=True) team: Optional[Ormar.ForeignKey(Team) email: str = ormar.String(max_length=100)",
      "28": "id: ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "29": "id = ormar.Integer(primary_key=True) group= ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "30": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email isinstance(ormar.String(max_length=100))",
      "31": "id = ormar.Integer(primary_key=True) optional_team = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "32": "id: int = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "33": "id= ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "34": "id=ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "35": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team); email = ormar.String(max_length=100)",
      "36": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team); email = ormar.String(max_length=100)",
      "37": "id = ormar.Integer(primary_key=True) team_number = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "38": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team) email isinstance(max_length=100)",
      "39": "id = ormar.Integer(primary_key=True) team_value = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "40": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team); email= ormar.String(max_length=100)",
      "41": "id = ormar.Integer(primary_key=True) team= ormar[ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "42": "id= ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "43": "id = ormar.Integer(primary_key=True) team_key = ormar.ForeignKey(Team) email= ormar.String(max_length=100)",
      "44": "id = ormar.Integer(primary_key=True) team = ormar.ForeignKey(TeamName) email = ormar.String(max_length=100)",
      "45": "id = ormar.Integer(primary_key=True) group= ormar.ForeignKey(Group) email = ormar.String(max_length=100)",
      "46": "id = ormar.Integer(primary_key=True) team=ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "47": "id: ormar.Integer(primary_key=True) team = ormar.ForeignKey(Team) email = ormar.String(max_length=100)",
      "48": "id = ormar.Integer(primary_key=True) team= ormar.ForeignKey(Team), email= ormar.String(max_length=100)",
      "49": "id = ormar.Integer(primary_key=True) team: ormar.ForeignKey(Team) email = ormar.String(max_length=100)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None\n\n",
    "target_code": "    id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_line": "    charging_profile: Dict = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 96,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None",
      "1": "id_tag: str connector_id: option[int] = None charging_profile: Optional[Dict] = None",
      "2": "id_tag: str connector_id: int = None charging_profile: Optional[Dict] = None",
      "3": "id_tag: str connector_id: typing.Optional[int] = None charging_profile: typing.Optional[Dict] = None",
      "4": "id_tag: str connector_id: options.int = None charging_profile: Optional[Dict] = None",
      "5": "id_tag: str connector_id: Optional[int] = None charging_profiles: Optional[Dict] = None",
      "6": "id_tag: str connector_id: Optional[int], Dict: Optional[Dict] = None charging_profile: Optional[Dict] = None",
      "7": "id_tag: str connector_id: choice[int] = None charging_profile: Optional[Dict] = None",
      "8": "id_tag: str connector_id: option(int) = None charging_profile: Optional[Dict] = None",
      "9": "id_tag: str connector_id: options[int] = None charging_profile: Optional[Dict] = None",
      "10": "id_tag: str connector_id: int = 0 charging_profile: Optional[Dict] = None",
      "11": "id_tag: str connector_id: int = \"\" charging_profile: Optional[Dict] = None",
      "12": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None if not charging_profile: Optional[Dict] = None",
      "13": "id_tag: str connector_id: optional[int] = None charging_profile: Optional[Dict] = None",
      "14": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict[str, str]] = None",
      "15": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict[typing.Any, typing.Any]] = None",
      "16": "id_tag: str connector_id: Optional[int] = None charging_profile = Optional[Dict]",
      "17": "id_tag: str connector_id: int = False charging_profile: Optional[Dict] = None",
      "18": "id_tag: str connector_id: int = [] charging_profile: Optional[Dict] = None",
      "19": "id_tag: str connector_id: Optional[int], Dict = None charging_profile: Optional[Dict] = None",
      "20": "id_tag: str connector_id: typing.Optional[int] = None charging_profile: Optional[Dict] = None",
      "21": "id_tag: str connector_id: int = None charging_profiles: Optional[Dict] = None",
      "22": "id_tag: str connector_id: Options.int = None charging_profile: Optional[Dict] = None",
      "23": "id_tag: str connector_id: Int = None charging_profile: Optional[Dict] = None",
      "24": "id_tag: str connector_id: type[int] = None charging_profile: Optional[Dict] = None",
      "25": "id_tag: str connect_id: Optional[int] = None charging_profile: Optional[Dict] = None",
      "26": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict, None] = None",
      "27": "id_tag: str connector_id: type_id = None charging_profile: Optional[Dict] = None",
      "28": "id_tag: str connector_id: Optional[int] = None charging_profile, Optional[Dict] = None",
      "29": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] | None = None",
      "30": "id_tag: str connector_id: optional[int] = None charging_profile: Optional[Dict] = None",
      "31": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None if charging_profile: Optional[Dict] = None",
      "32": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None if not id_tag: Optional[str] = None",
      "33": "id_tag: str connector_id: Type.Optional[int] = None charging_profile: Optional[Dict] = None",
      "34": "id_tag: str connector_id: int = -1 charging_profile: Optional[Dict] = None",
      "35": "id_tag: str connector_id: Options[int] = None charging_profile: Optional[Dict] = None",
      "36": "id_tag: str connector_id: Type[int] = None charging_profile: Optional[Dict] = None",
      "37": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None elif charging_profile: Optional[Dict] = None",
      "38": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict], None = None",
      "39": "id_tag: str connection_id: Optional[int] = None charging_profile: Optional[Dict] = None",
      "40": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None if not already charging_profile: Optional[Dict] = None",
      "41": "id_tag: str connector_id: typing.Optional[int] = None charging_profile: Typing.Optional[Dict] = None",
      "42": "id_tag: str connector_id: int = '' charging_profile: Optional[Dict] = None",
      "43": "id_tag: str connector_id: Optional[int] = None charging_profile: Options[Dict] = None",
      "44": "id_tag: str connector_id: Optional[ int] = None charging_profile: Optional[Dict] = None",
      "45": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[Dict] = None elif charging_profile is None: Optional[Dict] = None",
      "46": "id_tag: str connector_id: Optional[int] = None charging_profile = Optional[Dict] = None",
      "47": "id_tag: str connector_id: Optional[int] = None charging_profile: Dict = Optional[Dict]",
      "48": "id_tag: str connector_id: Optional[int] = None charging_profile: Optional[ Dict] = None",
      "49": "id_tag: str connector_id: option=int = None charging_profile: Optional[Dict] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    body: List[Union[Comment, Statement]] = field(default=list)\n",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_line": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 139,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/dotenv-linter",
    "source_filename": "dotenv_linter/grammar/fst.py",
    "target_filename": "dotenv_linter/grammar/fst.py",
    "source_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6^",
    "target_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "predictions": [
      "body: List[Union[Comment, Statement]] = field(default=list)"
    ],
    "correct": false,
    "top_five": {
      "0": "body: List[Union[Comment, Statement]] = field(default=list)",
      "1": "body: List[List[Union[Comment, Statement]]] = field(default=list)",
      "2": "body: List[Comment, Statement] = field(default=list)",
      "3": "body: List[List[Union[Comment, Statement]] = field(default=list)",
      "4": "body = List[Union[Comment, Statement]] = field(default=list)",
      "5": "body: List[Union[Comment, Statement]] = field(default=str)",
      "6": "body= List[Union[Comment, Statement]] = field(default=list)",
      "7": "body: List[Comment, Statement]] = field(default=list)",
      "8": "body: Optional[List[Union[Comment, Statement]]] = field(default=list)",
      "9": "body: List[Statement] = field(default=list)",
      "10": "body: List[list[Union[Comment, Statement]]] = field(default=list)",
      "11": "body: List[[Union[Comment, Statement]] = field(default=list)",
      "12": "body: List[Union[Comment, Statement]] = field(default=global[list])",
      "13": "body: List[Union[Comment, Statement]] = field(default=null)",
      "14": "body: list[List[Union[Comment, Statement]]] = field(default=list)",
      "15": "body: List[Union[Comment, Statement]] = field(default=field)",
      "16": "body: List[Union[Comment, Statement]] = field(default=false)",
      "17": "body: List[List[Union[Comment, Statement]]] = field(default=str)",
      "18": "body: List[list[Union[Comment, Statement]] = field(default=list)",
      "19": "body: List[Comment] = field(default=list)",
      "20": "body=List[Union[Comment, Statement]] = field(default=list)",
      "21": "body: List[Union[Comment, Statement]] = field(default=int(list))",
      "22": "body: List[Comment, Statement] = field(default=str)",
      "23": "body: List[Array[Union[Comment, Statement]]] = field(default=list)",
      "24": "body: List[Union[Commment, Statement]] = field(default=list)",
      "25": "body: List[Base[Union[Comment, Statement]]] = field(default=list)",
      "26": "body: List[List[Union[Comment, Statement]]] = field(default=null)",
      "27": "body: List[Union[Comment, Statement, Optional]] = field(default=list)",
      "28": "body: List[Union[Comment, Statement,...]] = field(default=list)",
      "29": "body: List[Comment[Union[Comment, Statement]] = field(default=list)",
      "30": "body: List[Union[Comment, Statement]] = field(default=_list)",
      "31": "body: List[Union[Comment, Statement]] = field(default=number)",
      "32": "body: List[Union[Comment, Statement]] = field(default=context.list)",
      "33": "body: List[List[Union[Comment, Statement]]] = field(default=field)",
      "34": "body: List[List[Union[Comment, Statement]]] = field(default=false)",
      "35": "body: _List[Union[Comment, Statement]] = field(default=list)",
      "36": "body: List[Union[Comment, Statement]] = field(default_list)",
      "37": "body: Type[List[Union[Comment, Statement]] = field(default=list)",
      "38": "body: [List[Union[Comment, Statement]]] = field(default=list)",
      "39": "body: List[Union[Comment, Statement]] = field(default=instance.list)",
      "40": "body: List[str, Comment] = field(default=list)",
      "41": "body: List[[Union[Comment, Statement]]] = field(default=list)",
      "42": "body: List[List[Union[Comment, Statement]]] = field(default_list)",
      "43": "body: List[Command, Statement]] = field(default=list)",
      "44": "body: list[Union[Comment, Statement]] = field(default=list)",
      "45": "body: List[Union[Comment, Statement]] = field(default=global.list)",
      "46": "body: List[Union[Comment, Statement]] = field(default=global)",
      "47": "body: List[Union[Comment, Statement]] = field(default=toString())",
      "48": "body: List[str] = field(default=list)",
      "49": "body: List[Union[Comment, Statement]] = field(default=f)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = None\n    barrier: Optional[Barrier] = None\n",
    "target_code": "    pub_port: Optional[int] = None\n    server: Optional[SuiteRuntimeServer] = None\n    publisher: Optional[WorkflowPublisher] = None\n    barrier: Optional[Barrier] = None\n",
    "warning_line": "    publisher: WorkflowPublisher = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `publisher` declared in class `Scheduler` has type `WorkflowPublisher` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "1": "pub_port: Optional[int] = None server: SuiteRuntimeServer = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "2": "pub_port: Optional[int] = None server: Optional[SUPERRUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "3": "pub_port: Optional[int] = None server: Optional[SUBSuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "4": "pub_port: Optional[int] = None server: Optional[SUCCESS_TIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "5": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher = Optional[WorkflowPublisher] barrier: Optional[Barrier] = None",
      "6": "pub_port: Optional[int] = None server: Optional[SUPERRUNTIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "7": "pub_port: Optional[int] = None server: Options.SuiteRuntimeServer = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "8": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer, Optional[WorkflowPublisher]] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "9": "pub_port: Optional[int] = None server: Optional[SUBMITTED_TIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "10": "pub_port: Optional[int] = None service: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "11": "pub_port: Optional[int] = None server: Optional[SUPERUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "12": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer, WorkflowPublisher] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "13": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer], WorkflowPublisher = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "14": "pub_port: Optional[int] = None server: Optional[SUPER_TIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "15": "pub_port: Optional[int] = None server: Optional[SUB_RUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "16": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher = Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "17": "pub_port: Optional[int] = None server: Optional[SUCCESS_TAX] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "18": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Options[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "19": "pub_port: Optional[int] = None server: Optional[SUCCESS_TASK] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "20": "pub_port: Optional[int] = None server: Optional[SULTIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "21": "pub_port: Optional[int] = None agent: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "22": "pub_port: Optional[int] = None client: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "23": "pub_port: Optional[int] = None server: Optional[SUCCESS_RUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "24": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher= Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "25": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "26": "pub_port: Optional[int] = None server: Optional[SUMERUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "27": "pub_port: Optional[int] = None server: Optional[SUPERRUNTO_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "28": "pub_port: Optional[int] = None server: Optional[SUPERRUNIME] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "29": "pub_port: Optional[int] = None server: Optional[SUCCESS_TAKING] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "30": "pub_port: Optional[int] = None server: Optional[SUPURERUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "31": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher= Optional[WorkflowPublisher] barrier: Optional[Barrier] = None",
      "32": "pub_port: Optional[int] = None servers: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "33": "pub_port: Optional[int] = None server: Optional[suiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "34": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher) = None barrier: Optional[Barrier] = None",
      "35": "pub_port: Optional[int] = None server: Optional[SUBERUNIME_SERVER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "36": "pub_port: Optional[int] = None server: Optional[SUCCESS_TABLER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "37": "pub_port: Optional[int] = None server: Optional[SUBMITTED_TIME] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "38": "pub_port: Optional[int] = None server: Optional[SouthernTimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "39": "pub_port: Optional[int] = None server: Optional[SUPERRUNTER] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "40": "pub_port: Optional[int] = None server: Optional[SUCCESS_TABILE] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "41": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher = Optional[WorkflowPublisher]; barrier: Optional[Barrier] = None",
      "42": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] | Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "43": "pub_port: Optional[int] = None server: Optional[SuiteRuntime] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "44": "pub_port: Optional[int] = None server: Optional[SUCCESS_TIME] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "45": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[barrier] = None",
      "46": "pub_port: Optional[int] = None server: WorkflowPublisher = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "47": "pub_port: Optional[int] = None server: Optional[SUPPARE] = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None",
      "48": "pub_port: Optional[int] = None server: Options.SuiteRuntimeServer = None publisher: Options.WorkflowPublisher = None barrier: Optional[Barrier] = None",
      "49": "pub_port: Optional[int] = None server: WorkflowServer = None publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: int = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None\n\n",
    "target_code": "class ClearChargingProfilePayload:\n    id: Optional[int] = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `ClearChargingProfilePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 61,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "1": "class ClearChargingProfilePayload: id = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "2": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeTypeType] = None stack_level: Optional[int] = None",
      "3": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType[]] = None stack_level: Optional[int] = None",
      "4": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeTypePurposeType] = None stack_level: Optional[int] = None",
      "5": "class ClearChargingProfilePayload: int: Optional[id] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "6": "class ClearChargingProfilePayload: int = \"\" connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "7": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType]: Optional[str] = None stack_level: Optional[int] = None",
      "8": "class ClearChargingProfilePayload: id: option[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "9": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType]: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "10": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: int = None",
      "11": "class ClearChargingProfilePayload: int = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "12": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] || Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "13": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType, Optional[ChargingProfilePurposeType]] = None stack_level: Optional[int] = None",
      "14": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType]: Optional[int] = None stack_level: Optional[int] = None",
      "15": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] | None = None stack_level: Optional[int] = None",
      "16": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType, Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "17": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType[str]] = None stack_level: Optional[int] = None",
      "18": "class ClearChargingProfilePayload id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "19": "class ClearChargingProfilePayload: id = Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "20": "class ClearChargingProfilePayload: int = [] connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "21": "class ClearChargingProfilePayload: id_type: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int_type] = None",
      "22": "class ClearChargingProfilePayload: user_id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "23": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType[Type]] = None stack_level: Optional[int] = None",
      "24": "class ClearChargingProfilePayload: id, connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "25": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] || None = None stack_level: Optional[int] = None",
      "26": "class ClearChargingProfilePayload: int = 0 connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "27": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Options[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "28": "class ClearChargingProfilePayload: id = \"\" connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "29": "class ClearChargingProfilePayload: id -> None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "30": "class ClearChargingProfilePayload: option_id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "31": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[CHARGINGProfilePurposeType] = None stack_level: Optional[int] = None",
      "32": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType_] = None stack_level: Optional[int] = None",
      "33": "class ClearChargingProfilePayload: int_id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int_level] = None",
      "34": "class ClearChargingProfilePayload: id: Optional[int], connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "35": "class ClearChargingProfilePayload: module_id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "36": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Int = None",
      "37": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] | None = None",
      "38": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = none stack_level: Optional[int] = None",
      "39": "class ClearChargingProfilePayload: id: Optional[int]: None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "40": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeTypeKey] = None stack_level: Optional[int] = None",
      "41": "class ClearChargingProfilePayload: id: option[int] = None connector_id: option[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "42": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType], stack_level: Optional[int] = None",
      "43": "class ClearChargingProfilePayload: ID: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "44": "class ClearChargingProfilePayload: id: option.int = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "45": "class ClearChargingProfilePayload: Id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "46": "class ClearChargingProfilePayload: id: Optional[int] = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[str] = None",
      "47": "class ClearChargingProfilePayload: id and connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "48": "class ClearChargingProfilePayload: id () = None connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None",
      "49": "class ClearChargingProfilePayload: id: int = \"\" connector_id: Optional[int] = None charging_profile_purpose: Optional[ChargingProfilePurposeType] = None stack_level: Optional[int] = None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n\n",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_line": "    msg = None  # type: MessageBuilder",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checkstrformat.py",
    "target_filename": "mypy/checkstrformat.py",
    "source_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe^",
    "target_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "predictions": [
      "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker"
    ],
    "correct": false,
    "top_five": {
      "0": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "1": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "2": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "3": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "4": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "5": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" exprchk: \"Mypy.checkexpr.ExpressionChecker\"",
      "6": "# Some services are provided by a TypeChecker instance. chk: \"mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "7": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] = None # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "8": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "9": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "10": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "11": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a MessageBuilder instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "12": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "13": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: TypeBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "14": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "15": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" # Some services are provided by a ExpressionChecker instance. exprchk: \"Mypy.checkexpr.ExpressionChecker\"",
      "16": "# Some services are provided by a TypeChecker instance. chk: \"mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" # Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "17": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" # Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "18": "# Some services are provided by a TypeChecker instance. chk: 'Mypy.checker.TypeChecker' # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: 'Mypy.checkexpr.ExpressionChecker'",
      "19": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: ExpressionChecker # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "20": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "21": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: \"Mypy.checkexpr.ExpressionChecker\"",
      "22": "# Some services are provided by a TypeChecker instance. chk: \"mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "23": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "24": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: TypeBuilder # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "25": "# Some services are provided by a TypeChecker instance. chk: 'Mypy.checker.TypeChecker' # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a MessageBuilder instance. exprchk: 'Mypy.checkexpr.ExpressionChecker'",
      "26": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a MessageBuilder instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "27": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder]",
      "28": "# Some services are provided by a TypeChecker instance. chk = None # type: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "29": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: \"\" # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "30": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a MessageBuilder instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "31": "# Some services are provided by a TypeChecker instance. chk: \"mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "32": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: \"Mypy.checkexpr.ExpressionChecker\"",
      "33": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" Some services are provided by a ExpressionChecker instance. exprchk: \"Mypy.checkexpr.ExpressionChecker\"",
      "34": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "35": "# Some services are provided by a TypeChecker instance. chk: 'Mypy.checker.TypeChecker' # This is shared with TypeChecker, but stored also here for convenience. msg: 'MessageBuilder' # Some services are provided by a ExpressionChecker instance. exprchk: 'Mypy.checkexpr.ExpressionChecker'",
      "36": "# Some services are provided by a TypeChecker instance. chk: [] # This is shared with TypeChecker, but stored also here for convenience. msg: [] # Some services are provided by a ExpressionChecker instance. exprchk: [] # type: mypy.checkexpr.ExpressionChecker",
      "37": "# Some services are provided by a TypeChecker instance. chk: \"mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "38": "# Some services are provided by a TypeChecker instance. chk = None # type: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "39": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by an ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "40": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"MessageBuilder\" Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "41": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "42": "# Some services are provided by a TypeChecker instance. chk: [] # This is shared with TypeChecker, but stored also here for convenience. msg: [] # Some services are provided by a MessageBuilder instance. exprchk: [] # type: mypy.checkexpr.ExpressionChecker",
      "43": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: \"\" Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "44": "# Some services are provided by a TypeChecker instance. chk: mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: \"\" Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "45": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] = None # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "46": "# Some services are provided by a TypeChecker instance. chk: Mypy.checker.TypeChecker # This is shared with TypeChecker, but stored also here for convenience. msg: TypeBuilder # Some services are provided by a ExpressionChecker instance. exprchk: Mypy.checkexpr.ExpressionChecker",
      "47": "# Some services are provided by a TypeChecker instance. chk: MessageBuilder # This is shared with TypeChecker, but stored also here for convenience. msg: MessageBuilder # Some services are provided by a ExpressionChecker instance. exprchk: mypy.checkexpr.ExpressionChecker",
      "48": "# Some services are provided by a TypeChecker instance. chk: \"Mypy.checker.TypeChecker\" # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: \"mypy.checkexpr.ExpressionChecker\"",
      "49": "# Some services are provided by a TypeChecker instance. chk: 'Mypy.checker.TypeChecker' # This is shared with TypeChecker, but stored also here for convenience. msg: Optional[MessageBuilder] # Some services are provided by a ExpressionChecker instance. exprchk: \"Mypy.checkexpr.ExpressionChecker\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": true,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "target_code": "\n    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "warning_line": "    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 353,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "angr/angr",
    "source_filename": "angr/calling_conventions.py",
    "target_filename": "angr/calling_conventions.py",
    "source_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f^",
    "target_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "predictions": [
      "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address"
    ],
    "correct": false,
    "top_five": {
      "0": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address",
      "1": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address",
      "2": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address",
      "3": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address.",
      "4": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the returned address",
      "5": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the original return address",
      "6": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new return address",
      "7": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address",
      "8": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address.",
      "9": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the changed return address",
      "10": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the specified return address",
      "11": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the allocated return address",
      "12": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address.",
      "13": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address.",
      "14": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address.",
      "15": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the returned address.",
      "16": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the recorded return address",
      "17": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new returned address",
      "18": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new return address.",
      "19": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the empty address",
      "20": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address",
      "21": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the original return address.",
      "22": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address. FP_ARG_REGS: List[str] = [] = [] # A list of all the",
      "23": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address:",
      "24": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address. FP_ARG_REGS: List[str] =",
      "25": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. FP_ARG_REGS: List[str] =",
      "26": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the returned address. FP_ARG_REGS: List[str] = [] = [] # A list of all the",
      "27": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. FP_ARG_REGS: List[str] =",
      "28": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new return address. FP_ARG_REGS: List[str] =",
      "29": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address. FP_ARG_REGS: List[str] = [] = [] # A list of all the",
      "30": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address. FP_ARG_REGS: List[str] = [] = []",
      "31": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address. FP_ARG_REGS: List[str] = [] = []",
      "32": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. FP_ARG_REGS: List[str] = [] = [] # A list of all the",
      "33": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. ARG_REGS: List[str] = [] = []",
      "34": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. STACKARG_SP_BUFF = 0 # The amount of stack space",
      "35": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. ARG_REGS: List[str] = [] = []",
      "36": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. FP_ARG_REGS: List[str] = [] = [] # A list of all the",
      "37": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. ARG_REGS: List[str] = [] = [] # A list of all the",
      "38": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new return address. FP_ARG_REGS: List[str] = [] = [] # A list of all the",
      "39": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address. ARG_REGS: List[str] = [] = []",
      "40": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. ARG_REGS: List[str] = [] = [] # A list of all the",
      "41": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address. FP_ARG_REGS: List[str] =",
      "42": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. STACKARG_SP_BUFF = 0 # The amount of stack space",
      "43": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the saved return address. STACKARG_SP_BUFF = 0 # The amount of stack space reserved",
      "44": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address. ARG_REGS: List[str] = [] = [] # A list of all the register",
      "45": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the stored return address. STACKARG_SP_BUFF = 0 # The amount of stack space reserved",
      "46": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the new address. FP_ARG_REGS: List[str] = [] =",
      "47": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the returned address. ARG_REGS: List[str] = [] = [] # A list of all the register",
      "48": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the returned address. FP_ARG_REGS: List[str] = [] = []",
      "49": "ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address and the next return address. STACKARG_SP_BUFF = 0 # The amount of stack space"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": true,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # suite params\n    stop_mode: StopMode = None\n    stop_task: Optional[str] = None\n",
    "target_code": "    # suite params\n    stop_mode: Optional[StopMode] = None\n    stop_task: Optional[str] = None\n",
    "warning_line": "    stop_mode: StopMode = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `stop_mode` declared in class `Scheduler` has type `StopMode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 181,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "1": "# suite params: Optional[StopMode] = None stop_task: Optional[str] = None",
      "2": "# suite params: Optional[str] = None stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "3": "# suite params stop_mode: Optional[str] = None stop_task: Optional[str] = None",
      "4": "# suite params start_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "5": "# suite params stopped_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "6": "# suite params: \"\" stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "7": "# suite params stop_mode = Optional[StopMode] stop_task: Optional[str] = None",
      "8": "# suite params stopping_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "9": "# suite params opra_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "10": "# suite params stop_mode_: Optional[StopMode] = None stop_task: Optional[str] = None",
      "11": "# suite params stop_mode: Options[StopMode] = None stop_task: Optional[str] = None",
      "12": "# suite params stop_mode_options: Optional[StopMode] = None stop_task: Optional[str] = None",
      "13": "# suite params: Optional[str] = None stop_task: Optional[str] = None",
      "14": "# suite params () stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "15": "# suite params stop_mode: StopMode | Optional[StopMode] = None stop_task: Optional[str] = None",
      "16": "# suite params stop_mode, StopMode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "17": "# suite params stops_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "18": "# suite params stop_mode: Optional['StopMode'] = None stop_task: Optional[str] = None",
      "19": "# suite params stop_mode: StopMode[str] = None stop_task: Optional[str] = None",
      "20": "# suite params stop_mode(StopMode): Optional[StopMode] = None stop_task: Optional[str] = None",
      "21": "# suite params stop_modes: Optional[StopMode] = None stop_task: Optional[str] = None",
      "22": "# suite params stop_mode: Options.StopMode = None stop_task: Optional[str] = None",
      "23": "# suite params stop_mode: StopMode[0] = None stop_task: Optional[str] = None",
      "24": "# suite params stop_mode: Type[StopMode] = None stop_task: Optional[str] = None",
      "25": "# suite params stop_mode, Optional[StopMode] = None stop_task: Optional[str] = None",
      "26": "# suite params stop_mode: StopMode = Optional[StopMode] stop_task: Optional[str] = None",
      "27": "# suite params stop_module: Optional[StopMode] = None stop_task: Optional[str] = None",
      "28": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None # Optional[str] = None",
      "29": "# suite params stop_mode: Optional[StoppedMode] = None stop_task: Optional[str] = None",
      "30": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "31": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = none",
      "32": "# suite params) stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None",
      "33": "# suite params stop_mod: Optional[StopMode] = None stop_task: Optional[str] = None",
      "34": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None else: Optional[str] = None",
      "35": "# suite params stop_type: Optional[StopMode] = None stop_task: Optional[str] = None",
      "36": "# suite params: Optional['StopMode'] = None stop_task: Optional[str] = None",
      "37": "# suite params stop_mode: Select[StopMode] = None stop_task: Optional[str] = None",
      "38": "# suite params stop_mode: Optional[stopMode] = None stop_task: Optional[str] = None",
      "39": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \"\"\"",
      "40": "# suite params try: Optional[StopMode] = None stop_task: Optional[str] = None",
      "41": "# suite params stop_mode, StopMode: Optional[StopMode] = None stop_task, Optional[str] = None",
      "42": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None # Optional[str]: Optional[str] = None",
      "43": "# suite params stop_mode: \"StopMode\" stop_task: Optional[str] = None",
      "44": "# suite params stop_mode: [StopMode] = None stop_task: Optional[str] = None",
      "45": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None all_modes: Optional[str] = None",
      "46": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None if bool == False",
      "47": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None all_options: Optional[str] = None",
      "48": "# suite params stop_mode = Optional[StopMode] = None stop_task: Optional[str] = None",
      "49": "# suite params stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None if isinstance(str, Optional[str]):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
    "target_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_line": "    single: List[OrthVariantsSingle] = {}",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 26,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/training/augment.py",
    "target_filename": "spacy/training/augment.py",
    "source_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be^",
    "target_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "predictions": [
      "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] single: List[OrthVariantsSingle] = []"
    ],
    "correct": true,
    "top_five": {
      "0": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] single: List[OrthVariantsSingle] = []",
      "1": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] Single: List[OrthVariantsSingle] = []",
      "2": "class OrthVariants(BaseModel): paired: Optional[List[OrthVariantsPaired]] = { } single: Optional[List[OrthVariantsSingle]] = { }",
      "3": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [], single: List[OrthVariantsSingle] = []",
      "4": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = []; single: List[OrthVariantsSingle] = [];",
      "5": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ()",
      "6": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] => List[OrthVariantsSingle] = [] ) single: List[OrthVariantsSingle] = []",
      "7": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle]",
      "8": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = ()",
      "9": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] -> List[OrthVariantsSingle] = [] single: List[OrthVariantsSingle] = []",
      "10": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => List[Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = ()",
      "11": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired] = ()",
      "12": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariantsSingle",
      "13": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = ()",
      "14": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] => List[OrthVariantsSingle] = [] single: List[OrthVariantsSingle] = []",
      "15": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariationsSingle]",
      "16": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } single: List[OrthVariantsSingle] = () => Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = ()",
      "17": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariationsSingle] = ()",
      "18": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] => List[OrthVariantsSingle] = [] ) single: List[OrthVariantsSingle] = [] => Dict[Variable[_KT], Variable[_VT]] = []",
      "19": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] ) single: List[OrthVariantsSingle] = []",
      "20": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] Single: List[OrthVariantsSingle] = [] single: List[OrthVariantsSingle] = []",
      "21": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired, List[OrthVariantsSingle]] = [] single: List[OrthVariantsSingle] = []",
      "22": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired = ()",
      "23": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] =",
      "24": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariationsSingle] = () => List[OrthVariationsSingle]",
      "25": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ()",
      "26": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariable[Single]",
      "27": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[Dict[Variable[_KT], Variable[_VT]] = ()",
      "28": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle]",
      "29": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = (",
      "30": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } single: List[OrthVariantsSingle] = () => List[Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = ()",
      "31": "class OrthVariants(BaseModel) : paired: List[OrthVariantsPaired] = [] single: List[OrthVariantsSingle] = []",
      "32": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] => List[OrthVariantsSingle] = [] ) single: List[OrthVariantsSingle] = [] -> Dict[Variable[_KT], Variable[_VT]] = []",
      "33": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired]",
      "34": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ()",
      "35": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariantsSingle",
      "36": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => List[Dict[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = ()",
      "37": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariantsSingle]",
      "38": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariantsSingle]",
      "39": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => List[Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariantsSingle",
      "40": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle",
      "41": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariable[",
      "42": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] Single: List[OrthVariantsSingle] = [] Single = Dict[Variable[_KT], Variable[_VT]]",
      "43": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => List[Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle",
      "44": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired] = () => List[OrthVariantsSingle]",
      "45": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[Dict[Variable[_KT], Variable[_VT]] = ()",
      "46": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = [] Single: List[OrthVariantsSingle] = [] Single = []",
      "47": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsPaired] = () => List[OrthVariable[OrthVariantsSingle",
      "48": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = ( { } ) single: List[OrthVariantsSingle] = () => Dict[Variable[_KT], Variable[_VT]] = () => List[OrthVariantsSingle] = () => List[OrthVariable[Single",
      "49": "class OrthVariants(BaseModel): paired: List[OrthVariantsPaired] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariantsSingle] = () => List[OrthVariable[OrthVariationsSingle"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str\n\n",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_line": "        self.tmp_meson_version = None # type: str",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 461,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mesonbuild/meson",
    "source_filename": "mesonbuild/interpreterbase.py",
    "target_filename": "mesonbuild/interpreterbase.py",
    "source_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74^",
    "target_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "predictions": [
      "# current meson version target within that if-block. self.tmp_meson_version: Optional[str]"
    ],
    "correct": false,
    "top_five": {
      "0": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str]",
      "1": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] = None # type: Optional[str]",
      "2": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str]",
      "3": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] # type: Optional[str]",
      "4": "# current meson version target within that if-block. self.tmp_meson_version = \"\" # type: Optional[str]",
      "5": "# current meson version target within that if-block. self.tmp_meson_version: str # type: Optional[str]",
      "6": "# current meson version target within that if-block. self.tmp_meson_version: \"\"",
      "7": "# current meson version target within that if-block. self.tmp_meson_version = 0 # type: Optional[str]",
      "8": "# current meson version target within that if-block. self.tmp_meson_version = '' # type: Optional[str]",
      "9": "# current meson version target within that if-block. self.tmp_meson_version: '' # type: Optional[str]",
      "10": "# current meson version target within that if-block. self.tmp_meson_version: bool # type: Optional[str]",
      "11": "# current meson version target within that if-block. self.tmp_meson_version: Optional[Str]",
      "12": "# current meson version target within that if-block. self.tmp_meson_version = False # type: Optional[str]",
      "13": "# current meson version target within that if-block. type: Optional[str] self.tmp_meson_version = None # type: Optional[str]",
      "14": "# current meson version target within that if-block. self.tmp_meson_version: typing.Optional[str]",
      "15": "# current meson version target within that if-block. self.tmp_meson_version: \"\" # type: Optional[str]",
      "16": "# current meson version target within that if-block. self.tmp_meson_version: Optional[[str]] = None # type: Optional[str]",
      "17": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] = None # typing: Optional[str]",
      "18": "# current meson version target within that if-block. self.tmp_meson_version: str",
      "19": "# current meson version target within that if-block. auto.tmp_meson_version: Optional[str]",
      "20": "# current meson version target within that if-block. self.tmp_meson_version: typing.Optional[str] = None # type: Optional[str]",
      "21": "# current meson version target within that if-block. self.tmp_meson_version: Type.Optional[str]",
      "22": "# current meson version target within that if-block. self.tmp_meson_version: Optional[type] = None # type: Optional[str]",
      "23": "# current meson version target within that if-block.self.tmp_meson_version: Optional[str] = None # type: Optional[str]",
      "24": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] = None",
      "25": "# current meson version target within that if-block. self.tmp_meson_version: type = \"\" # type: Optional[str]",
      "26": "# current meson version target within that if-block.self.tmp_meson_version: Optional[str]",
      "27": "# current meson version target within that if-block. _tmp_meson_version: Optional[str] = None # type: Optional[str]",
      "28": "# current meson version target within that if-block. self.tmp_meson_version: float # type: Optional[str]",
      "29": "# current meson version target within that if-block. self.tmp_meson_version: tmp_meson_version # type: Optional[str]",
      "30": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] is not None # type: Optional[str]",
      "31": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] # typing: Optional[str]",
      "32": "# current meson version target within that if-block. self.tmp_meson_version is not None # type: Optional[str]",
      "33": "# current meson version target within that if-block. self.tmp_meson_version: Options.Optional[str] = None # type: Optional[str]",
      "34": "# current meson version target within that if-block. tmp_meson_version: Optional[str] = None # type: Optional[str]",
      "35": "# current meson version target within that if-block. self.tmp_meson_version # type: Optional[str]",
      "36": "# current meson version target within that if-block. self.tmp_meson_version = -1 # type: Optional[str]",
      "37": "# current meson version target within that if-block. exports.tmp_meson_version = None # type: Optional[str]",
      "38": "# current meson version target within that if-block. self.tmp_meson_version: \"\"\"",
      "39": "# current meson version target within that if-block. self.tmp_meson_version: args[str] # type: Optional[str]",
      "40": "# current meson version target within that if-block. tmp_meson_version: Optional[str]",
      "41": "# current meson version target within that if-block. self.tmp_meson_version: Type[str]",
      "42": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] = None # type: Optional[str]",
      "43": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str]=None # type: Optional[str]",
      "44": "# current meson version target within that if-block. self.tmp_meson_version: bool",
      "45": "# current meson version target within that if-block. default: self.tmp_meson_version # type: Optional[str]",
      "46": "# current meson version target within that if-block. self.tmp_meson_version=None # type: Optional[str]",
      "47": "# current meson version target within that if-block. self.tmp_meson_version: Optional[str] = None # Type: Optional[str]",
      "48": "# current meson version target within that if-block. self.tmp_meson_version: str # type: Optional[str]",
      "49": "# current meson version target within that if-block. self.tmp_meson_version: lib # type: Optional[str]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    APP_DIR: str = None\n    STUDIES: str = None\n\n",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_line": "    STUDIES: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAILabel",
    "source_filename": "monailabel/config.py",
    "target_filename": "monailabel/config.py",
    "source_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0^",
    "target_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "predictions": [
      "APP_DIR: str = \"\" STUDIES: Optional[str] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "APP_DIR: str = \"\" STUDIES: Optional[str] = None",
      "1": "APP_DIR: str = '' STUDIES: Optional[str] = None",
      "2": "APP_DIR: str = \"\" STUDIES: str = \"\"",
      "3": "APP_DIR: Optional[str] = None STUDIES: Optional[str] = None",
      "4": "APP_DIR: str = \"\" STUDIES: typing.Optional[str] = None",
      "5": "APP_DIR: str = [] STUDIES: Optional[str] = None",
      "6": "APP_DIR: str = 0 STUDIES: Optional[str] = None",
      "7": "APP_DIR: str = '' STUDIES: str = ''",
      "8": "APP_DIR: str = '' STUDIES: typing.Optional[str] = None",
      "9": "APP_DIR: str = Optional[\"\"] = None STUDIES: Optional[str] = None",
      "10": "APP_DIR: str = None STUDIES: Optional[str] = None",
      "11": "APP_DIR: str = \"\" STUDIES: Optional[str] = \"\"",
      "12": "APP_DIR: str = Optional[str] = None STUDIES: Optional[str] = None",
      "13": "APP_DIR: str = Optional[\"Settings\"] = None STUDIES: Optional[str] = None",
      "14": "APP_DIR: str = () STUDIES: Optional[str] = None",
      "15": "APP_DIR: str = 0 STUDIES: str = 0",
      "16": "APP_DIR: str = [] APP_DIR: str = [] STUDIES: Optional[str] = None",
      "17": "APP_DIR: str = Optional[\"\"] = None STUDIES: Optional[str\"] = None",
      "18": "APP_DIR: str = [] STUDIES: typing.Optional[str] = None",
      "19": "APP_DIR: str = 0 APP_DIR: STUDIES: Optional[str] = None",
      "20": "APP_DIR: str = 0 APP_DIR: str = 0 STUDIES: Optional[str] = None",
      "21": "APP_DIR: str = Optional[\"Settings\"] = None STUDIES: Optional[str\"] = None",
      "22": "APP_DIR: str = \"\" STUDIES: type=\"str\" = None",
      "23": "APP_DIR: option[str] = None STUDIES: Optional[str] = None",
      "24": "APP_DIR: str = 0 APP_DIR: str = 0 STUDIES: str = 0",
      "25": "APP_DIR: str = False STUDIES: Optional[str] = None",
      "26": "APP_DIR: str = \"\" STUDIES: typing.Optional[str] = \"\"",
      "27": "APP_DIR: str = [] STUDIES: str = []",
      "28": "APP_DIR: str = \"\" STUDIES: options.str = \"\"",
      "29": "APP_DIR: str = \"\" STUDIES: option=\"str\" = None",
      "30": "APP_DIR: str = 0 STUDIES: typing.Optional[str] = None",
      "31": "APP_DIR: str = \"\" STUDIES: option[str] = None",
      "32": "APP_DIR: str = \"\") STUDIES: Optional[str] = None",
      "33": "APP_DIR: str = \"\" STUDIES: option(str) = None",
      "34": "APP_DIR: str = \"\", STUDIES: Optional[str] = None",
      "35": "APP_DIR: str = '' STUDIES: type=\"str\" = None",
      "36": "APP_DIR: str | None = None STUDIES: Optional[str] = None",
      "37": "APP_DIR: str = '' STUDIES: optional[str] = None",
      "38": "APP_DIR: str = '' STUDIES: Optional[str] = ''",
      "39": "APP_DIR: str = None STUDIES: typing.Optional[str] = None",
      "40": "APP_DIR: str = 0 APP_DIR: str = None STUDIES: Optional[str] = None",
      "41": "APP_DIR: str = [] APP_DIR: str = [] STUDIES: typing.Optional[str] = None",
      "42": "APP_DIR: str = 0 STUDIES: str = \"\"",
      "43": "APP_DIR: str = [] APP_DIR: str = [] STUDIES: str = []",
      "44": "APP_DIR: str = 0 APP_DIR: str = 0 STUDIES: typing.Optional[str] = None",
      "45": "APP_DIR: str = \"\" STUDIES: option(str) = \"\"",
      "46": "APP_DIR: str = All STUDIES: Optional[str] = None",
      "47": "APP_DIR: str = \"\" STUDIES: optional[str] = None",
      "48": "APP_DIR: str = '' STUDIES: Optional[str'] = None",
      "49": "APP_DIR: str = \"\" STUDIES: option.str = \"\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_line": "        self.image: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])"
    ],
    "correct": false,
    "top_five": {
      "0": ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "1": ") self.image: typing.Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "2": ") self.image: option[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "3": ") self.image_name: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "4": ") self.images: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "5": ") self.image: str = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "6": ") self.image: choice[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "7": ") self.image: str = '' self.append_file = ''.join([self.image_name, '.append'])",
      "8": ") self.image = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "9": ") self.image: optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "10": ") self.image: options.str = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "11": ") self.image_name = '' self.append_file = ''.join([self.image_name, '.append'])",
      "12": ") self.image = '' self.append_file = ''.join([self.image_name, '.append'])",
      "13": ") self.image: str = [] self.append_file = ''.join([self.image_name, '.append'])",
      "14": ") self.image_name = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "15": ") self.image = [] self.append_file = ''.join([self.image_name, '.append'])",
      "16": ") self.image: type=\"str\"\" self.append_file = ''.join([self.image_name, '.append'])",
      "17": ") self.image: args = [] self.append_file = ''.join([self.image_name, '.append'])",
      "18": ") self.images_: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "19": ") self.image: options.str = None self.append_file = ''.join([self.image_name, '.append'])",
      "20": ") self.image: options.str = '' self.append_file = ''.join([self.image_name, '.append'])",
      "21": ") self.image: options.str = 0 self.append_file = ''.join([self.image_name, '.append'])",
      "22": ") self.image = None self.append_file = ''.join([self.image_name, '.append'])",
      "23": ") self.image: use[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "24": ") self.image: Optional[Str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "25": ") self.image: Union[str, None] = None self.append_file = ''.join([self.image_name, '.append'])",
      "26": ") self.image: Options[str] = None self.append_file = ''.join([self.image_name, '.append'])",
      "27": ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, \".append\"])",
      "28": ") self.image: float = '' self.append_file = ''.join([self.image_name, '.append'])",
      "29": ") self.image_name = None self.append_file = ''.join([self.image_name, '.append'])",
      "30": ") self.image = False self.append_file = ''.join([self.image_name, '.append'])",
      "31": ") self.image: \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "32": ") self.image_name: str self.append_file = ''.join([self.image_name, '.append'])",
      "33": ") self.image = 0 self.append_file = ''.join([self.image_name, '.append'])",
      "34": ") self.image.name = '' self.append_file = ''.join([self.image_name, '.append'])",
      "35": ") self.image isinstance(str): self.append_file = ''.join([self.image_name, '.append'])",
      "36": ") self.image.name = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "37": ") self.image: float = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "38": ") self.image_name = str self.append_file = ''.join([self.image_name, '.append'])",
      "39": ") self.image_name = False self.append_file = ''.join([self.image_name, '.append'])",
      "40": ") self.image: \"\"\" self.append_file = ''.join([self.image_name, '.append'])",
      "41": ") self.image=None self.append_file = ''.join([self.image_name, '.append'])",
      "42": ") self.image: type = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "43": ") self.image.str = \"\" self.append_file = ''.join([self.image_name, '.append'])",
      "44": ") self.image = false self.append_file = ''.join([self.image_name, '.append'])",
      "45": ") self.image_name = false self.append_file = ''.join([self.image_name, '.append'])",
      "46": ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append'] )",
      "47": ") self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) )",
      "48": ") self.image = null self.append_file = ''.join([self.image_name, '.append'])",
      "49": ") self.images = [] self.append_file = ''.join([self.image_name, '.append'])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": true,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_line": "        self.event = None   # type: asyncio.Event",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 794,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/events.py",
    "target_filename": "mpf/core/events.py",
    "source_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278^",
    "target_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "predictions": [
      "self.waiter = False self.event = '' # type: asyncio.Event"
    ],
    "correct": false,
    "top_five": {
      "0": "self.waiter = False self.event = '' # type: asyncio.Event",
      "1": "self.waiter = False self.event = 0 # type: asyncio.Event",
      "2": "self.waiter = False self.event = \"\" # type: asyncio.Event",
      "3": "self.waiter = False self.event = 0 # type: Optional[asyncio.Event]",
      "4": "self.waiter = False self.event: asyncio.Event",
      "5": "self.waiter = False self.event = \"\" # type: Optional[asyncio.Event]",
      "6": "self.waiter = False self.event = '' # type: Optional[asyncio.Event]",
      "7": "self.waiter = False self.event: asyncio.Event # type: Optional[asyncio.Event]",
      "8": "self.waiter = False self.event = False # type: Optional[asyncio.Event]",
      "9": "self.waiter = False self.event = None # type: Optional[asyncio.Event]",
      "10": "self.waiter = False self.event: asyncio.Event # type: asyncio.Event",
      "11": "self.waiter = False self.event = asyncio.Event # type: Optional[asyncio.Event]",
      "12": "self.waiter = False self.event = [] # type: asyncio.Event",
      "13": "self.waiter = False self.event = Asyncio.Event # type: Optional[asyncio.Event]",
      "14": "self.waiter = False self.event: Optional[asyncio.Event] = None # type: Optional[asyncio.Event]",
      "15": "self.waiter = False self.event = Locks[0] # type: asyncio.Event",
      "16": "self.waiter = False self.event = bool # type: asyncio.Event",
      "17": "self.waiter = False self.event = undefined # type: asyncio.Event",
      "18": "self.waiter = False self.event = () # type: asyncio.Event",
      "19": "self.waiter = False self.event: asyncio.Event # type: Optional[Asyncio.Event]",
      "20": "self.waiter = False self.event = asyncio.Event",
      "21": "self.waiter = False self.event = False # type: asyncio.Event",
      "22": "self.waiter = False self.event = 0.0 # type: asyncio.Event",
      "23": "self.waiter = False self.event = asyncio.Event # type: asyncio.Event",
      "24": "self.waiter = False self.event = Asyncio.Event # type: asyncio.Event",
      "25": "self.waiter = False self.event: EVENT # type: Optional[asyncio.Event]",
      "26": "self.waiter = False self.event = null # type: asyncio.Event",
      "27": "self.waiter = False self.event = [] # type: Optional[asyncio.Event]",
      "28": "self.waiter = False self.event = 'Event' # type: asyncio.Event",
      "29": "self.waiter = False self.event = undefined # type: Optional[asyncio.Event]",
      "30": "self.waiter = False self.event: Optional[asyncio.Event] = None # type: asyncio.Event",
      "31": "self.waiter = False self.event: Event # type: Optional[asyncio.Event]",
      "32": "self.waiter = False self.event = '' # type: 'Event'",
      "33": "self.waiter = False self.event = 0 # type: asyncio.Event # type: Optional[asyncio.Event]",
      "34": "self.waiter = False self.event = 'El' # type: asyncio.Event",
      "35": "self.waiter = False self.event = '0' # type: asyncio.Event",
      "36": "self.waiter = False self.event = '' # type: Event",
      "37": "self.waiter = False self.event = '' # type: asyncio.Event # type: Optional[asyncio.Event]",
      "38": "self.waiter = False self.event: 'Event' # type: asyncio.Event",
      "39": "self.waiter = False self.event = LockEvent # type: asyncio.Event",
      "40": "self.waiter = False self.event = 'False' # type: asyncio.Event",
      "41": "self.waiter = False self.event = List[0] # type: asyncio.Event",
      "42": "self.waiter = False self.event = asyncio.Event # type: Optional[Asyncio.Event]",
      "43": "self.waiter = False self.event = queuedEvent # type: asyncio.Event",
      "44": "self.waiter = False self.event = Undefined # type: asyncio.Event",
      "45": "self.waiter = False self.event is not None # type: asyncio.Event",
      "46": "self.waiter = False self.event = 0 # type: 'Event'",
      "47": "self.waiter = False self.event = '' # type: Asyncio.Event",
      "48": "self.waiter = False self.event = 0 # type: Asyncio.Event",
      "49": "self.waiter = False self.event = -1 # type: asyncio.Event"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": true,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_line": "    id: int = ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "1": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "2": "id= ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "3": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "4": "id = ormar.Integer(primary_key=True) ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "5": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) el = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "6": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) value = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "7": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]]",
      "8": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None: return ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "9": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if ident is not None:",
      "10": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if not id: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "11": "id=ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "12": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None: return ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "13": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if ident is not None: return ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "14": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None:",
      "15": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Limited\", \"Other ltd\"])",
      "16": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) other_id = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "17": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) else:",
      "18": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) key = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "19": "id = ormar.Integer(primary_key=True) identifier = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "20": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) # Optional[str] = str(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "21": "id = ormar.Integer(primary_key=True) ident=ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "22": "id=ormar.Integer(primary_key=True) ident=ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "23": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if not id: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) else:",
      "24": "self.id = ormar.Integer(primary_key=True) self.ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "25": "id = ormar.Integer(primary_key=True); ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "26": "id: ormar.Integer(primary_key=True) ident: ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "27": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) other_id = ormar.Integer(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "28": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if ident is not None:",
      "29": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) -> None:",
      "30": "id = ormar.Integer(primary_key=True) identifier= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "31": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None: return ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) else:",
      "32": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\" ACME Ltd\", \"Other ltd\"])",
      "33": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]]",
      "34": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None:",
      "35": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None: return ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) else:",
      "36": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if ident is not None: return ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) else:",
      "37": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None: return ormar.String(max_length=100, choice=[\"ACME Ltd\", \"Other ltd\"])",
      "38": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Limited\", \"Other ltd\"])",
      "39": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME LTD\", \"Other ltd\"])",
      "40": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) else:",
      "41": "id = ormar.Indeger(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "42": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=150, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "43": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) str = ormar.String(max_length=100, choices=[\"ACME Limited\", \"Other ltd\"])",
      "44": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) assert isinstance(id, int)",
      "45": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) el = ormar.String(max_length=100, choices=[\"ACME\", \"Other ltd\"])",
      "46": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) other_id = ormar.Integer(primary_key=True)",
      "47": "id = ormar.Integer(primary_key=True) ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) if id is not None: return ormar.String(max_length=100, choice=[\"ACME Ltd\", \"Other ltd\"])",
      "48": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd \"])",
      "49": "id = ormar.Integer(primary_key=True) ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) el = ormar.String(max_length=200, choices=[\"ACME Ltd\", \"Other ltd\"])"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False\n",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_line": "    query_subtype: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "target_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "ioc: str ioc_type: str query_subtype: Optional[str] = None result: bool = False"
    ],
    "correct": false,
    "top_five": {
      "0": "ioc: str ioc_type: str query_subtype: Optional[str] = None result: bool = False",
      "1": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None result: bool = False",
      "2": "ioc: str ioc_type: str query_subtype: str result: bool = False",
      "3": "ioc_type: str query_subtype: Optional[str] = None result: bool = False",
      "4": "ioc: Optional[str] ioc_type: Optional[str] = None query_subtype: Optional[str] = None result: bool = False",
      "5": "ioc: str ioc_type: str query_subtype: option[str] = None result: bool = False",
      "6": "ioc: str ioc_types: Optional[str] = None query_subtype: Optional[str] = None result: bool = False",
      "7": "ioc: str str ioc_type: Optional[str] = None query_subtype: Optional[str] = None result: bool = False",
      "8": "ioc: str ioc_type: option[str] = None query_subtype: Optional[str] = None result: bool = False",
      "9": "ioc: str ioc_type: \"\" query_subtype: Optional[str] = None result: bool = False",
      "10": "ioc: str ioc_type: bool query_subtype: Optional[str] = None result: bool = False",
      "11": "ioc: str query_subtype: Optional[str] = None result: bool = False",
      "12": "ioc: str ioc_type: None query_subtype: Optional[str] = None result: bool = False",
      "13": "ioc: str str ioc_type: str query_subtype: Optional[str] = None result: bool = False",
      "14": "ioc: str ioc_type: str query_subtype = Optional[str] result: bool = False",
      "15": "ioc: str ioc_types: str query_subtype: Optional[str] = None result: bool = False",
      "16": "ioc: str ioc_type: \"\" query_subtype: str result: bool = False",
      "17": "ioc: str ioc_type: str query_subtype: options[str] = None result: bool = False",
      "18": "ioc: str ioc_type: () => None query_subtype: Optional[str] = None result: bool = False",
      "19": "ioc_type: str query_subtype: str result: bool = False",
      "20": "ioc: str ioc_type: str query_subtype: Union[str, None] = None result: bool = False",
      "21": "ioc: str ioc_type: str query_subtype: options.str = None result: bool = False",
      "22": "ioc: str ioc_type: str query_subtype = str result: bool = False",
      "23": "ioc: str ioc_type: str query_subtype: Options[str] = None result: bool = False",
      "24": "ioc: str ioc_type: str query_subtype: Optional[str] = None return None result: bool = False",
      "25": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None outcome: bool = False",
      "26": "ioc: str ioc_type: String query_subtype: Optional[str] = None result: bool = False",
      "27": "ioc: str ioc_type: Str query_subtype: Optional[str] = None result: bool = False",
      "28": "ioc: str ioc_type: str query_subtypes: Optional[str] = None result: bool = False",
      "29": "ioc: str ioc_type: str query_subtype = [] result: bool = False",
      "30": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None results: bool = False",
      "31": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None return None result: bool = False",
      "32": "ioc: str ioc_type: str query_subtype: Optional[str] = None outcome: bool = False",
      "33": "ioc: str ioc_type: str query_subtype: Optional[Str] = None result: bool = False",
      "34": "ioc: str ioc_type: str query_subtype: bool = False result: bool = False",
      "35": "ioc = str ioc_type: str query_subtype: Optional[str] = None result: bool = False",
      "36": "ioc: str ioc_type: str query_subtype: Choice[str] = None result: bool = False",
      "37": "ioc: str ioc_type: str query_subtype = (str) result: bool = False",
      "38": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = Keen[str] result: bool = False",
      "39": "ioc: str ioc_type: str query_subtype: Use[str] = None result: bool = False",
      "40": "ioc: str ioc_type: str query_subtype = \"\" result: bool = False",
      "41": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None answer: bool = False",
      "42": "ioc: str ioc_type: bool query_subtype: str result: bool = False",
      "43": "ioc: str ioc_type: str query_subtype = False result: bool = False",
      "44": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None and result: bool = False",
      "45": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = False result: bool = False",
      "46": "ioc: str ioc_type: Optional[str] = None query_subtype: Optional[str] = None rule: bool = False",
      "47": "ioc: str ioc_type: str query_subtype = (String = None) result: bool = False",
      "48": "ioc: str ioc_type: str query_subtype: Optional[String] = None result: bool = False",
      "49": "ioc: str ioc_type: str query_subtype: bool = None result: bool = False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class Cli:\n    description: str = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "target_code": "class Cli:\n    description: Optional[str] = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "warning_line": "    description: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `description` declared in class `Cli` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 15,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Andarius/piou",
    "source_filename": "piou/cli.py",
    "target_filename": "piou/cli.py",
    "source_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2^",
    "target_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2",
    "predictions": [
      "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)"
    ],
    "correct": true,
    "top_five": {
      "0": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "1": "class Cli: description = \"\" formatter: Formatter = field(default_factory=RichFormatter)",
      "2": "class Cli: description = Optional[str] formatter: Formatter = field(default_factory=RichFormatter)",
      "3": "class Cli: description = str formatter: Formatter = field(default_factory=RichFormatter)",
      "4": "class Cli: description: Optional[str] = None formatter: Optional[Formatter] = field(default_factory=RichFormatter)",
      "5": "class Cli: description = '' formatter: Formatter = field(default_factory=RichFormatter)",
      "6": "class Cli: description = None formatter: Formatter = field(default_factory=RichFormatter)",
      "7": "class Cli: description = [] formatter: Formatter = field(default_factory=RichFormatter)",
      "8": "class Cli: description = \"\" description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "9": "class Cli: description: typing.Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "10": "class Cli: description = str if description is not None formatter: Formatter = field(default_factory=RichFormatter)",
      "11": "class Cli: description = Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "12": "class Cli: description: Optional[str] = None formatter: Optional[formatter] = field(default_factory=RichFormatter)",
      "13": "class Cli: describe: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "14": "class Cli -> None description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "15": "class Cli: description of description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "16": "class Cli -> None: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "17": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "18": "class Cli: description = str if description is None formatter: Formatter = field(default_factory=RichFormatter)",
      "19": "class Cli: Description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "20": "class Cli: description = (str) formatter: Formatter = field(default_factory=RichFormatter)",
      "21": "class Cli: description = str () formatter: Formatter = field(default_factory=RichFormatter)",
      "22": "class Cli: description, str: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "23": "class Cli: descriptive: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "24": "class Cli: description, Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "25": "class Cli: description = \"\"\" formatter: Formatter = field(default_factory=RichFormatter)",
      "26": "class Cli: description = Cli[str] formatter: Formatter = field(default_factory=RichFormatter)",
      "27": "class Cli: description=str formatter: Formatter = field(default_factory=RichFormatter)",
      "28": "class Cli: description = () => None formatter: Formatter = field(default_factory=RichFormatter)",
      "29": "class Cli: description: str = \"\" formatter: Formatter = field(default_factory=RichFormatter)",
      "30": "class Cli: description | Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "31": "class Cli: description: option[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "32": "class Cli: description = \"\" description = None formatter: Formatter = field(default_factory=RichFormatter)",
      "33": "class Cli: description[str] = None formatter: Formatter = field(default_factory=RichFormatter)",
      "34": "class Cli: description=None formatter: Formatter = field(default_factory=RichFormatter)",
      "35": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter) if not description: Optional[str] = None",
      "36": "class Cli: description = str description = \"\" formatter: Formatter = field(default_factory=RichFormatter)",
      "37": "class Cli: description is not None formatter: Formatter = field(default_factory=RichFormatter)",
      "38": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter) if description is not None:",
      "39": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter) # type: Optional[str] = None",
      "40": "class Cli: description = \"\" describer: Formatter: Formatter = field(default_factory=RichFormatter)",
      "41": "class Cli: description = Class[str] formatter: Formatter = field(default_factory=RichFormatter)",
      "42": "class Cli: description = str description = '' formatter: Formatter = field(default_factory=RichFormatter)",
      "43": "class Cli: description: str = '' formatter: Formatter = field(default_factory=RichFormatter)",
      "44": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter) type: Optional[str] = None",
      "45": "class Cli: description = str formatter = field(default_factory=RichFormatter)",
      "46": "class Cli: description: Optional[str] = None formatter: Formatter = field(default_factory=RichFormatter) for description: Optional[str] = None",
      "47": "class Cli: description = str; formatter: Formatter = field(default_factory=RichFormatter)",
      "48": "class Cli: description -> None formatter: Formatter = field(default_factory=RichFormatter)",
      "49": "class Cli: description = (\"\") formatter: Formatter = field(default_factory=RichFormatter)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    requested_message: MessageTrigger\n    connector_id: int = None\n\n",
    "target_code": "    requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "requested_message: MessageTrigger connector_id: Optional[int] = None"
    ],
    "correct": true,
    "top_five": {
      "0": "requested_message: MessageTrigger connector_id: Optional[int] = None",
      "1": "requested_message: Optional[MessageTrigger] = None connector_id: Optional[int] = None",
      "2": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id))",
      "3": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T",
      "4": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id) && T.elif isinstance(connector_id, T.elif isinstance(connector_id) && T.elif isinstance(connector_id)",
      "5": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(t",
      "6": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id))",
      "7": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine), T.elif isinstance(connector_id))",
      "8": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id, T.elif isinstance(connector_id)",
      "9": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(nine), T.elif isinstance(connector_id))",
      "10": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id))",
      "11": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(none, T",
      "12": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.el))",
      "13": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "14": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id)))",
      "15": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id)) -> T.elif isinstance(connector_id)",
      "16": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isint))",
      "17": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id))",
      "18": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T",
      "19": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(none",
      "20": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(nine), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T",
      "21": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.el)",
      "22": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "23": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(none, T",
      "24": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isint)",
      "25": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id, T.elif isinstance(connector_id, T.elif isinstance(connector_id)",
      "26": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id, T.elif isinstance(connector_id)) && T.elif isinstance(connector_id, T.elif isinstance(connector_id))",
      "27": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine, T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "28": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.el))",
      "29": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(none)",
      "30": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id)), T.elif isinstance(connector_id)",
      "31": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(none, T",
      "32": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id))",
      "33": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "34": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id)))",
      "35": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine, T.elif isinstance(connector_id))",
      "36": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id)",
      "37": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine, T.elif isinstance(connector_id), T.el))",
      "38": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(nine), T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "39": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id), T.elif isinstance(connector_id)) -> T.elif isinstance(connector_id, T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(connector_id)",
      "40": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "41": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id)) -> T.elif isinstance(connector_id, T.elif isinstance(connector_id, T.elif isinstance(connector_id, T",
      "42": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine), T.elif isinstance(connector_id))",
      "43": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.elif isinstance(t)",
      "44": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elid))",
      "45": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(t, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id)) -> T.elif isinstance(connector_id, T.elif isinstance(connector_id, T.elif isinstance(connector_id)",
      "46": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(nine, T.elif isinstance(connector_id)))",
      "47": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isinstance(null, T.elif isinstance(connector_id), T.elif isint))",
      "48": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(nine, T.elif isinstance(connector_id), T.elif isinstance(connector_id)",
      "49": "requested_message: MessageTrigger connector_id: Optional[int] = None elif isinstance(connector_id, T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(none, T.elif isinstance(connector_id), T.elif isinstance(connector_id), T.elif isinstance(connector_id, T.el)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }\n",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_line": "            self._agent_net_config = {",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "instadeepai/Mava",
    "source_filename": "mava/systems/tf/mappo/system.py",
    "target_filename": "mava/systems/tf/mappo/system.py",
    "source_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7^",
    "target_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "predictions": [
      "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }"
    ],
    "correct": false,
    "top_five": {
      "0": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "1": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for a_i, agent in enumerate(agents) }",
      "2": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) {",
      "3": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for agent in enumerate(agents) }",
      "4": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for a_i, agent in enumerate(agents) {",
      "5": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) \\",
      "6": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents: for a_i, agent in enumerate(agents) }",
      "7": "self._agent_net_config = { agent: agent.split(\"_\")[0] if isinstance(agents, shared_weights) else agents for a_i, agent in enumerate(agents) }",
      "8": "self._agent_net_config = { agent: agent.split(\"_\")[0] if enumerate(agents) else agents for a_i, agent in enumerate(agents) }",
      "9": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else Agents for a_i, agent in enumerate(agents) }",
      "10": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights is not None else agents for a_i, agent in enumerate(agents) }",
      "11": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for agent a_i, agent in enumerate(agents) }",
      "12": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for agent in enumerate(agents) }",
      "13": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for a_i, agent in enumerate(agents) \\",
      "14": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for agent for a_i, agent in enumerate(agents) }",
      "15": "self._agent_net_config = { agent: agent.split(\"_\")[0] if common_weights else agents for a_i, agent in enumerate(agents) }",
      "16": "self._agent_net_config = { agent: agent.split(\"_\"[0]) if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "17": "self._agent_net_config = { agent: agent.split(\"_\")[0] if used_weights else agents for a_i, agent in enumerate(agents) }",
      "18": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i = 0, agent in enumerate(agents) }",
      "19": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shares_weights else agents for a_i, agent in enumerate(agents) }",
      "20": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for i, agent in enumerate(agents) }",
      "21": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents, agent) }",
      "22": "self._agent_net_config = { agent: agent.split(\"_\")[0] if not shared_weights else agents for a_i, agent in enumerate(agents) }",
      "23": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) } else:",
      "24": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) ^",
      "25": "self._agent_net_config = { agent: agent.split(\"_\")[0] if share_weights else agents for a_i, agent in enumerate(agents) }",
      "26": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for agents in enumerate(agents) }",
      "27": "self._agent_net_config = { agent: agent.split(\"_\")[0] if agent is not None else agents for a_i, agent in enumerate(agents) }",
      "28": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for agent a_i, agent in enumerate(agents) }",
      "29": "self._agent_net_config = { agent: Agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "30": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else a_i, agent in enumerate(agents) }",
      "31": "self._agent_net_config = { agent: agent.split(\"_\")[0] if weights is None else agents for a_i, agent in enumerate(agents) }",
      "32": "self._agent_net_config = { agent: agent.split(\"_\")[0] if has_weights else agents for a_i, agent in enumerate(agents) }",
      "33": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent: for a_i, agent in enumerate(agents) }",
      "34": "self._agent_net_config = { agent: agent.split(\"_\")[0], if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "35": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else: agents for a_i, agent in enumerate(agents) }",
      "36": "self._agent_net_config = { agent: agent.split(\"_\")[0] if agents is not None else agents for a_i, agent in enumerate(agents) }",
      "37": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agent for i, agent in enumerate(agents) }",
      "38": "self._agent_net_config = { agent: agent.split('_'[0]) if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "39": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate[agents]) }",
      "40": "self._agent_net_config = { agent: agent.split(\"_\")[0] if Shared_weights else agents for a_i, agent in enumerate(agents) }",
      "41": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i, agents in enumerate(agents) }",
      "42": "self._agent_net_config = { agent: agent.split(\"_\")[0] if stored_weights else agents for a_i, agent in enumerate(agents) }",
      "43": "self._agent_net_config = { agent: agent.split(\"_\")[0] if no_weights else agents for a_i, agent in enumerate(agents) }",
      "44": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents, agent in enumerate(agents) }",
      "45": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for agent i, agent in enumerate(agents) }",
      "46": "self._agent_net_config = { agent: agent[split(\"_\")[0] if shared_weights else agents for a_i, agent in enumerate(agents) }",
      "47": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i and agent in enumerate(agents) }",
      "48": "self._agent_net_config = { agent: agent.split(\"_\")[0] if set_weights else agents for a_i, agent in enumerate(agents) }",
      "49": "self._agent_net_config = { agent: agent.split(\"_\")[0] if shared_weights else agents for a_i if agent in enumerate(agents) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: str = ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `name` declared in class `Album` has type `str` but is used as type `ormar.fields.model_fields.String`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 22,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)"
    ],
    "correct": true,
    "top_five": {
      "0": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "1": "id: int = ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "2": "id = ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "3": "id= ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "4": "id= ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "5": "id: int = ormar.Integer(primary_key=True) name: str = ormar.String(max_length=100)",
      "6": "id = ormar.Integer(primary_key=True) name = str(max_length=100)",
      "7": "id: ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "8": "id = ormar.Integer(primary_key=True) name = ormar[str](max_length=100)",
      "9": "id = ormar.Integer(primary_key=True) id = ormar.String(max_length=100) name = ormar.String(max_length=100)",
      "10": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if id is not None:",
      "11": "id: int = ormar.Integer(primary_key=True) name= ormar.String(max_length=100)",
      "12": "id = ormar.Integer(primary_key=True) name: str = ormar.String(max_length=100)",
      "13": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if name is not None:",
      "14": "id: int = ormar.Integer(primary_key=True) name: ormar[str] = ormar.String(max_length=100)",
      "15": "id: int = ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "16": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) assert id is not None name = ormar.String(max_length=100)",
      "17": "id = ormar.Integer(primary_key=True) name = _ormar.String(max_length=100)",
      "18": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) field_name = ormar.String(max_length=100)",
      "19": "id = ormar.Integer(primary_key=True) name = (ormar.String(max_length=100))",
      "20": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) str = ormar.String(max_length=100)",
      "21": "id: int = ormar.Integer(primary_key=True) name: int = ormar.String(max_length=100)",
      "22": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) col_name = ormar.Collection(col_name)",
      "23": "id = int(primary_key=True) name = ormar.String(max_length=100)",
      "24": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) # type: str = ormar.String(max_length=100)",
      "25": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) int = ormar.Integer(primary_key=True)",
      "26": "id = ormar.Integer(primary_key=True) name = isinstance(ormar.String(max_length=100))",
      "27": "id = (ormar.Integer(primary_key=True) name = ormar.String(max_length=100)",
      "28": "id: int = ormar.Integer(primary_key=True) name: ormar[str] = ormar[str.string(max_length=100)",
      "29": "id = ormar.Integer(primary_key=True) title = ormar.String(max_length=100)",
      "30": "id = ormar.Integer(primary_key=True) name += ormar.String(max_length=100)",
      "31": "id = ormar.Integer(primary_key=True) self.name = ormar.String(max_length=100)",
      "32": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) string = ormar.String(max_length=100)",
      "33": "id = ormar.Integer(primary_key=True)name = ormar.String(max_length=100)",
      "34": "id = ormar.Integer(primary_key=True) name = ormar.String[max_length=100]",
      "35": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) else:",
      "36": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if name is not None: id = ormar.Integer(primary_key=True)",
      "37": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) _name = ormar.String(max_length=100)",
      "38": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) int = ormar.Integer(max_length=100)",
      "39": "id: int = ormar.Integer(primary_key=True) name: ormar[str] = ormar[str](max_length=100)",
      "40": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if id is not None: else name = ormar.String(max_length=100)",
      "41": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if name is not None: id = ormar.String(max_length=100)",
      "42": "id: ormar.Integer(primary_key=True) name: ormar.String(max_length=100)",
      "43": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if id is not None: id = ormar.String(max_length=100)",
      "44": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if id is not None: name = ormar.String(max_length=100)",
      "45": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) if id not int:",
      "46": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) int = ormar.String(max_length=100)",
      "47": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) assert id is not None",
      "48": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) row = ormar.String(max_length=100)",
      "49": "id = ormar.Integer(primary_key=True) name = ormar.String(max_length=100) col_id = ormar.Collection(col_id)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    self.env_good = True\n                    self.failure_list = None\n\n",
    "target_code": "                    self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_line": "                    self.failure_list = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 707,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "emissary-ingress/emissary",
    "source_filename": "ambassador/ambassador_diag/diagd.py",
    "target_filename": "ambassador/ambassador_diag/diagd.py",
    "source_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38^",
    "target_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "predictions": [
      "self.env_good = True self.failure_list = []"
    ],
    "correct": true,
    "top_five": {
      "0": "self.env_good = True self.failure_list = []",
      "1": "self.env_good = True self.failure_list = List[str]",
      "2": "self.env_good = True self.failure_list = ''",
      "3": "self.env_good = True self.failure_list: List[str]",
      "4": "self.env_good = True self.failure_list[str] = []",
      "5": "self.env_good = True self.failure_list isinstance(failure_list, str)",
      "6": "self.env_good = True self.failure_list: List[str] = False",
      "7": "self.env_good = True self.failure_list = \"\"",
      "8": "self.env_good = True self.failure_list: List[str] = []",
      "9": "self.env_good = True self.failure_list: Optional[str] = None",
      "10": "self.env_good = True self.list_failure = []",
      "11": "self.env_good = True self.failure_list=[]",
      "12": "self.env_good = True self.failure_list: Optional[List[str]] = None",
      "13": "self.env_good = False self.failure_list = []",
      "14": "self.env_good = True self.failure_list: List[str] = None",
      "15": "self.env_good = True self.failure_list=List[str]",
      "16": "self.env_good = True self.failure_list isinstance(failure, str)",
      "17": "self.env_good = True self.failure_lists = []",
      "18": "self.env_good = True self.failure_list = List[str] # type: Optional[AmbassadorEventWatcher]",
      "19": "self.env_good = True self.failure_list isinstance(failure_list)",
      "20": "self.env_good = True self.failure_list[str] = 0",
      "21": "self.env_good = True self.list_of_failures = []",
      "22": "self.env_good = True self.failure_list = List(failure_list)",
      "23": "self.env_good = True self.failure_list = Optional[str]",
      "24": "self.env_good = True self.list[str] = []",
      "25": "self.env_good = True self.failure_list = 0",
      "26": "self.env_good = True self.failure_list = List(str)",
      "27": "self.env_good = True self.list[str] = None",
      "28": "self.env_good = True self.failure_list = None",
      "29": "self.env_good = True self.failure_list: bool = False",
      "30": "self.env_good = True self.failure_list = List[str] if self.env_good is not None:",
      "31": "self.env_good = True self.failure_list isinstance(failure_list, str) if self.env_good is not None",
      "32": "self.env_good = True self.failure_list: Optional[List] = None",
      "33": "self.env_good = True self.failure_list: List[str] = [] self.env_failure_list: List[str] = []",
      "34": "self.env_good = True self.failure_list isinstance(str, str)",
      "35": "self.env_good = True self.failure_list = List[str] # type: List[str]",
      "36": "self.env_good = True self.failure_list = list[str]",
      "37": "self.env_good = True self.failure_list[str] = 'undefined' self.env_failure_list[str] = ''",
      "38": "self.env_good = True self.failure_list isinstance(failure_list, str) if self.env_good is not None:",
      "39": "self.env_good = True self.failure_list = List[str] if self.env_good is None:",
      "40": "self.env_good = True self.failure_list = 'undefined'",
      "41": "self.env_good = True self.failure_list: List[str] = false",
      "42": "self.env_good = True self.failure_list ='success'",
      "43": "self.env_good = True self.failure_list = [] # type: List[str]",
      "44": "self.env_good = True self.failure_list = Optional[List[str]]",
      "45": "self.env_good = True self.failure_list: List[str] = \"\"",
      "46": "self.env_good = True self.failure_list: []",
      "47": "self.env_good = True self.failure_list isinstance(failure_list, str) if self.env_good is instance(failure_list)",
      "48": "self.env_good = False self.failure_list = List[str]",
      "49": "self.env_good = True self.failure_list = List(failure_list, str)"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    topo: Mesh = None\n    element: Element = None\n\n",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_line": "    element: Element = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 171,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "kinnala/scikit-fem",
    "source_filename": "skfem/assembly/dofs.py",
    "target_filename": "skfem/assembly/dofs.py",
    "source_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7^",
    "target_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "predictions": [
      "topo: Mesh: Optional[skfem.element.element.Element] = None element: Optional[Element] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Optional[Element] = None",
      "1": "topo: Mesh = None element: Element",
      "2": "topo: Mesh = None element: Optional[Element] = None",
      "3": "topo: Mesh = None element: Element = \"\"",
      "4": "topo: Mesh = None element: Element = Optional[skfem.element.element.Element]",
      "5": "topo: Mesh = \"\" element: Element",
      "6": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Optional[Element] = None",
      "7": "topo: Mesh = None element: Element Optional[skfem.element.element.Element] = None",
      "8": "topo: Mesh = None element: Element = ''",
      "9": "topo: Mesh = [] element: Element",
      "10": "topo: Mesh = None element: Optional[element] = None",
      "11": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Optional[element] = None",
      "12": "topo: Mesh: Optional[skfem.element.element] = None element: Optional[Element] = None",
      "13": "topo: Mesh = \"\" element: Element = \"\"",
      "14": "topo: Mesh = None element: Element = 0",
      "15": "topo: Mesh = None element: Element if isinstance(element, skfem.element.element.Element)",
      "16": "topo: Mesh: Optional[skfem.element.Element] = None element: Optional[Element] = None",
      "17": "topo: Mesh = None element: Sfem.element.Element = None",
      "18": "topo: Mesh = \"\" element: Element Optional[skfem.element.element.Element] = None",
      "19": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.Element] = None",
      "20": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.Element] = None",
      "21": "topo: Mesh = None element: Element = Optional[Skfem.element.element.Element]",
      "22": "topo: Mesh: Optional[skfem.element.element].Element = None element: Optional[Element] = None",
      "23": "topo: Mesh = None element: skfem[skfem[element.element.Element]] = None",
      "24": "topo: Mesh = False element: Element = False",
      "25": "topo: Mesh = Optional[skfem.element.element.Element]: element: Optional[Element] = None",
      "26": "topo: Mesh = 0 element: Element",
      "27": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.Element]",
      "28": "topo: Mesh = None element: skfem[skfem.element.element.Element] = None",
      "29": "topo: Mesh = None element: Skfem.element.Element = None",
      "30": "topo: Mesh = None element: Skfem[skfem.element.element.Element] = None",
      "31": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Optional[element] = None",
      "32": "topo: Mesh = None element: Element if isinstance(element, skfem.element.Element)",
      "33": "topo: Mesh: Optional[skfem] = None element: Optional[Element] = None",
      "34": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.Element]",
      "35": "topo: Mesh = Optional[skfem.element.element.Element]: Element = Optional[skfem.element.Element]",
      "36": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.element.Element]",
      "37": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.element.Element]",
      "38": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Element Optional[skfem.element.Element] = None",
      "39": "topo: Mesh = None element: Skfem.element.element.Element = None",
      "40": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.element.Element] = None",
      "41": "topo: Mesh = None element: skfem[skfem[element].element.Element] = None",
      "42": "topo: Mesh: Optional[skfem.element.element.Element] = None element: Element = Optional[skfem.element.element.Element] = None",
      "43": "topo: Mesh = Optional[skfem.element.element.Element] = None element: Element Optional[skfem.element.Element] = None",
      "44": "topo: Mesh = None element: Element = Optional[skfem.element.Element]",
      "45": "topo: Mesh = None element: Element Optional[skfem.element.Element] = None",
      "46": "topo: Mesh = None element: Element if isinstance(element, skfem.element.Element.Element)",
      "47": "topo: Mesh = Optional[skfem.element.element] = None element: Optional[Element] = None",
      "48": "topo: Mesh = None element: Element if isinstance(element, skfem.element.element.Element):",
      "49": "topo: Mesh = Optional[skfem.element.element.Element]: Element = Optional[skfem.element.element.Element]"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    num_classes: int = None\n    names: List[str] = None\n    names_file: str = None\n    id: Optional[str] = None\n",
    "target_code": "\n    num_classes: Optional[int] = None\n    names: Optional[List[str]] = None\n    names_file: Optional[str] = None\n    id: Optional[str] = None\n",
    "warning_line": "    names_file: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `names_file` declared in class `ClassLabel` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 552,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "huggingface/datasets",
    "source_filename": "src/datasets/features.py",
    "target_filename": "src/datasets/features.py",
    "source_changeid": "49e517a3d21392291d771872204594f43cd09532^",
    "target_changeid": "49e517a3d21392291d771872204594f43cd09532",
    "predictions": [
      "num_classes: int = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None"
    ],
    "correct": false,
    "top_five": {
      "0": "num_classes: int = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "1": "num_classes: Optional[int] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "2": "num_classes: int = None names: Optional[List[str]] = None id: Optional[str] = None",
      "3": "num_classes: int: Optional[str] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "4": "num_classes: int = 0 names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "5": "num_classes: int = None names: Optional[List[str]] = None name_file: Optional[str] = None id: Optional[str] = None",
      "6": "num_classes: int = None names: List[str] = [] names_file: Optional[str] = None id: Optional[str] = None",
      "7": "num_classes: int = None names: List[str] = None names_file: Optional[str] = None id: Optional[str] = None",
      "8": "num_classes: typing.Optional[int] = None names: typing.Optional[List[str]] = None names_file: typing.Optional[str] = None id: Optional[str] = None",
      "9": "num_classes: int -> None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "10": "num_classes: int = \" names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "11": "num_classes: option[int] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "12": "num_classes: int | None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "13": "num_classes: int = None names: Optional[List[str], Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "14": "num_classes: option_list[int] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "15": "num_classes: int: Optional[str] = None names: Optional[List[str]] = None id: Optional[str] = None",
      "16": "num_classes: int = \"\" names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "17": "num_classes: Int = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "18": "num_classes: int = [] names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "19": "num_classes: int = None names: Optional[List[str]] = None labels_file: Optional[str] = None id: Optional[str] = None",
      "20": "num_classes: Optional[str] = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "21": "num_classes: int = None names: List[str] = \"\" names_file: Optional[str] = None id: Optional[str] = None",
      "22": "num_classes: int; names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "23": "num_classes: Optional[int] = None names: Optional[List[str]] = None id: Optional[str] = None",
      "24": "num_classes: int = False names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "25": "num_classes: int = None names: Optional[Label[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "26": "num_classes: int = None names: Optional[List[str]] = None names_file: Optional[Str] = None id: Optional[str] = None",
      "27": "num_classes: int | None = None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "28": "num_classes: int = -1 names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "29": "num_classes: int = 0 names: List[str] = None names_file: Optional[str] = None id: Optional[str] = None",
      "30": "num_classes: int = None names: Optional[Str] = None names_file: Optional[str] = None id: Optional[str] = None",
      "31": "num_classes: int () names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "32": "num_classes: int = None names: Optional[List[str]] = None options_file: Optional[str] = None id: Optional[str] = None",
      "33": "num_classes: int = No names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "34": "num_classes: int = \"names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "35": "num_classes: int += None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "36": "num_classes: int = None names: Options[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "37": "num_classes: int -> None names: List[str] = None names_file: Optional[str] = None id: Optional[str] = None",
      "38": "num_classes: int=None names: Optional[List[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "39": "num_classes: int = \"\" names: Optional[List[str]] = None names_file: Optional[str] = \"\" id: Optional[str] = None",
      "40": "num_classes: int = None names: Optional[list[str]] = None names_file: Optional[str] = None id: Optional[str] = None",
      "41": "num_classes: int = None names: List[str] = None id: Optional[str] = None",
      "42": "num_classes: int = None names_file: Optional[str] = None id: Optional[str] = None",
      "43": "num_classes: int = None name_file: Optional[str] = None id: Optional[str] = None",
      "44": "num_classes: int = None names: List[str] = [] names_file: str = [] id: Optional[str] = None",
      "45": "num_classes: int = False names: Optional[List[str]] = None names_file: Optional[str] = False id: Optional[str] = None",
      "46": "num_classes: int = \" names: Optional[List[str]] = None names_file: Optional[str] = \"\" id: Optional[str] = None",
      "47": "num_classes: int = None names: Optional[List[str]] = None names_file: Optional[str] = None",
      "48": "num_classes: int = None names: List[str] = \"\" names_file: str = \"\" id: Optional[str] = None",
      "49": "num_classes: int = None names: List[str] = \"\" id: Optional[str] = None"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        self.returncode = code\n",
    "warning_line": "        self.returncode = code",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "actionless/pikaur",
    "source_filename": "pikaur_test/helpers.py",
    "target_filename": "pikaur_test/helpers.py",
    "source_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc^",
    "target_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "predictions": [
      "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code"
    ],
    "correct": false,
    "top_five": {
      "0": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = code",
      "1": "def _fake_exit(self, code: Int = 0) -> NoReturn: self.returncode = code",
      "2": "def _fake_exit(self, code: Optional[int] = 0) -> Optional[NoReturn]: self.returncode = code",
      "3": "def _fake_exit(self, code: Optional[int] = 0) -> None: self.returncode = code",
      "4": "def _fake_exit(self, code: int = 0) -> NoReturn: self.returncode = code",
      "5": "def _fake_exit(self, code: Optional[int] = 0) -> noreturn: self.returncode = code",
      "6": "def _fake_exit(self, code: Optional[int] = 0): self.returncode = code",
      "7": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: return code",
      "8": "def _fake_exit(self, code: Optional[int] = 0, 0) -> NoReturn: self.returncode = code",
      "9": "def _fake_exit(self, code: Optional[int] = 0, noReturn: self.returncode = code",
      "10": "def _fake_exit(self, code: Optional[str] = 0) -> NoReturn: self.returncode = code",
      "11": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = return code",
      "12": "def _fake_exit(self, code: Optional[int] = 0, NoReturn: self.returncode = code",
      "13": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = returncode",
      "14": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn -> int: self.returncode = code",
      "15": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = encode",
      "16": "def _fake_exit(self, code: Optional[int] = 0, noreturn: self.returncode = code",
      "17": "def _fake_exit(self, code: InterceptSysOutput = 0) -> NoReturn: self.returncode = code",
      "18": "def _fake_exit(self, code: Optional[int] = 0) -> Optional[null]: self.returncode = code",
      "19": "def _fake_exit(self, code: Optional[Int] = 0) -> NoReturn: self.returncode = code",
      "20": "def _fake_exit(self, code: Optional[int] = 0.) -> NoReturn: self.returncode = code",
      "21": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = Code",
      "22": "def _fake_exit(self, code: Optional[int] = 0 ) -> NoReturn: self.returncode = code",
      "23": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returnedcode = code",
      "24": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = codes",
      "25": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn if code is None: self.returncode = code",
      "26": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = returnCode",
      "27": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode= code",
      "28": "def _fake_exit(self, code: Optional[int] = None) -> NoReturn: self.returncode = code",
      "29": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = int",
      "30": "def _fake_exit(self, code: Optional[int] = # 0) -> NoReturn: self.returncode = code",
      "31": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn -> None: self.returncode = code",
      "32": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode=code",
      "33": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn - self.returncode = code",
      "34": "def _fake_exit(self, code: Optional[int] = 0) -> \"NoReturn\": self.returncode = code",
      "35": "def _fake_exit( self, code: Optional[int] = 0 ) -> NoReturn: self.returncode = code",
      "36": "def _fake_exit(self, code: Optional[int] = \"0\") -> NoReturn: self.returncode = code",
      "37": "def _fake_exit(self, code: Optional[int] = 0) -> Optional[int]: self.returncode = code",
      "38": "def _fake_exit(self, code: Method.Optional[int] = 0) -> NoReturn: self.returncode = code",
      "39": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = msg",
      "40": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn : self.returncode = code",
      "41": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = input.code",
      "42": "def _fake_exit(self, code: Binary[int] = 0) -> NoReturn: self.returncode = code",
      "43": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = encode self.returncode",
      "44": "def _fake_exit(self, code: Optional[output] = 0) -> NoReturn: self.returncode = code",
      "45": "def _fake_exit(self, code: String(Int) = 0) -> NoReturn: self.returncode = code",
      "46": "def _fake_exit(self, code => Optional[int] = 0) -> NoReturn: self.returncode = code",
      "47": "def _fake_exit(self, code: Optional[ int] = 0) -> NoReturn: self.returncode = code",
      "48": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: self.returncode = text.code",
      "49": "def _fake_exit(self, code: Code = 0) -> NoReturn: self.returncode = code"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: InferenceAPI = []\n\n",
    "target_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n\n",
    "warning_line": "    _inference_apis: InferenceAPI = []",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_inference_apis` declared in class `BentoService` has type `InferenceAPI` but is used as type `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 588,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bentoml/BentoML",
    "source_filename": "bentoml/service.py",
    "target_filename": "bentoml/service.py",
    "source_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd^",
    "target_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd",
    "predictions": [
      "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = []"
    ],
    "correct": true,
    "top_five": {
      "0": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = []",
      "1": "# List of inference APIs that this BentoService provides _inference_apis: Optional[InferenceAPI] = []",
      "2": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI = []",
      "3": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI]",
      "4": "# List of inference APIs that this BentoService provides _inference_apis: List[Variable[_T]] = []",
      "5": "# List of inference APIs that this BentoService provides _inference_apis: _inference_apis = []",
      "6": "# List of inference APIs that this BentoService provides _inference_apis: List[inference_apis] = []",
      "7": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI, []]",
      "8": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _inference_apis: List[Variable[_T]] = []",
      "9": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] _inference_apis: List[Variable[_T]] = []",
      "10": "# List of inference APIs that this BentoService provides _inference_apis: Type[InferenceAPI] = []",
      "11": "# List of inference APIs that this BentoService provides _inference_apis: List[inference_api] = []",
      "12": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _inference_apis: List[InferenceAPI] = []",
      "13": "# List of inference APIs that this BentoService provides _inference_apis: _inferenceAPI = []",
      "14": "# List of inference APIs that this BentoService provides _inference_apis: List[inference] = []",
      "15": "# List of inference APIs that this BentoService provides _inference_apis: List[T] = []",
      "16": "# List of inference APIs that this BentoService provides _inference_apis: List[[]] = []",
      "17": "# List of inference APIs that this BentoService provides _inference_apis: []",
      "18": "# List of inference APIs that this BentoService provides _inference_apis: Union[InferenceAPI, List[Variable[_T]]] = []",
      "19": "# List of inference APIs that this BentoService provides _inference_apis: Optional[InferenceAPI] = [] _inference_apis: Optional[InferenceAPI] = []",
      "20": "# List of inference APIs that this BentoService provides. _inference_apis: List[InferenceAPI] = []",
      "21": "# List of inference APIs that this BentoService provides _inference_apis: InferenceAPI",
      "22": "# List of inference APIs that this BentoService provides _inference_apis: List[inference API] = []",
      "23": "# List of inference APIs that this BentoService provides _inference_apis: \"\"\"InferenceAPI = []",
      "24": "# List of inference APIs that this BentoService provides _inference_apis: Catalogue[InferenceAPI] = []",
      "25": "# List of inference APIs that this BentoService provides _inference_apis: List[inferenceAPI] = []",
      "26": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] _inference_apis: List[InferenceAPI] = []",
      "27": "# List of inference APIs that this BentoService provides _inference_apis: List[Variable[_T]] = [] _inference_apis: List[InferenceAPI] = []",
      "28": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] # List[Variable[_T]]",
      "29": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI, Variable[_T]] = []",
      "30": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [],",
      "31": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI], []",
      "32": "# List of inference APIs that this BentoService provides _inference_apis: List[str] = []",
      "33": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _inference_apis: List[Variable[T]] = []",
      "34": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI, []] _inference_apis: List[Variable[_T]] = []",
      "35": "# List of inference APIs that this BentoService provides _inference_apis: List[_T] = []",
      "36": "# List of inference APIs that this BentoService provides _inference_apis: Class[InferenceAPI] = []",
      "37": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI, []] = []",
      "38": "# List of inference APIs that this BentoService provides _inference_apis: 'InferenceAPI'",
      "39": "# List of inference APIs that this BentoService provides _inference_apis: Object[InferenceAPI] = []",
      "40": "# List of inference APIs that this BentoService provides _inference_apis: _inference_apis = List[Variable[_T]]",
      "41": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] if not _inference_apis: List[Variable[_T]] = []",
      "42": "# List of inference APIs that this BentoService provides _inference_apis: _inference_apis | InferenceAPI = []",
      "43": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _inference_apis_type: List[Variable[_T]] = []",
      "44": "# List of inference APIs that this BentoService provides _inference_apis: Library[InferenceAPI] = []",
      "45": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _inference_apis: List[T] = []",
      "46": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _inference_apis_name: List[Variable[_T]] = []",
      "47": "# List of inference APIs that this BentoService provides _inference_apis: List[_inference_apis] = []",
      "48": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] _inference_apis: List[Variable[T]] = []",
      "49": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] _reference_apis: List[Variable[_T]] = []"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object\n",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_line": "            m.chat = self.chat_manager.get_chat(channel, uid)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 271,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/efb-telegram-master",
    "source_filename": "efb_telegram_master/master_message.py",
    "target_filename": "efb_telegram_master/master_message.py",
    "source_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6^",
    "target_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "predictions": [
      "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object"
    ],
    "correct": false,
    "top_five": {
      "0": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "1": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "2": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object()",
      "3": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object()",
      "4": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat_manager: # Chat not found anyway, build a fake object",
      "5": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat( channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "6": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object object",
      "7": "m.author = self.chat_manager.self self.chat_manager.get_chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "8": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object.",
      "9": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat( channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "10": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object object",
      "11": "m.author = self.chat_manager.self if not m.chat: # Chat not found anyway, build a fake object",
      "12": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid).get_chat() if not m.chat: # Chat not found anyway, build a fake object",
      "13": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object.",
      "14": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(uid) if not m.chat: # Chat not found anyway, build a fake object",
      "15": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(m.author)",
      "16": "m.author = self.chat_manager.self m.chat= self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "17": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid).get_chat() if not m.chat: # Chat not found anyway, build a fake object",
      "18": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object() if not m.author:",
      "19": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object if not m.author:",
      "20": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object() m.chat_manager = self.chat_manager.get_chat(channel, uid)",
      "21": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, efb_telegram_master.chat.ETMChat) if not m.chat: # Chat not found anyway, build a fake object",
      "22": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(m.chat_manager)",
      "23": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat_manager: # Chat not found anyway, build a fake object()",
      "24": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, user_id) if not m.chat: # Chat not found anyway, build a fake object",
      "25": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat( channel, uid) if not m.chat: # Chat not found anyway, build a fake object()",
      "26": "m.author = self.chat_manager.self m.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "27": "m.author = self.chat_manager.self m.chat_manager.get_chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "28": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object if not m.author:",
      "29": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(uid)",
      "30": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(m.author, uid)",
      "31": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object() if not m.author:",
      "32": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(m.author)",
      "33": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(channel, userID) if not m.chat: # Chat not found anyway, build a fake object",
      "34": "m.author = self.chat_manager.self m.chat = self.chat_manager.get_chat(uid) if not m.chat: # Chat not found anyway, build a fake object",
      "35": "m.author = self.chat_manager.self m.chat=self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object",
      "36": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel.uid) if not m.chat: # Chat not found anyway, build a fake object",
      "37": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(m.chat_manager, uid)",
      "38": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(uid, channel) if not m.chat: # Chat not found anyway, build a fake object",
      "39": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, userID) if not m.chat: # Chat not found anyway, build a fake object",
      "40": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel=uid) if not m.chat: # Chat not found anyway, build a fake object",
      "41": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object instead.",
      "42": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object(uid, chat_manager)",
      "43": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object instead",
      "44": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object from scratch",
      "45": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object:",
      "46": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object() if not m.chat:",
      "47": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, create a fake object",
      "48": "m.author = self.chat_manager.self m.chat_manager = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object (m.author, uid)",
      "49": "m.author = self.chat_manager.self self.chat_manager.get_chat = self.chat_manager.get_chat(channel, uid) if not m.chat: # Chat not found anyway, build a fake object()"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)\n",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_line": "        self.kernel_filename: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 90,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)"
    ],
    "correct": false,
    "top_five": {
      "0": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "1": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"\" self.hypervisor_filename = \"\" self.result = Result(xml_state)",
      "2": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = \"\" self.hypervisor_filename: str = \"\" self.result = Result(xml_state)",
      "3": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = '' self.hypervisor_filename: str = '' self.result = Result(xml_state)",
      "4": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = '' self.hypervisor_filename = '' self.result = Result(xml_state)",
      "5": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = [] self.hypervisor_filename = [] self.result = Result(xml_state)",
      "6": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str self.hypervisor_filename = str self.result = Result(xml_state)",
      "7": "self.checksum_name = \"'.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "8": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = None self.hypervisor_filename = None self.result = Result(xml_state)",
      "9": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = Optional[str] = None self.hypervisor_filename = Optional[str] = None self.result = Result(xml_state)",
      "10": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(Xml_state)",
      "11": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = False self.hypervisor_filename = False self.result = Result(xml_state)",
      "12": "self.checksum_name: ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "13": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = [] self.hypervisor_filename: str = [] self.result = Result(xml_state)",
      "14": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[Str] = None self.hypervisor_filename: Optional[Str] = None self.result = Result(xml_state)",
      "15": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: typing.Optional[str] = None self.hypervisor_filename: typing.Optional[str] = None self.result = Result(xml_state)",
      "16": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"\" self.hypervisor_filename = \"\") self.result = Result(xml_state)",
      "17": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = None self.hypervisor_filename = False self.result = Result(xml_state)",
      "18": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = False self.result = Result(xml_state)",
      "19": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) if xml_state is not None:",
      "20": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Union[str, None] = None self.hypervisor_filename: Union[str, None] = None self.result = Result(xml_state)",
      "21": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = None self.hypervisor_filename = \"\" self.result = Result(xml_state)",
      "22": "self.checksum_name: str = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "23": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: choice[str] = None self.hypervisor_filename: choice[str] = None self.result = Result(xml_state)",
      "24": "self.checksum_name = ''.join([self.image_name, \".md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "25": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"4\" self.hypervisor_filename = \"4\" self.result = Result(xml_state)",
      "26": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: option[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state)",
      "27": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = Necessary[str] = None self.result = Result(xml_state)",
      "28": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str[0] self.hypervisor_filename = str[1] self.result = Result(xml_state)",
      "29": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str(self.hypervisor_filename) self.result = Result(xml_state)",
      "30": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"0\" self.hypervisor_filename = \"0\" self.result = Result(xml_state)",
      "31": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"5\" self.hypervisor_filename = \"5\" self.result = Result(xml_state)",
      "32": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"0\" self.hypervisor_filename = \"1\" self.result = Result(xml_state)",
      "33": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = (\"\") self.hypervisor_filename = (\"\") self.result = Result(xml_state)",
      "34": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = () if self.hypervisor_filename = () self.result = Result(xml_state)",
      "35": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = \"5\" self.hypervisor_filename = \"4\" self.result = Result(xml_state)",
      "36": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = str () self.hypervisor_filename = str () self.result = Result(xml_state)",
      "37": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename, str = '' self.hypervisor_filename, str = '' self.result = Result(xml_state)",
      "38": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = \"\" self.hypervisor_filename: str = '' self.result = Result(xml_state)",
      "39": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str | None = None self.hypervisor_filename: str | None = None self.result = Result(xml_state)",
      "40": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = null self.hypervisor_filename = null self.result = Result(xml_state)",
      "41": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) if xml_state is None:",
      "42": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = \"5\" self.hypervisor_filename: str = \"5\" self.result = Result(xml_state)",
      "43": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename, str = \"\" self.hypervisor_filename, str = \"\" self.result = Result(xml_state)",
      "44": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: str = '' self.hypervisor_filename: str = \"\" self.result = Result(xml_state)",
      "45": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename='' self.hypervisor_filename='' self.result = Result(xml_state)",
      "46": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state):",
      "47": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename = '' self.hypervisor_filename = \"' self.result = Result(xml_state)",
      "48": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None self.result = Result(XML_state)",
      "49": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename=\"\" self.hypervisor_filename=\"\" self.result = Result(xml_state)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = camelCaseify(trait)\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 275,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "1": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "2": "for trait, cfg_key in common_oauth_traits: assert cfg_key is None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "3": "for trait, cfg_key in common_oauth_traits: assert trait is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "4": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None and set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "5": "for trait, cfg_key in common_oauth_traits: assert isinstance(trait, cfg_key) set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "6": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "7": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "8": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None if cfg_key is None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "9": "for trait, cfg_key in common_oauth_traits: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "10": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None if cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "11": "for trait, cfg_key in common_oauth_traits: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "12": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None, cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "13": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None, cfg_key: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "14": "for trait, cfg_key in common_oauth_traits: # if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "15": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = common_oauth_traits[trait] set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "16": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: if cfg_key is None: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "17": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None and cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "18": "for trait, cfg_key in common_oauth_traits: assert cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "19": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None Set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "20": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = true set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "21": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "22": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None but cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "23": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "24": "for trait, cfg_key in common_oauth_traits: # type: str(trait, cfg_key) set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "25": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None and if cfg_key is None: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "26": "for trait, cfg_key in common_oauth_traits: assert cfg_authenticator is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "27": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is None",
      "28": "for trait, cfg_key in common_oauth_traits: assert cfg_key is None and set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "29": "for trait, cfg_key in common_oauth_traits: assert cfg_key should be None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "30": "for trait, cfg_key in common_oauth_traits: assert isinstance(cfg_key, str) set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "31": "for trait, cfg_key in common_oauth_traits: str(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is None: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "32": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is not None",
      "33": "for trait, cfg_key in common_oauth_traits: assert cfg_key was not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "34": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) else:",
      "35": "for trait, cfg_key in common_oauth_traits: \"\"\" set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "36": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key))",
      "37": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) assert cfg_key is not None",
      "38": "for trait, cfg_key in common_oauth_traits: assert c.CILogonOAuthenticator is not None set_config_if_not_none(trait, cfg_key)",
      "39": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) return true",
      "40": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "41": "for trait, cfg_key in common_oauth_traits: # set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "42": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is None:",
      "43": "for trait, cfg_key in common_oauth_traits: str(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "44": "for trait, cfg_key in common_oauth_traits: assert c.CILogonOAuthenticator is not None set_config_if_not_none(trait, 'auth.cilogon.' + cfg_key)",
      "45": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is None:",
      "46": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: cfg_key = cfg_key set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.')",
      "47": "for trait, cfg_key in common_oauth_traits: if cfg_key is None: if cfg_key is None: if cfg_key is None:",
      "48": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) elif isinstance(trait, cfg_key)",
      "49": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) if cfg_key is None in common_oauth_traits:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n\tnumber = int(number)\n\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])\n\n",
    "target_code": "\n\tvalue = int(number)\n\treturn \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_line": "\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 720,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/formatting.py",
    "target_filename": "se/formatting.py",
    "source_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3^",
    "target_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "predictions": [
      "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])"
    ],
    "correct": false,
    "top_five": {
      "0": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "1": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "2": "value = int(number) return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])",
      "3": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "4": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "5": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "6": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) else: return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "7": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * % 10::4])",
      "8": "# number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "9": "# is not None: number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "10": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10:: 4])",
      "11": "# number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "12": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10:::4])",
      "13": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) *",
      "14": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * % 10::4])",
      "15": "# is not None: number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "16": "number = str(number) return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])",
      "17": "# # tsnrhtdd = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "18": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) else:",
      "19": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10::4])",
      "20": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10:: 4])",
      "21": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10  4) * number % 10::4])",
      "22": "# type: str(int(number)) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "23": "(number = int(number)) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "24": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10::4])",
      "25": "# int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "26": "number = int(number) return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])",
      "27": "assert isinstance(number, str) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "28": "int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "29": "# Tsnrhtdd = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "30": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" %",
      "31": "numbers = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "32": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10:::4])",
      "33": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10::4]",
      "34": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) else: return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10:: 4])",
      "35": "# tsnrhtdd = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "36": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (",
      "37": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * % 10::4])",
      "38": "\"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10::4])",
      "39": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * number % 10  4) * number % 10::4])",
      "40": "_number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "41": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "42": "async number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "43": "return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) else:",
      "44": "_number = int(number) return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])",
      "45": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * \"% 10::4])",
      "46": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])",
      "47": "number = int(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) else:",
      "48": "# if not number: return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4])",
      "49": "number = str(number) return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4])"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        else:\n            raise ValueError(\"unknown topic: \" + topicname)\n\n",
    "target_code": "        else:\n            raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_line": "            raise ValueError(\"unknown topic: \" + topicname)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1052,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997^",
    "target_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "predictions": [
      "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii"
    ],
    "correct": false,
    "top_five": {
      "0": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii",
      "1": "else: raise ValueError(f\"unknown topic: { topic } \")",
      "2": "else: raise ValueError(f\"unknown topic: { topic \\ rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii",
      "3": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii",
      "4": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii n",
      "5": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii re",
      "6": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nin",
      "7": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninin",
      "8": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii \"",
      "9": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininin",
      "10": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "11": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "12": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "13": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "14": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "15": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "16": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "17": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "18": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "19": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "20": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "21": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "22": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "23": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "24": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "25": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "26": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "27": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "28": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "29": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "30": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "31": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "32": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "33": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "34": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "35": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii n",
      "36": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "37": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "38": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininin",
      "39": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "40": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "41": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii",
      "42": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "43": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "44": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "45": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "46": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "47": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininininin",
      "48": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii ninininininininininininininininininininininininininininininininininininininininininininininininininin",
      "49": "else: raise ValueError(f\"unknown topic: { topic } rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii rosii nininininininininininininininininininininininininininininininininininininininininininininininininin"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) < self._library_max_private_projects)\n",
    "target_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    callback(len(response) < self._library_max_private_projects)\n",
    "warning_line": "                    callback(len(response) < self._library_max_private_projects)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 95,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "target_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af^",
    "target_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "predictions": [
      "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)"
    ],
    "correct": false,
    "top_five": {
      "0": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "1": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "2": "assert self._library_max_private_projects is not None elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "3": "assert self._library_max_private_projects is not None callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "4": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects))",
      "5": "assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects",
      "6": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) else:",
      "7": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "8": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) else:",
      "9": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) else:",
      "10": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(list, project) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "11": "assert isinstance(response, list) elif isinstance(r, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "12": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  int(self._library_max_private_projects)) elif isinstance(list, project) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "13": "assert self._library_max_private_projects is not None: callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "14": "str(response, list) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "15": "elif isinstance(list, ProjectResponse, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "16": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(list(r, DigitalFactoryProjectResponse)) and all(isinstance(list(r, DigitalFactoryProjectResponse) for r in response)",
      "17": "callback(True) elif isinstance(list, isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "18": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "19": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "20": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "21": "elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "22": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects))",
      "23": "elif isinstance(list, r, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "24": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "25": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "26": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response",
      "27": "elif isinstance(list, r, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(list, r) and all(isinstance(list, DigitalFactoryProjectResponse) for r in response)",
      "28": "elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "29": "elif isinstance(list, ProjectResponse, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "30": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  int(self._library_max_private_projects)) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "31": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(list, DigitalFactoryProjectResponse) for r in response)",
      "32": "callback(True) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "33": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  int(self._library_max_private_projects)) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response",
      "34": "callback(True) elif isinstance(list, ProjectResponse, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "35": "assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects is not None assert self._library_max_private_projects are not None assert self._library_max_private_projects",
      "36": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, project) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(",
      "37": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(list, r) and all(isinstance(list, DigitalFactoryProjectResponse) for r in response)",
      "38": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  int(self._library_max_private_projects))",
      "39": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, project) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "40": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  int(self._library_max_private_projects)) elif isinstance(list, project) and all(isinstance(list, DigitalFactoryProjectResponse) for r in response)",
      "41": "\"\"\" elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "42": "callback(True) elif isinstance(response, list) and all(isinstance(response, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "43": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  int(self._library_max_private_projects)) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "44": "callback(True) elif isinstance(str, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "45": "callback(True) elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) else:",
      "46": "callback(True) elif isinstance(list, isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response:",
      "47": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  list(self._library_max_private_projects)) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)",
      "48": "callback(True) elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects)",
      "49": "callback(True) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): callback(len(response)  self._library_max_private_projects) elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if other_line is not None:\n            buffer.append(\" \" + other_line)\n\n",
    "target_code": "        if other_line is not None:\n            buffer.append(\" \" + str(other_line))\n\n",
    "warning_line": "            buffer.append(\" \" + other_line)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 249,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python-poetry/poetry",
    "source_filename": "poetry/mixology/incompatibility.py",
    "target_filename": "poetry/mixology/incompatibility.py",
    "source_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728^",
    "target_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "predictions": [
      "if other_line is not None: buffer.append(str(\" \" + str(other_line))"
    ],
    "correct": false,
    "top_five": {
      "0": "if other_line is not None: buffer.append(str(\" \" + str(other_line))",
      "1": "if other_line is not None: buffer.append(\" \" + str(other_line))",
      "2": "if other_line is not None: buffer.append(str(other_line))",
      "3": "if other_line is not None: buffer.append(int(\" \" + other_line))",
      "4": "if other_line is not None: buffer.append(str(\" \" + str(other_line)))",
      "5": "if other_line is not None: buffer.append([\" \" + str(other_line)])",
      "6": "if other_line is not None: buffer.append(str(\" \" + other_line))",
      "7": "if other_line is not None: buffer.append(Str(\" \" + other_line))",
      "8": "if other_line is not None: buffer.append((\" \" + str(other_line)))",
      "9": "if other_line is not None: buffer.append(f\" \" + str(other_line))",
      "10": "if other_line is not None: buffer.append(Int(\" \" + other_line))",
      "11": "if other_line is not None: buffer.append(str(\" \" + str(other_line)) if other_line is None:",
      "12": "if other_line is not None: buffer.append(str(\" \" + str(other_line)) if other_line is not None:",
      "13": "if other_line is not None: buffer.append('' + str(other_line))",
      "14": "if other_line is not None: if other_line is not None: buffer.append(\" \" + str(other_line))",
      "15": "if other_line is not None: buffer.append(str(\" \" + list(other_line))",
      "16": "if other_line is not None: buffer.append(str(\" \" + str.other_line))",
      "17": "if other_line is not None: buffer.append( str(\" \" + str(other_line))",
      "18": "if other_line is not None: buffer.append(str(\" \" + list(other_line)))",
      "19": "if other_line is not None: buffer.append(str(\" \" + int(other_line)))",
      "20": "if other_line is not None: buffer.append((\" \" + str(other_line))",
      "21": "if other_line is not None: buffer.append(Str(\" \" + other_line))",
      "22": "if other_line is not None: buffer.append(str(\" \" + str(other_line))",
      "23": "if other_line is not None: buffer.append(Str(\" \" + str(other_line))",
      "24": "if other_line is not None: buffer.append(quote(\" \" + other_line))",
      "25": "if other_line is not None: buffer.append(stave(\" \" + str(other_line)))",
      "26": "if other_line is not None: buffer.append(b\" \" + str(other_line))",
      "27": "if other_line is not None: buffer.append(ext(\" \" + other_line))",
      "28": "if other_line is not None: buffer.append(Str(other_line))",
      "29": "if other_line is not None: buffer.append(Str(\" \" + str(other_line)))",
      "30": "if other_line is not None: buffer.append( int(\" \" + other_line))",
      "31": "if other_line is not None: buffer.append(str(\" \" + str) + other_line)",
      "32": "if other_line is not None: buffer.append(str(\" \" + str(other_line)) )",
      "33": "if other_line is not None: buffer.append(line + \" \" + other_line)",
      "34": "if other_line is not None: buffer.append(str(other_line)) if other_line is not None:",
      "35": "if other_line is not None: buffer.append(str(other_line), other_line)",
      "36": "if other_line is not None: buffer.append(str(\" \" + int(other_line))",
      "37": "if other_line is not None: buffer.append(quota(\" \" + other_line))",
      "38": "if other_line is not None: buffer.append(str(\" \" + str(other_line))\"\"",
      "39": "if other_line is not None: buffer.append(txt(\" \" + other_line))",
      "40": "if other_line is not None: buffer.append( str(\" \" + other_line))",
      "41": "if other_line is not None: buffer.append(msg(other_line))",
      "42": "if other_line is not None: buffer.append(list(\" \" + other_line))",
      "43": "if other_line is not None: buffer.append(tr(\" \" + other_line))",
      "44": "if other_line is not None: buffer.append(ext(\" \" + str(other_line)))",
      "45": "if other_line is not None: buffer.append( \" \" + str(other_line))",
      "46": "if other_line is not None: buffer.append(stave(\" \" + other_line))",
      "47": "if other_line is not None: buffer.append(str(\" \" + str(other_line)))",
      "48": "if other_line is not None: buffer.append(int, \" \")",
      "49": "if other_line is not None: buffer.append(msg(\" \" + other_line))"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = camelCaseify(trait)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 279,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: assert cfg_key is not None set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "1": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "4": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "29": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "30": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "31": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "32": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "34": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "35": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "36": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "37": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "38": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "39": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "41": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "42": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "43": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "44": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ##",
      "45": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## #",
      "46": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # #",
      "47": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "48": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # #",
      "49": "for trait, cfg_key in common_oauth_traits: # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## # # # #"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return 32, True\n\n        return int(self.size / 8), False\n",
    "target_code": "            return 32, True\n        if self.size is None:\n            return 32, True\n        return int(self.size / 8), False\n",
    "warning_line": "        return int(self.size / 8), False",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crytic/slither",
    "source_filename": "slither/core/solidity_types/elementary_type.py",
    "target_filename": "slither/core/solidity_types/elementary_type.py",
    "source_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b^",
    "target_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "predictions": [
      "return 32, True return int(self.size / 8), False"
    ],
    "correct": false,
    "top_five": {
      "0": "return 32, True return int(self.size / 8), False",
      "1": "return 32, True assert self.size is not None return int(self.size / 8), False",
      "2": "return 32, True return int(self.size / 8, False)",
      "3": "return 32, True assert self.size is not None return int(self.size / 8, False",
      "4": "return 32, True return str(int(self.size / 8), False)",
      "5": "return 32, True return int(self.size / 8, int(self.size)), False",
      "6": "return 32, True return int(self.size / 8), False",
      "7": "return 32, True return Optional[int](self.size / 8), False",
      "8": "return 32, True, assert self.size is not None return int(self.size / 8), False",
      "9": "return 32, True return str(int(self.size / 8), False",
      "10": "return 32, True, Optional[int] = int(self.size / 8), False",
      "11": "return 32, True return (int(self.size / 8), False)",
      "12": "return 32, True return String(int(self.size / 8), False)",
      "13": "return 32, True if self.size is not None return int(self.size / 8), False",
      "14": "return 32, True return bool(int(self.size / 8), False)",
      "15": "return 32, True, assert self.size is not None return int(self.size / 8, False",
      "16": "return 32, True return int(str(self.size / 8), False)",
      "17": "return 32, True return bool(int(self.size / 8), False",
      "18": "return 32, True return async int(self.size / 8), False",
      "19": "return 32, True return int(self.size / 8) or 32, False",
      "20": "return 32, True return int(self.size, int(self.size) / 8), False",
      "21": "return 32, True return Optional[int](self.size / 8, False)",
      "22": "return 32, True if self.size is not None return int(self.size / 8, False",
      "23": "return 32, True return int(self.size / 8, int) -> None, False",
      "24": "return 32, True return async (int(self.size / 8)), False",
      "25": "return 32, True, int = int(self.size / 8), False",
      "26": "return 32, True return str(self.size / 8), False",
      "27": "return 32, True return int(self.size / 8, Optional[int]) -> False",
      "28": "return 32, True return self.size(int), False",
      "29": "return 32, True return int(self.size / 48), False",
      "30": "return 32, True return int(self.size, int(self.size / 8)), False",
      "31": "return 32, True return async (int(self.size / 8), False)",
      "32": "return 32, True return (int(self.size / 8)), False",
      "33": "return 32, True return int(self.size/8), False",
      "34": "return 32, True return int(self.size / 8, self.size = 0), False",
      "35": "return 32, True return int(self.size / 8, int.length), False",
      "36": "return 32, True, Optional[int] = int(self.size / 8, False)",
      "37": "return 32, True return int(self.size / 8, ''), False",
      "38": "return 32, True return int(self.size / 8, 32), False",
      "39": "return 32, True return int(self.size / 8, false), False",
      "40": "return 32, True return int(int(self.size / 8), False",
      "41": "return 32, True return (int(self.size / 8)), False",
      "42": "return 32, True return int(self.size / 32), False",
      "43": "return 32, True return int(self.size, int(self.size) / 8, False",
      "44": "return 32, True return int(str(self.size) / 8), False",
      "45": "return 32, True return int(self.size / 8, int) -> False",
      "46": "return 32, True assert self.size is not None return self.size / 8 False",
      "47": "return 32, True return int(self.size / 8, int) False",
      "48": "return 32, True return int(int(self.size / 8)), False",
      "49": "return 32, True return int(self.size / 8, int()), False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_line": "          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `range` and `range`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 848,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rizar/attention-lvcsr",
    "source_filename": "theano/tensor/tests/test_basic.py",
    "target_filename": "theano/tensor/tests/test_basic.py",
    "source_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047^",
    "target_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "predictions": [
      "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128), dtype='int8'), [255, 1])],"
    ],
    "correct": false,
    "top_five": {
      "0": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128), dtype='int8'), [255, 1])],",
      "1": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(dtype='int8'), [255, 1])],",
      "2": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(line(-127, 0) + line(line(1, 128)), dtype='int8'), [255, 1])],",
      "3": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(list(range(-127, 0)) + list(list(range(1, 128)), dtype='int8'), [255, 1])],",
      "4": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(str(-127, 0)) + str(range(1, 128)), dtype='int8'), [255, 1])],",
      "5": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(next(-127, 0)) +ext(range(next(1, 128)), dtype='int8'), [255, 1])],",
      "6": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + drange(1, 128), dtype='int8'), [255, 1])],",
      "7": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(arange(-127, 0) + arange(1, 128), dtype='int8'), [255, 1])],",
      "8": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(middleware.range(-127, 0) + middleware.range(1, 128), dtype='int8'), [255, 1])],",
      "9": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "10": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8, 0) + int8, [255, 1])],",
      "11": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + drange(1, 128), dtype='int8'), [255, 1])],",
      "12": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "13": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(t.range(-127, 0) + t.range(1, 128), dtype='int8'), [255, 1])],",
      "14": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + (range(1, 128)), dtype='int8'), [255, 1])],",
      "15": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.interval(-127, 0) + interval(1, 128), dtype='int8'), [255, 1])],",
      "16": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + numpy.array(range(1, 128)), dtype='int8'), [255, 1])],",
      "17": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(t, 0) + t, range(1, 128), dtype='int8'), [255, 1])],",
      "18": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(str(-127, 0)) + str(range(1, 128), dtype='int8'), [255, 1])],",
      "19": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + (range(1, 128)), dtype='int8'), [255, 1])],",
      "20": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8, 0) + (range(1, 128)), dtype='int8'), [255, 1])],",
      "21": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(str(-127, 0) + str(1, 128), dtype='int8'), [255, 1])],",
      "22": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8(-127, 0) + int8(1, 128)), dtype='int8'), [255, 1])],",
      "23": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + \"\", range(1, 128), dtype='int8'), [255, 1])],",
      "24": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(-127, 0) + (range(1, 128)), dtype='int8'), [255, 1])],",
      "25": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(-127, 0) + \"\", range(1, 128), dtype='int8'), [255, 1])],",
      "26": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(-127, 0) + range(1, 128), dtype='int8'), [255, 1])],",
      "27": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(t) + t.range(1, 128), dtype='int8'), [255, 1])],",
      "28": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(node(-127, 0)) + node(range(node(1, 128)), dtype='int8'), [255, 1])],",
      "29": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.values(range(-127, 0)) + range(1, 128), dtype='int8'), [255, 1])],",
      "30": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + d.range(1, 128), dtype='int8'), [255, 1])],",
      "31": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + numpy.arange(1, 128), dtype='int8'), [255, 1])],",
      "32": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(-127, 0) + (r=range(1, 128)), dtype='int8'), [255, 1])],",
      "33": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8(-127, 0) + int8(1, 128)), [255, 1])],",
      "34": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(node(-127, 0) + node(range(1, 128)), dtype='int8'), [255, 1])],",
      "35": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + dtype='int8'), [255, 1])],",
      "36": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(str(-127, 0) + str(1, 128)), dtype='int8'), [255, 1])],",
      "37": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8_range(-127, 0) + int8_range(1, 128), dtype='int8'), [255, 1])],",
      "38": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(segment(-127, 0)) + segment(range(1, 128), dtype='int8'), [255, 1])],",
      "39": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(-127, 0) + dtype='int8'), [255, 1])],",
      "40": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8(-127, 0) + (range(1, 128)), dtype='int8'), [255, 1])],",
      "41": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(segment(-127, 0)) + segment(range(1, 128)), dtype='int8'), [255, 1])],",
      "42": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.range(-127, 0) + numpy.array(range(1, 128)), dtype='int8'), [255, 1])],",
      "43": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8(-127, 0) + int8(1, 128), dtype='int8'), [255, 1])],",
      "44": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8(-127, 0)) + (range(1, 128)), dtype='int8'), [255, 1])],",
      "45": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.arange(-127, 0) + 'int8'), [255, 1])],",
      "46": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.interval(-127, 0) + interval(1, 128)), dtype='int8'), [255, 1])],",
      "47": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(int8), [255, 1])],",
      "48": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + numpy.array(range(1, 128), dtype='int8'), [255, 1])],",
      "49": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, numpy.tile(numpy.array(numpy.array(-127, 0) + 'int8'), [255, 1])],"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return [global_state]\n\n        if size > 0:\n",
    "target_code": "            return [global_state]\n        size = cast(int, size)\n        if size > 0:\n",
    "warning_line": "        if size > 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 748,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f^",
    "target_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "predictions": [
      "return [global_state] if size is not None and size > 0:"
    ],
    "correct": false,
    "top_five": {
      "0": "return [global_state] if size is not None and size > 0:",
      "1": "return [global_state] assert isinstance(int, mythril.laser.smt.expression.Expression) if size > 0:",
      "2": "return [global_state] if int is not None and size > 0:",
      "3": "return [global_state] if size > 0:",
      "4": "return [global_state] assert size is not None if size > 0:",
      "5": "return [global_state] assert isinstance(int, 'Union[int, mythril.laser.smt.expression.Expression]') if size > 0:",
      "6": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]) > 0:",
      "7": "return [global_state] assert isinstance(int, 'Union[int, mythril.laser.smt.expression.Expression]) if size > 0:",
      "8": "return [global_state] if size == int(Union[int, mythril.laser.smt.expression.Expression]):",
      "9": "return [global_state] if int == \"Union[int, mythril.laser.smt.expression.Expression]\" and size > 0:",
      "10": "return [global_state] if int == \"Union[int, mythril.laser.smt.expression.Expression]\" if size > 0:",
      "11": "return [global_state] assert isinstance(int, 'Union[str, int, mythril.laser.smt.expression.Expression]) if size > 0:",
      "12": "return [global_state] if int == 'Union[int, mythril.laser.smt.expression.Expression]':",
      "13": "return [global_state] if int == \"Union[int, mythril.laser.smt.expression.Expression]\":",
      "14": "return [global_state] if isinstance(size, int, mythril.laser.smt.expression.Expression) > 0:",
      "15": "return [global_state] assert isinstance(int, 'Union[str, int, mythril.laser.smt.expression.Expression]') if size > 0:",
      "16": "return [global_state] if int = 'Union[int, mythril.laser.smt.expression.Expression]':",
      "17": "return [global_state] if isinstance(size, 'Union[str, int, mythril.laser.smt.expression.Expression]) > 0:",
      "18": "return [global_state] if size is None and size > 0:",
      "19": "return [global_state] if int = 'Union[int, mythril.laser.smt.expression.Expression]' and size > 0:",
      "20": "return [global_state] if isinstance(size, int) > 0:",
      "21": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]) && size > 0:",
      "22": "return [global_state] if int = 'Union[int, mythril.laser.smt.expression.Expression]' if size > 0:",
      "23": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]]) > 0:",
      "24": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]] > 0:",
      "25": "return [global_state] if int == 'Union[int, mythril.laser.smt.expression.Expression]' and size > 0:",
      "26": "return [global_state] if size  int:",
      "27": "return [global_state] if int == 'Union[int, mythril.laser.smt.expression.Expression]' if size > 0:",
      "28": "return [global_state] if int == 'Union[int, mythril.laser.smt.expression.Expression]': return [global_state]",
      "29": "return [global_state] if size is not None and size > 0: assert isinstance(Union[str, int, mythril.laser.smt.expression.Expression])",
      "30": "return [global_state] assert isinstance(int, mythril.laser.smt.expression.Expression), size > 0:",
      "31": "return [global_state] if size == int(Union[int, mythril.laser.smt.expression.Expression]) if size > 0:",
      "32": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]) and size > 0:",
      "33": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]] && size > 0:",
      "34": "return [global_state] if size  int(Union[int, mythril.laser.smt.expression.Expression]):",
      "35": "return [global_state] if int == \"Union[int, mythril.laser.smt.expression.Expression]\"):",
      "36": "return [global_state] if isinstance(size, 'Union[str, int, mythril.laser.smt.expression.Expression]) && size > 0:",
      "37": "return [global_state] if int == \"Union[int, mythril.laser.smt.expression.Expression]\": return [global_state]",
      "38": "return [global_state] if size == int(Union[int, mythril.laser.smt.expression.Expression]) && size > 0:",
      "39": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]'):",
      "40": "return [global_state] if int == 'Union[int, mythril.laser.smt.expression.Expression]': if size > 0:",
      "41": "return [global_state] if isinstance(size, 'Union[int, int, mythril.laser.smt.expression.Expression]) > 0:",
      "42": "return [global_state] if size == int(Union[int, mythril.laser.smt.expression.Expression], int):",
      "43": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]') > 0:",
      "44": "return [global_state] if int == \"Union[int, mythril.laser.smt.expression.Expression]\") if size > 0:",
      "45": "return [global_state] if int = 'Union[int, mythril.laser.smt.expression.Expression]' size > 0:",
      "46": "return [global_state] if size == 0:",
      "47": "return [global_state] if isinstance(size, 'Union[int, mythril.laser.smt.expression.Expression]') && size > 0:",
      "48": "return [global_state] if int = 'Union[int, mythril.laser.smt.expression.Expression]': return [global_state]",
      "49": "return [global_state] assert isinstance(int, 'Union[int, mythril.laser.smt.expression.Expression]] if size > 0:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_line": "                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 159,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/http_base.py",
    "target_filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )"
    ],
    "correct": false,
    "top_five": {
      "0": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "1": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "2": "err_result.raw_result = ( _type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "3": "err_result.raw_result = ( type(err) + str(\" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "4": "err_result.raw_result = ( err_str = str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "5": "err_result.raw_result = ( ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "6": "err_result.raw_result = ( err_str = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "7": "err_result.raw_result = ( type(err) + \" \\ n\" + json.decoder.JSONDecodeError(err) + \" \\ n\" + traceback.format_exc() )",
      "8": "err_result.raw_result = ( assert err is not None( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "9": "err_result.raw_result = ( __type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "10": "err_result.raw_result = ( assert err is not None + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "11": "err_result.raw_result = ( json.decoder.JSONDecodeError(err)) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "12": "err_result.raw_result = ( err_str = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) -> None:",
      "13": "err_result.raw_result = ( err_type + \" \\ n\" + str(err_type) + \" \\ n\" + traceback.format_exc() )",
      "14": "err_result.raw_result = ( err_type = str(err) + \" \\ n\" + str(err_type) + \" \\ n\" + traceback.format_exc() )",
      "15": "err_result.raw_result = ( _(type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "16": "err_result.raw_result = ( err_id + \" \\ n\" + str(err_id) + \" \\ n\" + traceback.format_exc() )",
      "17": "err_result.raw_result = ( err_type + str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "18": "err_result.raw_result = ( _type[err] + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "19": "err_result.raw_result = ( bool(type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "20": "err_result.raw_result = ( _ err + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "21": "err_result.raw_result = ( err_type = str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "22": "err_result.raw_result = ( _type[str] + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "23": "err_result.raw_result = ( assert isinstance(err, \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "24": "err_result.raw_result = ( err_type = 0 ) + \" \\ n\" + str(err_type) + \" \\ n\" + traceback.format_exc() )",
      "25": "err_result.raw_result = ( str(err, \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "26": "err_result.raw_result = ( err += \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "27": "err_result.raw_result = ( str[err] + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "28": "err_result.raw_result = ( type(err) + str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "29": "err_result.raw_result = ( err_address + \" \\ n\" + str(err_address) + \" \\ n\" + traceback.format_exc() )",
      "30": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ):",
      "31": "err_result.raw_result = ( err_str = 0 ) + \" \\ n\" + str(err_str) + \" \\ n\" + traceback.format_exc() )",
      "32": "err_result.raw_result = ( _ + _ + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "33": "err_result.raw_result = ( type(err) == \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "34": "err_result.raw_result = ( err_type = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "35": "err_result.raw_result = ( err_str = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if err_str is not None:",
      "36": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc())",
      "37": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if err is not None:",
      "38": "err_result.raw_result = ( err_str = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) -> bool:",
      "39": "err_result.raw_result = ( str(err) + \" \\ n\" + err + \" \\ n\" + traceback.format_exc() )",
      "40": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if err is not None:",
      "41": "err_result.raw_result = ( type(err) + \" ^ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "42": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) -> None:",
      "43": "err_result.raw_result = ( str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if err_result is not None:",
      "44": "err_result.raw_result = ( str(err, \" \\ n\" + str(err)) + \" \\ n\" + traceback.format_exc() )",
      "45": "err_result.raw_result = ( err_type[str] + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "46": "err_result.raw_result = ( type(err) + \" \\ n\" + str(err) + \" ^ n\" + traceback.format_exc() )",
      "47": "err_result.raw_result = ( err_type + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() )",
      "48": "err_result.raw_result = ( bool(type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) -> None:",
      "49": "err_result.raw_result = ( err_str = str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() ) if err_str is not None:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n\n",
    "target_code": "\n        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_line": "        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1015,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "target_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c^",
    "target_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "predictions": [
      "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir / f\" { file_name }.tf_model\""
    ],
    "correct": false,
    "top_five": {
      "0": "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "1": "model_dir = Path(model_dir) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "2": "model_dir = Path(model_dir) tf_model_file = str(model_dir) / f\" { file_name }.tf_model\"",
      "3": "model_dir = Path(model_dir) assert tf_model_file is not None tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "4": "model_dir = Path(model_dir) assert tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "5": "model_dir = Path(model_dir) self.tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "6": "model_dir = Path(model_dir) tf_model_file = str(model_dir / f\" { file_name }.tf_model\"",
      "7": "model_dir = Path(model_dir) tf_model_file = f\" { file_name }.tf_model\"",
      "8": "model_dir = Path(model_dir) tf_model_file = model_dir/f\" { file_name }.tf_model\"",
      "9": "model_dir = Path(model_dir) assert file_name is not None tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "10": "model_dir = Path(model_dir) assert isinstance(model_dir, str) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "11": "model_dir = Path(model_dir) if not model_dir: return tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "12": "model_dir = Path(model_dir) assert tf_model_file is not None and tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "13": "model_dir = Path(model_dir) if not model_dir: tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "14": "model_dir = Path(model_dir) tf_model_file = str(model_dir / f\" { file_name }.tf_model\")",
      "15": "model_dir = Path(model_dir) tf_model_file = path(model_dir) / f\" { file_name }.tf_model\"",
      "16": "model_dir = Path(model_dir) if isinstance(tf_model_file, str): tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "17": "model_dir = Path(model_dir) return tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "18": "model_dir = Path(model_dir) if isinstance(model_dir, str) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "19": "model_dir = Path(model_dir) str = str tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "20": "model_dir = Path(model_dir) assert model_dir is not None and tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "21": "model_dir = Path(model_dir) if isinstance(tf_model_file, str) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "22": "model_dir = Path(model_dir) str(tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "23": "model_dir = Path(model_dir) assert model_dir = str(model_dir) tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "24": "model_dir = Path(model_dir) tf_model_file = tf_dir / f\" { file_name }.tf_model\"",
      "25": "model_dir = Path(model_dir) assert f\" { file_name }.tf_model\"",
      "26": "model_dir = Path(model_dir) assert model_dir is not None, tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "27": "model_dir = Path(model_dir) tf_model_file = str(model_dir/f\" { file_name }.tf_model\"",
      "28": "model_dir = Path(model_dir) tf_model_file = str(model_dir)/f\" { file_name }.tf_model\"",
      "29": "model_dir = Path(model_dir) tf_model_file = model_dir or f\" { file_name }.tf_model\"",
      "30": "model_dir = Path(model_dir) var tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "31": "model_dir = Path(model_dir) tf_model_file = model_dir / str(f\" { file_name }.tf_model\")",
      "32": "model_dir = Path(model_dir) assert model_dir was not None tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "33": "model_dir = Path(model_dir) exports.tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "34": "model_dir = Path(model_dir) assert tf_model_file is not None tf_model_file = model_dir/f\" { file_name }.tf_model\"",
      "35": "model_dir = Path(model_dir) tf_model_file = str(model_dir/f\" { file_name }.tf_model\")",
      "36": "model_dir = Path(model_dir) tf_model_file = path(model_dir) f\" { file_name }.tf_model\"",
      "37": "model_dir = Path(model_dir) async tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "38": "model_dir = Path(model_dir) tf_model_file = model_dir / str(f\" { file_name }.tf_model\"",
      "39": "model_dir = Path(model_dir) tf_model_file = model_dir / str(f\" { file_name }.tf_model\")",
      "40": "model_dir = Path(model_dir) let tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "41": "model_dir = Path(model_dir) tf_model_file = path[model_dir] / f\" { file_name }.tf_model\"",
      "42": "model_dir = Path(model_dir) self.tf_model_file = model_dir/f\" { file_name }.tf_model\"",
      "43": "model_dir = Path(model_dir) assert model_dir tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "44": "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir / f\" { file_name \\.tf_model\"",
      "45": "model_dir = Path(model_dir) self._tf_model_file = model_dir / f\" { file_name }.tf_model\"",
      "46": "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir / f\" ^ file_name }.tf_model\"",
      "47": "model_dir = Path(model_dir) tf_model_file = root(model_dir) / f\" { file_name }.tf_model\"",
      "48": "model_dir = Path(model_dir) assert model_dir is not None tf_model_file = model_dir/f\" { file_name }.tf_model\"",
      "49": "model_dir = Path(model_dir) _tf_model_file = model_dir / f\" { file_name }.tf_model\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists + self.sets + self.dict_keys + self.dict_values\n\n",
    "target_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values\n\n",
    "warning_line": "        assert not self.lists + self.sets + self.dict_keys + self.dict_values",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.List[UserList]` and `typing.List[UserSet]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 464,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "# So if any list is non-empty, something went terribly wrong assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values"
    ],
    "correct": true,
    "top_five": {
      "0": "# So if any list is non-empty, something went terribly wrong assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values",
      "1": "# So if any list is non-empty, something went terribly wrong assert not self.lists or not self.sets or not self.dict_keys or not self.dict_values",
      "2": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys is not None assert self.dict_values",
      "3": "# So if any list is non-empty, something went terribly wrong assert not self.lists, not self.sets, not self.dict_keys, not self.dict_values",
      "4": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert self.dict_keys is not None assert self.dict_values",
      "5": "# So if any list is non-empty, something went terribly wrong assert not self.lists or not self.sets or not self.dict_keys or self.dict_values",
      "6": "# So if any list is non-empty, something went terribly wrong assert self.lists is not None assert not self.sets is not None assert self.dict_keys is not None assert self.dict_values",
      "7": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys and not self.dict_values",
      "8": "# So if any list is non-empty, something went terribly wrong assert not self.lists or self.sets or self.dict_keys or self.dict_values",
      "9": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys is not None assert not self.dict_values",
      "10": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys and self.dict_values",
      "11": "# So if any list is non-empty, something went terribly wrong assert self.lists are not None assert not self.sets are not None assert self.dict_keys are not None assert self.dict_values",
      "12": "# So if any list is non-empty, something went terribly wrong assert not self.lists if not self.sets if not self.dict_keys if not self.dict_values",
      "13": "# So if any list is non-empty, something went terribly wrong assert not self.lists or sets or self.dict_keys or self.dict_values",
      "14": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert self.dict_keys and self.dict_values",
      "15": "# So if any list is non-empty, something went terribly wrong assert not self.lists or self.sets or not self.dict_keys or self.dict_values",
      "16": "# So if any list is non-empty, something went terribly wrong assert not self.lists.sets.dict_keys.dict_values",
      "17": "# So if any list is non-empty, something went terribly wrong assert not not self.lists and not self.sets and not self.dict_keys and not self.dict_values",
      "18": "# So if any list is non-empty, something went terribly wrong assert not self.lists, self.sets, self.dict_keys, self.dict_values",
      "19": "# So if any list is non-empty, something went terribly wrong assert self.lists is not None assert not self.sets is not None assert self.dict_keys and self.dict_values",
      "20": "# So if any list is non-empty, something went terribly wrong assert self.lists is not None assert self.sets is not None assert self.dict_keys is not None assert self.dict_values",
      "21": "# So if any list is non-empty, something went terribly wrong assert if not self.lists is not None assert not self.sets is not None assert self.dict_keys is not None assert self.dict_values",
      "22": "# So if any list is non-empty, something went terribly wrong assert not self.lists && self.sets + self.dict_keys + self.dict_values",
      "23": "# So if any list is non-empty, something went terribly wrong assert not self.lists and self.sets and not self.dict_keys and self.dict_values",
      "24": "# So if any list is non-empty, something went terribly wrong assert not self.lists but not self.sets and not self.dict_keys and not self.dict_values",
      "25": "# So if any list is non-empty, something went terribly wrong assert self.lists are not None assert self.sets are not None assert self.dict_keys are not None assert self.dict_values",
      "26": "# So if any list is non-empty, something went terribly wrong assert not self.lists are not None assert not self.sets are not None assert self.dict_keys are not None assert self.dict_values",
      "27": "# So if any list is non-empty, something went terribly wrong assert self.lists are not None assert not self.sets is not None assert self.dict_keys is not None assert self.dict_values",
      "28": "# So if any list is non-empty, something went terribly wrong assert not self.lists: assert not self.sets: assert not self.dict_keys: assert not self.dict_values",
      "29": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert self.dict_keys is not None assert not self.dict_values",
      "30": "# So if any list is non-empty, something went terribly wrong assert not self.lists, but self.sets, not self.dict_keys, not self.dict_values",
      "31": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None and not self.sets is not None and not self.dict_keys is not None and not self.dict_values",
      "32": "# So if any list is non-empty, something went terribly wrong assert self.lists are not None assert not self.sets is not None assert self.dict_keys are not None assert self.dict_values",
      "33": "# So if any list is non-empty, something went terribly wrong assert not self.lists as well as self.sets as well as self.dict_keys and self.dict_values",
      "34": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys or self.dict_values",
      "35": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None and not self.sets is not None and not self.dict_keys is not not None and not self.dict_values",
      "36": "# So if any list is non-empty, something went terribly wrong assert not self.lists or if not self.sets or self.dict_keys or self.dict_values",
      "37": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert self.dict_keys and not self.dict_values",
      "38": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None assert not self.sets is not None assert not self.dict_keys is not None and self.dict_values",
      "39": "# So if any list is non-empty, something went terribly wrong assert self.lists are not None assert not self.sets are not None assert self.dict_keys is not None assert self.dict_values",
      "40": "# So if any list is non-empty, something went terribly wrong assert not self.lists or sets or not self.dict_keys or self.dict_values",
      "41": "# So if any list is non-empty, something went terribly wrong assert not self.lists + self.sets + self.dict_keys + self.dict_values",
      "42": "# So if any list is non-empty, something went terribly wrong assert assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values",
      "43": "# So if any list is non-empty, something went terribly wrong assert not self.lists + not self.sets + not self.dict_keys + not self.dict_values",
      "44": "# So if any list is non-empty, something went terribly wrong assert not self.lists or isinstance(self.sets or isinstance(self.dict_keys)) or self.dict_values",
      "45": "# So if any list is non-empty, something went terribly wrong assert not self.lists is not None and not self.sets is not None and not self.dict_keys and not self.dict_values",
      "46": "# So if any list is non-empty, something went terribly wrong assert not self.lists or set or self.dict_keys or self.dict_values",
      "47": "# So if any list is non-empty, something went terribly wrong assert not self.lists or set is not None assert not self.dict_keys or self.dict_values",
      "48": "# So if any list is non-empty, something went terribly wrong assert not self.lists are not None assert not self.sets are not None assert self.dict_keys is not None assert self.dict_values",
      "49": "# So if any list is non-empty, something went terribly wrong assert not self.lists as well as self.sets as well as self.dict_keys as well as self.dict_values"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def _check_params(self) -> None:\n        if self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "target_code": "    def _check_params(self) -> None:\n        if self.step is not None and self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_line": "        if self.eps <= 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 148,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "target_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37^",
    "target_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "predictions": [
      "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")"
    ],
    "correct": false,
    "top_five": {
      "0": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "1": "def _check_params(self) -> None: if self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "2": "def _check_params(self) -> None: if self.step is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "3": "def _check_params(self) -> None: if self.steps is not None and self.eps is not None and self.steps = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "4": "def _check_params(self) -> None: if self.step is not None and self.eps is not None if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "5": "def _check_params(self) -> None: assert self.step is not None if self.eps = 0: raise ValueError(\"Step size must be strictly positive.\")",
      "6": "def _check_params(self) -> None: if self.step == 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps == 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "7": "def _check_params(self) -> None: assert self.step is not None if self.eps is not None if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "8": "def _check_params(self) -> None: if self.step == None: raise ValueError(\"Step size must be strictly positive.\") if self.eps == None: raise ValueError(\"Value of eps must be strictly positive.\")",
      "9": "def _check_params(self) -> None: assert self.step is not None and self.eps = 0: raise ValueError(\"Step size must be strictly positive.\")",
      "10": "def _check_params(self) -> None: if self.step is not None and self.eps = 0: raise ValueError(\"Step size must be strictly positive.\")",
      "11": "def _check_params(self) -> None: assert self.step is not None and self.eps is not None if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "12": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "13": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "14": "def _check_params(self) -> None: if self.step == 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "15": "def _check_params(self) -> None: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "16": "def _check_params(self) -> None: if self.steps is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "17": "def _check_params(self) -> None: assert self.step is not None but instead raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "18": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "19": "def _check_params(self) -> None: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "20": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "21": "def _check_params(self) -> None: if self.step is not None and self.eps = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "22": "def _check_params(self) -> None: if self.step == False: raise ValueError(\"Step size must be strictly positive.\") if self.eps == False: raise ValueError(\"Value of eps must be strictly positive.\")",
      "23": "def _check_params(self) -> None: if self.step >= 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps >= 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "24": "def _check_params(self) -> None: if self.step is not None but self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "25": "def _check_params(self) -> None: if self.steps.length == 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps.length == 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "26": "def _check_params(self) -> None: if self.steps = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "27": "def _check_params(self) -> None: if self.step is not None and self.eps has no Step size: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "28": "def _check_params(self) -> None: if self.step is not None and self.eps = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "29": "def _check_params(self) -> None: if self.step is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "30": "def _check_params(self) -> None: if self.step is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "31": "def _check_params(self) -> None: if self.step is not None and self.eps is not None if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "32": "def _check_params(self) -> None: if self.steps is not None and self.eps is not None if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "33": "def _check_params(self) -> None: if self.step: raise ValueError(\"Step size must be strictly positive.\") if self.eps: raise ValueError(\"Value of eps must be strictly positive.\")",
      "34": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not none and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "35": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\")",
      "36": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "37": "def _check_params(self) -> None: if self.step is not None: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None: raise ValueError(\"Value of eps must be strictly positive.\")",
      "38": "def _check_params(self) -> None: if self.steps is not None and self.eps is not None and self.steps = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "39": "def _check_params(self) -> None: if self.step is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "40": "def _check_params(self) -> None: raise ValueError(\"Step size must be strictly positive.\") if self.eps == 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "41": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") raise ValueError(\"Value of eps must be strictly positive.\")",
      "42": "def _check_params(self) -> None: self.step = None if self.eps is not None if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "43": "def _check_params(self) -> None: if self.steps.length == 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps.length = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "44": "def _check_params(self) -> None: if self.step == Positive: raise ValueError(\"Step size must be strictly positive.\") if self.eps == Positive: raise ValueError(\"Value of eps must be strictly positive.\")",
      "45": "def _check_params(self) -> None: if self.step = 0: raise ValueError('Step size must be strictly positive.') if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "46": "def _check_params(self) -> None: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None if self.eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "47": "def _check_params(self) -> None: if self.step = None: raise ValueError(\"Step size must be strictly positive.\") if self.eps = None: raise ValueError(\"Value of eps must be strictly positive.\")",
      "48": "def _check_params(self) -> None: if self.step is not None and self.eps is not None and self.step = 0: raise ValueError(\"Step size must be strictly positive.\") if self.eps is not None and eps = 0: raise ValueError(\"Value of eps must be strictly positive.\")",
      "49": "def _check_params(self) -> None: raise ValueError(\"Step size must be strictly positive.\") if self.eps == None: raise ValueError(\"Value of eps must be strictly positive.\")"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream())\n",
    "target_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream)\n",
    "warning_line": "        return aiter(self._stream())",
    "linter_report": {
      "rule_id": "Call error [29]",
      "message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1123,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "faust-streaming/faust",
    "source_filename": "faust/agents/agent.py",
    "target_filename": "faust/agents/agent.py",
    "source_changeid": "51de861ada304a1763a4872811274818a8ee0851^",
    "target_changeid": "51de861ada304a1763a4872811274818a8ee0851",
    "predictions": [
      "def __aiter__(self) -> AsyncIterator: return aiter(self._stream)"
    ],
    "correct": true,
    "top_five": {
      "0": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream)",
      "1": "def __aiter__(self) -> AsyncIterator: assert self._stream is not None return aiter(self._stream())",
      "2": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams[0])",
      "3": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream())",
      "4": "def __aiter__(self) -> AsyncIterator: assert self._stream is not None return aiter(self._stream)",
      "5": "def __aiter__(self) -> AsyncIterator: return assert self._stream is not None aiter(self._stream())",
      "6": "def __aiter__(self) -> AsyncIterator: return aiter(self._str())",
      "7": "def __aiter__(self) -> AsyncIterator: return aiter(str(self._stream))",
      "8": "def __aiter__(self) -> AsyncIterator: if self._stream is not None return aiter(self._stream)",
      "9": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams())",
      "10": "def __aiter__(self) -> AsyncIterator: if self._stream is not None: return aiter(self._stream)",
      "11": "def __aiter__(self) -> AsyncIterator: if self._stream is not None return aiter(self._stream())",
      "12": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream or [])",
      "13": "def __aiter__(self) -> AsyncIterator: aiter(self._stream)",
      "14": "def __aiter__(self) -> AsyncIterator: throw new Error('faust.types.streams.StreamT[Any]') return aiter(self._stream())",
      "15": "def __aiter__(self) -> AsyncIterator: throw new Error('faust.types.streams.StreamT[Any]') return aiter(self._stream)",
      "16": "def __aiter__(self) -> AsyncIterator: return assert self._stream is not None aiter(self._stream)",
      "17": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream, '')",
      "18": "def __aiter__(self) -> AsyncIterator: return aiter()",
      "19": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams[1])",
      "20": "def __aiter__(self) -> AsyncIterator: throw new Error('faust.types.streams.') return aiter(self._stream)",
      "21": "def __aiter__(self) -> AsyncIterator: if self._stream is not None: return aiter(self._stream())",
      "22": "def __aiter__(self) -> AsyncIterator: self._stream = aiter(self._stream)",
      "23": "def __aiter__(self) -> AsyncIterator: aiter(self._stream) return aiter(self._stream)",
      "24": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream if aiter)",
      "25": "def __aiter__(self) -> AsyncIterator: return assert self._stream is not None",
      "26": "def __aiter__(self) -> AsyncIterator: if self._streams is not None: return aiter(self._stream)",
      "27": "def __aiter__(self) -> AsyncIterator: if self._streams is not None: return aiter(self._stream())",
      "28": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream.str())",
      "29": "def __aiter__(self) -> AsyncIterator: assert self._stream aiter(self._stream)",
      "30": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream if aiter() is not None)",
      "31": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream if aiter is not None)",
      "32": "def __aiter__(self) -> AsyncIterator: return aiter(stream)",
      "33": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream, str)",
      "34": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream, [])",
      "35": "def __aiter__(self) -> AsyncIterator: throw new Error('faust.types.streams.Any') return aiter(self._stream)",
      "36": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams[str])",
      "37": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams[0], aiter(self._streams[1]))",
      "38": "def __aiter__(self) -> AsyncIterator: assert isinstance(self._stream, aiter(self._stream))",
      "39": "def __aiter__(self) -> AsyncIterator: str = aiter(self._stream())",
      "40": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream if self._stream is not None)",
      "41": "def __aiter__(self) -> AsyncIterator: throw new Error('faust.types.streams.') return aiter(self._stream())",
      "42": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream is not None)",
      "43": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream.result)",
      "44": "def __aiter__(self) -> AsyncIterator: return aiter(self._streams[i])",
      "45": "def __aiter__(self) -> AsyncIterator: assert self.isinstance(aiter(self._stream))",
      "46": "def __aiter__(self) -> AsyncIterator: return aiter(_self._stream)",
      "47": "def __aiter__(self) -> AsyncIterator: assert self.isinstance(aiter(self._stream)) return aiter(self._stream)",
      "48": "def __aiter__(self) -> AsyncIterator: return str(aiter(self._stream()))",
      "49": "def __aiter__(self) -> AsyncIterator: return aiter(self._stream).result()"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  }
]