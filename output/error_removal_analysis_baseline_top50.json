[
  {
    "repo": "operatorai/modelstore",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/operatorai-modelstore",
    "commit": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `y_test` is used but not defined in the current scope.",
    "warning_line": 42,
    "pred_top-1": {
      "pred": "# Run some test predictions \n var results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    var results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# Run some test predictions \n __results = mean_squared_error(__results, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    __results = mean_squared_error(__results, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# Run some test predictions \n _y_test_results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test_results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# Run some test predictions \n _y_test_error = _y_test_error \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test_error = _y_test_error\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <DED> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\nresults = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, X_test): \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, X_test):\n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, X_test): \n <DED> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, X_test):\nresults = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "# Run some test predictions \n _y_test = _y_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test = _y_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n    \n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "# Run some test predictions \n if isinstance(y_test, model.predict(X_test)): \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if isinstance(y_test, model.predict(X_test)):\n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "# Run some test predictions \n _y_test__ = _y_test__ \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test__ = _y_test__\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# Run some test predictions \n y_test_results = mean_squared_error(x_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test_results = mean_squared_error(x_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "# Run some test predictions \n x_predict = x_predict \n results = mean_squared_error(x_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    x_predict = x_predict\n    results = mean_squared_error(x_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "# Run some test predictions \n y_test_results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test_results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# Run some test predictions \n _y_test = x_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test = x_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "# Run some test predictions \n __six = __six \n results = mean_squared_error(__six, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    __six = __six\n    results = mean_squared_error(__six, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "# Run some test predictions \n __six = y_test \n results = mean_squared_error(__six, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    __six = y_test\n    results = mean_squared_error(__six, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test, X_test): \n \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test, X_test):\n        \n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "# Run some test predictions \n _y_test = y_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test = y_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "# Run some test predictions \n _y_test = X_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test = X_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test, X_test): \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test, X_test):\n            results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "# Run some test predictions \n _y_test_error = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test_error = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "# Run some test predictions \n _y_test__ = X_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test__ = X_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "# Run some test predictions \n _y_test_ = _y_test_ \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test_ = _y_test_\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test, X_test): \n <DED> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test, X_test):\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# Run some test predictions \n _y_test = Y_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test = Y_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "# Run some test predictions \n _y_test__ = mean_squared_error(_y_test, model.predict(X_test)) \n results = mean_squared_error(_y_test__, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test__ = mean_squared_error(_y_test, model.predict(X_test))\n    results = mean_squared_error(_y_test__, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# Run some test predictions \n python_results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    python_results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# Run some test predictions \n _y_test__ = x_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test__ = x_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# Run some test predictions \n _y_test__ = mean_squared_error(_y_test, model.predict(X_test)) \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test__ = mean_squared_error(_y_test, model.predict(X_test))\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# Run some test predictions \n __results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    __results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# Run some test predictions \n _y_test_ = X_test \n results = mean_squared_error(_y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    _y_test_ = X_test\n    results = mean_squared_error(_y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "# Run some test predictions \n pytorch_results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    pytorch_results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test): \n \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test):\n        \n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test): \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test):\n            results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# Run some test predictions \n y_test_model = Y_test \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test_model = Y_test\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test): \n <DED> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test):\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "# Run some test predictions \n if not y_test: \n <DED> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not y_test:\nresults = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# Run some test predictions \n pytorch_error = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    pytorch_error = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# Run some test predictions \n y_test_model = y_test \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test_model = y_test\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "# Run some test predictions \n y_test_results = mean_squared_error(model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test_results = mean_squared_error(model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# Run some test predictions \n y_test.results = mean_squared_error(model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test.results = mean_squared_error(model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "# Run some test predictions \n y_test_error = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    y_test_error = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "# Run some test predictions \n if not y_test: \n <IND> results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not y_test:\n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test, X_test): \n \n var results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test, X_test):\n        \n        var results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "# Run some test predictions \n x_predict = x_predict \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    x_predict = x_predict\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test, X_test): \n <IND> var results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test, X_test):\n            var results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "# Run some test predictions \n if not isinstance(y_test, model.predict(X_test)): \n <IND> if not isinstance(y_test, x_test): \n \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    if not isinstance(y_test, model.predict(X_test)):\n        if not isinstance(y_test, x_test):\n        \n        results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# Run some test predictions \n __results = mean_squared_error(__result, model.predict(X_test)) \n",
      "pred_parsed": "    # Run some test predictions\n    __results = mean_squared_error(__result, model.predict(X_test))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "fbchat-dev/fbchat",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/fbchat-dev-fbchat",
    "commit": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "filename": "fbchat/_group.py",
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `admin` is used but not defined in the current scope.",
    "warning_line": 75,
    "pred_top-1": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._payload_post) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._payload_post)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids, status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids, status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id_id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id_id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n            def _admin_status(self, user_ids: Iterable[str], status: bool):\n                data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._payload_post) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid: self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._payload_post)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid: self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n <DED>",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n        \n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Optional[Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Optional[Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n <IND>",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n        \n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n            def _admin_status(self, user_ids: Iterable[str], status: bool):\n                data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.data) \n \n <DED> def _admin_status(self, user_ids, status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.data)\n        \n    def _admin_status(self, user_ids, status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status_str(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status_str(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", payload_post) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", payload_post)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", _data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", _data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", user_ids) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", user_ids)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool) -> str: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool) -> str:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id_id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid: self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id_id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid: self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._payload_post) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._payload_post)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids, status=bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids, status=bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool) -> bool: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool) -> bool:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.data)\n        \n            def _admin_status(self, user_ids: Iterable[str], status: bool):\n                data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", \"data\") \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", \"data\")\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id_payload_post) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id_payload_post)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status_ids: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status_ids:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id) \n \n <DED> def _admin_status(self, user_ids, status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id)\n        \n    def _admin_status(self, user_ids, status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\" + user_ids, data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\" + user_ids, data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool) -> None: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool) -> None:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status=bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Iterable[str], status=bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status[self, user_ids: Iterable[str], status: bool]: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status[self, user_ids: Iterable[str], status: bool]:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status = (self, user_ids: Iterable[str], status: bool) =>: \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status = (self, user_ids: Iterable[str], status: bool) =>:\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._id_id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid: self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._id_id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid: self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id_count) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id_count)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._payload_post) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid: self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._payload_post)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid: self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Optional[Iterable[str]], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n        \n    def _admin_status(self, user_ids: Optional[Iterable[str]], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id)\n        \n            def _admin_status(self, user_ids: Iterable[str], status: bool):\n                data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._id_id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._id_id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._content_id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._content_id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._payload_post) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._payload_post)\n        \n            def _admin_status(self, user_ids: Iterable[str], status: bool):\n                data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self._payload_post) \n \n <DED> def _admin_status(self, user_ids, status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self._payload_post)\n        \n    def _admin_status(self, user_ids, status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "data = { \"uid\": user_id, \"tid\": self.id } \n j = self._payload_post(\"/chat/remove_participants/\", self.id_id) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = { \"add\": user_id, \"thread_fbid\": self.id } \n \n \n",
      "pred_parsed": "        data = { \"uid\": user_id, \"tid\": self.id }\n        j = self._payload_post(\"/chat/remove_participants/\", self.id_id)\n        \n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = { \"add\": user_id, \"thread_fbid\": self.id }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pandas-dev/pandas",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pandas-dev-pandas",
    "commit": "6c304c78d6a0559525abe16f03465d275c516455",
    "filename": "scripts/bench_join_multi.py",
    "source_code": "key1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 10,
    "pred_top-1": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range[N]] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range[N]]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n key1 = str([rands(10) for _ in range(N)]) \n key2 = str([rands(10) for _ in range(N)]) \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = str([rands(10) for _ in range(N)])\nkey2 = str([rands(10) for _ in range(N)])\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n    zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n key1 = izip(rands(10) for _ in range(N)) \n key2 = izip(rands(10) for _ in range(N)) \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = izip(rands(10) for _ in range(N))\nkey2 = izip(rands(10) for _ in range(N))\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n key1 = izip(rands(10) for _ in range(N)) \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = izip(rands(10) for _ in range(N))\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n <IND>",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n <DED>",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n key1 = izip([rands(10) for _ in range(N)]) \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = izip([rands(10) for _ in range(N)])\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] <DED> \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n _key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, _2) \n \n",
      "pred_parsed": "_key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, _2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) <DED> \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n key1 = [rands(10) for _ in scope(N)] \n key2 = [rands(10) for _ in scope(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in scope(N)]\nkey2 = [rands(10) for _ in scope(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] <DED> key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]  key2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n <DED> key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] <IND> \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\n    key2 = [rands(10) for _ in range(N)]\n    zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] <IND> key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]  key2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) <IND> \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\n    zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n key1 = (rands(10) for _ in range(N)) \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = (rands(10) for _ in range(N))\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n _key1 = [rands(10) for _ in range(N)] \n _key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, _2) \n \n",
      "pred_parsed": "_key1 = [rands(10) for _ in range(N)]\n_key2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, _2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n key1 = izip([rands(10) for _ in range(N)]) \n key2 = izip([rands(10) for _ in range(N)]) \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = izip([rands(10) for _ in range(N)])\nkey2 = izip([rands(10) for _ in range(N)])\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n let key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "let key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n _key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "_key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n key1 = list[rands(10) for _ in range(N)] \n key2 = list[rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = list[rands(10) for _ in range(N)]\nkey2 = list[rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n key1 = str([rands(10) for _ in range(N)]) \n key2 = str([rands(10) for _ in range(N)) \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = str([rands(10) for _ in range(N)])\nkey2 = str([rands(10) for _ in range(N))\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n key1 = [rands(10) for _ in Range(N)] \n key2 = [rands(10) for _ in Range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in Range(N)]\nkey2 = [rands(10) for _ in Range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n db_key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "db_key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n if not key1: \n \n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "if not key1:\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n key1 = [rands(10) for _ in range[N]] \n key2 = [rands(10) for _ in range[N]] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range[N]]\nkey2 = [rands(10) for _ in range[N]]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\n\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n key1 = tuple([rands(10) for _ in range(N)]) \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = tuple([rands(10) for _ in range(N)])\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n _key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, _key2) \n \n",
      "pred_parsed": "_key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, _key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n <IND> key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\n    key2 = [rands(10) for _ in range(N)]\n    \n    zipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n _key1 = [rands(10) for _ in range(N)] \n _key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, _key2) \n \n",
      "pred_parsed": "_key1 = [rands(10) for _ in range(N)]\n_key2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, _key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n key1_ = [rands(10) for _ in range(N)] \n key2_ = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1_ = [rands(10) for _ in range(N)]\nkey2_ = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n key1 = _ in range(N) \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = _ in range(N)\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n var key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "var key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n tuple = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "tuple = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n ids = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "ids = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n dc = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "dc = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zip = izip(key1, key2) \n \n",
      "pred_parsed": "key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzip = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n range_key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "range_key1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n key1= [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1= [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n key1= [rands(10) for _ in range(N)] \n key2= [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "key1= [rands(10) for _ in range(N)]\nkey2= [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n tuple = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(tuple, key1, key2) \n \n",
      "pred_parsed": "tuple = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(tuple, key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n id = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "id = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n number = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "pred_parsed": "number = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "openstack/ironic",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/openstack-ironic",
    "commit": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "filename": "ironic/api/controllers/v1/node.py",
    "source_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):",
    "target_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `unicode` is used but not defined in the current scope.",
    "warning_line": 73,
    "pred_top-1": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, null, node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, null, node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, w) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, w)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wcode) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wcode)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wpc) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wpc)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, text) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, text)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, __node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, __node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wicode) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wicode)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan.text) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan.text)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, 'uuid') \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, 'uuid')\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, \"\") \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, \"\")\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_name, node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_name, node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_text) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_text)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, winfo.node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, winfo.node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, 'power') \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, 'power')\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, white) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, white)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, '') \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, '')\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wp.node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wp.node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, writable) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, writable)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wc) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wc)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, uuid) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, uuid)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_icode) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_icode)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, self.node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, self.node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, np.node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, np.node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, []) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, [])\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, str) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, str)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, 'Power') \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, 'Power')\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, self._node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, self._node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, self.icode) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, self.icode)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, unicode) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan.text_type) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan.text_type)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, __dirname, node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, __dirname, node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wp.stringify(unicode)) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wp.stringify(unicode))\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wpy) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wpy)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, \"\") \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, \"\")\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, self._id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, self._id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wtype)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wuicode) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wuicode)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wdoc) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wdoc)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(State, node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(State, node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_name) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_name)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, elif node_id) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, elif node_id)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, None) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, None)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wp.code) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wp.code)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, '#') \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, '#')\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_icode_type) \n def get(self, node_id): \n",
      "pred_parsed": "    # GET nodes/uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, wsme_pecan_icode_type)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "inasafe/inasafe",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/inasafe-inasafe",
    "commit": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_code": "    @pyqtSignature('')\n    def run_selected_clicked(self):",
    "target_code": "\n    <DED>@pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `pyqtSignature` is used but not defined in the current scope.",
    "warning_line": 570,
    "pred_top-1": {
      "pred": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> @type('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @type('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> @pyqtSignature() \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature()\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n <DED> @signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> @signature[''] \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @signature['']\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> @t.pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t.pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> @Signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @Signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> @t.signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t.signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> @pyqt_signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqt_signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <IND> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "\n <DED> @qtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @qtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> @typeof @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @typeof @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> @Signature[''] \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @Signature['']\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> @opt_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @opt_pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> @yae_signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @yae_signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> @fyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @fyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> @vald_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @vald_pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> @pyqt('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqt('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> @path.pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @path.pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> @t_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t_pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> @t.Signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t.Signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> @pyqtSignal('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignal('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> @typeof pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @typeof pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> @eth_pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @eth_pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> @t_signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t_signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <IND> @type('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @type('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> @npyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @npyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> @twitter.Signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @twitter.Signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> @pyqtSignature(str('')) \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature(str(''))\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "\n <DED> @str('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @str('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> @pyqt.Signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqt.Signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> @t('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> @pyqtSecret('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSecret('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> @qt_signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @qt_signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> @msg('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @msg('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n \n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "\n <DED> @signature_selected('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @signature_selected('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> @fyqt_signature('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @fyqt_signature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> @t_selected_clicked(self) \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @t_selected_clicked(self)\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> @pyqtAuthentication('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtAuthentication('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> @query('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @query('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> @typeof @pyqtSignature = '' \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @typeof @pyqtSignature = ''\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> @pyqtSignature[''] \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature['']\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> @pyqtStr('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtStr('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> @signature__('') \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @signature__('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <IND> @pyqtSignature() \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqtSignature()\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "\n <DED> def run_selected_clicked(self): \n",
      "pred_parsed": "    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> @pyqt() \n def run_selected_clicked(self): \n",
      "pred_parsed": "    @pyqt()\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): <IND>",
      "pred_parsed": "    @pyqtSignature('')\n        def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): <DED>",
      "pred_parsed": "    @pyqtSignature('')\ndef run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/convection/exponential2D/mesh2D.py",
    "source_code": "    raw_input('finished')",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "\n input('finished') \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n input('finished') \n \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n input('finished') \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n input('finished') \n \n \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n input('finished') \n <DED> \n",
      "pred_parsed": "    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n input('finished') \n <IND> \n",
      "pred_parsed": "    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n input('finished') \n \n <DED> \n",
      "pred_parsed": "    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n input('finished') \n \n <IND> \n",
      "pred_parsed": "    input('finished')\n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n input('finished') \n \n <IND>",
      "pred_parsed": "    input('finished')\n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n input('finished') \n <IND>",
      "pred_parsed": "    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n input('finished') \n \n \n \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n input('finished') \n <DED> \n \n",
      "pred_parsed": "    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n input('finished') \n \n \n <DED> \n",
      "pred_parsed": "    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n input('finished') \n \n <DED> \n \n",
      "pred_parsed": "    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n input('finished') \n <IND> \n \n",
      "pred_parsed": "    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n input('finished') \n \n \n <IND> \n",
      "pred_parsed": "    input('finished')\n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n input('finished') \n \n <IND> \n \n",
      "pred_parsed": "    input('finished')\n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n input('finished') \n \n <DED>",
      "pred_parsed": "    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n input('finished') \n <DED>",
      "pred_parsed": "    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n input('finished') \n \n <DED> <DED> \n",
      "pred_parsed": "    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n input('finished') \n \n <IND> <DED> \n",
      "pred_parsed": "    input('finished')\n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n input('finished') \n <IND> <DED> \n",
      "pred_parsed": "    input('finished')\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n input('finished') \n <IND> <IND> \n",
      "pred_parsed": "    input('finished')\n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n input('finished') \n <DED> <DED> \n",
      "pred_parsed": "    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n input('finished') \n \n <IND> <IND> \n",
      "pred_parsed": "    input('finished')\n    \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n input('finished') \n \n <DED> <IND> \n",
      "pred_parsed": "    input('finished')\n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n input('finished') \n \n \n <IND>",
      "pred_parsed": "    input('finished')\n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n input('finished') \n <DED> <IND> \n",
      "pred_parsed": "    input('finished')\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n input('finished') \n <IND> <DED> \n \n",
      "pred_parsed": "    input('finished')\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n input('finished') \n \n \n \n <DED> \n",
      "pred_parsed": "    input('finished')\n    \n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n input('finished') \n \n \n <DED> \n \n",
      "pred_parsed": "    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n input('finished') \n \n \n \n \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n input('finished') \n \n \n \n <IND> \n",
      "pred_parsed": "    input('finished')\n    \n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n input('finished') \n <IND> \n <DED> \n",
      "pred_parsed": "    input('finished')\n        \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n input('finished') \n \n \n <DED>",
      "pred_parsed": "    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n input('finished') \n <IND> \n <IND> \n",
      "pred_parsed": "    input('finished')\n        \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n input('finished') \n \n \n <IND> <DED> \n",
      "pred_parsed": "    input('finished')\n    \n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n input('finished') \n <DED> \n \n \n",
      "pred_parsed": "    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "\n input('finished') \n <DED> \n <DED> \n",
      "pred_parsed": "    input('finished')\n\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n input('finished') \n <IND> \n \n \n",
      "pred_parsed": "    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n input('finished') \n \n <IND> <DED> \n \n",
      "pred_parsed": "    input('finished')\n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n input('finished') \n \n \n <IND> \n \n",
      "pred_parsed": "    input('finished')\n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n input('finished') \n \n \n <DED> <DED> \n",
      "pred_parsed": "    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n input('finished') \n \n <DED> \n <DED>",
      "pred_parsed": "    input('finished')\n    \n\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n input('finished') \n \n \n <DED> <IND> \n",
      "pred_parsed": "    input('finished')\n    \n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<DED> input('finished') \n \n",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n input('finished') \n \n \n <IND> <IND> \n",
      "pred_parsed": "    input('finished')\n    \n    \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n input('finished') \n \n <IND> \n <DED> \n",
      "pred_parsed": "    input('finished')\n    \n        \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n input('finished') \n <DED> \n <IND> \n",
      "pred_parsed": "    input('finished')\n\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n input('finished') \n \n <IND> \n <IND> \n",
      "pred_parsed": "    input('finished')\n    \n        \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/levelSet/distanceFunction/square.py",
    "source_code": "    viewer.plot()\n    raw_input('finished')",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 70,
    "pred_top-1": {
      "pred": "viewer.plot() \n input('finished') \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "viewer.plot() \n input('finished') \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "viewer.plot() \n input('finished') \n <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "viewer.plot() \n input('finished') \n <IND> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "viewer.plot() \n input('finished') \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "viewer.plot() \n input('finished') \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "viewer.plot() \n input('finished') \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <IND> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "viewer.plot() \n input('finished') \n <DED> \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "viewer.plot() \n input('finished') \n <IND> \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n        \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n        \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n <IND> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "viewer.plot() \n input('finished') \n \n <DED> <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "viewer.plot() \n input('finished') \n \n <IND> <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <IND> <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> \n \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n <DED> <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <IND> <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> \n <DED> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <IND> \n <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n        \n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "viewer.plot() \n input('finished') \n \n \n <DED> <DED> \n \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "viewer.plot() \n input('finished') \n \n \n \n <DED> <IND> \n",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n    \n    \n    \n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "lnbits/lnbits-legend",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/clightning.py",
    "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None",
    "target_code": "        if not r.ok:\n            <IND>return PaymentStatus(None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `payment_hash` is used but not defined in the current scope.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n                payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n                payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> _payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = _payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        _payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = _payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n            \n            payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n            payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n                payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n                payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n            \n            payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n            payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_hash = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments_hash = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash]\n        payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment = p_hash_payments \n if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment = p_hash_payments\n        if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> bash_payments = [p for p in r.json()[\"payments\"] if p[\"bash_payment\"] == bash_payments] \n payment = bash_payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        bash_payments = [p for p in r.json()[\"payments\"] if p[\"bash_payment\"] == bash_payments]\n        payment = bash_payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment = p_hash[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment = p_hash[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> sys.payments = [p for p in r.json()[\"payments\"] if p[\"sys.payment_hash\"] == sys.payment_hash] \n payment = sys.payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        sys.payments = [p for p in r.json()[\"payments\"] if p[\"sys.payment_hash\"] == sys.payment_hash]\n        payment = sys.payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment = p_hash_payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment = p_hash_payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n                payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash]\n                payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = p.for_p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = p.for_p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in str()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in str()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n                payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n                payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n            \n            payments = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash]\n            payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment_payments = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment_payments = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments: r.json()[\"payments\"] = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments: r.json()[\"payments\"] = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n            \n            payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n            payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n            \n            var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n            payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = r.json()[\"payments\"](p for p in r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = r.json()[\"payments\"](p for p in r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> bills = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        bills = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = p_hash_payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = p_hash_payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in _r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in _r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment_payments = p_hash_payments \n if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment_payments = p_hash_payments\n        if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> _payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = _payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        _payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = _payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment = p_payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment = p_payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n                var payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n                payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments_hash[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment_hash = payments_hash[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> _payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = _payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        _payments_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = _payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_hash = (p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment_hash = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments_hash = (p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment_hash = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in p.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in p.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p.payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p.payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p.hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p.hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in t in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in t in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash = r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash \n payment = p_hash[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash = r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash\n        payment = p_hash[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments_hash = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments_hash = [p for p in str(r.json()[\"payments\"]) if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> _payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = _payment_hash[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        _payment_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = _payment_hash[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payments = payments[0] if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payments = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash] \n payment = p_hash if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == p_hash]\n        payment = p_hash if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = p_hash_payments \n if payments else None \n",
      "pred_parsed": "        if not r.ok:\n            return PaymentStatus(r, None)\n        p_hash_payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = p_hash_payments\n        if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "cyverse/atmosphere",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/cyverse-atmosphere",
    "commit": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "filename": "api/v2/views/platform_type.py",
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    <IND>",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `viewsets` is used but not defined in the current scope.",
    "warning_line": 7,
    "pred_top-1": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthController \n \n class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthController\n\nclass PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyModelViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet, viewsets.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet, viewsets.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthController \n \n class PlatformTypeViewSet(AuthController.viewsets.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthController\n\nclass PlatformTypeViewSet(AuthController.viewsets.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyModelViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <DED> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthTypeSerializer.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthTypeSerializer.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthSet.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <IND> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n    from api.v2.base import AuthViewSet\n    \n    class PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <DED> from api.v2.base import AuthController \n \n class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthController\n\nclass PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n \n from api.v2.base import AuthController \n \n class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n\nfrom api.v2.base import AuthController\n\nclass PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <IND> from api.v2.base import AuthController \n \n class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n    from api.v2.base import AuthController\n    \n    class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyModelSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyModelSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <DED> from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <IND> from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n    from api.v2.base import AuthSet\n    \n    class PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <DED> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet <DED> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet  from api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet <DED> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet  from api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <DED> from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyModelViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <IND> from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n    from api.v2.base import AuthViewSet\n    \n    class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nfrom api.v2.base import AuthReadOnlyModelViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n from api.v2.base import AuthViewSet \n class PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(AuthViewSet.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n \n from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n\nfrom api.v2.base import AuthReadOnlyModelViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n from api.v2.base import AuthViewSet \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nfrom api.v2.base import AuthViewSet\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n class PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthSet\n\nclass PlatformTypeViewSet(AuthController.ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <IND> from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n    from api.v2.base import AuthReadOnlyModelViewSet\n    \n    class PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n    class PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n from api.v2.base import AuthReadOnlyModelViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\nfrom api.v2.base import AuthReadOnlyModelViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n from api.v2.base import AuthReadOnlyModelViewSet \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nfrom api.v2.base import AuthReadOnlyModelViewSet\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <DED> from api.v2.base import AuthReadOnlyViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthReadOnlyViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(ReadOnlyModelViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n \n from api.v2.base import AuthReadOnlyViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n\nfrom api.v2.base import AuthReadOnlyViewSet\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "from api.v2.serializers.details import PlatformTypeSerializer \n <IND> from api.v2.base import AuthReadOnlyViewSet \n \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "pred_parsed": "from api.v2.serializers.details import PlatformTypeSerializer\n    from api.v2.base import AuthReadOnlyViewSet\n    \n    class PlatformTypeViewSet(AuthReadOnlyViewSet):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "wrye-bash/wrye-bash",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 384,
    "pred_top-1": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(list(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(str(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(str(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(this.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(this.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(lat(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(lat(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(slot(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(slot(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(six.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(six.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(six.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(six.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(target(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(target(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(String(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(String(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(xlist(xlist(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(xlist(xlist(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(slide(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(slide(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(0, range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(0, range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(s.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(s.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(max(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(max(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(Utils.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(Utils.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(Math.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(Math.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(Dict[xrange(10, 14)]) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(Dict[xrange(10, 14)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(np.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(np.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(Map(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(Map(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(quotient(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(quotient(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(number(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(number(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10, '14')) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, '14'))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(os.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(os.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(np.xrange(10, np.y.14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(np.xrange(10, np.y.14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(target, range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(target, range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(quotients[xrange(10, 14)]) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(quotients[xrange(10, 14)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(values[xrange(10, 14)]) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(values[xrange(10, 14)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(quotes.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(quotes.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(six, range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(six, range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(this.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(this.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(target, xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(target, xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(Undefined.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(Undefined.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(quotients.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(quotients.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(0, range(10, range(14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(0, range(10, range(14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(six.xrange(10, six.yrange(14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(six.xrange(10, six.yrange(14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(base(xrange(10, 14))) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(base(xrange(10, 14)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(false, range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(false, range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set('x', range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set('x', range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(this.x_range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(this.x_range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(index, range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(index, range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(target(xrange(10), 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(target(xrange(10), 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(Token.xrange(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(Token.xrange(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(d.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(d.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(np.xrange(10, np.y)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(np.xrange(10, np.y))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(s.range(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(s.range(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(List[xrange(10, 14)]) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(List[xrange(10, 14)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set('x', 10', 14) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set('x', 10', 14)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "_example_code = u'F' \n _valid_ingestibles = set(xindex(10, 14)) \n \n",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(xindex(10, 14))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "hail-is/hail",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hail-is-hail",
    "commit": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "filename": "hail/python/hail/table.py",
    "source_code": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),",
    "target_code": "                <DED><DED>else:\n                    <IND>def joiner(left: MatrixTable):\n                        <IND>return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                <DED><DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
    "warning_line": 1637,
    "pred_top-1": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)] \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)]\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable.append(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: Table(\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid )) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid ))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable]( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable](\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable(str, uid)]) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable(str, uid)])\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "<IND> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: Table(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: Table(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                    \n                    ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: List(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable(str, left._mir, right._tir, uid)]) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable(str, left._mir, right._tir, uid)])\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable((MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable((MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> <IND> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: uid.matrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: uid.matrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: np.MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: np.MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)]) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)])\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, left._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, left._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable() \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable()\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)] \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)]\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n uid, left._mir, right._tir)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    uid, left._mir, right._tir))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<DED> <DED> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n            joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n            left._mir, right._tir, uid))\n        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)\n                        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: Array(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: Array(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable[MatrixAnnotateRowsTable]( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable[MatrixAnnotateRowsTable](\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( <DED> MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                joiner = lambda left: Table(  MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid))\n            ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable]( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable([MatrixAnnotateRowsTable](\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: uid.MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: uid.MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid ) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid )\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)] \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)]\n                        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( <DED> left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(  left._mir, right._tir, uid))\n            ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable((MatrixAnnotateRowsTable( \n left._mir, right._tir, uid))) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable((MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)\n                    \n                    ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) <IND> <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)   ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> \n else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                \n                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: Grid(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: Grid(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid)  ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: __MatrixTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: __MatrixTable(\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: mAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: mAnnotateRowsTable(\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: uid.matrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: uid.matrixTable(MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid)\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> <DED> else: \n <IND> joiner = lambda left: List[MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: List[MatrixAnnotateRowsTable(\n                    left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: Table( \n left._mir, right._tir, uid) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: Table(\n                    left._mir, right._tir, uid)\n                        ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable()) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "pred_parsed": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable())\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "streamlit/streamlit",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/streamlit-streamlit",
    "commit": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "filename": "examples/run_on_save.py",
    "source_code": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n\nelse:\n    raise Error(\"Unknown platform\")",
    "target_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise NotImplementedError(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Exception(\"Unknown platform\")\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `Error` is used but not defined in the current scope.",
    "warning_line": 68,
    "pred_top-1": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(\"Windows not supported\")\n    \nelse:\n    raise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \n        else:\n            raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise this.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise this.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise this.Error(\"Windows not supported\")\n    \nelse:\n    raise this.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise new Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise new Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise new Error(\"Windows not supported\")\n    \nelse:\n    raise new Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise PlatformError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise PlatformError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise PlatformError(\"Windows not supported\")\n    \nelse:\n    raise PlatformError(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise dbError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise dbError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise dbError(\"Windows not supported\")\n    \nelse:\n    raise dbError(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise elif platform_system.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise elif platform_system.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise elif platform_system.Error(\"Windows not supported\")\n    \nelse:\n    raise elif platform_system.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise anError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise anError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise anError(\"Windows not supported\")\n    \nelse:\n    raise anError(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\"); \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\");\nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise NotFoundError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise NotFoundError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise NotFoundError(\"Windows not supported\")\n    \nelse:\n    raise NotFoundError(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise the Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise the Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise the Error(\"Windows not supported\")\n    \nelse:\n    raise the Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error('Windows not supported') \n \n <DED> else: \n <IND> raise Error('Unknown platform') \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error('Windows not supported')\n    \nelse:\n    raise Error('Unknown platform')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(\"Windows not supported\")\n    \n        else:\n            raise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise TypeError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise TypeError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise TypeError(\"Windows not supported\")\n    \nelse:\n    raise TypeError(\"Unknown platform\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(f\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(f\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise ValueError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise ValueError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise ValueError(\"Windows not supported\")\n    \nelse:\n    raise ValueError(\"Unknown platform\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise np.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise np.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise np.Error(\"Windows not supported\")\n    \nelse:\n    raise np.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Node.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Node.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Node.Error(\"Windows not supported\")\n    \nelse:\n    raise Node.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise JSON.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise JSON.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise JSON.Error(\"Windows not supported\")\n    \nelse:\n    raise JSON.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(\"Windows not supported\")\n    \nelse:\n    raise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n    \nelse:\nraise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n \n <DED> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(\"Windows not supported\")\n    \n    \nelse:\n    raise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise platform_system.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise platform_Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise platform_system.Error(\"Windows not supported\")\n    \nelse:\n    raise platform_Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(\"Windows not supported\")\n    \nelse:\n    raise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise msg(\"Windows not supported\") \n \n <DED> else: \n <IND> raise msg(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise msg(\"Windows not supported\")\n    \nelse:\n    raise msg(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\nraise Error(\"Windows not supported\")\n\nelse:\nraise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(_Windows not supported\") \n \n <DED> else: \n <IND> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(_Windows not supported\")\n    \nelse:\n    raise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Clazz.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Clazz.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Clazz.Error(\"Windows not supported\")\n    \nelse:\n    raise Clazz.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise RuntimeError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise RuntimeError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise RuntimeError(\"Windows not supported\")\n    \nelse:\n    raise RuntimeError(\"Unknown platform\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error('Windows not supported') \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error('Windows not supported')\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise node.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise node.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise node.Error(\"Windows not supported\")\n    \nelse:\n    raise node.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise StatusError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise StatusError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise StatusError(\"Windows not supported\")\n    \nelse:\n    raise StatusError(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(F\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(F\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise an Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise an Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise an Error(\"Windows not supported\")\n    \nelse:\n    raise an Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise MisconfigurationError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise MisconfigurationError(\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\"); \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\");\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise err(\"Windows not supported\") \n \n <DED> else: \n <IND> raise err(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise err(\"Windows not supported\")\n    \nelse:\n    raise err(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise _Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise _Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise _Error(\"Windows not supported\")\n    \nelse:\nraise _Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise AnError(\"Windows not supported\") \n \n <DED> else: \n <IND> raise AnError(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise AnError(\"Windows not supported\")\n    \nelse:\n    raise AnError(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\" \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\"\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise this.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise this.Error(\"Windows not supported\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise elif platform_system.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise elif platform_system == \"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise elif platform_system.Error(\"Windows not supported\")\n    \nelse:\n    raise elif platform_system == \"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise Error(\"Unknown platform\")\n    \nelse:\n    raise Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise System.Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise System.Error(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise System.Error(\"Windows not supported\")\n    \nelse:\n    raise System.Error(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> elif platform_system == \"Windows\": \n <IND> raise it(\"Windows not supported\") \n \n <DED> else: \n <IND> raise it(\"Unknown platform\") \n \n",
      "pred_parsed": "elif platform_system == \"Windows\":\n    raise it(\"Windows not supported\")\n    \nelse:\n    raise it(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/levelSet/surfactant/square.py",
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 88,
    "pred_top-1": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable() \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input('finished')) \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input('finished'))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str)\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable('finished') \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable('finished')\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable('finished') \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable('finished')\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable() \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable['finished'] \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable['finished']\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str)\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(result) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(result)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable['finished'] \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable['finished']\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input('finished')) \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input('finished'))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(ruint('finished')) \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(ruint('finished'))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input('finished')) \n \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input('finished'))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n <DED> input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\ninput('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(subscript) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(subscript)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(result) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(result)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str(str)) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str(str))\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n raw_input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    raw_input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable() \n input('finished') \n \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(context, 'finished') \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(context, 'finished')\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(finished) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(finished)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(succ) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(succ)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str) \n input('finished') \n \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str)\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n \n <DED> input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    \ninput('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(finished) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(finished)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input, 'finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input, 'finished')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(context, 'finished') \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(context, 'finished')\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n input('finished') \n \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "surfactantViewer.plot() \n print surfactantVariables['finished'] \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariables['finished']\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n input('finished') \n <DED> \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    input('finished')\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input('finished')) \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input('finished'))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input('finished')) \n <DED> \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input('finished'))\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n <DED> input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\ninput('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(rs) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(rs)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n <IND> input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n        input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(succ) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(succ)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n input('finished') \n <IND>",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    input('finished')\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str(str)) \n input('finished') \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str(str))\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(rp) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(rp)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(raw_input('finished')) \n <IND> \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(raw_input('finished'))\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(rpy) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(rpy)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(response) \n input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(response)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "surfactantViewer.plot() \n print surfactantVariable(str, 'finished') \n raw_input('finished') \n \n",
      "pred_parsed": "    surfactantViewer.plot()\n    print surfactantVariable(str, 'finished')\n    raw_input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "wrye-bash/wrye-bash",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/frames.py",
    "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8)",
    "target_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8)\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 296,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "algoo/preview-generator",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/algoo-preview-generator",
    "commit": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "filename": "preview_generator/preview/generic_preview.py",
    "source_code": "    def get_label(cls) -> str:\n        return self.__name__  #\u00a0default label is the class name",
    "target_code": "    def get_label(cls) -> str:\n        <IND>return cls.__name__  # default label is the class name\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `self` is used but not defined in the current scope.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def get_label(cls) -> str: \n <IND> return _self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return _self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def get_label(cls) -> str: \n <DED> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\nreturn self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None \n return default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        assert self.__name__ is not None\n        return default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "def get_label(cls) -> str: \n <IND> return cls.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return cls.__name__ # default label is the class name\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ <DED> # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n    return self.__name__  # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "def get_label(cls) -> str: \n \n return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n    \n    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "def get_label(cls) -> str: \n <IND> self.__name__ is not None \n return default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        self.__name__ is not None\n        return default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def get_label(cls) -> str: \n <IND> self.__name__ is not None \n return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        self.__name__ is not None\n        return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "def get_label(cls) -> str: \n <IND> if cls is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if cls is not None:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "def get_label(cls) -> str: \n <IND> if isinstance(self, cls): \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if isinstance(self, cls):\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__ is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__ is not None:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "def get_label(cls) -> str: \n <IND> return this.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return this.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "def get_label(cls) -> str: \n <IND> if cls is not None and self.__name__ is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if cls is not None and self.__name__ is not None:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "def get_label(cls) -> str: \n <IND> if cls.name is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if cls.name is not None:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def get_label(cls) -> str: \n <IND> return this._self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return this._self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "def get_label(cls) -> str: \n <IND> assert self.__name__ is not None \n return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        assert self.__name__ is not None\n        return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n <IND>",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__ # default label is the class name\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "def get_label(cls) -> str: \n <IND> name = self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        name = self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name <IND> \n",
      "pred_parsed": "    def get_label(cls) -> str:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n <DED>",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__ # default label is the class name\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <DED> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n        return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "def get_label(cls) -> str: \n <IND> return cls.self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return cls.self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "def get_label(cls) -> str: \n <IND> return t.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return t.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name <DED> \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "def get_label(cls) -> str: \n <IND> if isinstance(self.__name__): \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if isinstance(self.__name__):\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__# default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__# default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "def get_label(cls) -> str: <IND> <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:   return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "def get_label(cls) -> str: \n <IND> return str(self.__name__) # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return str(self.__name__) # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "def get_label(cls) -> str: \n <IND> self.__name__ = self.__name__ \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        self.__name__ = self.__name__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "def get_label(cls) -> str: \n <IND> return cls._self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return cls._self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "def get_label(cls) -> str: \n <IND> if cls is not None and self.__name__ is not None: \n <IND> if self.__name__ is not None and self.__name__ is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if cls is not None and self.__name__ is not None:\n            if self.__name__ is not None and self.__name__ is not None:\n                return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n \n return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n            \n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> elif isinstance(cls, label): \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                elif isinstance(cls, label):\n                    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def get_label(cls) -> str: \n <IND> if isinstance(self.__name__): \n <IND> return isinstance(self.__name__) # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if isinstance(self.__name__):\n            return isinstance(self.__name__) # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def get_label(cls) -> str: \n <IND> if cls is not None and self.__name__ is not None and self.__name__ is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if cls is not None and self.__name__ is not None and self.__name__ is not None:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                if not self.__name__:\n                    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is cls.name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        return self.__name__ # default label is cls.name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "def get_label(cls) -> str: <DED> <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:   return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__ is not None: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__ is not None:\n                return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def get_label(cls) -> str: \n <IND> returns self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        returns self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def get_label(cls) -> str: \n <IND> if isinstance(self.__name__): \n <IND> if isinstance(self.__name__): \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if isinstance(self.__name__):\n            if isinstance(self.__name__):\n                return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> elif isinstance(str, cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                elif isinstance(str, cls) -> str:\n                    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> elif isinstance(label, cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                elif isinstance(label, cls) -> str:\n                    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> elif isinstance(cls, label) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                elif isinstance(cls, label) -> str:\n                    return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "def get_label(cls) -> str: \n <IND> if isinstance(self, cls): \n <IND> if isinstance(self.__name__): \n <IND> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if isinstance(self, cls):\n            if isinstance(self.__name__):\n                return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def get_label(cls) -> str: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <IND> if not self.__name__: \n <DED> return self.__name__ # default label is the class name \n \n",
      "pred_parsed": "    def get_label(cls) -> str:\n        if not self.__name__:\n            if not self.__name__:\n                if not self.__name__:\n            return self.__name__ # default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "strongio/torch-kalman",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/strongio-torch-kalman",
    "commit": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,",
    "target_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `Cens` is used but not defined in the current scope.",
    "warning_line": 172,
    "pred_top-1": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Utils.Tensor, Utils.Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Utils.Tensor, Utils.Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Censor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[selector, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[selector, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Group[Tensor], Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Group[Tensor], Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Utils.Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Utils.Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs, \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs,\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Group[Tensor], Cens]), \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Group[Tensor], Cens]),\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union['Tensor', 'Cens'], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union['Tensor', 'Cens'],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[[Tensor], Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[[Tensor], Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor, T], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Censor, T],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[List[Tensor], List[Cens]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[List[Tensor], List[Cens]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> def _log_prob_with_subsetting(self, \n obs: Union[Utils.Tensor, Utils.Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Utils.Tensor, Utils.Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, List[]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs: Union[Utils.Tensor, Utils.Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Utils.Tensor, Utils.Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[Cens]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, List[Cens]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Cens, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Cens, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<IND> def _log_prob_with_subsetting(self, \n obs: Union[Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n def _log_prob_with_subsetting(self, \n obs: Union[Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Object, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Object, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union['Tensor'], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union['Tensor'],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Organizer, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Organizer, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[List[Tensor], Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[List[Tensor], Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[selector], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[selector],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Union[Tensor, List[Cens]]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: List[Union[Tensor, List[Cens]]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor, List[T]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Censor, List[T]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[[Tensor], T], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[[Tensor], T],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Centure, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Centure, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Selector, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Selector, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[\"Tensor\", \"Cens\", \"], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[\"Tensor\", \"Cens\", \"],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Union[Tensor, List[Cens]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: List[Union[Tensor, List[Cens]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor, Tools], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Censor, Tools],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[[Tensor, List]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[[Tensor, List]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: List[Union[Tensor, List], Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: List[Union[Tensor, List], Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Path, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Path, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Censor, T]), \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Censor, T]),\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Testor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Testor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: _Tensor, _Cens, \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: _Tensor, _Cens,\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[], Cens]), \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, List[], Cens]),\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor,...], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor,...],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[ChildTensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[ChildTensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[\"Tensor\", \"Cens\", \"\", \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[\"Tensor\", \"Cens\", \"\",\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Mock, Tensor], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Mock, Tensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Task, \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Task,\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Group[Tensor], T], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Group[Tensor], T],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Group[Tensor], Cens]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Group[Tensor], Cens]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Utils.Tensor, Usage.Cens], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Utils.Tensor, Usage.Cens],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Centures], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Centures],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Centure], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Centure],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> def _log_prob_with_subsetting(self, \n obs: Union[Tensor, List[], Cens]], \n group_idx: Selector, \n",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, List[], Cens]],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mozilla-services/socorro",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mozilla-services-socorro",
    "commit": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "filename": "webapp-django/crashstats/crashstats/models.py",
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `unicode` is used but not defined in the current scope.",
    "warning_line": 1460,
    "pred_top-1": {
      "pred": "required_params = ( \n ('product', unicode), \n ('version', unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', unicode),\n    ('version', unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "required_params = ( \n ('product', version), \n ('version', version), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', version),\n    ('version', version),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "required_params = ( \n ('product', db.unicode), \n ('version', db.unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', db.unicode),\n    ('version', db.unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "required_params = ( \n ('product', utils.unicode), \n ('version', utils.unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', utils.unicode),\n    ('version', utils.unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "required_params = ( \n ('product', defibrillator.unicode), \n ('version', defibrillator.unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', defibrillator.unicode),\n    ('version', defibrillator.unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "required_params = ( \n ('product', exports.unicode), \n ('version', exports.unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', exports.unicode),\n    ('version', exports.unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "required_params = ( \n ('product','version', 'utf-8'), \n ('version', 'utf-8'), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product','version', 'utf-8'),\n    ('version', 'utf-8'),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "required_params = ( \n ('product', val), \n ('version', val), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', val),\n    ('version', val),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "required_params = ( \n ('product', tuple, \n ('version', tuple), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', tuple,\n    ('version', tuple),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "required_params = ( \n ('product', lib, \n ('version', lib), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', lib,\n    ('version', lib),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "required_params = ( \n ('product', global.unicode), \n ('version', global.unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', global.unicode),\n    ('version', global.unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "required_params = ( \n ('product', lib, \n ('version', lib, \n ) ) \n",
      "pred_parsed": "    required_params = (\n    ('product', lib,\n    ('version', lib,\n    ) )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "required_params = ( \n ('product', svg.unicode), \n ('version', svg.unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', svg.unicode),\n    ('version', svg.unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "required_params = ( \n ('product', standard), \n ('version', standard), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', standard),\n    ('version', standard),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "required_params = ( \n ('product', db_unicode), \n ('version', db_unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', db_unicode),\n    ('version', db_unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "required_params = ( \n ('product', __unicode), \n ('version', __unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', __unicode),\n    ('version', __unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "required_params = ( \n ('product','version', 'unicode'), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product','version', 'unicode'),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "required_params = ( \n ('product', svg.Unicode), \n ('version', svg.Unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', svg.Unicode),\n    ('version', svg.Unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "required_params = ( \n ('product', _, \n ('version', _), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', _,\n    ('version', _),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "required_params = ( \n ('product', icode), \n ('version', icode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', icode),\n    ('version', icode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "required_params = ( \n ('product', _, \n ('version', _, \n ) ) \n",
      "pred_parsed": "    required_params = (\n    ('product', _,\n    ('version', _,\n    ) )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "required_params = ( \n ('product', db.Unicode), \n ('version', db.Unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', db.Unicode),\n    ('version', db.Unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "required_params = ( \n ('product', version, unicode), \n ('version', unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', version, unicode),\n    ('version', unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "required_params = ( \n ('product', lib, \n ('version', lib, \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', lib,\n    ('version', lib,\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "required_params = ( \n ('product', standard_id, \n ('version', standard_id), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', standard_id,\n    ('version', standard_id),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "required_params = ( \n ('product', licode), \n ('version', licode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', licode),\n    ('version', licode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "required_params = ( \n ('product', Unicode), \n ('version', Unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', Unicode),\n    ('version', Unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "required_params = ( \n ('product', variant), \n ('version', version), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', variant),\n    ('version', version),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "required_params = ( \n ('product', text_version), \n ('version', text_version), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', text_version),\n    ('version', text_version),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "required_params = ( \n ('product', tuple[unicode], \n ('version', tuple[unicode], \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', tuple[unicode],\n    ('version', tuple[unicode],\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "required_params = ( \n ('product', Unicode), \n ('version', Unicode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', Unicode),\n    ('version', Unicode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "required_params = ( \n ('product', T.np.ndarray), \n ('version', T.ndarray), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', T.np.ndarray),\n    ('version', T.ndarray),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "required_params = ( \n ('product', unicode), \n ('version', unicode) \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', unicode),\n    ('version', unicode)\n    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "required_params = ( \n ('product', decode), \n ('version', decode), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', decode),\n    ('version', decode),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "required_params = ( \n ('product', elif, \n ('version', elif), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', elif,\n    ('version', elif),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "required_params = ( \n ('product', elm, \n ('version', elm), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', elm,\n    ('version', elm),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "required_params = ( \n ('product', unicode), \n ('version', unicode) \n",
      "pred_parsed": "    required_params = (\n    ('product', unicode),\n    ('version', unicode)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "required_params = ( \n ('product', cbd, \n ('version', cbd), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', cbd,\n    ('version', cbd),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "required_params = ( \n ('product', regexp, \n ('version', regexp), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', regexp,\n    ('version', regexp),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "required_params = ( \n ('product', tuple[unicode], \n ('version', tuple[unicode], \n ), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', tuple[unicode],\n    ('version', tuple[unicode],\n    ),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "required_params = ( \n ('product', int), \n ('version', int), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', int),\n    ('version', int),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "required_params = ( \n ('product', text, \n ('version', text, \n ) ) \n",
      "pred_parsed": "    required_params = (\n    ('product', text,\n    ('version', text,\n    ) )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "required_params = ( \n ('product', ws, \n ('version', ws), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', ws,\n    ('version', ws),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "required_params = ( \n ('product', cb, \n ('version', cb), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', cb,\n    ('version', cb),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "required_params = ( \n ('product', standard, \n ('version', standard), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', standard,\n    ('version', standard),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "required_params = ( \n ('product', svg, \n ('version', svg), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', svg,\n    ('version', svg),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "required_params = ( \n ('product', _, \n ('version', _, \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', _,\n    ('version', _,\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "required_params = ( \n ('product', _, \n ('version', _, \n ), \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', _,\n    ('version', _,\n    ),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "required_params = ( \n ('product', color, \n ('version', color, \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', color,\n    ('version', color,\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "required_params = ( \n ('product', text, \n ('version', text, \n ) \n",
      "pred_parsed": "    required_params = (\n    ('product', text,\n    ('version', text,\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "python/mypy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy",
    "commit": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "filename": "mypy/parsetype.py",
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `line` is used but not defined in the current scope.",
    "warning_line": 153,
    "pred_top-1": {
      "pred": "type = self.parse_type() \n return StarType(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "type = self.parse_type() \n return startype(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "type = self.parse_type() \n return StarType(type) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "type = self.parse_type() \n return StarType(type, 'line') \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, 'line')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "type = self.parse_type() \n return StarType(type, str(line)) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, str(line))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "type = self.parse_type() \n return str(type, line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return str(type, line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "type = self.parse_type() \n return StarType(type, method) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, method)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "type = self.parse_type() \n return StarType(type, isinstance(line)) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, isinstance(line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "type = self.parse_type() \n return self.type(type, line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return self.type(type, line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "type = self.parse_type() \n return StarType.extend(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType.extend(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "type = self.parse_type() \n return StarType(type, type[0], line[1]) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, type[0], line[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "type = self.parse_type() \n return StarType(type, this.line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, this.line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "type = self.parse_type() \n return startype.type(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype.type(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "type = self.parse_type() \n return StarType.extend(type, line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType.extend(type, line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "type = self.parse_type() \n return StarType(type, _line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, _line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "type = self.parse_type() \n return StarType(type,...args) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type,...args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "type = self.parse_type() \n if not isinstance(type, line): \n <IND> return StarType(type, int) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, line):\n            return StarType(type, int)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "type = self.parse_type() \n return startype.get(line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype.get(line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "type = self.parse_type() \n return StarType(type, format(line)) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, format(line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "type = self.parse_type() \n return StarType(type, 'lint') \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, 'lint')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "type = self.parse_type() \n return startype.int(type, line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype.int(type, line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "type = self.parse_type() \n return StarType(type, []) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "type = self.parse_type() \n return startype.type() \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype.type()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "type = self.parse_type() \n return startype.create(line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype.create(line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "type = self.parse_type() \n return StarType(type, options.line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, options.line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "type = self.parse_type() \n if not isinstance(type, line): \n \n return StarType(type, int) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, line):\n        \n        return StarType(type, int)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "type = self.parse_type() \n return StarType(type, python.Line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, python.Line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "type = self.parse_type() \n return StarType(type, type[0], line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, type[0], line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "type = self.parse_type() \n return self.type.Line(type) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return self.type.Line(type)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "type = self.parse_type() \n if not isinstance(type, str): \n <IND> return StarType(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, str):\n            return StarType(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "type = self.parse_type() \n return startype() \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "type = self.parse_type() \n return StarType(type, tuple) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, tuple)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "type = self.parse_type() \n if not isinstance(type, line): \n <DED> return StarType(type, int) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, line):\n    return StarType(type, int)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "type = self.parse_type() \n return StarType(type, cls.line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, cls.line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "type = self.parse_type() \n return StarType(type, this._line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, this._line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "type = self.parse_type() \n if not isinstance(type, str): \n \n return StarType(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, str):\n        \n        return StarType(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "type = self.parse_type() \n return startype.decode(line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return startype.decode(line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "type = self.parse_type() \n return StarType(type, this.type, this.line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, this.type, this.line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "type = self.parse_type() \n return StarType(type, python.line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, python.line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "type = self.parse_type() \n return StarType(type, args[line]) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, args[line])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "type = self.parse_type() \n return StarType.decode(type, line) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType.decode(type, line)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "type = self.parse_type() \n return StarType(type, type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "type = self.parse_type() \n return StarType(type, jQuery) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, jQuery)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "type = self.parse_type() \n return StarType(type[0], line[1]) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type[0], line[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "type = self.parse_type() \n return StarType(type, value) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "type = self.parse_type() \n return StarType() \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "type = self.parse_type() \n if not isinstance(type, str): \n <DED> return StarType(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, str):\n    return StarType(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "type = self.parse_type() \n if not isinstance(type, line): \n \n return startype(type, int) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, line):\n        \n        return startype(type, int)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "type = self.parse_type() \n if not isinstance(type, line): \n <IND> return StarType(type, str) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        if not isinstance(type, line):\n            return StarType(type, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "type = self.parse_type() \n return StarType(type, t.length, t.length) \n \n",
      "pred_parsed": "        type = self.parse_type()\n        return StarType(type, t.length, t.length)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "networktocode/pyntc",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/networktocode-pyntc",
    "commit": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "filename": "pyntc/devices/__init__.py",
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
    "warning_line": 32,
    "pred_top-1": {
      "pred": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "}, \n Dict[str, str]: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, str]: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "}, \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "}, \n DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "}, \n Dict[str, str] = { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, str] = {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "}, \n F4_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F4_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "}, \n F5_DEVICE_TYPE_KEY: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_KEY: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "}, \n F5_DEVICE_TYPE_UNIFORM: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_UNIFORM: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "}, \n F5_DEVICE_TYPE_DEFAULT: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_DEFAULT: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "}, \n F6_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F6_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "}, \n F5_DEVICE_TYPE_CONTAINER: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_CONTAINER: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "}, \n DESCRIPTION_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    DESCRIPTION_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "}, \n F5_DEVICE_TYPE_SELECTOR: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_SELECTOR: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "}, \n F5_DEVICE_TYPE_REQUEST: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_REQUEST: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "}, \n F5_DEVICE_TYPE_BODY: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_BODY: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "}, \n F5_DEVICE_TYPE = { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "}, \n F5_DEVICE_TYPE_DIR: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_DIR: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "}, \n DEVICE_TYPE: { \n DEVICE_CLASS_KEY: DEVICE, \n",
      "pred_parsed": "    },\n    DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: DEVICE,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "}, \n F5_DEVICE_TYPE: { <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\nF5_DEVICE_TYPE: {  DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "}, \n Dict.F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict.F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "}, \n Dict[Dict[str, str]] = { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[Dict[str, str]] = {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "}, \n _F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    _F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "}, \n F5_DEVICE_TYPE: { <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n        F5_DEVICE_TYPE: {  DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "}, \n Dict[str, STD]: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, STD]: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "}, \n DIVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    DIVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "}, \n Dict[str, str]= { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, str]= {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "}, \n F5_DEVICE_TYPE_CLIENT: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_CLIENT: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "}, \n F5_DEVICE_TYPE_LENGTH: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_LENGTH: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "}, \n F5_DEVICE_TYPE_COLOR: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_COLOR: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "}, \n Dict[F5Dict[str, str]]: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[F5Dict[str, str]]: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "}, \n Dict[str, STR]: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, STR]: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "}, \n F5_DEVICE_TYPE_CLASS: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_CLASS: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "}, \n F5_DEVICE_TYP: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYP: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "}, \n F5_DEVICE_TYPE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "}, \n Dict[F5Dict[str, str]] = { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[F5Dict[str, str]] = {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "}, \n Dict[str, STRING_DEVICE]: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, STRING_DEVICE]: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "}, \n Dict[str, STRING_DIR]: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    Dict[str, STRING_DIR]: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "}, <DED> F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },  F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "}, \n F5_DEVICE_TYPE_MOBILE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_MOBILE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "}, \n F5_DEVICE_TYPE_NODE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_NODE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "}, <IND> F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },  F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "}, \n F5_DEVICE_TYPE_BAR: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_BAR: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: Dict, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: Dict,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "}, \n F5_DEVICE_TYPE_NONE: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_NONE: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "}, \n F5_DEVICE_TYPE= { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE= {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "}, \n F5_DEVICE_TYPE_VAL: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE_VAL: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "}, \n F5_DEVICE_TYPES: { \n DEVICE_CLASS_KEY: F5Device, \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPES: {\n    DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: Dict[F5Device], \n",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE: {\n    DEVICE_CLASS_KEY: Dict[F5Device],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "}, \n F5_DEVICE_TYPE: { \n DEVICE_CLASS_KEY: F5Device, <IND>",
      "pred_parsed": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Ciphey/Ciphey",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ciphey-Ciphey",
    "commit": "5544e945c591d063a2541fd40991c1f81b729575",
    "filename": "ciphey/basemods/Crackers/hash.py",
    "source_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass",
    "target_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        <IND>return None\n\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
    "warning_line": 105,
    "pred_top-1": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> @staticmethod \n def getParams() -> 'Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> 'Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> @staticmethod \n def getParams() -> \"Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> \"Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return \"\" \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<DED> @staticmethod \n def getParams() -> (Optional[Dict[str, Dict[str, Any]]]): \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> (Optional[Dict[str, Dict[str, Any]]]):\n        pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return False \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.ParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.ParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ConfigurableModule) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ConfigurableModule)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<DED> @staticmethod \n def getParams() -> Any: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Any:\n        pass\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "<DED> @staticmethod \n def getParams() -> ciphey.iface._modules.ConfigurableModule: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> ciphey.iface._modules.ConfigurableModule:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <DED> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n    assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <IND> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n            assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.ParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.ParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return ciphey.basemods.Crackers.hash.HashBuster[str, Any]] \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return ciphey.basemods.Crackers.hash.HashBuster[str, Any]]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return \"ciphey.basemods.Crackers.hash.HashBuster\" \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return \"ciphey.basemods.Crackers.hash.HashBuster\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return False \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n            return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> @staticmethod \n def getParams() -> Normal[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Normal[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return True \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return True\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return ciphey.basemods.Crackers.hash.HashBuster.getParams() \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return ciphey.basemods.Crackers.hash.HashBuster.getParams()\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<DED> @staticmethod \n def getParams() -> \"Optional[Dict[str, Dict[str, Any]]]: \n <IND> return \"\" \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> \"Optional[Dict[str, Dict[str, Any]]]:\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> @staticmethod \n def getParams() -> All[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> All[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.getParams) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.getParams)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <IND> assert isinstance(str, ciphey.iface.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n            assert isinstance(str, ciphey.iface.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> if not isinstance(str, ciphey.iface._modules.ParamSpec): \n <IND> return False \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        if not isinstance(str, ciphey.iface._modules.ParamSpec):\n            return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> if not isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.getParams()): \n <IND> return False \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        if not isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.getParams()):\n            return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.Optional[Dict[str, Any]]) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.Optional[Dict[str, Any]])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <DED> assert isinstance(str, ciphey.iface.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n    assert isinstance(str, ciphey.iface.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return None \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n            pass\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <DED> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n    assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <IND> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n            assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> fail \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        fail\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <DED> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n    assert isinstance(str, ciphey.iface._modules.ParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> if not isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.ParamSpec): \n <IND> return False \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        if not isinstance(str, ciphey.basemods.Crackers.hash.HashBuster.ParamSpec):\n            return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> @staticmethod \n def getParams() -> 'Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> 'Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return ciphey.basemods.Crackers.hash.HashBuster.getParamSpec() \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return ciphey.basemods.Crackers.hash.HashBuster.getParamSpec()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return [] \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> return \"ciphey.basemods.Crackers.hash.HashBuster\" \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        return \"ciphey.basemods.Crackers.hash.HashBuster\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> @staticmethod \n def getParams() -> [Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> [Optional[Dict[str, Dict[str, Any]]]:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <DED> assert isinstance(str, ciphey.iface.Basemods.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n    assert isinstance(str, ciphey.iface.Basemods.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <IND> assert isinstance(str, ciphey.iface.Basemods.Crackers.hash.HashBuster.getParams()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n            assert isinstance(str, ciphey.iface.Basemods.Crackers.hash.HashBuster.getParams())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n            assert isinstance(str, ciphey.iface._modules.ParamSpec)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> assert isinstance(str, ciphey.iface._modules.ParamSpec) \n <DED> assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParamSpec()) \n",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        assert isinstance(str, ciphey.iface._modules.ParamSpec)\n    assert isinstance(str, ciphey.iface.basemods.Crackers.hash.HashBuster.getParamSpec())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ethereum/trinity",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity",
    "commit": "ad61361109f7df88eb807a543191d491e76eed0c",
    "filename": "trinity/protocol/eth/monitors.py",
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock}",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
    "warning_line": 6,
    "pred_top-1": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } \n ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = set( { commands.NewBlock }\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = set( { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set[commands.NewBlock] \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = set[commands.NewBlock]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types.push( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types.push( { commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types.set = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types.set = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types = { } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types = { }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = } commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = } commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.set( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.set( { commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = [] \n commands.NewBlock = [] \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = []\n    commands.NewBlock = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types = { } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types = { }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types_ = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types_ = { commands.NewBlock }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types = set( { commands.NewBlock } \n ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types = set( { commands.NewBlock }\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types.push(commands.NewBlock) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types.push(commands.NewBlock)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types_ = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types_ = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = set( { commands.NewBlock } \n ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = set( { commands.NewBlock }\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } <DED> ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = set( { commands.NewBlock }  )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = ( { commands.NewBlock } \n ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = ( { commands.NewBlock }\n    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber[commands.NewBlock] \n subscription_msg_types.push( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber[commands.NewBlock]\n    subscription_msg_types.push( { commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber[commands.NewBlock] \n subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber[commands.NewBlock]\n    subscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = { commands.Set } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = { commands.Set }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = set( { commands.NewBlock } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types.NewBlock = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types.NewBlock = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types is not None \n subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types is not None\n    subscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = { commands.BaseChainTipMonitor } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = { commands.BaseChainTipMonitor }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = { } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = { }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } <IND> ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n        subscription_msg_types = set( { commands.NewBlock }  )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types_ = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types_ = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscriber_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscriber_msg_types = { commands.NewBlock }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = \\ commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = \\ commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types.push( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types.push( { commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.set[commands.NewBlock] \n subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.set[commands.NewBlock]\n    subscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types = set( { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types = set( { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = [] \n commands.Set[p2p.protocol.Command] } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = []\n    commands.Set[p2p.protocol.Command] }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscriber_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscriber_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types.push( ^ commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types.push( ^ commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types.push( \\ commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types.push( \\ commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.set[commands.NewBlock] \n subscription_msg_types.push( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.set[commands.NewBlock]\n    subscription_msg_types.push( { commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock] \n subscription_msg_types[0] = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = p2p.peer.PeerSubscriber.Set[commands.NewBlock]\n    subscription_msg_types[0] = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types.set = { commands.Set } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types.set = { commands.Set }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = ( { commands.NewBlock } ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = ( { commands.NewBlock } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set( { commands.NewBlock } \n ) \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = set( { commands.NewBlock }\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = [] \n commands.NewBlock = { } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = []\n    commands.NewBlock = { }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types= { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types= { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <DED> subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\nsubscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = set().Block( { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = set().Block( { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = { commands.NewBlock } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = { commands.NewBlock }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types: \n <IND> subscription_msg_types[commands.NewBlock] = { } \n",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types:\n        subscription_msg_types[commands.NewBlock] = { }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "allenai/allenact",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allenact",
    "commit": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "filename": "rl_habitat/habitat_preprocessors.py",
    "source_code": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:",
    "target_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        <IND>if not self.parallel:\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
    "warning_line": 100,
    "pred_top-1": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def to(self, device: torch.device) -> 'ResnetPreProcessorThor': \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> 'ResnetPreProcessorThor':\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "\n <DED> def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n \n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    \n    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n <DED> def to(self, device: torch.device) -> [ResnetPreProcessorThor]: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> [ResnetPreProcessorThor]:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    \n    if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel is None: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel is None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: <IND>",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n            if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": <IND> <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":   if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: <DED>",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": <DED> <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":   if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def to(self, device: torch.device) -> [resnetPreProcessorThor]: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> [resnetPreProcessorThor]:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def to(self, device_name: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device_name: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel is not None: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"resnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"resnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <IND> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def to(self, device=token.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device=token.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <DED> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor:\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def to(self, device: torch.device) -> (ResnetPreProcessorThor): \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> (ResnetPreProcessorThor):\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def to(self, device: torch.device) -> List[ResnetPreProcessorThor]: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> List[ResnetPreProcessorThor]:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n \n def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    \n    def to(self, device: torch.device) -> ResnetPreProcessorThor:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def to(self, device: torch.device) -> resnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> resnetPreProcessorThor:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <IND> def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel && device: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel && device:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <IND> def to(self, device: torch.device) -> 'ResnetPreProcessorThor': \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> 'ResnetPreProcessorThor':\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\"): \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\"):\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n \n if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor:\n    \n    if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor>: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> ResnetPreProcessorThor>:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]: \n <DED> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> [\"ResnetPreProcessorThor\"]:\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <IND> def to(self, device: torch.device) -> [ResnetPreProcessorThor]: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> [ResnetPreProcessorThor]:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def to(self, device: torch.device) -> (\"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> (\"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def to(self, device=torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device=torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "\n <DED> def to(self, device: torch.device) -> 'ResnetPreProcessorThor': \n <DED> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> 'ResnetPreProcessorThor':\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def to(self, device: torch.device) -> str = \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> str = \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    \n    if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def to(self, devicename: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, devicename: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if isinstance(self.parallel, device: torch.device): \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if isinstance(self.parallel, device: torch.device):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def to(self, device: torch.device) -> \"PreprocessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"PreprocessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def to(self, device: torch.device) -> str: \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> str:\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n \n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "pred_parsed": "    \n    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\nif not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 332,
    "pred_top-1": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str], tags]=true) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str], tags]=true)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.notice\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.protocol.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.protocol.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self.lines.append(line) \n \n def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n        \n        def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n \n def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        \n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n \n def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        \n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.note",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.note\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= { ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= { )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self.lines.append(line) \n \n def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n        \n        def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=true) \n \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=true)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= { )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <DED> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\nself._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.change(target,",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.change(target,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n \n self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n    \n    self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.state",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.state\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\ndef notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]] = None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND>",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def line(utils.irc.line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def line(utils.irc.line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.text(target,",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.text(target,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message[target, message], tags) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message[target, message], tags)\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.m",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.m\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message[target, message, tags]) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message[target, message, tags])\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=true): \n <IND>",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]=true):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message[target, message, tags]) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message[target, message, tags])\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.Notice",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.Notice\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <DED> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\nself._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "source_code": "def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':",
    "target_code": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n        def notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n        ) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <IND> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.US",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.US\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRC",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRC\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= } }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.U",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.U\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ): \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n):\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n        def notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n        ) -> 'utils.irc.IRCParsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.State",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.State\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { } ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str] = { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str] = { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <DED> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n    \n    def notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n    ) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <IND> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Line",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Line\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Version",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Version\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Ut",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Ut\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= } } \n ) -> 'utils.irc.IRCParsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= } }\n) -> 'utils.irc.IRCParsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine",
      "pred_parsed": "def notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n \n def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "\ndef message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.SR",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.SR\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } <DED> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }  ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.None': \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.None':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } <IND> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }  ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Fee",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Fee\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.ir",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Base",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Base\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsed",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsed\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.MISSION: \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.MISSION:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.parsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.parsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Dict[s]=",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Dict[s]=\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.PR",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.PR\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.ISSUE",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.ISSUE\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.MISSING.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.MISSING.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Expression",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Expression\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Enabled': \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Enabled':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Utils.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Anchor': \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Anchor':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.String",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.String\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.Base': \n",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.Base':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IPARsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IPARsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.MISSION",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.MISSION\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.WebSocke",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.WebSocke\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IDUC",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IDUC\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { m\u00e4\u00dfig \n ) -> 'utils.irc.",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n    \ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { m\u00e4\u00dfig\n) -> 'utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= { } \n ) -> 'utils.irc.PARsedLine",
      "pred_parsed": "def message(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]= { }\n) -> 'utils.irc.PARsedLine\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "googleapis/python-bigquery",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " value is declared to have type `Optional[int]` but is used as type `str`.",
    "warning_line": 211,
    "pred_top-1": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <IND> self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n            self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <IND> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n            self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        \n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n \n self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        \n        self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = str(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value = Optional[str](value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value = Optional[str](value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> str(value) \n <DED> self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        str(value)\n    self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n return str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        return str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        value = str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None \n self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None\n        self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None \n if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n if self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        if self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value_byte = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None:\n            value_byte = str(value)\n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> return str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        return str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n # value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        # value = str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n return str(value) \n <DED> self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        return str(value)\n    self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> str(value) \n if value is None else str(value) \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        str(value)\n        if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = str(value) \n \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = str(value)\n        \n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None \n if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = Optional[value] \n self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = Optional[value]\n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> return str(value) \n if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        return str(value)\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n            self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> str(value) \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        str(value)\n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n if self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        if self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else None else value = Optional[str](value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else None else value = Optional[str](value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value_byte = str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None:\n            value_byte = str(value)\n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else: \n <IND> value_byte = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else:\n            value_byte = str(value)\n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = str(value) \n <IND> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = str(value)\n            self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None \n if value is None else str(value) \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None\n        if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None \n if value is None else str(value) \n \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None\n        if value is None else str(value)\n        \n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = Optional[str](value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = Optional[str](value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None <DED> if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n    value_byte = None  if value is None else str(value)\nself._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = Optional[value] \n if value is None else str(value) \n self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = Optional[value]\n        if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> return str(value) \n if value is None else str(value) \n <DED> self._properties[\"statementByteBudget\"] = str(value) \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        return str(value)\n        if value is None else str(value)\n    self._properties[\"statementByteBudget\"] = str(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value = Optional[str](value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value = Optional[str](value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n # str(value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        # str(value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None \n if value is None else str(value) \n <IND> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None\n        if value is None else str(value)\n            self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) \n return str(value) \n \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else str(value)\n        return str(value)\n        \n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = str(value)\n            self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = None if value is None else str(value) \n \n self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = None if value is None else str(value)\n        \n        self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else None else value = Optional[str](value) \n <DED> self._properties[\"statementByteBudget\"] = str \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else None else value = Optional[str](value)\n    self._properties[\"statementByteBudget\"] = str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else Value[int]: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is None else Value[int]:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> value_byte = str(value) \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n        value_byte = str(value)\n        \n        self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pcah/python-clean-architecture",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pcah-python-clean-architecture",
    "commit": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "filename": "dharma/domain/repos/in_memory.py",
    "source_code": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "target_code": "\n    <DED>def filter(self, predicate: Predicate) -> t.List[T]:\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
    "warning_line": 81,
    "pred_top-1": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def filter(self, predicate: Predicate) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Predicate) -> t.List[T]:\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Dict[str, str]] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Dict[str, str]] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n \n",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def filter( <DED> self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(  self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Dharma.data.formulae.predicate.Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Dharma.data.formulae.predicate.Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def filter( <IND> self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(  self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n \n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    \ndef filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def filter(self, predicate: Optional[dharma.data.formulae.predicate.Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[dharma.data.formulae.predicate.Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def filter( \n self, predicate: Optional[Predicate] = None \n ) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(\n    self, predicate: Optional[Predicate] = None\n    ) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T].List: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T].List:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def filter( \n self, predicate: Optional[Predicate] = None <IND> ) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(\n        self, predicate: Optional[Predicate] = None  ) -> t.List[T]:\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dicat[Predicate]] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Pr\u00e4dicat[Predicate]] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def filter( \n self, predicate: Optional[Predicate] = None <DED> ) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(\nself, predicate: Optional[Predicate] = None  ) -> t.List[T]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n \n def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    \n    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: <IND> <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def filter( \n self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(\n    self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def filter(self, predicate: dharma.data.formulae.predicate.Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: dharma.data.formulae.predicate.Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def filter(self, predicate: List[Predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: List[Predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def filter(self, predicate: Optional[PrettyPrint] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[PrettyPrint] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: <DED> <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Dharma.data.formulae.predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Dharma.data.formulae.predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <IND> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def filter(self, predicate: Options.Predicate = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Options.Predicate = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def filter(self, predicate: Optional[None] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[None] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def filter( \n self, predicate: Optional[Predicate] = None ) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(\n    self, predicate: Optional[Predicate] = None ) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def filter(self, predicate: Optional[dharma.data.formulae.predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[dharma.data.formulae.predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def filter( <DED> self, predicate: Optional[predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(  self, predicate: Optional[predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def filter(self, predicate: \"Predicate\") -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: \"Predicate\") -> t.List[T]:\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "\n <DED> def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]: \n <DED>",
      "pred_parsed": "    def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def filter(self, predicate: Union[Predicate, None] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Union[Predicate, None] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def filter(self, predicate: Optional[[Predicate]] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[[Predicate]] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <IND> def filter(self, predicate: Predicate) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Predicate) -> t.List[T]:\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]: \n \n",
      "pred_parsed": "    def filter(self, predicate: dharma.data.formulae.predicate.Predicate) -> t.List[T]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Default] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Default] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n <DED>",
      "pred_parsed": "    def filter(self, predicate: Optional[predicate] = None) -> t.List[T]:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def filter( <IND> self, predicate: Optional[predicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(  self, predicate: Optional[predicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def filter(self, predicate: Predicate | None = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Predicate | None = None) -> t.List[T]:\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n <IND> def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]: \n <IND>",
      "pred_parsed": "    def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def filter(self, predicate: Optional[Dict[str, str]] = None) -> t.List[T]: \n <DED>",
      "pred_parsed": "    def filter(self, predicate: Optional[Dict[str, str]] = None) -> t.List[T]:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n \n",
      "pred_parsed": "    def filter(self, predicate: Optional[predicate] = None) -> t.List[T]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "libtcod/python-tcod",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/libtcod-python-tcod",
    "commit": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "filename": "tcod/console.py",
    "source_code": "        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
    "target_code": "\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " string is declared to have type `str` but is used as type `bytes`.",
    "warning_line": 312,
    "pred_top-1": {
      "pred": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "pred_parsed": "        str = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, str\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, str\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte_string \n ) \n",
      "pred_parsed": "        byte_string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, byte_string\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n byte = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte \n ) \n",
      "pred_parsed": "        byte = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, byte\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n bytes = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes \n ) \n",
      "pred_parsed": "        bytes = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes.length, bytes.length \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes.length, bytes.length\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, bytes \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "pred_parsed": "        _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt(string)\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n return str(lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "pred_parsed": "        return str(lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, str\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes.length \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes.length\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n stored_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, stored_string \n ) \n",
      "pred_parsed": "        stored_string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, stored_string\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n set_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, set_string \n ) \n",
      "pred_parsed": "        set_string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, set_string\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n byte_console = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte_console, byte_console \n ) \n",
      "pred_parsed": "        byte_console = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, byte_console, byte_console\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n btn = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, btn \n ) \n",
      "pred_parsed": "        btn = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, btn\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, string\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, str \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, str\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, type: str \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, type: str\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n return str(lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str) \n ) \n",
      "pred_parsed": "        return str(lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, str)\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n array = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, array \n ) \n",
      "pred_parsed": "        array = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, array\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n byte = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, bytes \n ) \n",
      "pred_parsed": "        byte = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n output = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, output \n ) \n",
      "pred_parsed": "        output = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, output\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, [] \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, []\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.height_string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.height_string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, [string] \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, [string]\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, str \n ) \n",
      "pred_parsed": "        str = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, str\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, byte_string \n ) \n",
      "pred_parsed": "        byte_string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, byte_string\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n byte = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, byte \n ) \n",
      "pred_parsed": "        byte = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, byte\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n return bytes(lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes(string)) \n",
      "pred_parsed": "        return bytes(lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes(string))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes, bytes \n ) \n",
      "pred_parsed": "        byte_string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes(string) \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes(string)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.to_bytes(string) \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, lib.to_bytes(string)\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes.length, bytes.length, bytes.length \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes.length, bytes.length, bytes.length\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "pred_parsed": "        str = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt(string)\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n byte = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes \n ) \n",
      "pred_parsed": "        byte = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes.string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes.string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.TCOD_console_c, _fmt(string) \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, lib.TCOD_console_c, _fmt(string)\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, array \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, array\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes.length, bytes.length, string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes.length, bytes.length, string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "pred_parsed": "        _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, str\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n byte_console = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, byte_console \n ) \n",
      "pred_parsed": "        byte_console = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, byte_console\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, args \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, args\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str \n ) \n",
      "pred_parsed": "        _fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, str\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.height_rect_string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.height_rect_string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt, _fmt) \n",
      "pred_parsed": "        _fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt, _fmt)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "\n byte_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, bytes \n ) \n",
      "pred_parsed": "        byte_string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, bytes\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.string\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "pred_parsed": "        _fmt = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, _fmt(string)\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, str <DED> ) \n",
      "pred_parsed": "        str = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n    self.console_c, x, y, width, height, str  )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.height_rect_fmt( \n self.console_c, x, y, width, height, lib.utils.string \n ) \n",
      "pred_parsed": "        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.height_rect_fmt(\n        self.console_c, x, y, width, height, lib.utils.string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "googleapis/python-bigquery",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/googleapis-python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:",
    "target_code": "    if type_type == SCALAR:\n        <IND>result_type = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
    "warning_line": 231,
    "pred_top-1": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if type_type == SCALAR: \n <IND> var type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if type_type == SCALAR: \n <IND> self = sub_type \n <DED> elif type_type == ARRAY: \n <IND> self = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        self = sub_type\n    elif type_type == ARRAY:\n        self = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "if type_type == SCALAR: \n <IND> var sub_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var sub_type = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "if type_type == SCALAR: \n <IND> _type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> _type = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        _type = sub_type\n    elif type_type == ARRAY:\n        _type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType = sub_type \n <DED> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        query.ArrayQueryParameterType = sub_type\n    elif type_type == ARRAY:\n        query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        sub_type = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "if type_type == SCALAR: \n <IND> if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        if type_type == SCALAR:\n            elif type_type == ARRAY:\n                type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if type_type == SCALAR: \n <IND> array_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> array_type = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        array_type = sub_type\n    elif type_type == ARRAY:\n        array_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        query.ArrayQueryParameterType = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "if type_type == SCALAR: \n <IND> tuple_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> tuple_type = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        tuple_type = sub_type\n    elif type_type == ARRAY:\n        tuple_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if type_type == SCALAR: \n <IND> ArrayParameter = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        ArrayParameter = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == 'ARRAY': \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == 'ARRAY':\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n            elif type_type == ARRAY:\n                type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if type_type == SCALAR: \n <IND> index_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> index_type = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        index_type = sub_type\n    elif type_type == ARRAY:\n        index_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "if type_type == SCALAR: \n <IND> var type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        \n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if type_type == SCALAR: \n <IND> var type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var type_ = sub_type\n            elif type_type == ARRAY:\n                type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if type_type == SCALAR: \n <IND> self = sub_type \n <IND> elif type_type == ARRAY: \n <IND> self = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        self = sub_type\n            elif type_type == ARRAY:\n                self = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == 'ARRAY': \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == 'ARRAY':\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            elif type_type == ARRAY:\n                type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == 'ARRAY': \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == 'ARRAY':\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == 'ARRAY': \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == 'ARRAY':\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if type_type == SCALAR: \n <IND> var type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        \n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            query.ArrayQueryParameterType(sub_type, name=name)\n                elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if type_type == SCALAR: \n <IND> self = sub_type \n <DED> elif type_type == ARRAY: \n <IND> self = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        self = sub_type\n    elif type_type == ARRAY:\n        self = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if type_type == SCALAR: \n <IND> var sub_type = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var sub_type = sub_type\n            elif type_type == ARRAY:\n                type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\nelif type_type == ARRAY:\n    query.ArrayQueryParameterType(sub_type, name=name)\nelif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n                elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == '': \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == '':\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "if type_type == SCALAR: \n <IND> var sub_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        var sub_type = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if type_type == SCALAR: \n <IND> if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        if type_type == SCALAR:\n            elif type_type == ARRAY:\n                query.ArrayQueryParameterType(sub_type, name=name)\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == 'ARRAY': \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == 'ARRAY':\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if type_type == SCALAR: \n <IND> request_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> request_type = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        request_type = sub_type\n    elif type_type == ARRAY:\n        request_type = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "if type_type == SCALAR: \n <IND> ArrayParameterType = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        ArrayParameterType = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n        \n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "if type_type == SCALAR: \n <IND> self = sub_type \n <DED> elif type_type == ARRAY: \n <IND> self = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        self = sub_type\n    elif type_type == ARRAY:\n        self = query.ArrayQueryParameterType(sub_type, name=name)\n        \n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if type_type == SCALAR: \n <IND> type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> self = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            self = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if type_type == SCALAR: \n <IND> if type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        if type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n        elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if type_type == SCALAR: \n <IND> self = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        self = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-45": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            query.ArrayQueryParameterType(sub_type, name=name)\n            \n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if type_type == SCALAR: \n <IND> return sub_type \n <DED> elif type_type == ARRAY: \n <IND> return query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        return sub_type\n    elif type_type == ARRAY:\n        return query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "if type_type == SCALAR: \n <IND> root = sub_type \n <DED> elif type_type == ARRAY: \n <IND> root = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        root = sub_type\n    elif type_type == ARRAY:\n        root = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            type_ = query.ArrayQueryParameterType(sub_type, name=name)\n            \n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\nelif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\nelif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> elif type_type == STRUCT: \n",
      "pred_parsed": "    if type_type == SCALAR:\n        elif type_type == ARRAY:\n            elif type_type == STRUCT:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "gitpython-developers/GitPython",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/submodule/base.py",
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "warning_line": 342,
    "pred_top-1": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Sequence[TBD], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Sequence[TBD], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> Submodule: \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> Submodule:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> Submodule: \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> Submodule:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> \"Submodule\": \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> \"Submodule\":\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> \"Submodule\":\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> Submodule: \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> Submodule:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> \"Submodule\":\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> Submodule: \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> Submodule:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Optional[Union[int, None]] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> \"Submodule\": \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> \"Submodule\":\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]], clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, \n clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None,\n            clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[str, str] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Sequence[TBD], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Sequence[TBD], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Sequence[TBD, None]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Sequence[TBD, None]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Sequence[TBD]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Sequence[TBD]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = \"\", clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = \"\", clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]], clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> Submodule: \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> Submodule:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[str, str], clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Optional[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Syntax[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Syntax[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n envs: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            envs: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None <IND> ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n                env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None  ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n envs: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            envs: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = (), clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = (), clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[Int, None] = None,\n            env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> \"Submodule\":\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n <IND>",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n                \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n \n",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n <IND>",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None\n            ) -> 'Submodule':\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "tribe29/checkmk",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk",
    "commit": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "filename": "agents/plugins/mk_postgres.py",
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        self.db_user = db_user",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        <IND>self.db_user = db_user\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 77,
    "pred_top-1": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "def __init__(self, db_user): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Optional[Dict]) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, db_user): \n # type: (Optional[str, Dict]) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (Optional[str, Dict]) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, db_user): \n # type: (dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (Optional[str, Dict]) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (Optional[str, Dict]) -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None \n <DED> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> None\nself.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (str, Optional[Dict]) -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "def __init__(self, db_user): \n # type: (Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def __init__(self, db_user): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def __init__(self, db_user): \n # type: () -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: () -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "def __init__(self, db_user): \n # type: (Str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (Str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None \n \n self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> None\n    \n    self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "def __init__(self, db_user): \n # type: (options.str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (options.str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "def __init__(self, db_user): \n \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    \n    # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "def __init__(self, db_user): \n # type: Optional[str, Dict] -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: Optional[str, Dict] -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n <DED> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (str, Dict) -> None\nself.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "def __init__(self, db_user): \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (options.str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (options.str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (Str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (Str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "def __init__(self, db_user): \n # type: ((), Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: ((), Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "def __init__(self, db_user): \n # typing: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # typing: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (str) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (str) -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: () -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: () -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "def __init__(self, db_user, instance=''): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=''):\n    # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> Dict: \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> Dict:\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict): (Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict): (Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "def __init__(self, db_user, instance = None): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance = None):\n    # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n \n self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (str, Dict) -> None\n    \n    self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "def __init__(self, db_user: Dict): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user: Dict):\n    # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "def __init__(self, db_user): \n # type: Optional[str, Dict] = None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: Optional[str, Dict] = None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: Optional[str, Dict] -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: Optional[str, Dict] -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "def __init__(self, db_user, instance=None): \n # type: ((), Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: ((), Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "def __init__(self, db_user): \n <DED> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\nself.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None <IND> <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n            # type: (str, Dict) -> None   self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None <DED> <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> None   self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def __init__(self, db_user): \n # type: (_, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (_, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def __init__(self, db_user): <IND> # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):  # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user <IND>",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> None\n            self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "def __init__(self, db_user, instance=None): \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n        self.db_user = db_user\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "def __init__(self, db_user): \n # type: Optional[Dict] -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: Optional[Dict] -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def __init__(self, db_user): <DED> # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):  # type: (str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dyct) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dyct) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "def __init__(self, db_user): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user <DED>",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def __init__(self, db_user): \n # type: (Symbol, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (Symbol, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "def __init__(self, db_user): \n # type: (Token, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (Token, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "def __init__(self, db_user): \n # type: (Str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: (Str, Dict) -> None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def __init__(self, db_user): \n # type: Optional[Dict] = None \n <IND> self.db_user = db_user \n",
      "pred_parsed": "    def __init__(self, db_user):\n    # type: Optional[Dict] = None\n        self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "fscdev/vkwave",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/fscdev-vkwave",
    "commit": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "filename": "vkwave/bots/easy/easy_bot.py",
    "source_code": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        loop = loop or asyncio.get_event_loop()",
    "target_code": "\n    <DED>def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
    "warning_line": 137,
    "pred_top-1": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop -> None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop -> None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> bool: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> bool:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <IND> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = ''): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = ''):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <IND> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop()): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop()):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = \"\"): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = \"\"):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop | None = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop | None = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\nloop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop():\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None:\nloop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def run_forever(self): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.get_event_loop():\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n \n def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    \n    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> str: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> str:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n \n def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    \n    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n \n loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n    \n    loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.Loop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.Loop:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop && asyncio.get_event_loop()): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop && asyncio.get_event_loop()):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = ()): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = ()):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Optional[loop]: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Optional[loop]:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n \n loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None:\n    \n    loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def run_forever(self, loop: optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Loop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Loop:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def run_forever(self, loop: option[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: option[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> none: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> none:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop = \"\"): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Asyncio.AbstractEventLoop = \"\"):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.create_event_loop(loop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.create_event_loop(loop):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop() -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.get_event_loop() -> None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def run_forever(self, loop: option(asyncio.AbstractEventLoop)): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: option(asyncio.AbstractEventLoop)):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.Events.None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.Events.None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop = ''): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Asyncio.AbstractEventLoop = ''):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop => None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop => None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Elliptic: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Elliptic:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Run(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Run():\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop) -> None:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<IND> <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def run_forever(self, loop: 'AbstractEventLoop'): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: 'AbstractEventLoop'):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop = \"\"): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = \"\"):\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Optional[Loop]: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.events.Optional[Loop]:\n        loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() <IND>",
      "pred_parsed": "    def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None):\n            loop = loop or asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "open-telemetry/opentelemetry-python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python",
    "commit": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " timestamp is declared to have type `int` but is used as type `None`.",
    "warning_line": 207,
    "pred_top-1": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "attributes: types.Attributes = None, \n timestamp: types.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: types.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "attributes: types.Attributes = None, \n timestamp: Type.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: Type.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <IND>",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n            ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, <IND> ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n            timestamp: typing.Optional[int] = None,  ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "attributes: types.Attributes = None, <DED> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,  timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "attributes: types.Attributes = None, <IND> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,  timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <DED>",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n    ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, <DED> ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n    timestamp: typing.Optional[int] = None,  ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type=\"int\", \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type=\"int\",\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n () -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        () -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type \"\" = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type \"\" = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "attributes: types.Attributes = None, \n timestamps: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamps: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type * (int) = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type * (int) = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n <IND>",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "attributes: types.Attributes = None, \n timestamp: options.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: options.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ): \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type=\"None\", \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type=\"None\",\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "attributes: types[Attributes] = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types[Attributes] = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n <DED>",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "attributes: types.Attributes = None, \n timestamp: int, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: int,\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type=\"Int\", \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type=\"Int\",\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type \"\": Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type \"\": Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "attributes: types.Attributes = None, \n timestamp: Type[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: Type[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "attributes: types.Attributes = None, \n timestamp: options.Int = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: options.Int = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "attributes: types.Attributes = None, \n timestamp: options.None = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: options.None = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type [int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type [int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "attributes: types.Attributes = None, \n timestamp = typing.Optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp = typing.Optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typeError = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typeError = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type \"None\", \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type \"None\",\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type \"int\", \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type \"int\",\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type * 1) isint(int), \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type * 1) isint(int),\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type \"\": int, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type \"\": int,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typeName = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typeName = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "attributes: types.Attributes = None, \n timestamp: optional[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: optional[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int]=None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int]=None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "attributes: types.Attributes = None, \n timestamp: TypeError = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: TypeError = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) () -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) () -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type_name = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type_name = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "attributes: types.Attributes = None, \n timestamp: types[int] = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: types[int] = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type=\"string\" | None = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type=\"string\" | None = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n )) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        )) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "attributes: types.Attributes = None, \n timestamp: type * 1) is not None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: type * 1) is not None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "attributes: types.Attributes = None, \n timestamp: options.int = None, \n ) -> None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: options.int = None,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) > None: \n",
      "pred_parsed": "        attributes: types.Attributes = None,\n        timestamp: typing.Optional[int] = None,\n        ) > None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "deepchem/deepchem",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/deepchem-deepchem",
    "commit": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]",
    "target_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
    "warning_line": 161,
    "pred_top-1": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  ]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# First type of supported featurizers \n <DED> \n supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  \n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[Str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[Str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n <DED> # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n# type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers_ = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers_ = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[Featurizer] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[Featurizer]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[ElementPropertyFingerprint] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[ElementPropertyFingerprint]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers_list = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers_list = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[List[str]] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[List[str]]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n #1 supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  #1 supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('Featurizer'): \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('Featurizer'):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers= ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers= ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str], ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[str], ['ElementPropertyFingerprint']\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "# First type of supported featurizers \n \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  \nsupported_featurizers = ['ElementPropertyFingerprint']\n# type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n elif isinstance('ElementPropertyFingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  elif isinstance('ElementPropertyFingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n <IND> # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n      # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n # type: List[Str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  # type: List[Str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if isinstance('ElementPropertyFingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if isinstance('ElementPropertyFingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\nsupported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  ] # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('Fingerprint'): \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('Fingerprint'):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n ] <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n]  supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> supported_featurizers.push('ElementPropertyFingerprint') \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      supported_featurizers.push('ElementPropertyFingerprint')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('Fingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('Fingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers_= ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers_= ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n <DED>",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n  \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers_number = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers_number = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n <IND>",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n      \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('Featurizer'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('Featurizer'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n <IND>",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n          \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "# First type of supported featurizers \n <DED> \n supported_featurizers = ['ElementPropertyFingerprint'] \n <DED> # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  \n  supported_featurizers = ['ElementPropertyFingerprint']\n# type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('Featurizer'): \n <IND> # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('Featurizer'):\n      # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if isinstance('Featurizer'): \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if isinstance('Featurizer'):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if supported_featurizers is None: \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if supported_featurizers is None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <DED> # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n# type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n \n supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n  \n  supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = List['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = List['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n #1 supported_featurizers = ['ElementPropertyFingerprint'] \n #2 supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  #1 supported_featurizers = ['ElementPropertyFingerprint']\n  #2 supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers_num = ['ElementPropertyFingerprint'] \n # type: List[str] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers_num = ['ElementPropertyFingerprint']\n  # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if isinstance('Featurizer'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if isinstance('Featurizer'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> raised_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      raised_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('elementPropertyFingerprint'): \n <IND> supported_featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('elementPropertyFingerprint'):\n      supported_featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint'] \n if not isinstance('ElementPropertyFingerprint'): \n <IND> featurizers = ['ElementPropertyFingerprint'] \n \n",
      "pred_parsed": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint']\n  if not isinstance('ElementPropertyFingerprint'):\n      featurizers = ['ElementPropertyFingerprint']\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "lykoss/lykos",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lykoss-lykos",
    "commit": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "filename": "src/users.py",
    "source_code": "            if self is Bot:\n                Bot = new",
    "target_code": "            <DED>if self is Bot:\n                <IND>assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " Bot is declared to have type `BotUser` but is used as type `User`.",
    "warning_line": 460,
    "pred_top-1": {
      "pred": "<DED> if self is Bot: \n <IND> new_Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new_Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> if self is Bot: \n <IND> new Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> if self is Bot: \n <IND> _Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                _Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> if self is Bot: \n <IND> newBot = new \n",
      "pred_parsed": "            if self is Bot:\n                newBot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "<DED> if self is Bot: \n <IND> new = new \n",
      "pred_parsed": "            if self is Bot:\n                new = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "<DED> if self is Bot: \n <IND> Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<DED> if self is Bot: \n <IND> BotUser = new \n",
      "pred_parsed": "            if self is Bot:\n                BotUser = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> if self is Bot: \n <IND> var Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                var Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> if self is Bot: \n <IND> User = new \n",
      "pred_parsed": "            if self is Bot:\n                User = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "<DED> if self is Bot: \n <IND> bot = new \n",
      "pred_parsed": "            if self is Bot:\n                bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<DED> if self is Bot: \n <IND> new[Bot] = new \n",
      "pred_parsed": "            if self is Bot:\n                new[Bot] = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> if self is Bot: \n <IND> assert new Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert new Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> if self is Bot: \n <IND> self = new Bot() \n",
      "pred_parsed": "            if self is Bot:\n                self = new Bot()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> if self is Bot: \n <IND> new_Bot = new <DED> if self is new_Bot: \n <IND> new_Bot = new_Bot \n",
      "pred_parsed": "            if self is Bot:\n            new_Bot = new  if self is new_Bot:\n                new_Bot = new_Bot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> if self is Bot: \n <IND> user = new \n",
      "pred_parsed": "            if self is Bot:\n                user = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "<DED> if self is bot: \n <IND> new_Bot = new \n",
      "pred_parsed": "            if self is bot:\n                new_Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> if self is Bot: \n <IND> newBoolBot = new \n",
      "pred_parsed": "            if self is Bot:\n                newBoolBot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(str, 'Bob') \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(str, 'Bob')\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> if self is Bot: \n <IND> new_Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new_Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(Bob, User) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(Bob, User)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(str, str) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(str, str)\n                Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(Bot, User) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(Bot, User)\n                Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "<IND> if self is Bot: \n <IND> new_Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new_Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(BobUser, Bot) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(BobUser, Bot)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> if self is Bot: \n <IND> new_Bot = new <DED> if self is new_Bot: \n <DED> new_Bot = new_Bot \n",
      "pred_parsed": "            if self is Bot:\n            new_Bot = new  if self is new_Bot:\n        new_Bot = new_Bot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> if self is Bot: \n <IND> newLogger = new Logger() \n",
      "pred_parsed": "            if self is Bot:\n                newLogger = new Logger()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> if self is _Bot: \n <IND> _Bot = new \n",
      "pred_parsed": "            if self is _Bot:\n                _Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> if self is Bot: \n <IND> new_Bot = new <DED> if self._Bot is not None: \n <IND> new_Bot = new \n",
      "pred_parsed": "            if self is Bot:\n            new_Bot = new  if self._Bot is not None:\n                new_Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> if self is Bot: \n <IND> add new TypeError('Boolean must be a bot!') \n",
      "pred_parsed": "            if self is Bot:\n                add new TypeError('Boolean must be a bot!')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(str, 'BobUser') \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(str, 'BobUser')\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> if self is bot: \n <IND> new Bot = new \n",
      "pred_parsed": "            if self is bot:\n                new Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> if self is bot: \n <IND> _Bot = new \n",
      "pred_parsed": "            if self is bot:\n                _Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> if self is Bot: \n <IND> new _Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new _Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> if self is Bot: \n <IND> utils = new \n",
      "pred_parsed": "            if self is Bot:\n                utils = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "<DED> if self is Bot: \n <IND> use_Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                use_Bot = new\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "<DED> if self is Bot: \n <IND> isinstance(Bot, User) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                isinstance(Bot, User)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "\n <DED> if self is Bot: \n <IND> new Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> if self is bot: \n <IND> newBot = new \n",
      "pred_parsed": "            if self is bot:\n                newBot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(Bot, user) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(Bot, user)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> if self is Bot: \n <IND> new_Bot = new_Bot \n",
      "pred_parsed": "            if self is Bot:\n                new_Bot = new_Bot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(str, sr) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(str, sr)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> if self is Bot: \n <IND> new Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> if self is Bot: \n <IND> new.Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                new.Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(str, src) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(str, src)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> if self is Bot: \n <IND> assert new isinstance(Bob, User) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert new isinstance(Bob, User)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance('Bot', 'User') \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance('Bot', 'User')\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> if self is Bot: \n <IND> assert new isinstance(Bot, User) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert new isinstance(Bot, User)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> if self is Bot: \n <IND> assert isinstance(BobUser, bot) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                assert isinstance(BobUser, bot)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> if self is 'Bot': \n <IND> new Bot = new \n",
      "pred_parsed": "            if self is 'Bot':\n                new Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> if self is Bot: \n <IND> isinstance(BobUser, Bot) \n Bot = new \n",
      "pred_parsed": "            if self is Bot:\n                isinstance(BobUser, Bot)\n                Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "awslabs/aws-lambda-powertools-python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python",
    "commit": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " error is declared to have type `Exception` but is used as type `None`.",
    "warning_line": 658,
    "pred_top-1": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self, \n method_name: str, \n error: Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self, \n method_name: Optional[Str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[Str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[baseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[baseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: BaseSegment = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "self, \n method_name: Exception, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Exception,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "self, \n method_name: Optional[Str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[Str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self, \n method_name: Optional[ST] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[ST] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self, \n method_name: Optional[STR] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[STR] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, <IND>",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n            capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self, <IND> method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,  method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, <DED> subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n    error: Optional[Exception] = None,  subsegment: Optional[BaseSegment] = None,\n    capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, <IND> subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n            error: Optional[Exception] = None,  subsegment: Optional[BaseSegment] = None,\n            capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self, <DED> method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,  method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self, \n method_name: Optional[str] = None, <DED> error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n    method_name: Optional[str] = None,  error: Optional[Exception] = None,\n    subsegment: Optional[BaseSegment] = None,\n    capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, <IND> capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n            subsegment: Optional[BaseSegment] = None,  capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, <DED>",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n    capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self, \n method_name: Optional[str] = None, <IND> error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n            method_name: Optional[str] = None,  error: Optional[Exception] = None,\n            subsegment: Optional[BaseSegment] = None,\n            capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self, \n method_name: str, \n error: TypeError = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: TypeError = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, <DED> capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n    subsegment: Optional[BaseSegment] = None,  capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self, \n method_name, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Exception,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self, \n method_name: str, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self, \n method_name: Optional[stan] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[stan] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self, \n method_name = str, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name = str,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self, \n method_name: str, \n error: TypeError, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: TypeError,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "self, \n method_name: str, \n error: Optional[Exception] = None, \n subsegment: BaseSegment = None, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "self, \n method_name, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "self, \n method_name: Exception, \n error: Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Exception,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "self, \n method_name: str = '', \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str = '',\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "self, \n method_name: str, \n error: TypeError = Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: TypeError = Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self, \n method_name: str, \n error: Exception, <DED> subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n    error: Exception,  subsegment: BaseSegment,\n    capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "self, \n method_name: str = '', \n error: Exception, \n subsegment: BaseSegment = '', \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str = '',\n        error: Exception,\n        subsegment: BaseSegment = '',\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self, \n method_name: str, \n error: Exception, <IND> subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n            error: Exception,  subsegment: BaseSegment,\n            capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "self, <DED> method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,  method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, <IND>",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n            capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "self, \n method_name: str, <DED> error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n    method_name: str,  error: Exception,\n    subsegment: BaseSegment,\n    capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "self, \n method_name: str, \n error: str, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: str,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "self, \n method_name: String, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: String,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, <IND> capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n            subsegment: BaseSegment,  capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "self, <IND> method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,  method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "self, \n method_name: str, <IND> error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n            method_name: str,  error: Exception,\n            subsegment: BaseSegment,\n            capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n cap_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Optional[str] = None,\n        error: Optional[Exception] = None,\n        subsegment: Optional[BaseSegment] = None,\n        cap_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, <DED> capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n    subsegment: BaseSegment,  capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "self, \n method_name: str, \n error: Optional[exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Optional[exception] = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, <DED>",
      "pred_parsed": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n    capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "self, \n method_name: Str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: Str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self, \n method_name: str, \n error: StandardError = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "pred_parsed": "        self,\n        method_name: str,\n        error: StandardError = None,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "hsahovic/poke-env",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hsahovic-poke-env",
    "commit": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "filename": "src/poke_env/environment/pokemon.py",
    "source_code": "        details = details.split(\", \")",
    "target_code": "\n        <DED>split_details = details.split(\", \")\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " details is declared to have type `str` but is used as type `List[str]`.",
    "warning_line": 229,
    "pred_top-1": {
      "pred": "\n <DED> details_ = details.split(\", \") \n \n",
      "pred_parsed": "        details_ = details.split(\", \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), [_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), [_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), [_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), [_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)])) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")),",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"),",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty)",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n <DED> details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty[_defineProperty])) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n    details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty[_defineProperty]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), \"_defineProperty(_defineProperty\", \"_defineProperty\"), \"_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), \"_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), \"_defineProperty(_defineProperty\", \"_defineProperty\"), \"_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), \"_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\"), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\"), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n <DED> details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))) \n \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n    details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n <DED> details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n    details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty)), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), \"_defineProperty(_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty(_defineProperty\"), \"_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), \"_defineProperty(_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty(_defineProperty\"), \"_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), \"_defineProperty(_defineProperty\", \"_defineProperty\"), \"_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\", \"",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), \"_defineProperty(_defineProperty\", \"_defineProperty\"), \"_defineProperty(_defineProperty\")\", \"_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\", \"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n <DED> details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n    details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), _defineProperty\"), _defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"), _defineProperty\"), _defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"),",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))], [_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))], [_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty]))) \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty))[0]] = details\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")](_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty])))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty,",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")) \n <DED> details = _defineProperty(_defineProperty(_defineProperty(_defineProperty[_defineProperty])) \n \n",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n        details = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n    details = _defineProperty(_defineProperty(_defineProperty(_defineProperty[_defineProperty]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\"))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty\")",
      "pred_parsed": "        _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty\")), _defineProperty(_defineProperty(_defineProperty\")), [_defineProperty(_defineProperty(_defineProperty\")], [_defineProperty(_defineProperty(_defineProperty(_defineProperty\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "source_code": "def batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
    "target_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 84,
    "pred_top-1": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n \n def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "\ndef batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { }\n):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { }\n) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str] = { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n \n return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str] = { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str] = { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str] = { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n \n def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "\ndef batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "<DED> <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Optional[typing.Dict[str, str]]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): <IND> <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):   return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], <IND>",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\n        return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n \n def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "\ndef batch_start(identifier: str, batch_type: str,\ntags: typing.Dict[str, str]= { } ):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { }\n):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= { } \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { }\n) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): <DED> <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):   return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], <DED>",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <IND> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str,  tags: typing.Dict[str, str] = { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { } \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str] = { }\n) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]= { } ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)",
    "target_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " privilege is declared to have type `str` but is used as type `None`.",
    "warning_line": 47,
    "pred_top-1": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv: set() # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv: set() # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv: Set[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv: Set[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv: Set[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv: Set[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv: Set[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv: Set[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { 0: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { 0: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv: set() # type: Set[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv: set() # type: Set[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { 0: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { 0: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str='') -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str='') -> None:\n        self.validatefunc(func)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { All: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { All: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { [str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { [str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { [\"Set\"]: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { [\"Set\"]: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { [str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { [str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { (): { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { All: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { All: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { 0: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { 0: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str] = None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { '\"': { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { '\"': { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv: set() # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv: set() # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { () => None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n            def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n                self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { [\"Set\"]: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { [\"Set\"]: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { None: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n            def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n                self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=[]) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { []: { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: str=[]) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n            def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n                self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: Optional[str]= None) -> None: \n <IND> self.validatefunc(func) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        self.commands_per_priv = { \"\": { } } # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set() # type: Set[str]\n        \n    def add(self, verb: str, func: Callable, privilege: Optional[str]= None) -> None:\n        self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "RDFLib/rdflib",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib",
    "commit": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "filename": "rdflib/plugins/sparql/algebra.py",
    "source_code": "def translateAlgebra(query_algebra: Query = None):",
    "target_code": "\n<DED>def translateAlgebra(query_algebra: Query):\n    <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " query_algebra is declared to have type `Query` but is used as type `None`.",
    "warning_line": 804,
    "pred_top-1": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> None:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <IND> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <DED>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n \n",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Query):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n \n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "\ndef translateAlgebra(query_algebra: Optional[Query] = None):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> bool: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> bool:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <IND> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> None:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n \n def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "\ndef translateAlgebra(query_algebra: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): <IND> <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[QUERY_ALGEBRA] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[QUERY_ALGEBRA] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query_algebra] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query_algebra] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Querie] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Querie] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n <DED>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> None:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Null: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Null:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): <DED> <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[str]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[str]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n \n",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Union[Query, None] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Union[Query, None] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> []: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> []:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Sequence]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Sequence]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[None]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[None]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def translateAlgebra(query_algebra): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n <DED> def translateAlgebra(quesry_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(quesry_algebra: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[QUERY_ALGEBRA]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[QUERY_ALGEBRA]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Query_algebra]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Query_algebra]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[False]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[False]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) ->'string': \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) ->'string':\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Object: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Object:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n \n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n <IND>",
      "pred_parsed": "\ndef translateAlgebra(query_algebra: Optional[Query] = None) -> None:\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> 'none': \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> 'none':\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> \"\"\"\"\" \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> \"\"\"\"\"\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n \n <IND> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "pred_parsed": "\n    def translateAlgebra(query_algebra: Optional[Query] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def translateAlgebra(QUERY_ALGEBRA: Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(QUERY_ALGEBRA: Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[List[str]]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[List[str]]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Mapping[str, str]]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Mapping[str, str]]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> \"\": \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> \"\":\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Nothing: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Nothing:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> np.ndarray: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> np.ndarray:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Mapping[str, str]] = None: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Mapping[str, str]] = None:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def translateAlgebra(query_algebra -> Optional[Query] = None): \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra -> Optional[Query] = None):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Query]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Query]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> '': \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> '':\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Querie]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Querie]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Default: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Default:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Language]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> Optional[Language]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> All[str]: \n <IND>",
      "pred_parsed": "def translateAlgebra(query_algebra: Optional[Query] = None) -> All[str]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "filename": "allennlp/training/trainer.py",
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
    "warning_line": 1235,
    "pred_top-1": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer], \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer],\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Lazy[Checkpointer]] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Lazy[Checkpointer]] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Optional[Lazy[Optimizer]] = None,\n        learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None,\n        momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None,\n        moving_average: Optional[Lazy[MovingAverage]] = None,\n        checkpointer: Optional[Lazy[Checkpointer]] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage, Lazy[MovingAverage, Lazy[Checkpointer]] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage, Lazy[MovingAverage, Lazy[Checkpointer]] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n <IND>",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n <IND>",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler], \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler],\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n <DED>",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n <DED>",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler], \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler],\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage], \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage],\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer],\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n tensorboard_writer: List[TensorboardWriter] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Lazy[Checkpointer]] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        tensorboard_writer: List[TensorboardWriter] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Lazy[Checkpointer]] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler, Lazy[MomentumScheduler]] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler, Lazy[MomentumScheduler]] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage, Lazy[MovingAverage]] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage, Lazy[MovingAverage]] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "no_grad: List[str] = None, \n optimization: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimization: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Lazy[Checkpointer]] = None, \n batch_callbacks: List[BatchCallback] = None, \n \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Lazy[Checkpointer]] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, <DED> momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n    learning_rate_scheduler: List[LearningRateScheduler] = None,  momentum_scheduler: List[MomentumScheduler] = None,\n    moving_average: List[MovingAverage] = None,\n    checkpointer: List[Checkpointer] = None,\n    batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, <DED> learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n    optimizer: List[Optimizer] = None,  learning_rate_scheduler: List[LearningRateScheduler] = None,\n    momentum_scheduler: List[MomentumScheduler] = None,\n    moving_average: List[MovingAverage] = None,\n    checkpointer: List[Checkpointer] = None,\n    batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, <IND> momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n            learning_rate_scheduler: List[LearningRateScheduler] = None,  momentum_scheduler: List[MomentumScheduler] = None,\n            moving_average: List[MovingAverage] = None,\n            checkpointer: List[Checkpointer] = None,\n            batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, <IND> learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n            optimizer: List[Optimizer] = None,  learning_rate_scheduler: List[LearningRateScheduler] = None,\n            momentum_scheduler: List[MomentumScheduler] = None,\n            moving_average: List[MovingAverage] = None,\n            checkpointer: List[Checkpointer] = None,\n            batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, <DED> moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n    momentum_scheduler: List[MomentumScheduler] = None,  moving_average: List[MovingAverage] = None,\n    checkpointer: List[Checkpointer] = None,\n    batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, <IND> moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n            momentum_scheduler: List[MomentumScheduler] = None,  moving_average: List[MovingAverage] = None,\n            checkpointer: List[Checkpointer] = None,\n            batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, <IND>",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n            batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, <DED>",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n    batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = Lazy[Optimizer] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = Lazy[Optimizer] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "no_grad: List[str] = None, \n maximizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        maximizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, <IND> checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n            moving_average: List[MovingAverage] = None,  checkpointer: List[Checkpointer] = None,\n            batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, <DED> checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n    moving_average: List[MovingAverage] = None,  checkpointer: List[Checkpointer] = None,\n    batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, <IND> batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n            checkpointer: List[Checkpointer] = None,  batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "no_grad: List[str] = None, \n maximizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        maximizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n shifting_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        shifting_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "no_grad: List[str] = None, \n optimizer: List[Optimizer], \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: List[Optimizer],\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "no_grad: List[str] = None, <IND> optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,  optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "no_grad: List[str] = None, <DED> optimizer: List[Optimizer] = None, \n learning_rate_scheduler: List[LearningRateScheduler] = None, \n momentum_scheduler: List[MomentumScheduler] = None, \n moving_average: List[MovingAverage] = None, \n checkpointer: List[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "pred_parsed": "        no_grad: List[str] = None,  optimizer: List[Optimizer] = None,\n        learning_rate_scheduler: List[LearningRateScheduler] = None,\n        momentum_scheduler: List[MomentumScheduler] = None,\n        moving_average: List[MovingAverage] = None,\n        checkpointer: List[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "trailofbits/pip-audit",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/trailofbits-pip-audit",
    "commit": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " extras is declared to have type `bool` but is used as type `None`.",
    "warning_line": 46,
    "pred_top-1": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = False,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "version: Version, \n url = Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url = Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "version: Version, \n url: Optional[str] = False, \n extras: Optional[bool] = False, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = False,\n        extras: Optional[bool] = False,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, <IND>",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n            is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "version: Version, <DED> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,  url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "version: Version, \n urls: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        urls: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "version: Version, <IND> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,  url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "version: Version, \n url= Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url= Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, <DED>",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n    is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = \"\", \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = \"\",\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <IND> is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n            extras: Optional[bool] = None,  is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "version: Version, \n url: Optional[str] = \"\", \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = \"\",\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "version: Version, \n url: Optional[str] = False, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = False,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "version: Version, \n url: Optional[str], \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str],\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "version: Version, \n url: Optional[str] = None, <IND> extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n            url: Optional[str] = None,  extras: Optional[bool] = None,\n            is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <DED> is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n    extras: Optional[bool] = None,  is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "version: Version, \n url: Optional[str] = None, <DED> extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n    url: Optional[str] = None,  extras: Optional[bool] = None,\n    is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "version: Version, \n url: bool = False, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: bool = False,\n        extras: bool = False,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n <DED> is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n    is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n <IND> is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n            is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        \n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "version: Version, \n url: Optional[str] = '', \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = '',\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "version: Version, \n URL: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        URL: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "version: Version, \n url: Optional[str] = 'undefined', \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = 'undefined',\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "version: Version, \n url: Optional[str] = Nothing, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = Nothing,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "version: Version, \n url: Optional[str] = Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "version: Version, \n url: Optional[str] = (), \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = (),\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "version: Version, \n url: Optional[str] = False, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = False,\n        extras: bool = False,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "version: Version, \n url=Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url=Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "version: Version, \n option_url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        option_url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = '', \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = '',\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = False, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = False,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "version: Version, \n optional_url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        optional_url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "version: Version, \n url(optional[str]) = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url(optional[str]) = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "version: Version, \n url: Optional[str] | None = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] | None = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "version: Version, \n url: Optional[str] = none, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = none,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = 0, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = 0,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "version: Version, \n url: Optional[str] = All, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = All,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "version: Version, \n url: Optional[Str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[Str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "version: Version, \n url: Optional[str] = No, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = No,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: options.bool = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: options.bool = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "version: Version, \n url[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "version: Version, \n url: bool = False, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: bool = False,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = 0, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = 0,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "version: Version, \n url: Optional[str] = None, \n extras: bool = 1, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = 1,\n        is_wheel: bool = True,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "version: Version, \n url, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "pred_parsed": "        version: Version,\n        url,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "torproject/stem",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count",
    "target_code": "    <IND>count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " seconds is declared to have type `int` but is used as type `float`.",
    "warning_line": 416,
    "pred_top-1": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> count = float(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = float(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> count = int(sec(seconds / amount)) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(sec(seconds / amount))\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= number \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= number\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= number of seconds \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= number of seconds\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= int(seconds / amount)\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= sum \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= sum\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= quantity \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= quantity\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label[.strip()]] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label[.strip()]] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount <DED> time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\nseconds %= amount  time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> count = int(seconds / amount) \n %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> count = int(seconds / number) \n seconds %= number \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / number)\n    seconds %= number\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n count = float(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = float(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount <IND> time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n        seconds %= amount  time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= value \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= value\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> count = int(seconds / amount) <DED> seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)  seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= total amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= total amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> count = int(seconds / amount) <IND> seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)  seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count <DED>",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\ntime_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count <IND>",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n        time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= num \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= num\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> count = float(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = float(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "<IND> count = integer(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = integer(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> count = int(sec(seconds / amount)) \n seconds %= sum \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(sec(seconds / amount))\n    seconds %= sum\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amounts \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amounts\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = label.strip() \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = label.strip()\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "<IND> count = int(seconds/ amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds/ amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %== amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %== amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> count = int(seconds / quantity) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / quantity)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= number <DED> time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\nseconds %= number  time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> count = int(seconds / amount) \n second %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    second %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "<IND> count = int(seconds / number) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / number)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= limit \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= limit\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = number \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = number\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= size \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= size\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= number <IND> time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n        seconds %= number  time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> count = int(seconds / sum) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / sum)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "<IND> count = int(seconds / value) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / value)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> count = floating(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = floating(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = [] \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = []\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "<IND> count = int(seconds/number) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds/number)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= count \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= count\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= num <DED> time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / amount)\nseconds %= num  time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = label.strip() \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = label.strip()\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "\n count = int(seconds / number) \n seconds %= number \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds / number)\n    seconds %= number\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> count = (seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = (seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()]= count \n",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()]= count\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "<IND> count = int(seconds = amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "pred_parsed": "    count = int(seconds = amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "poljar/matrix-nio",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "source_code": "        homeserver = urlparse(homeserver) if homeserver else None",
    "target_code": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "warning_line": 104,
    "pred_top-1": {
      "pred": "\n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> if urllib.parse(homeserver) else None \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        if urllib.parse(homeserver) else None\n        homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> urlparse(homeserver) if urllib.parse.ParseResult else None \n \n",
      "pred_parsed": "        urlparse(homeserver) if urllib.parse.ParseResult else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.Result) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.Result)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> homeserver = urlparse(str(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(str(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.ParseResult) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.ParseResult)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> homeserver = urlparse(server) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(server) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(homeserver) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(homeserver)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.Result else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.Result else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> urlparse(homeserver) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(homeserver) if urllib.parse.ParseResult else None\n    homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(homeserver) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else Result \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else Result\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0 \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse.ParseResult(homeserver) \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse.ParseResult(homeserver)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.Result else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.Result else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n        homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> homeserver = urlparse(urllib.parse(server)) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = urlparse(urllib.parse(server)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.Result) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.Result)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> homeserver = str(urlparse(homeserver)) if homeserver else None \n \n",
      "pred_parsed": "        homeserver = str(urlparse(homeserver)) if homeserver else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else '' \n \n",
      "pred_parsed": "        urlparse(urllib.parse.ParseResult) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.Result) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.Result)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None \n <DED> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(homeserver) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.Result else None\n    homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(homeserver)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None \n <IND> homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.ParseResult) \n \n",
      "pred_parsed": "        urlparse(urllib.parse(homeserver)) if urllib.parse.ParseResult else None\n            homeserver = urlparse(urllib.parse(homeserver)) if homeserver else boollib.parse(urllib.parse.ParseResult)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Project-MONAI/MONAI",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAI",
    "commit": "718d11abb2310ab74321256032a264488a7883b4",
    "filename": "monai/visualize/img2tensorboard.py",
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[str, str] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[dict] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[dict] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[dict] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Optional[dict] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Optional[typing.Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int], typing.Optional[str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int], typing.Optional[str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str], str] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[str, str], str] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str], str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[str, str], str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[2]]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[2]]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int, int]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int, int]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[0], typing.Optional[1], typing.Optional[2]]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[0], typing.Optional[1], typing.Optional[2]]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[0], typing.Optional[1]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[0], typing.Optional[1]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: Typing.Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Typing.Dict[str, str] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int], typing.Any]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int], typing.Any]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[2], typing.Optional[3]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[2], typing.Optional[3]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1,...]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1,...]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[0], typing.Dict[1], typing.Dict[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[0], typing.Dict[1], typing.Dict[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[0], typing.Optional[1], typing.Optional[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[0], typing.Optional[1], typing.Optional[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[1]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[1]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1, 1, 2, 3]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1, 1, 2, 3]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[1] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[1] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[1], typing.Dict[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[1], typing.Dict[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[dict] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[dict] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[0], typing.Optional[1], typing.Optional[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[0], typing.Optional[1], typing.Optional[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], typing.Optional[1], typing.Optional[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], typing.Optional[1], typing.Optional[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[typing.Any, typing.Any] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[typing.Any, typing.Any] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[int, int] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[int, int] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[0], typing.Optional[1]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[0], typing.Optional[1]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1, 1, 2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1, 1, 2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[0], typing.Optional[1], typing.Optional[2]]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[0], typing.Optional[1], typing.Optional[2]]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1], Typing.Optional[2]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1], Typing.Optional[2]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int, typing.Any]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int, typing.Any]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str], \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[str, str],\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int,...]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int,...]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[int, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[int, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, <IND>",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[str, str]] = None,\n        scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[any, any] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Dict[any, any] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[[str, str], str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[[str, str], str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[...,...]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[...,...]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[1, typing.Any], typing.Optional[str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[1, typing.Any], typing.Optional[str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "image_axes: Sequence[int] = (1, 2), <DED> other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),  other_indices: typing.Optional[typing.Dict[str, str]] = None,\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, <DED>",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: typing.Optional[typing.Dict[str, str]] = None,\nscale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "osmocom/pysim",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/osmocom-pysim",
    "commit": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "filename": "pySim/filesystem.py",
    "source_code": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "target_code": "\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rec_len is declared to have type `int` but is used as type `None`.",
    "warning_line": 687,
    "pred_top-1": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent=Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent=Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:CardDF=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:CardDF=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n \n",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent=Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent=Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str, desc:str,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <DED>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: optional[int]=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len: optional[int]=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF] = None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF] = None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "\n def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\", \n parent: Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=\"\", name:str=\"\", desc:str=\"\",\n    parent: Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent:CardDF=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent:CardDF=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=\"\", desc:str=\"\", \n parent: Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=\"\", desc:str=\"\",\n    parent: Optional[CardDF]=None, rec_len:int=\"\", size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n \n",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "\n def __init__(self, fid:str, sfid:str= None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str= None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <IND> parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,  parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "\n def __init__(self, fid:str, sfid:str=0, name:str=0, desc:str=0, \n parent: Optional[CardDF]=None, rec_len:int=0, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=0, name:str=0, desc:str=0,\n    parent: Optional[CardDF]=None, rec_len:int=0, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <DED> parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,  parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "\n def __init__(self, fid:str, sfid:str='', name:str='', desc:str='', \n parent: Optional[CardDF]='', rec_len:int='', size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str='', name:str='', desc:str='',\n    parent: Optional[CardDF]='', rec_len:int='', size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n \n",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "<DED> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:args=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:args=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent= Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent= Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n def __init__(self, fid:str, sfid:str='', name:str='', desc:str='', \n parent:Optional[CardDF]='', rec_len:int='', size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str='', name:str='', desc:str='',\n    parent:Optional[CardDF]='', rec_len:int='', size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <DED>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <DED> parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,  parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=0, desc:str=0, \n parent: Optional[CardDF]=None, rec_len:int=0, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=0, desc:str=0,\n    parent: Optional[CardDF]=None, rec_len:int=0, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n def __init__(self, fid:str, sfid:str=All, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=All, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <DED>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name=str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name=str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, <IND> parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,  parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:CardDF = None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:CardDF = None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF] = None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None,\n    parent: Optional[CardDF] = None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None: \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:Int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent: Optional[CardDF]=None, rec_len:Int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def __init__(self, fid:str, sfid:str=All, name:str=All, desc:str=All, \n parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ): \n <IND>",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=All, name:str=All, desc:str=All,\n    parent: Optional[CardDF]=None, rec_len:int=None, size= { 1,None } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/contexts/__init__.py",
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " symbol_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 120,
    "pred_top-1": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> def object(self, \n symbol_name: typing.Optional[str] = None, \n type_name: typing.Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: typing.Optional[str] = None,\n    type_name: typing.Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<IND> def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n        type_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n        symbol_name: Optional[str] = None,  type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None] = None,\n    type_name: Union[str, None] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\nsymbol_name: Optional[str] = None,  type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\ntype_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "<IND> def object(self, \n symbol_name: option[str] = None, \n type_name: Option[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: option[str] = None,\n    type_name: Option[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> def object(self, \n symbol_name, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> def object(self, \n symbol_name: optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> def object(self, \n symbol_name: str = '', \n type_name: str = '', \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = '',\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "<DED> def object(self, \n symbol_name: typing.Optional[str] = None, \n type_name: typing.Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: typing.Optional[str] = None,\n    type_name: typing.Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> def object(self, \n simbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    simbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> def object(self, \n symbol_name: option[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: option[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> def object(self, \n symbolic_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbolic_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None], \n type_name: Union[str, None], \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None],\n    type_name: Union[str, None],\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> def object(self, \n symbol_name: str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> def object(self, \n symbol_name: str = \"\", \n type_name: str = \"\", \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str = \"\",\n    type_name: str = \"\",\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "<IND> def object(self, \n symbol_name: options.str = None, \n type_name: options.str = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: options.str = None,\n    type_name: options.str = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None], \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None],\n    type_name: Union[str, None] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> def object(self, \n icon_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    icon_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> def object(self, \n symbols_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbols_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> def object(self, \n symbol_name: choice[str] = None, \n type_name: choice[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: choice[str] = None,\n    type_name: choice[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> def object(self, \n symbol_name, \n type_name, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name,\n    type_name,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n        type_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\ntype_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n def object(self, \n symbol_name: str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: Int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> def object(self, <DED> symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n        offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "<IND> def object(self, <IND> symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: <DED> t = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\noffset:  t = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None], \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None] = None,\n    type_name: Union[str, None],\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n        type_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> def object(self, \n symbol_name: str, <DED> type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\nsymbol_name: str,  type_name: str,\noffset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "joerick/pyinstrument",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/joerick-pyinstrument",
    "commit": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "filename": "pyinstrument/profiler.py",
    "source_code": "    def start(self, caller_frame: types.FrameType = None):",
    "target_code": "\n    <DED>def start(self, caller_frame: types.FrameType | None = None):\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
    "warning_line": 101,
    "pred_top-1": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> def start(self, caller_frame: options.FrameType = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: options.FrameType = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType -> None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType -> None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = ''): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = ''):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def start(self, caller_frame: types[types.FrameType] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types[types.FrameType] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def start(self, caller_frame: options.FrameType): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: options.FrameType):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = \"\"): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = \"\"):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType.Optional[types.FrameType] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType.Optional[types.FrameType] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType == \"\"): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType == \"\"):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "\n <IND> def start(self, caller_frame: types.FrameType): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType | None = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType | None = None):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = \"\"): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = \"\"):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def start(self, caller_frame: calls.FrameType): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: calls.FrameType):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType: Optional[types.FrameType] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType: Optional[types.FrameType] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType: Optional[str] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType: Optional[str] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType == \"\"): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType == \"\"):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType == None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType == None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType): \n <DED>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType):\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n <DED> def start(self, caller_frame: Types.FrameType = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: Types.FrameType = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType) -> None:\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType): \n \n",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType | None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType | None):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = 0): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = 0):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType => None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType => None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def start(self, caller_frame: 'types.FrameType'): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: 'types.FrameType'):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n <DED> def start(self, caller_frame: types['FrameType'] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types['FrameType'] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n \n def start(self, caller_frame: types.FrameType): \n <IND>",
      "pred_parsed": "    \n    def start(self, caller_frame: types.FrameType):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = 'undefined'): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = 'undefined'):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType, ''): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType, ''):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def start(self, caller_frame: options.FrameType = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: options.FrameType = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType: Optional[types.FrameType] = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType: Optional[types.FrameType] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType: ''): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType: ''):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = []): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = []):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def start(self, caller_frame: Type.FrameType = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: Type.FrameType = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def start(self, caller_frame: types[\"FrameType\"] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types[\"FrameType\"] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType == ''): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType == ''):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <IND> def start(self, caller_frame: options.FrameType = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: options.FrameType = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType: Optional[str] = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType: Optional[str] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = ()): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = ()):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType | None -> None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType | None -> None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType > 0): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType > 0):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType.Optional[str] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType.Optional[str] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def start(self, caller_frame: types[str] = None): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types[str] = None):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def start(self, caller_frame: types.FrameType = \"\" \n ): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = \"\"\n    ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def start(self, caller_frame: t.types.FrameType): \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: t.types.FrameType):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def start(self, caller_frame: types[types.FrameType] = None) -> None: \n <IND>",
      "pred_parsed": "    def start(self, caller_frame: types[types.FrameType] = None) -> None:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "scrapy/scrapy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/scrapy-scrapy",
    "commit": "38d361792c02ae2b25323258d070c04d8906495a",
    "filename": "scrapy/core/downloader/handlers/http2.py",
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
    "warning_line": 75,
    "pred_top-1": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10),\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self, context_factory, \n connect_timeout=10) \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10)\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "self, context_factory, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool,\n        crawler=None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address= Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address= Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <IND>",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n            crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self, context_factory, \n connect_timeout = 10 \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout = 10\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED>",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n    crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self, context_factory, <DED> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,  connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self, context_factory, \n connection_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connection_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self, context_factory, \n connect_timeout=10, <DED> bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n    connect_timeout=10,  bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n    crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self, context_factory, <IND> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,  connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, <IND> crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n            bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,  crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self, context_factory, \n connect_timeout=10, <IND> bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n            connect_timeout=10,  bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n            crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, <DED> crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n    bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,  crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address=Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address=Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None,\n        pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[optional[bytes]] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[optional[bytes]] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address = Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address = Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[Bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[Bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address= Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address= Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self, context_factory, \n reconnect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        reconnect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address=None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address=None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self, context_factory, \n connected_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connected_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = 0 \n pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = 0\n        pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = All, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = All, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] | None = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] | None = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self, context_factory, \n connect_timeout=10), \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10),\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool | None = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool | None = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, <DED> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n    bind_address: Optional[bytes] = None,  pool: Optional[H2ConnectionPool] = None,\n    crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = False, pool: Optional[H2ConnectionPool] = False, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = False, pool: Optional[H2ConnectionPool] = False,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, <IND> pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n            bind_address: Optional[bytes] = None,  pool: Optional[H2ConnectionPool] = None,\n            crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[byte] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[byte] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: H2Address, pool: H2ConnectionPool, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: H2Address, pool: H2ConnectionPool,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address=Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address=Optional[bytes] = None, pool= Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self, context_factory, \n connect_timeout=11, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=11,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = Nothing, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = Nothing, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = \"\", pool: Optional[H2ConnectionPool] = \"\", \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = \"\", pool: Optional[H2ConnectionPool] = \"\",\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool = \"\", \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = \"\",\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self, context_factory, \n connect_timeout=20, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=20,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self, context_factory, \n connect_timeout=10), \n bind_address= Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10),\n        bind_address= Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = 0, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = 0, pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = '', pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = '', pool: Optional[H2ConnectionPool] = None,\n        crawler=None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=False \n",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None,\n        crawler=False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pythonarcade/arcade",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade",
    "commit": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "filename": "arcade/gui/ui_style.py",
    "source_code": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, {})",
    "target_code": "\n        for style_class in reversed(style_classes):\n            <IND>style_data = self.data.get(style_class, {})\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n style_classes = reversed(str(style_classes)) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(str(style_classes))\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n _style_classes = reversed(_style_classes) \n for style_class in _style_classes: \n <IND> style_data = self.data.get(_style_class, { } ) \n",
      "pred_parsed": "        _style_classes = reversed(_style_classes)\n        for style_class in _style_classes:\n            style_data = self.data.get(_style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n var style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        var style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n _style_classes_ = reversed(_style_classes) \n for style_class in _style_classes: \n <IND> style_data = self.data.get(_style_class, { } ) \n",
      "pred_parsed": "        _style_classes_ = reversed(_style_classes)\n        for style_class in _style_classes:\n            style_data = self.data.get(_style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n style_classes_list = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes_list = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_classes in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_classes in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n self.style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        self.style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n if isinstance(style_classes, str): \n <IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        if isinstance(style_classes, str):\n            style_classes = reversed(style_classes)\n            for style_class in style_classes:\n                style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n style_classes: List[str] = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes: List[str] = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "\n style_classes = reversed(str[style_classes]) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(str[style_classes])\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n assert isinstance(style_classes, str) \n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        assert isinstance(style_classes, str)\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n _style_classes: List[str] = reversed(_style_classes) \n for style_class in _style_classes: \n <IND> style_data = self.data.get(_style_class, { } ) \n",
      "pred_parsed": "        _style_classes: List[str] = reversed(_style_classes)\n        for style_class in _style_classes:\n            style_data = self.data.get(_style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n if style_classes is not None: \n <IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        if style_classes is not None:\n            style_classes = reversed(style_classes)\n            for style_class in style_classes:\n                style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "\n style_classes = reversed(str(style_classes)) \n for style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(str(style_classes))\n        for style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n style_classes_reversed = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes_reversed = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n style_classes = reversed(list(style_classes)) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(list(style_classes))\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "\n style_classes_reversed = reversed(style_classes) \n for style_class in style_classes_reversed: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes_reversed = reversed(style_classes)\n        for style_class in style_classes_reversed:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n assert style_classes is not None \n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        assert style_classes is not None\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "\n style_classes_ = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes_ = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n self.style_classes = reversed(style_classes) \n for style_class in self.style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        self.style_classes = reversed(style_classes)\n        for style_class in self.style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n # style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        # style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n return style_classes \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        return style_classes\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n style_classes = reversed(classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n self.style_classes = reversed(str(style_classes)) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        self.style_classes = reversed(str(style_classes))\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n style_classes_list = reversed(style_classes) \n for style_class in style_classes_list: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes_list = reversed(style_classes)\n        for style_class in style_classes_list:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n class_classes = reversed(class_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        class_classes = reversed(class_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n style_classes = reversed(list[style_classes]) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(list[style_classes])\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n class_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        class_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n style_classes_ = reversed(style_classes) \n for style_class in style_classes_: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes_ = reversed(style_classes)\n        for style_class in style_classes_:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n array_style_classes = reversed(style_classes) \n for style_class in array_style_classes: \n <IND> style_data = self.data.get(array_style_class, { } ) \n",
      "pred_parsed": "        array_style_classes = reversed(style_classes)\n        for style_class in array_style_classes:\n            style_data = self.data.get(array_style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n self.style_classes = reversed(style_classes) \n for style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        self.style_classes = reversed(style_classes)\n        for style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n style_classes = reversed(str) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(str)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n style_classes = reversed(str(style_classes)) \n for style_class: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(str(style_classes))\n        for style_class:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n reversed_style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        reversed_style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "\n style_classes = reversed(style_classes) \n for style_class: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(style_classes)\n        for style_class:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n assert isinstance(style_classes, str) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        assert isinstance(style_classes, str)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n \"style_classes\": reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        \"style_classes\": reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n backend_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(backend_class, { } ) \n",
      "pred_parsed": "        backend_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(backend_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n _style_classes = reversed(_style_classes) \n for style_classes: \n <IND> style_data = self.data.get(_style_class, { } ) \n",
      "pred_parsed": "        _style_classes = reversed(_style_classes)\n        for style_classes:\n            style_data = self.data.get(_style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n return reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        return reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n _style_classes = reversed(_style_classes) \n for style_class: \n <IND> style_data = self.data.get(_style_class, { } ) \n",
      "pred_parsed": "        _style_classes = reversed(_style_classes)\n        for style_class:\n            style_data = self.data.get(_style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n self.style_classes = reversed(style_classes) \n for style_class: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        self.style_classes = reversed(style_classes)\n        for style_class:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n return reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        return reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n style_classes = reversed(str(style_classes)) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        style_classes = reversed(str(style_classes))\n        for style_class in style_classes:\n    style_data = self.data.get(style_class, { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n row_style_classes = reversed(style_classes) \n for style_class in row_style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        row_style_classes = reversed(style_classes)\n        for style_class in row_style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n _style_classes = reversed(_style_classes) \n for style_class in _style_classes: \n <IND> style_data = self.data.get(style_class, { } ) \n",
      "pred_parsed": "        _style_classes = reversed(_style_classes)\n        for style_class in _style_classes:\n            style_data = self.data.get(style_class, { } )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Chia-Network/chia-blockchain",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Chia-Network-chia-blockchain",
    "commit": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "filename": "chia/wallet/wallet.py",
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
    "warning_line": 387,
    "pred_top-1": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = (), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = (),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] =, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] =,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = \"\", \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = \"\",\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = 1, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = 1,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = 0, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = 0,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement], \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement],\n        ) -> TransactionRecord:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Annunciation]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Annunciation]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = '', \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = '',\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: <IND>",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n            ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Annunciment]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Annunciment]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "ignore_max_send_amount: bool = False, <IND> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,  announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = [], \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = [],\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, <IND> ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n            announcements_to_consume: Optional[Set[Announcement]] = None,  ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "ignore_max_send_amount: bool = False, <DED> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,  announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Union[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Union[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: <DED>",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n    ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, <DED> ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n    announcements_to_consume: Optional[Set[Announcement]] = None,  ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = 2, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = 2,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Anouncement] = (), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Anouncement] = (),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "ignore_max_send_amount: bool = False, \n announcement_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcement_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = -1, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = -1,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n <IND>",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[State[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[State[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Append[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Append[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n <DED>",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = 8, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = 8,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "ignore_max_send_amount: bool = False, \n announces_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announces_to_consume: Optional[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[An announcement] = (), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[An announcement] = (),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[str] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[str] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Optional[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Optional[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = (\"\"), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = (\"\"),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[List[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[List[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Active[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Active[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Setting[Announcement] = (), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Setting[Announcement] = (),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = 0, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = 0,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = (0), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = (0),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: \"Set[Announcement]\", \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: \"Set[Announcement]\",\n        ) -> TransactionRecord:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Options.Set[Announcement] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Options.Set[Announcement] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: List[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: List[Set[Announcement]] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement,...] = None, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement,...] = None,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n () -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        () -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Set[Announcement]] = (), \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Set[Announcement]] = (),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Anouncement] = 0, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Anouncement] = 0,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: bool = False, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: bool = False,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ): \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Optional[Set[Announcement]] = None,\n        ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = 10, \n ) -> TransactionRecord: \n",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = 10,\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 334,
    "pred_top-1": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str], tags]=true) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str], tags]=true)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= { ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= { )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def line(utils.irc.line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def line(utils.irc.line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND>",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND>",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> None:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n \n def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        \n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.ir.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.notice",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.notice\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def add_line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def add_line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self.lines.append(line) \n \n def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n        \n        def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str] = { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n \n def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        \n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.protocol.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.protocol.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self.lines.append(line) \n <DED> def note(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def note(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self.lines.append(line) \n <DED> def note(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n    def note(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \\ ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \\ )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND>",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.text(target,",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.text(target,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self.lines.append(line) \n \n def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.",
      "pred_parsed": "        self.lines.append(line)\n        \n        def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n            self._add_line(utils.irc.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def line(utils.irc)",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def line(utils.irc)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message[target, message], tags) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message[target, message], tags)\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { ): \n <IND>",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { ):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ) -> str:\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.note",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.note\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.change(target,",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.change(target,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> def add_line(utils.",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        def add_line(utils.\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { ) \n",
      "pred_parsed": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= { )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self.lines.append(line) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol",
      "pred_parsed": "        self.lines.append(line)\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n        self._add_line(utils.irc.protocol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ): \n <IND> self._add_line(utils.ir",
      "pred_parsed": "        self.lines.append(line)\n            def message(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.irc.protocol.message(target, message, tags))\n            def notice(self, target: str, message: str, tags: typing.Dict[str, str]= { } ):\n                self._add_line(utils.ir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "hikari-py/hikari",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari",
    "commit": "cf143052e1228280ed895c06da9177611d8ea088",
    "filename": "hikari/orm/http/base_http_adapter.py",
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
    "warning_line": 1140,
    "pred_top-1": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "] = unspecified.UNSPECIFIED, \n child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (unspecified.UNSPECIFIED), \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (unspecified.UNSPECIFIED),\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: typing.Type[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNITED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNITED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (unspecified.Unspecified), \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = (unspecified.Unspecified),\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFEQUATE, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFEQUATE,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NonRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NonRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "] = unspecified.UNSPECIFIED, <DED> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,  parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, <DED> nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n    parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,  nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = true, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = true,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category = type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category = type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n bool: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n        bool: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, <IND> nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n            parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,  nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "] = unspecified.UNSPECIFIED, <IND> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,  parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFINE, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFINE,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFEXED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFEXED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT], \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT],\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NoRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NoRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFALSE, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNIFALSE,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category=type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category=type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = '', \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = '',\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = Unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = Unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = Unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = Unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "] = unspecified.UNSPECIFIED, \n child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        child_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <IND>",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n            nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: Type[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: Type[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = int(unspecified.Unspecified), \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = int(unspecified.Unspecified),\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = UNSPECified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = UNSPECified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category= type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category= type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\" \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\"\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.Nullable[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.Nullable[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = Unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = Unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = nonspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = nonspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] =, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] =,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "] = unspecified.UNSPECIFIED, \n <DED> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n    parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n    nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\", \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = \"\",\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] == unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] == unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = not specified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = not specified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = int, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = int,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n nsfw: notRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n        nsfw: notRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.Required[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.Required[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n bool: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "pred_parsed": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n        bool: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "alibaba/TinyNeuralNetwork",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/alibaba-TinyNeuralNetwork",
    "commit": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_code": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(  self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters.NONE, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters.NONE,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,  fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(  self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters['T'] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters['T'] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, <DED> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,  fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,  fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters.None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Parameters.None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n def __init__( <DED> self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(  self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, <DED> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,  fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.All[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.All[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None): \n <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None):\n        fusedActivationFunction=tflite.ActivationFunctionType.NONE,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n ): \n",
      "pred_parsed": "    def __init__(\n    self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE,\n    ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] | None] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] | None] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None): \n \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None):\n    \n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None): \n <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None):\n        fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None): \n \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None):\n    \n    fusedActivationFunction=tflite.ActivationFunctionType.NONE,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Utils['QuantizationParameters'] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Utils['QuantizationParameters'] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n ): \n",
      "pred_parsed": "    def __init__(\n    self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE,\n    ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None): \n <DED> fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None):\nfusedActivationFunction=tflite.ActivationFunctionType.NONE,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = (),\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n <IND>",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters,  fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, <DED> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters,  fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE]): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE]):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], quantization: typing.Optional[typing.Union[QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n <IND>",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n <IND>",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE, \n ): \n",
      "pred_parsed": "    def __init__(\n    self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE,\n    ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n \n",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None,\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "mapillary/mapillary_tools",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mapillary-mapillary_tools",
    "commit": "79159001d365c75215f0c05ba3b7937180563026",
    "filename": "mapillary_tools/upload_api_v4.py",
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " organization_id is declared to have type `int` but is used as type `None`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "entity_size: int, \n organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: typing.Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "entity_size: int, \n organization_id: optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "entity_size: int, <IND> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,  organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <IND>",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n            file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, <IND> file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n            organization_id: Optional[int] = None,  file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "entity_size: int, <DED> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,  organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, <DED> file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n    organization_id: Optional[int] = None,  file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <DED>",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n    file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "entity_size: int, \n organization_id: int, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: int,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "entity_size: int, \n organization_id: option[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: option[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "entity_size: int, \n organisation_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organisation_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "entity_size: int, \n organization_id: default[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: default[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "entity_size: int, \n organization_id=None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id=None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "entity_size: int, \n organization_id: Union[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Union[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "entity_size: int, \n organization_id: Optional[Int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[Int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = '', \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = '',\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "entity_size: int, \n organization_id: choice[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: choice[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "entity_size: int, \n organization_id: Options.int = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Options.int = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "entity_size: int, \n organization_id: opts.Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: opts.Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "entity_size: int, \n organization_id: options.int = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: options.int = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "entity_size: Int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: Int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "entity_size: int, \n organizational_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organizational_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "entity_size: int, \n organization_id: option(int) = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: option(int) = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "entity_size: int, \n organization_ids: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_ids: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = -1, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = -1,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = 0, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = 0,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "entity_size: int, \n organization_id: Union[int], \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Union[int],\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "entity_size: int, \n organization_id: Union[int, 0] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Union[int, 0] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "entity_size: int, \n organization_identifier: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_identifier: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: Optional[FileType] = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: Optional[FileType] = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "entity_size: int, \n organization_id: type=\"int\", \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: type=\"int\",\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "entity_size: int, \n organization_id: Union[int,...] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Union[int,...] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "entity_size: int, \n organization_id: optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = 0, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = 0,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "entity_size: int, \n organization_id: defaultOptional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: defaultOptional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n <IND>",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "entity_size: int, \n organization_id: Union[int, None] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Union[int, None] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "entity_size: int, \n organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", <IND>",
      "pred_parsed": "        entity_size: int,\n        organization_id: typing.Optional[int] = None,\n            file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "entity_size: int \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = \"\", \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = \"\",\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n <DED>",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "entity_size: int, \n organization_id: Optional[int] = Nothing, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = Nothing,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "entity_size: int, \n organization_id: typing.Optional[int] = None, \n file_type: FileType = \"zip\", <DED>",
      "pred_parsed": "        entity_size: int,\n        organization_id: typing.Optional[int] = None,\n    file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "entity_size: int, \n organization_id: TypeError = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: TypeError = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "entity_size: int, \n organization_id: bool = False, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: bool = False,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "entity_size: int, \n organization_id: type[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_id: type[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "entity_size: int, \n organization_ID: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "pred_parsed": "        entity_size: int,\n        organization_ID: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "stac-utils/pystac",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "pystac/extensions/base.py",
    "source_code": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        <IND>result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
    "warning_line": 31,
    "pred_top-1": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = str) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = str) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Object[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Object[Type[P]] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[Any] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[Any] = None) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = str) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = str) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Anything) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Anything) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[P]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Optional[P]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = \"\") -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = \"\") -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any] = None) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n def _get_property(self, prop_name: str, typ: List[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: List[Type[P]] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Any = Type[P]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Any = Type[P]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Object) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Object) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Object.Type[P] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Object.Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = [Type[Any]]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = [Type[Any]]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Union[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Union[Type[P]] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "\n def _get_property(self, prop_name: str, typ: typ = str) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: typ = str) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Any = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Any = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n def _get_property(self, prop_name: str, typ: typing.Optional[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: typing.Optional[Type[P]] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[Any] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[Any] = Any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Object) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Object) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Argument[Type[P]] = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Argument[Type[P]] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Object = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Object = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Object()) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Object()) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Object(Type[Any])) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Object(Type[Any])) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n def _get_property(self, prop_name: str, typ: '' = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: '' = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = self.properties.get(prop_name)) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = self.properties.get(prop_name)) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Typ[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Typ[P] = Any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = Any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = [Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = [Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Name[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Name[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Type[Any]) -> Optional[P]:\nresult: Optional[typ] = self.properties.get(prop_name)\nif result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Object[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Object[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = Optional[Type[P]]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = Optional[Type[P]]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[type] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]:\n        result: Optional[type] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Type[P] = any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = any) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n def _get_property(self, prop_name: str, typ: name = str) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: name = str) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Anything = Type[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Anything = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = '') -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = '') -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n def _get_property(self, prop_name: str, typ: str = \"\") -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: str = \"\") -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Object = str) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Object = str) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Any = Type[P]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Any = Type[P]) -> Optional[P]:\n        result = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Optional[Type[P]] = Any]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "tensorflow/federated",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-federated",
    "commit": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
    "target_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
    "warning_line": 309,
    "pred_top-1": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda=weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda=weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> <DED> _intern_pool: Dict[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> <DED> _intern_pool: Dict[Dict[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Dict[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<DED> <DED> _intern_pool: Dict[type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "<IND> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> <DED> _intern_pool: Dict[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> <DED> _intern_pool: Dict[Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <IND>",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda=strongref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda=strongref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> \n _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "\n_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "\n <DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "<DED> <DED> _intern_pool: Dict[Dict[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Dict[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> <DED> _intern_pool: Dict[types.TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[types.TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> <DED> _intern_pool: Dict[str, Dict[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[str, Dict[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda=Weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda=Weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda = weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda = weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "<DED> <DED> _intern_pool: \"Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: \"Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<DED> <DED> _intern_pool: Dict[Any, Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Any, Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> <DED> _intern_pool: Optional[Dict[typing.Type[Any], Dict[Any, Any]]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Optional[Dict[typing.Type[Any], Dict[Any, Any]]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { }.))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { }.)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda -> weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda -> weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> <DED> _intern_pool: Dict[type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( <DED> collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (  collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n <IND>",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> <DED> _intern_pool: Dict[any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> \n _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "\n_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> <DED> _intern_pool: Dict[Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( <IND> collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (  collections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda=weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda=weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> <DED> _intern_pool: Optional[Dict[TypingType[Any], Dict[Any, Any]]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Optional[Dict[TypingType[Any], Dict[Any, Any]]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> <DED> _intern_pool: DefaultDict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: DefaultDict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> <DED> _intern_pool: Dict[types.TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[types.TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda(Weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda(Weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda), weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda), weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> <DED> _intern_pool: Dict[Any, Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( { } ))) \n \n",
      "pred_parsed": "_intern_pool: Dict[Any, Dict[Any, Any]] = (\ncollections.defaultdict(lambda, weakref.WeakValueDictionary( { } )))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { } ))) \n <DED>",
      "pred_parsed": "_intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary( { } )))\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "unitaryfund/mitiq",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/scaling.py",
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
    "warning_line": 789,
    "pred_top-1": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "scale_factor: float, \n fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "scale_factor: float, \n fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "scale_factor: float, \n fold_method: Callable[[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "scale_factor: float, \n fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit]] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit]] = (),\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "scale_factor: float, \n fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = [], \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = [],\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Tuple, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Tuple, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = [], \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = [],\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "scale_factor: float, \n fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit]] = (), \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit]] = (),\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "scale_factor: float, \n fold_method: Optional[Tuple[Any]] = Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Tuple[Any]] = Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "scale_factor: float, \n fold_method: \"Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: \"Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit]] = (), \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit]] = (),\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "scale_factor: float, \n fold_method: Optional[Called[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Called[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "scale_factor: float, \n fold_method: Any = Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Any = Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit] = (), \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit] = (),\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "scale_factor: float, \n fold_method: 'Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: 'Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Any, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Any, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "scale_factor: float, \n fold_method: TUPLE[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: TUPLE[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit]], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit]],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "scale_factor: float, \n fold_methods: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_methods: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit] = (), \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit] = (),\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Union[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Union[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "scale_factor: float, \n fold_method: List[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: List[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: List[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: List[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "scale_factor: float, \n fold_method: Union[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Union[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any, Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any, Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Optional[Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "scale_factor: float, \n fold_method: tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = () \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = ()\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "scale_factor: float, \n fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "scale_factor: float, \n fold_method: Callable[[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Iterable, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Iterable, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "scale_factor: float, \n fold_method: Phone[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Phone[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "scale_factor: float, \n fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "scale_factor: float, \n fold_method: TUple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: TUple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "scale_factor: float, \n fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any]] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any]] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "scale_factor: float, \n fold_method: Any = Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Any = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Any = Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Any = (),\n    **kwargs,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "scale_factor: float, \n fold_method: TUPLE[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: TUPLE[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Active, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Active, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, <IND>",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-45": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, <DED>",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n**kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "scale_factor: float, <DED> fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,  fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = () \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = ()\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), <DED> **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\nfold_method_args: Tuple[Any] = (),  **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "scale_factor: float, \n fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Optional[Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "scale_factor: float, \n fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, <IND>",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Tuple[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "rytilahti/python-miio",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/gateway/devices/subdevice.py",
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " gw is declared to have type `Gateway` but is used as type `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n gw: Optional[Gateway] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[Gateway] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self, \n gw: Optional[\"Gateway\") = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\") = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, \n gw: Optional['Gateway'] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional['Gateway'] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n gw: \"Gateway\", \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "self, \n gw: \"Gateway\", \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: \"Gateway\",\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "self, \n gw: Optional[\"Gateway\", \"DeviceInfo\") = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\", \"DeviceInfo\") = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "self, \n gw: Optional[\"Gateway\"\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <IND>",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n            model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self, <DED> gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,  gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self, \n gw: Optional[\"Gateway\", \"Dict\") = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\", \"Dict\") = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self, \n gw: Optional[Mapping[Gateway]] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[Mapping[Gateway]] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self, <IND> gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,  gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, <IND> model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n            dev_info: Optional[SubDeviceInfo] = None,  model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, <IND> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n            gw: Optional[\"Gateway\"] = None,  dev_info: Optional[SubDeviceInfo] = None,\n            model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, <DED> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n    gw: Optional[\"Gateway\"] = None,  dev_info: Optional[SubDeviceInfo] = None,\n    model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self, \n gw: Optional[\"Gateway\", \"DeviceInfo\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\", \"DeviceInfo\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <DED>",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n    model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, <DED> model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n    dev_info: Optional[SubDeviceInfo] = None,  model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo\"] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo\"] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self, \n gw: 'Gateway', \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: 'Gateway',\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "self, \n gw: Optional[\"Gateway\", \"\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\", \"\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self, \n gw: Optional[\".Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\".Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self, \n gw: Optional[\"Gateway\"], \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"],\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self, \n gw: Optional[\"Gateway\", \"Path\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\", \"Path\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self, \n gw: Optional[\"Gateway\", \"Dict\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\", \"Dict\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self, \n gw: Optional[ \"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[ \"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self, \n gw: Optional[Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self, \n gws: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gws: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo|None] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo|None] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self, \n gw: 'Gateway', \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: 'Gateway',\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self, \n gw: Optional[\"gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self, \n gw: \"Gateway\", \n dev_info: Optional[SubDeviceInfo]: Optional[Dict] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: \"Gateway\",\n        dev_info: Optional[SubDeviceInfo]: Optional[Dict] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "self, \n gw: Optional[\",Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\",Gateway\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self, \n gw: Optional[MappingMode] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[MappingMode] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self, \n gw: Optional[\"GPS\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"GPS\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Options[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: Options[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self, \n gw: Optional[Dict] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[Dict] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo: Optional[\"DeviceInfo\"] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: SubDeviceInfo: Optional[\"DeviceInfo\"] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self, \n gw: Optional[Gateway] = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[Gateway] = None,\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "self, \n gw: Optional[\"Mapping\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Mapping\"] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo | None = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[\"Gateway\"] = None,\n        dev_info: SubDeviceInfo | None = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self, \n gw: Optional[None] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Optional[None] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self, \n gw: TypeError = \"Gateway\", \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: TypeError = \"Gateway\",\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self, <DED> gw: Optional[Gateway] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,  gw: Optional[Gateway] = None,\n        dev_info: Optional[SubDeviceInfo] = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self, \n gw: Symbol(\"Gateway\") = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "pred_parsed": "        self,\n        gw: Symbol(\"Gateway\") = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair",
    "commit": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "filename": "flair/datasets/text_text.py",
    "source_code": "        dev: FlairDataset = DataPairDataset(\n            dev_file,",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
    "warning_line": 282,
    "pred_top-1": {
      "pred": "\n dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n dev: DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Union[FlairDataset, DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n dev: DataPairDataset = Optional[DataPairDataset]( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = Optional[DataPairDataset](\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n dev: DataPairDataset = Optional[FlairDataset]( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = Optional[FlairDataset](\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n dev: DataPairDataset = [DataPairDataset]( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = [DataPairDataset](\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n dev: _FlairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: _FlairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n dev: FilePairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: FilePairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n dev: DataPairDataset = Optional[FlairDataset]( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = Optional[FlairDataset](\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n dev: DataPairDataset = DataSet( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = DataSet(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n dev: 'FlairDataset' = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: 'FlairDataset' = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n dev: \"FlairDataset\" = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: \"FlairDataset\" = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "\n dev: Set[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Set[DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n dev = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev = DataPairDataset(\n        dev_file,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n dev: Optional[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Optional[DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n dev: Dict[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Dict[DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n dev: flairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: flairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n dev: List[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: List[FlairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n dev: DataPairDataset = (DataPairDataset)( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = (DataPairDataset)(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n dev: List[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: List[DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n dev: DataPairDataset() = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset() = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n dev: Set = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: Set = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n dev: FloatDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: FloatDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n dev: FilePair = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: FilePair = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n dev: BootstrapDataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: BootstrapDataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n dev: AppDataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: AppDataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n dev: DataPairDataset = Optional[DataPairDataset] \n dev_file: \n",
      "pred_parsed": "        dev: DataPairDataset = Optional[DataPairDataset]\n        dev_file:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n dev: DatePairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DatePairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n dev: _flairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: _flairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n dev: DataPairDataset = (DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = (DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n dev: MapDataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: MapDataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n dev: DatabasePairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DatabasePairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n dev: DataPairDataset = Optional[DataPairDataset] \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = Optional[DataPairDataset]\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n dev: DevPairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DevPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n dev: DataPairDataset = FilePairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = FilePairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n dev: DataPairDataset = \"\" \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = \"\"\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n dev: FlairDataset = DataPairDataset( \n dev_file, \n",
      "pred_parsed": "        dev: FlairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "\n dev: DataPairDataset = DataPairDataset( \n dev_file, <DED>",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n    dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, <IND>",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(\n            dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n dev: DataPairDataset = DataPairDataset( \n dev_file, <IND>",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n            dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n dev: DataPairDataset = DataPairDataset( <DED> dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(  dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, <DED>",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(\n    dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n dev: DataPairDataset = Optional[DataPairDataset] \n dev_file = \n",
      "pred_parsed": "        dev: DataPairDataset = Optional[DataPairDataset]\n        dev_file =\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n dev: Optional[FlairDataset] = DataPairDataset( <DED> dev_file, \n",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(  dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n dev: DataPairDataset = \"\"( \n dev_file, \n",
      "pred_parsed": "        dev: DataPairDataset = \"\"(\n        dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, <IND>",
      "pred_parsed": "        dev: Union[FlairDataset, DataPairDataset] = DataPairDataset(\n            dev_file,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ethereum/web3.py",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/providers/auto.py",
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
    "warning_line": 77,
    "pred_top-1": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = [] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = []\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = () \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = ()\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = () \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ()\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=[] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=[]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = '' \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = ''\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = '' \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ''\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = \"\" \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = \"\"\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = [] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = \"\" \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = \"\"\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0]] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0]] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = 0 \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = 0\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]|None] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]|None] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None \n ) -> Base: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None\n        ) -> Base:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] == None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] == None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = (None) \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = (None)\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = () \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]] = ()\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] -> None: \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] -> None:\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = 0 \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = 0\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=(None) \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=(None)\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = [] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]]=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider]], Type[BaseProvider]]=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0]]=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0]]=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] =... \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] =...\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self, \n potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0], None] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][0], None] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] =... \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] =...\n        ) -> None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = [], \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = [],\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][] = [] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]][] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] | None] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] | None] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> Base: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None\n        ) -> Base:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] [] = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] [] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = () \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]() = ()\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]==None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]==None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=False \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=False\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]) = None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]) = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=Null] \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=Null]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]\"=None \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]\"=None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]='' \n ) -> None: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]=''\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None \n ) -> All: \n",
      "pred_parsed": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None\n        ) -> All:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self, <DED> potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None \n ) -> None: \n",
      "pred_parsed": "        self,  potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]] = None\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "pgjones/quart",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/config.py",
    "source_code": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:",
    "target_code": "\n    <DED>def __get__(self, instance: Any, owner: Any = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
    "warning_line": 66,
    "pred_top-1": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n                result = instance.config[self.key] # type: ignore\n                if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type_name = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type_name = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type: Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n            \n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Anything: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Anything:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type | None = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type | None = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n                result = instance.config[self.key] # type: ignore\n                if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = []) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = []) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> None: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> None:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\nif instance is None:\n    return self\nresult = instance.config[self.key] # type: ignore\nif self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n    return self\nresult = instance.config[self.key] # type: ignore\nif self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Anything: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Anything:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None): \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None):\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[typing.Type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[typing.Type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type() = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type() = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = '') -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = '') -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None): \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None):\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[typing.Object] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[typing.Object] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n            \n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n \n def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    \n    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <IND> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[typing.Any] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[typing.Any] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = \"\") -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = \"\") -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # typing: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # typing: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typeName = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typeName = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self <IND> <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self   result = instance.config[self.key] # type: ignore\n            if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n        \n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(\n    self, instance: object, owner: typing.Optional[type] = None\n    if instance is None:\n        return self\n    result = instance.config[self.key] # type: ignore\n    if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance = None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance = None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any:\n    \n    if instance is None:\n        return self\n    result = instance.config[self.key] # type: ignore\n    if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type[Any] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type[Any] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance = None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance = None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type[any] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type[any] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def __get__( <DED> self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(  self, instance: object, owner: typing.Optional[type] = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def __get__( <IND> self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(  self, instance: object, owner: typing.Optional[type] = None\n    if instance is None:\n        return self\n    result = instance.config[self.key] # type: ignore\n    if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type_name = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type_name = None) -> Any:\n        if instance is None:\n            return self\n                result = instance.config[self.key] # type: ignore\n                if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type=None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type=None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\nif instance is None:\n    return self\nresult = instance.config[self.key] # type: ignore\nif self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n    return self\nresult = instance.config[self.key] # type: ignore\nif self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def __get__(self, instance: object, owner: type -> None): \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "pred_parsed": "    def __get__(self, instance: object, owner: type -> None):\n        if instance is None:\n            return self\n        result = instance.config[self.key] # type: ignore\n        if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "BEEmod/BEE2.4",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4",
    "commit": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "filename": "src/texturing.py",
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = None # type: Optional[Generator]\nOVERLAYS = None # type: Optional[Generator]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# These can just be looked up directly. \n SPECIAL: GENERATOR \n OVERLAYS: GENERATOR \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: GENERATOR\nOVERLAYS: GENERATOR\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None\nOVERLAYS: Optional[Generator] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "# These can just be looked up directly. \n SPECIAL: \"Generator\" \n OVERLAYS: \"Generator\" \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: \"Generator\"\nOVERLAYS: \"Generator\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Generator \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Generator\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "# These can just be looked up directly. \n SPECIAL: _Generator \n OVERLAYS: _Generator \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: _Generator\nOVERLAYS: _Generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "# These can just been looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just been looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generic] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generic]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "# These can just be looked up directly. \n SPECIAL: # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Generic \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Generic\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Gen] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Gen]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n <DED>",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Generic[Generic] = None # type: Generic \n OVERLAYS: Generic[Generic] = None # type: Generic[Generic] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Generic[Generic] = None # type: Generic\nOVERLAYS: Generic[Generic] = None # type: Generic[Generic]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] <DED> OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]  OVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n <IND>",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generic] \n OVERLAYS: Optional[Generic] = None # type: Optional[Generic] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generic]\nOVERLAYS: Optional[Generic] = None # type: Optional[Generic]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] <IND> \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\n    OVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Gen] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Gen]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] <DED> OVERLAYS: Optional[Generator] = None \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]  OVERLAYS: Optional[Generator] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "# These can just be looked up directly. \n SPECIAL: _generator \n OVERLAYS: _generator \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: _generator\nOVERLAYS: _generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Array \n OVERLAYS: Array \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Array\nOVERLAYS: Array\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] <IND> OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]  OVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator], \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator],\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] <DED> OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]  OVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Gen \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Gen\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generic] = None # type: Optional[Generic] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generic] = None # type: Optional[Generic]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Variable.Array = None # type: Variable \n OVERLAYS: Variable.Array \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Variable.Array = None # type: Variable\nOVERLAYS: Variable.Array\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Generic[Generic] = None # type: Generic \n OVERLAYS: Generic[Generic[Generic]] = None # type: Generic[Generic] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Generic[Generic] = None # type: Generic\nOVERLAYS: Generic[Generic[Generic]] = None # type: Generic[Generic]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: \n \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type:\n\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generic] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generic]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: General \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: General\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] \n OVERLAYS: Optional[Generator] = None \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator]\nOVERLAYS: Optional[Generator] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Symbol \n OVERLAYS: Symbol \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Symbol\nOVERLAYS: Symbol\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] <DED> SPECIAL = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]  SPECIAL = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Generic \n OVERLAYS: Generic \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Generic\nOVERLAYS: Generic\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] <DED> \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[GENERATOR] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[GENERATOR] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Generic[Generic] = None # type: Generic \n OVERLAYS: Generic[Generic[Generic]] = None # type: Generic[Generic[Generic]] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Generic[Generic] = None # type: Generic\nOVERLAYS: Generic[Generic[Generic]] = None # type: Generic[Generic[Generic]]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Generator \n OVERLAYS: Generator \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Generator\nOVERLAYS: Generator\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "# These can just be looked up directly. \n SPECIAL: OVERLAYS \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: OVERLAYS\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "# These can just be looked up directly. \n SPECIAL = None # type: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = None # type: 'Generator'\nOVERLAYS: 'Generator'\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Options[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Options[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] <DED> SPECIAL: Optional[Generator] = None \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]  SPECIAL: Optional[Generator] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Generic[Generic] = None # type: Generic \n OVERLAYS: Generic[Generic] = None # type: Generic[Generic[Generic]] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Generic[Generic] = None # type: Generic\nOVERLAYS: Generic[Generic] = None # type: Generic[Generic[Generic]]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] = None # type: Optional[Generator] \n \n",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL: Optional[Generator] = None # type: Optional[Generator]\nOVERLAYS: Optional[Generator] = None # type: Optional[Generator]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/contexts/__init__.py",
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " type_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 121,
    "pred_top-1": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> def object(self, <IND> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> def object(self, <DED> symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> def object(self, \n symbol_name, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n        type_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, <IND> type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n        symbol_name: Optional[str] = None,  type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, <DED> type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\nsymbol_name: Optional[str] = None,  type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\ntype_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None] = None,\n    type_name: Union[str, None] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> def object(self, \n symbol_name: typing.Optional[str] = None, \n type_name: typing.Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: typing.Optional[str] = None,\n    type_name: typing.Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "<IND> def object(self, \n symbol_name, \n type_name, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name,\n    type_name,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None], \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None],\n    type_name: Union[str, None] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> def object(self, \n symbol_name: str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> def object(self, \n symbol_name: Union[str, None], \n type_name: Union[str, None], \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Union[str, None],\n    type_name: Union[str, None],\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> def object(self, \n symbol_name: optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> def object(self, \n symbol_name: option[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: option[str] = None,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> def object(self, \n symbol_name, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "<IND> def object(self, \n symbol_name: str = '', \n type_name: str = '', \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = '',\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "<IND> def object(self, \n symbol_name: option[str] = None, \n type_name: Option[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: option[str] = None,\n    type_name: Option[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n def object(self, \n symbol_name: str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> def object(self, \n symbol_name: options.str = None, \n type_name: options.str = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: options.str = None,\n    type_name: options.str = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> def object(self, <DED> symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n        type_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> def object(self, \n symbol_name: str = \"\", \n type_name: str = \"\", \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str = \"\",\n    type_name: str = \"\",\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\noffset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n        offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "<IND> def object(self, <IND> symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,  symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\ntype_name: Optional[str] = None,  offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> def object(self, \n symbol_name: str, <DED> type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\nsymbol_name: str,  type_name: str,\noffset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<IND> def object(self, \n symbol_name: str, <IND> type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n        symbol_name: str,  type_name: str,\n        offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "<IND> def object(self, \n symbol_name = '', \n type_name: str = '', \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name = '',\n    type_name: str = '',\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, <DED> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\ntype_name: str,  offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n    offset: Int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> def object(self, \n symbol_name: int, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: int,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, <IND> offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n        type_name: str,  offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<IND> def object(self, \n symbol_name = \"\", \n type_name: str = \"\", \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name = \"\",\n    type_name: str = \"\",\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, <DED>",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\noffset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: Union[str, None] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: str,\n    type_name: str,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "<IND> def object(self, \n symbol_name: Str, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "pred_parsed": "    def object(self,\n    symbol_name: Str,\n    type_name: Optional[str] = None,\n    offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "pred_parsed": "    def object(self,\n    symbol_name: Optional[str] = None,\n    type_name: Optional[str] = None,\n        offset: int = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair",
    "commit": "0b834f5167d11f06037398fcbe1554f244167e18",
    "filename": "flair/embeddings/token.py",
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " embeddings is declared to have type `str` but is used as type `Path`.",
    "warning_line": 2082,
    "pred_top-1": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": ") \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path=cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": ") \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path=cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": ") \n embeddings_path= cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path= cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path=Path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path=Path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": ") \n embeddings_paths = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_paths = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path=str(cached_path) \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path=str(cached_path)\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": ") \n embeddingspath = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddingspath = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": ") \n embeddings_path= cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path= cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n ) \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path=cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / ^ embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / ^ embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": ") \n embeddings_paths = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_paths = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path=Cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path=Cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n ) \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n <IND>",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n                \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings { _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings { _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": ") \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path=cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": ") \n embedding_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embedding_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings \\ / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": ") \n embeddingspath = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddingspath = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": ") <IND> embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )  embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path = \" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path = \" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": ") \n embedding_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embedding_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": ") <DED> embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )  embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n ) \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": ") \n embeddings_path = cached_path( <IND> f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n                embeddings_path = cached_path(  f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": ") \n embeddings_path = cached_path( <DED> f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n        embeddings_path = cached_path(  f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": ") \n embeddingspaths = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddingspaths = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path=Path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n ) \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path=Path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings ^ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings ^ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n ) \n \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": ") \n embeddings_path_s = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path_s = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / ^ embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / ^ embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n <DED>",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": ") \n embeddings_path = cached_path( \n embeddings_path=str(cached_path) \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            embeddings_path=str(cached_path)\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": ") \n embeddingspath=cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddingspath=cached_path(\n            f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": ") \n embeddings_path = cached_path( \n f \" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f \" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir <IND>",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n                f\" { base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": ") \n embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n <IND>",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n                \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": ") <DED> embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )  embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": ") <IND> embeddings_path = cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )  embeddings_path = cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": ") \n embeddings_path = cached_path( \n f\" ^ base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path = cached_path(\n            f\" ^ base_path } { embeddings } / { embeddings \\ _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": ") \n embeddings_path=cached_path( \n f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir \n",
      "pred_parsed": "            )\n            embeddings_path=cached_path(\n            f\" { base_path } { embeddings } / { embeddings } _s { size }.zip\", cache_dir=cache_dir\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "hummingbot/hummingbot",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/hummingbot-hummingbot",
    "commit": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_code": "            usd_volume: float = [\n                (",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
    "warning_line": 97,
    "pred_top-1": {
      "pred": "\n usd_volume: float = [ \n ( \n",
      "pred_parsed": "            usd_volume: float = [\n            (\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n usd_volume: float = [ \n ( \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "            usd_volume: float = [\n            (\n            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "theacodes/nox",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/command.py",
    "source_code": "    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " reason is declared to have type `str` but is used as type `None`.",
    "warning_line": 28,
    "pred_top-1": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n def __init__( \n self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n    self, reason: Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n def __init__( <IND> self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n def __init__( <DED> self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n def __init__( \n self, reason: typing.Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n    self, reason: typing.Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n def __init__( <DED> self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: typing.Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n def __init__( <IND> self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n def __init__(self, reason: str) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: str) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n def __init__( <IND> self, reason: Optional[str] = None <IND> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None  ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\nsuper(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n def __init__( \n self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(\n    self, reason: Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n def __init__( <IND> self, reason: Optional[str] = None <DED> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None  ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\nsuper(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n def __init__( <DED> self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Union[str, None] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n def __init__( \n self, reason: Optional[str] = None <IND> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n        self, reason: Optional[str] = None  ) -> None:\n            super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n def __init__( \n self, reason: typing.Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(\n    self, reason: typing.Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n def __init__( \n self, reason: Optional[str] = None <DED> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\nself, reason: Optional[str] = None  ) -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n def __init__( <IND> self, reason: typing.Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: typing.Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n    \n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n def __init__( <DED> self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(  self, reason: typing.Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n def __init__( \n self, reason: str = \"\") -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n    self, reason: str = \"\") -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n def __init__( \n self, reason: str | None = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n    self, reason: str | None = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n def __init__( \n self, reason: typing.Optional[str] = None <IND> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n        self, reason: typing.Optional[str] = None  ) -> None:\n            super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n    \n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n def __init__( \n self, reason: typing.Optional[str] = None <DED> ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\nself, reason: typing.Optional[str] = None  ) -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n def __init__( <DED> self, reason: str) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: str) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n def __init__( \n self, reason: Union[str, None] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(\n    self, reason: Union[str, None] = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super().__init__(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n        super().__init__(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n def __init__( <DED> self, reason: Optional[str] = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: <IND> <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:   super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n def __init__(self, reason: option.str = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: option.str = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "<IND> def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n def __init__( <IND> self, reason: str | None = None \n ) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: str | None = None\n    ) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "<IND> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n def __init__( <IND> self, reason: str = \"\") -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self, reason: str = \"\") -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <IND>",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n            super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: <DED> <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:   super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n def __init__(self, reason: Optional[str] = None) -> None: <IND> <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self, reason: Optional[str] = None) -> None:   super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n def __init__( <IND> self, reason: Optional[str] = None <IND> ) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(  self, reason: Optional[str] = None  ) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "\n def __init__(self) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n def __init__(self, reason: str) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "pred_parsed": "    def __init__(self, reason: str) -> None:\n        super(CommandFailed, self).__init__()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n def __init__(self, reason: typing.Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) <DED>",
      "pred_parsed": "    def __init__(self, reason: typing.Optional[str] = None) -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n def __init__( <DED> self: str = \"\") -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(  self: str = \"\") -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def __init__(self: str) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "pred_parsed": "    def __init__(self: str) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "edgedb/edgedb",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb",
    "commit": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "filename": "edb/edgeql/compiler/pathctx.py",
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
    "warning_line": 85,
    "pred_top-1": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode] = None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "ir_set: irast.Set, *, \n path_scope: edb.ir.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: edb.ir.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "ir_set: irast.Set, *, \n path_scope: edb.ir.ScopeTreeNode(irast.ScopeTreeNode), \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: edb.ir.ScopeTreeNode(irast.ScopeTreeNode),\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "ir_set: irast.Set, *, \n path_scope: optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: optional[irast.ScopeTreeNode] = None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode(irast.ScopeTreeNode), \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode(irast.ScopeTreeNode),\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "ir_set: irast.Set, *, \n path_scope: edb.ir.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: edb.ir.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "ir_set: irast.Set, *, \n path_scope: tuple[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: tuple[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "ir_set: irast.Set, *, \n path_scope=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope=None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "ir_set: irast.Set, *, \n path_scope: optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "ir_set: irast.Set, *, \n path_scope = irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope = irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "ir_set: irast.Set, *, \n str: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        str: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "ir_set: irast.Set, *, \n ir_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        ir_scope: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "ir_set: irast.Set, *, <DED> path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,  path_scope: Optional[irast.ScopeTreeNode] = None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "ir_set: irast.Set, *, <DED> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,  path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "ir_set: irast.Set, \n path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set,\n        path_scope: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "ir_set: irast.Set, *, <IND> path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,  path_scope: Optional[irast.ScopeTreeNode] = None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "ir_set: irast.Set, \n path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set,\n        path_scope: Optional[irast.ScopeTreeNode] = None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "ir_set: irast.Set, *, \n path_scope=irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope=irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "ir_set: irast.Set, *, <IND> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,  path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "ir_set: irast.Set, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "ir_set: irast.Set, *, <DED> path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,  path_scope: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, <IND>",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode] = None,\n            optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "ir_set: irast.Set, *, \n _path_scope: irast.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        _path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "ir_set: irast.Set, *, \n path_scope: options.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: options.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode(irast.Optional[str])=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode(irast.Optional[str])=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "ir_set: irast.Set, *, \n path_scope: os.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: os.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "ir_set: irast.Set, *, \n path_scope: choice[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: choice[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "ir_set: irast.Set, *, \n path_scope: isinstance(irast.ScopeTreeNode), \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: isinstance(irast.ScopeTreeNode),\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "ir_set: irast.Set, *, \n ir_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        ir_scope: Optional[irast.ScopeTreeNode] = None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "ir_set: irast.Set, *, \n path_scope: bool=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: bool=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "ir_set: irast.Set, *, \n path_scope: choice.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: choice.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "ir_set: irast.Set, *, \n route_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        route_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, <DED>",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode] = None,\n    optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "ir_set: irast.Set, *, <IND> path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,  path_scope: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, <IND>",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n            optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "ir_set: irast.Set, *, \n path_scope: _irast.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: _irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, <DED> optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n    path_scope: Optional[irast.ScopeTreeNode] = None,  optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, <IND> optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n            path_scope: Optional[irast.ScopeTreeNode] = None,  optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, \n optional: bool=False, <IND>",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode,\n            optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "ir_set: irast.Set, *, \n path_scope: bool=False, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: bool=False,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "ir_set: irast.Set, *, \n path_scope: str = irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: str = irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, <DED> optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n    path_scope: irast.ScopeTreeNode,  optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "ir_set: irast.Set, *, \n path_scope: irast.TreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.TreeNode,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "ir_set: irast.Set, *, \n path_scope: db.ir.ScopeTreeNode=None, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: db.ir.ScopeTreeNode=None,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "ir_set: irast.Set, *, \n irast_tree: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "pred_parsed": "        ir_set: irast.Set, *,\n        irast_tree: irast.ScopeTreeNode,\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, <DED>",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n    optional: bool=False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "marshmallow-code/marshmallow",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/marshmallow-code-marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "source_code": "    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " format is declared to have type `str` but is used as type `None`.",
    "warning_line": 1184,
    "pred_top-1": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def __init__( <DED> self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def __init__(self, format: str, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: str, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <DED> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\nsuper().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n    self, format: Optional[str] = None, **kwargs ) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n def __init__( <DED> self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs \n ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n    self, format: Optional[str] = None, **kwargs\n    ):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs \n ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n    self, format: Optional[str] = None, **kwargs\n    ) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n    self, format: Optional[str] = None, **kwargs ):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n \n super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n    \n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs ) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <DED> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> None:\nsuper().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n def __init__(self, format: typing.Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs <DED> ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\nself, format: Optional[str] = None, **kwargs  ) -> None:\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): <IND> <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):   super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n    self, format: Optional[str] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs <IND> ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n        self, format: Optional[str] = None, **kwargs  ):\n            super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs <DED> ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\nself, format: Optional[str] = None, **kwargs  ):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <IND>",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n            super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): <DED> <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):   super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n def __init__(self, format: Union[str, None] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Union[str, None] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs \n ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs\n    ) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs <DED> ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs  ) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n        self, format: Optional[str] = None, **kwargs  super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n def __init__( \n self, format: str, **kwargs ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n    self, format: str, **kwargs ):\n        super().__init__(**kwargs)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <DED>",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__() \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs):\n        super().__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> None:\n    \n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n def __init__( \n self, format: Optional[str] = None, **kwargs <IND> ) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(\n        self, format: Optional[str] = None, **kwargs  ) -> None:\n            super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs \n ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs\n    ):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> False: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> False:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs <IND> ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs  ):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> bool: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> bool:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs) : \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs) :\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs)\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n def __init__( <IND> self, format: Optional[str] = None, **kwargs ): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs ):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n def __init__( <DED> self, format: Optional[str] = None, **kwargs) -> None: \n <DED> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: Optional[str] = None, **kwargs) -> None:\nsuper().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n def __init__( <DED> self, format: str, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(  self, format: str, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n def __init__(self, format: optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n def __init__(self, formatting: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, formatting: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n def __init__(self, format: str = \"\", **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: str = \"\", **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n def __init__(self, format: Options.str = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: Options.str = None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) <IND>",
      "pred_parsed": "    def __init__(self, format: Optional[str] = None, **kwargs) -> None:\n            super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def __init__(self, format: str | None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "pred_parsed": "    def __init__(self, format: str | None, **kwargs):\n        super().__init__(**kwargs)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "synek/git-plan",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/synek-git-plan",
    "commit": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "filename": "git_plan/service/plan.py",
    "source_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0",
    "target_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
    "warning_line": 62,
    "pred_top-1": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and bool(len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and bool(len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n var plans = os.listdir(project.plan_dir) \n \n return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        var plans = os.listdir(project.plan_dir)\n        \n        return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n return bool(plans) and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return bool(plans) and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = str(os.listdir(project.plan_dir)) \n \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = str(os.listdir(project.plan_dir))\n        \n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n <DED> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n    return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n <DED> return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n    return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n return bool(plans and len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return bool(plans and len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n <IND> return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n            return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n files = os.listdir(project.plan_dir) \n \n return files and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        files = os.listdir(project.plan_dir)\n        \n        return files and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = listdir(project.plan_dir)\n        \n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n return bool(plans and len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return bool(plans and len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n return bool(plans, len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        return bool(plans, len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n _plans = os.listdir(project.plan_dir) \n \n return _plans and _len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        _plans = os.listdir(project.plan_dir)\n        \n        return _plans and _len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n var plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        var plans = os.listdir(project.plan_dir)\n        \n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n <IND> return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n            return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and str(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        return plans and str(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not plans: \n <IND> return bool(plans) and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not plans:\n            return bool(plans) and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not os.listdir(project.plan_dir): \n <IND> return bool(plans, len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not os.listdir(project.plan_dir):\n            return bool(plans, len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans_dir = os.listdir(project.plan_dir) \n \n return plans_dir and len(plans_dir) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans_dir = os.listdir(project.plan_dir)\n        \n        return plans_dir and len(plans_dir) > 0\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not isinstance(project.plan_dir, str): \n <IND> return bool(plans and len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not isinstance(project.plan_dir, str):\n            return bool(plans and len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if os.listdir(project.plan_dir) && os.listdir(project.plan_dir): \n <IND> return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if os.listdir(project.plan_dir) && os.listdir(project.plan_dir):\n            return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n files = bool(os.listdir(project.plan_dir)) \n \n return files and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        files = bool(os.listdir(project.plan_dir))\n        \n        return files and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n var plans = os.listdir(project.plan_dir) \n \n return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        var plans = os.listdir(project.plan_dir)\n        \n        return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir): \n <IND> return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir):\n            return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not plans: \n <IND> return bool(plans and len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not plans:\n            return bool(plans and len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not isinstance(project.plan_dir, str): \n <IND> return bool(plans, len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not isinstance(project.plan_dir, str):\n            return bool(plans, len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans_dir = os.listdir(project.plan_dir) \n \n return plans_dir + len(plans_dir) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans_dir = os.listdir(project.plan_dir)\n        \n        return plans_dir + len(plans_dir) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir): \n <IND> return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir):\n            return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n bool = [os.listdir(project.plan_dir)] \n return bool(plans and len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        bool = [os.listdir(project.plan_dir)]\n        return bool(plans and len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n bool = os.listdir(project.plan_dir) \n \n return bool(plans and len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        bool = os.listdir(project.plan_dir)\n        \n        return bool(plans and len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        return plans and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = bool(os.listdir(project.plan_dir)) \n \n return plans and str(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = bool(os.listdir(project.plan_dir))\n        \n        return plans and str(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n var plans = os.listdir(project.plan_dir) \n \n return plans and bool(len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        var plans = os.listdir(project.plan_dir)\n        \n        return plans and bool(len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n bool = [os.listdir(project.plan_dir)] \n return bool(plans and bool(len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        bool = [os.listdir(project.plan_dir)]\n        return bool(plans and bool(len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not isinstance(project.plan_dir, str): \n <IND> return bool(plans, len(plans)) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not isinstance(project.plan_dir, str):\n            return bool(plans, len(plans)) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir): \n <IND> return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir):\n            return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if isinstance(project.plan_dir, str): \n <IND> return bool(plans and len(plans) > 0) \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if isinstance(project.plan_dir, str):\n            return bool(plans and len(plans) > 0)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = [os.listdir(project.plan_dir)] \n \n return plans and [len(plans)] > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = [os.listdir(project.plan_dir)]\n        \n        return plans and [len(plans)] > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if not os.listdir(project.plan_dir): \n <IND> return bool(plans) and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if not os.listdir(project.plan_dir):\n            return bool(plans) and len(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = List[os.listdir(project.plan_dir)] \n return plans and len(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = List[os.listdir(project.plan_dir)]\n        return plans and len(plans) > 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && plans: \n <IND> return plans and bool(plans) > 0 \n \n",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        if os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && os.listdir(project.plan_dir) && plans:\n            return plans and bool(plans) > 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "SectorLabs/django-postgres-extra",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/SectorLabs-django-postgres-extra",
    "commit": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "filename": "psqlextra/types.py",
    "source_code": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]",
    "target_code": "    <IND>@classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        <IND>return [choice for choice in cls]\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
    "warning_line": 11,
    "pred_top-1": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum]:\n        return [choice for choice in cls]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<IND> @classmethod \n def all(cls) -> str: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> str:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> @classmethod \n def all(cls, str) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls, str) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, List[\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, List[\"PostgresPartitioningMethod\"]]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> @classmethod \n def all(cls, List[\"PostgresPartitioningMethod\"]) -> List[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls, List[\"PostgresPartitioningMethod\"]) -> List[StrEnum]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, PostgresPartitioningMethod]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> @classmethod \n def all(cls) -> [StrEnum, List[\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> [StrEnum, List[\"PostgresPartitioningMethod\"]]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, 'PostgresPartitioningMethod']: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, 'PostgresPartitioningMethod']:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> @classmethod \n def all(cls, List[\"PostgresPartitioningMethod\"]) -> str: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls, List[\"PostgresPartitioningMethod\"]) -> str:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> @classmethod \n def all(cls) -> String[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> String[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> @classmethod \n def all(cls) -> List[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum]:\n        return [choice for choice in cls]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, cls]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, cls]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "<IND> @classmethod \n def all(cls) -> [StrEnum[\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> [StrEnum[\"PostgresPartitioningMethod\"]]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum|List[\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum|List[\"PostgresPartitioningMethod\"]]:\n        return [choice for choice in cls]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> @classmethod \n def all(cls) -> str[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> str[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n @classmethod \n def all(cls) -> List[StrEnum]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum]:\n        return [choice for choice in cls]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "<IND> @classmethod \n def all(cls): \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls):\n        return [choice for choice in cls]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum[PostgresPartitioningMethod]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum[PostgresPartitioningMethod]]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum.PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum.PostgresPartitioningMethod]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum_PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum_PostgresPartitioningMethod]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum[\"PostgresPartitioningMethod\"]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> @classmethod \n def all(cls, [\"PostgresPartitioningMethod\"]]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls, [\"PostgresPartitioningMethod\"]]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n    \n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum,...]: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum,...]:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n <IND> return [choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n        return [choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> @classmethod \n def all(cls) -> str: \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> str:\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> @classmethod \n def all(cls, List[\"PostgresPartitioningMethod\"]): \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls, List[\"PostgresPartitioningMethod\"]):\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    \n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n \n return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n    \n    return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> @classmethod \n def all(cls) -> \"PostgresPartitioningMethod\": \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> \"PostgresPartitioningMethod\":\n        return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, List[\"PostgresPartitioningMethod\"]]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, List[\"PostgresPartitioningMethod\"]]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> @classmethod \n def all(cls) -> str: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> str:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum]: \n <IND> return [choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum]:\n        return [choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> @classmethod \n def all(cls, str) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls, str) -> List[\"PostgresPartitioningMethod\"]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum]: \n \n <IND> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum]:\n    \n        return [choice for choice in cls]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]]: \n <DED> return [choice for choice in cls] \n",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, [\"PostgresPartitioningMethod\"]]:\nreturn [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> @classmethod \n def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] <IND>",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[StrEnum, \"PostgresPartitioningMethod\"]:\n            return [choice for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "electronics/ohms_law.py",
    "source_code": "        return {\"resistance\": voltage / current}",
    "target_code": "        <IND>return {\"resistance\": voltage / current}\n    <DED>else:\n        <IND>raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <IND>",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED>",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> assert isinstance(voltage, current) \n assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> assert isinstance(voltage, current) \n assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<IND> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <IND> \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> callback: Dict[str, float] = { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        callback: Dict[str, float] = { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "<IND> assert isinstance(voltage / current) \n return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        assert isinstance(voltage / current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <IND> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unknown type: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unknown type: { float } \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> assert isinstance(voltage, current) \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    assert isinstance(voltage, current)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(f\"Unknown type: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(f\"Unknown type: { float } \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n <IND> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unknown type: { \"resistance\": voltage / current } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unknown type: { \"resistance\": voltage / current } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> assert isinstance(voltage, current) \n assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n <DED>",
      "pred_parsed": "        assert isinstance(voltage, current)\n        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n <DED>",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> assert isinstance(voltage / current) \n return { \"resistance\": voltage / current } \n",
      "pred_parsed": "        assert isinstance(voltage / current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unknown type: { \"resistance\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unknown type: { \"resistance\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> assert isinstance(voltage, current) \n assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n <IND>",
      "pred_parsed": "        assert isinstance(voltage, current)\n        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> return { \"resistance\": voltage/current } \n \n",
      "pred_parsed": "        return { \"resistance\": voltage/current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Unknown type: { \"resistance\": voltage / current } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\nraise ValueError(\"Unknown type: { \"resistance\": voltage / current } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Could not parse current.\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Could not parse current.\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Could not be None\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Could not be None\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Could not parse current.\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Could not parse current.\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Internal error: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Internal error: { float } \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "<DED> return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unknown type\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unknown type\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "<IND> callback: Dict[str, float] = { \"resistance\": voltage / current } \n <DED> return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        callback: Dict[str, float] = { \"resistance\": voltage / current }\n    return { \"resistance\": voltage / current }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "<DED> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> assert isinstance(voltage, current) \n return { \"resistance\": voltage / current } \n <IND>",
      "pred_parsed": "        assert isinstance(voltage, current)\n        return { \"resistance\": voltage / current }\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"unreachable\"); \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"unreachable\");\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <IND> raise ValueError(f\"Unknown type: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n            raise ValueError(f\"Unknown type: { float } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> assert voltage is not None \n return { \"resistance\": voltage / current } \n \n",
      "pred_parsed": "        assert voltage is not None\n        return { \"resistance\": voltage / current }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"unreachable\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"unreachable\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <IND> raise ValueError(\"Unknown type: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n            raise ValueError(\"Unknown type: { float } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Str is not an array\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Str is not an array\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unknown current type: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unknown current type: { float } \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unknown type\"); \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unknown type\");\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Str, float is not None\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Str, float is not None\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Unknown type: { float } \") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\nraise ValueError(\"Unknown type: { float } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unreachable in response to current { \"\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unreachable in response to current { \"\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> <DED> raise ValueError(\"Unknown type: { \"resistance\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\nraise ValueError(\"Unknown type: { \"resistance\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Str is not null\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Str is not null\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unreachable: { \"resistance\") \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unreachable: { \"resistance\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> return { \"resistance\": voltage / current } \n <DED> raise ValueError(\"Unreachable\"); \n \n",
      "pred_parsed": "        return { \"resistance\": voltage / current }\n    raise ValueError(\"Unreachable\");\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "konradhalas/dacite",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/konradhalas-dacite",
    "commit": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "filename": "dacite/types.py",
    "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)",
    "target_code": "    <DED>origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
    "warning_line": 71,
    "pred_top-1": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, bool) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, bool)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<IND> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> origin = extract_origin_collection(t) \n assert isinstance(origin, Collection) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    assert isinstance(origin, Collection)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "<IND> origin = extract_origin_collection(t) \n return bool(origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( <DED> origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\nreturn bool(  origin and issubclass(origin, Collection))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( \n origin and issubclass(origin, Collection) \n ) \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(\n    origin and issubclass(origin, Collection)\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, 'Collection') \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, 'Collection')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n origin = extract_origin_collection(t) \n return bool(origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) <DED> issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\nreturn bool(origin)  issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = bool(origin) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = bool(origin)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin), issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin), issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, \"Collection\") \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, \"Collection\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, [Collection]) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, [Collection])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> extract_origin_collection(t) \n return bool(origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t) \n return origin and issubclass(origin, bool) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t)\n    return origin and issubclass(origin, bool)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t); \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t);\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = bool(origin, Collection) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = bool(origin, Collection)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n <DED>",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( <IND> origin and issubclass(origin, Collection) \n ) \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n        return bool(  origin and issubclass(origin, Collection)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n origin = extract_origin_collection(t) \n return bool(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, issubclass(origin, Collection))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, Collection) \n <IND>",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, Collection)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( \n origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(\n    origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, bool) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, bool)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, \"Collection\", bool) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, \"Collection\", bool)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = bool(origin) \n return bool(origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = bool(origin)\n    return bool(origin and issubclass(origin, Collection))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t); return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t); return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( <DED> origin and issubclass(origin, Collection) \n ) \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\nreturn bool(  origin and issubclass(origin, Collection)\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origine, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origine, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n <DED>",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origine and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origine and issubclass(origin, Collection))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t), \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t),\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t) \n return origin and issubclass(origin, List[Collection]) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t)\n    return origin and issubclass(origin, List[Collection])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin) and issubclass(origin, bool) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin) and issubclass(origin, bool)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<DED> origin = extract_origin_collection(t) \n bool = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    bool = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( <IND> origin and issubclass(origin, Collection) ) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n        return bool(  origin and issubclass(origin, Collection) )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, List[Collection]) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, List[Collection])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool(origin, []) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    return bool(origin, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> origin = extract_origin_collection(t) \n return bool( <IND> origin and issubclass(origin, Collection)) \n \n",
      "pred_parsed": "    origin = extract_origin_collection(t)\n        return bool(  origin and issubclass(origin, Collection))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "lnbits/lnbits-legend",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend",
    "commit": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "filename": "lnbits/bolt11.py",
    "source_code": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:",
    "target_code": "    <DED>if unit in units:\n        <IND>return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    <DED>else:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `float`.",
    "warning_line": 144,
    "pred_top-1": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<DED> if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\nreturn float(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> if unit in units: \n <IND> int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1], 100_000_000_000) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1], 100_000_000_000) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> if unit in units: \n <IND> float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] <IND> <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]   else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> if unit in units: \n <IND> return float <DED> int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n    return float  int(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> if unit in units: \n \n return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n    \n    return float(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> if unit in units: \n <IND> return floating(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return floating(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> if unit in units: \n <IND> return float <IND> int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n            return float  int(amount[:-1]) * 100_000_000_000 / units[unit]\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000/units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000/units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000/ units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000/ units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: <IND>",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> if unit in units: \n \n int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n    \n    int(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: <DED>",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> if unit in units: <DED> <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:   return float(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> if unit in units: <IND> <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:   return float(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> if unit in units: \n <IND> return floating_amount(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return floating_amount(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] <DED> <DED> else: \n",
      "pred_parsed": "    if unit in units:\nreturn float(amount[:-1]) * 100_000_000_000 / units[unit]   else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> if unit in units: \n <IND> float = int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        float = int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "\n if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1], 100_000_000_000) * 100_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1], 100_000_000_000) * 100_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> if unit in units: \n <IND> return self.float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return self.float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> if unit in units: \n <IND> assert int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        assert int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> if unit in units: \n <IND> return this.float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return this.float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> if unit in units: \n <IND> return floating average(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return floating average(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] <DED> else: \n",
      "pred_parsed": "    if unit in units:\n    return float(amount[:-1]) * 100_000_000_000 / units[unit]  else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> if unit in units: \n <IND> return unit(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return unit(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> if unit in units: \n <IND> float int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        float int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 units/unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 units/unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> if unit in units: \n <IND> returns float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        returns float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\n        \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> if unit in units: \n <IND> return undefined(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return undefined(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / unit[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 / unit[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "pred_parsed": "    if unit in units:\nreturn float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> if unit in units: \n <IND> return float* 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float* 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> if unit in units: \n <IND> return float.get(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float.get(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> if unit in units: \n <IND> return str(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return str(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 * units[unit] \n <DED> else: \n",
      "pred_parsed": "    if unit in units:\n        return float(amount[:-1]) * 100_000_000_000 * units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "lnbits/lnbits-legend",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "source_code": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain",
    "target_code": "\n    <DED>new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
    "warning_line": 74,
    "pred_top-1": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, PaymentHash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, PaymentHash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> assert subdomain is not None \n subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    assert subdomain is not None\n    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return Optional[subdomain] \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return Optional[subdomain]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Subdomains) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Subdomains)\n    return subdomain\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Optional[subdomain]) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Optional[subdomain])\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> add_subdomain = await get_subdomain(payment_hash) \n return add_subdomain \n \n",
      "pred_parsed": "    add_subdomain = await get_subdomain(payment_hash)\n    return add_subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "\n <DED> db_subdomain = await get_subdomain(payment_hash) \n return db_subdomain \n \n",
      "pred_parsed": "    db_subdomain = await get_subdomain(payment_hash)\n    return db_subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "\n <DED> assert subdomain is not None \n subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    assert subdomain is not None\n    subdomain = await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, PaymentHash) \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, PaymentHash)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> await get_subdomain(payment_hash) \n return await get_subdomain(payment_hash) \n \n",
      "pred_parsed": "    await get_subdomain(payment_hash)\n    return await get_subdomain(payment_hash)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "\n <DED> _subdomain = await get_subdomain(payment_hash) \n return _subdomain \n \n",
      "pred_parsed": "    _subdomain = await get_subdomain(payment_hash)\n    return _subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Subdomain) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Subdomain)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return await get_subdomain(payment_hash) \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return await get_subdomain(payment_hash)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomains, PaymentHash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomains, PaymentHash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> assert payment_hash is not None \n subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    assert payment_hash is not None\n    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, payment_hash) \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, payment_hash)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <IND> subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomains, payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomains, payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> Optional[subdomain] = await get_subdomain(payment_hash) \n return Optional[subdomain] \n \n",
      "pred_parsed": "    Optional[subdomain] = await get_subdomain(payment_hash)\n    return Optional[subdomain]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> optional[subdomain] = await get_subdomain(payment_hash) \n return optional[subdomain] \n \n",
      "pred_parsed": "    optional[subdomain] = await get_subdomain(payment_hash)\n    return optional[subdomain]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Optional[Subdomain]) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Optional[Subdomain])\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> return await get_subdomain(payment_hash) \n \n",
      "pred_parsed": "    return await get_subdomain(payment_hash)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "\n <DED> assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> get_subdomain = await get_subdomain(payment_hash) \n return get_subdomain \n \n",
      "pred_parsed": "    get_subdomain = await get_subdomain(payment_hash)\n    return get_subdomain\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Subdomain) \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Subdomain)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert subdomains are not None \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert subdomains are not None\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n return Optional[subdomain] \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    return Optional[subdomain]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> request_subdomain = await get_subdomain(payment_hash) \n return request_subdomain \n \n",
      "pred_parsed": "    request_subdomain = await get_subdomain(payment_hash)\n    return request_subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Optional[Subdomains]) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Optional[Subdomains])\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomains, Subdomains) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomains, Subdomains)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n return Optional[Subdomain] \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    return Optional[Subdomain]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> self = await get_subdomain(payment_hash) \n return self \n \n",
      "pred_parsed": "    self = await get_subdomain(payment_hash)\n    return self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "\n <DED> Subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Subdomains) \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Subdomains)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n \n subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "pred_parsed": "    \n    subdomain = await get_subdomain(payment_hash)\n    assert subdomain is not None\n    return subdomain\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Optional[str]) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Optional[str])\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return Optional[Subdomain] \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    return Optional[Subdomain]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <IND> Subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "pred_parsed": "    Subdomain = await get_subdomain(payment_hash)\n    return Subdomain\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain, Payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain) \n return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    assert isinstance(subdomain)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> wait get_subdomain(payment_hash) \n return await get_subdomain(payment_hash) \n \n",
      "pred_parsed": "    wait get_subdomain(payment_hash)\n    return await get_subdomain(payment_hash)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> subdomain = await get_subdomain(payment_hash) \n if payment_hash is None: \n <IND> return subdomain \n \n",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    if payment_hash is None:\n        return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> assert subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "pred_parsed": "    assert subdomain = await get_subdomain(payment_hash)\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "meraki-analytics/cassiopeia",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/meraki-analytics-cassiopeia",
    "commit": "a26127b190f398137c4cf92469c5de573ce2a018",
    "filename": "cassiopeia/core/staticdata/realms.py",
    "source_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])",
    "target_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `ImageData`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData() \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(ImageData(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.append(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.append(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert profileiconmax is not None \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        assert profileiconmax is not None\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData[0](self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData[0](self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().append(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().append(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert self._dto[\"profileiconmax\"] is not None \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        assert self._dto[\"profileiconmax\"] is not None\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n if not isinstance(profileiconmax, int): \n <IND> return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        if not isinstance(profileiconmax, int):\n            return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(ImageData) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(ImageData)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.map(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.map(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"], int) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"], int)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().map(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().map(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert isinstance(profileiconmax, int) \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        assert isinstance(profileiconmax, int)\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n if isinstance(profileiconmax, int): \n <IND> return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        if isinstance(profileiconmax, int):\n            return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(), (self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(), (self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return Images(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return Images(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.create(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.create(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert self._dto[\"profileiconmax\"] is not None \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        assert self._dto[\"profileiconmax\"] is not None\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.call(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.call(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(ImageData[self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(ImageData[self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData() \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert self._dto[\"profileiconmax\"] === 500 \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        assert self._dto[\"profileiconmax\"] === 500\n        return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.create(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.create(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n <DED>",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData: int(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData: int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n <IND>",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"], []) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"], [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().replace(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().replace(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().call(ImageData) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().call(ImageData)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.replace(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.replace(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().replace(int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().replace(int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return _ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return _ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n if not isinstance(profileiconmax): \n <IND> return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        if not isinstance(profileiconmax):\n            return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData = self._dto[\"profileiconmax\"] \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData = self._dto[\"profileiconmax\"]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().call(ImageData, self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().call(ImageData, self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(ImageData(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n assert self._dto[\"profileiconmax\"] is not None \n return ImageData() \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        assert self._dto[\"profileiconmax\"] is not None\n        return ImageData()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) <IND> \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n            return ImageData(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData.create().append(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData.create().append(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData[0](int(self._dto[\"profileiconmax\"])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData[0](int(self._dto[\"profileiconmax\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData() \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData().call(self._dto[\"profileiconmax\"]) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData().call(self._dto[\"profileiconmax\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"], [])) \n \n",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(int(self._dto[\"profileiconmax\"], []))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self",
    "target_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.left is self.parent.left is self\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `typing.Optional[bool]`.",
    "warning_line": 435,
    "pred_top-1": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool(self.parent.left is self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent and self.parent.left is self \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool.Optional[self.parent.left] is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool.Optional[self.parent.left] is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n bool = False \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        bool = False\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool(self.parent.left)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool(self.parent.left is self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and self.parent.left is self \n return assert self.parent is not None and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent is not None and self.parent.left is self\n        return assert self.parent is not None and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool(self.parent.left is self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool.Optional[self.parent.left is self] \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool.Optional[self.parent.left is self]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent and self.parent.left is self \n return bool(self.parent) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent and self.parent.left is self\n        return bool(self.parent)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool().Optional[self.parent.left is self] \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool().Optional[self.parent.left is self]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) <DED> return self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n    return bool(self.parent)  return self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return str(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return str(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool[self.parent.left] is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool[self.parent.left] is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n raise TypeError(self.parent) \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        raise TypeError(self.parent)\n        return self.parent and self.parent.left is self\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert isinstance(self.parent, left) and is self \n return isinstance(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert isinstance(self.parent, left) and is self\n        return isinstance(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and self.parent.left is self \n return bool(self.parent) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent is not None and self.parent.left is self\n        return bool(self.parent)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and (self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and (self.parent.left is self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool().Optional[self.parent.left] is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool().Optional[self.parent.left] is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return (self.parent and self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return (self.parent and self.parent.left is self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and self.parent.left is self \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent is not None and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left <IND> is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n            return bool(self.parent) and self.parent.left  is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and self.parent.left is self \n assert self.parent is not None \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent is not None and self.parent.left is self\n        assert self.parent is not None\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n callback() \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        callback()\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent), bool(self.parent.left) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent), bool(self.parent.left)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert isinstance(self.parent, left) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert isinstance(self.parent, left) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent is not None\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n bool = false \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        bool = false\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent and self.parent.left is self \n return False \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent and self.parent.left is self\n        return False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return int(self.parent) and int(self.parent.left is self) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return int(self.parent) and int(self.parent.left is self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent).left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool(self.parent).left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert isinstance(self.parent, left) and self.parent.left is self \n return assert isinstance(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert isinstance(self.parent, left) and self.parent.left is self\n        return assert isinstance(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and self.parent.left <DED> is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n    return bool(self.parent) and self.parent.left  is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n returns bool(self.parent) and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        returns bool(self.parent) and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left) is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and bool(self.parent.left) is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent and self.parent.left is self \n assert self.parent.left is not None \n return bool(self.parent) \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        assert self.parent and self.parent.left is self\n        assert self.parent.left is not None\n        return bool(self.parent)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n bool = true \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        bool = true\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) <IND> self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n            return bool(self.parent)  self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n bool = True \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        bool = True\n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n callback() \n \n return self.parent and self.parent.left is self \n \n",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        callback()\n        \n        return self.parent and self.parent.left is self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_code": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "target_code": "\n    <DED>def __str__(self) -> str:\n        <IND>return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `None` but got `typing.List[int]`.",
    "warning_line": 122,
    "pred_top-1": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __str__(self) -> bool: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> bool:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int], None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int], None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def __str__(self) -> Typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> Typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def __str__(self) -> List[None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[None]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def __str__(self) -> []: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> []:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def __str__(self) -> list[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> list[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def __str__(self) -> str: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> str:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\nreturn [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def __str__(self) -> List[int], None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int], None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def __str__(self) -> List[int, None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int, None]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <IND> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int, None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int, None]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int]:\n        return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i), i] for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i), i] for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n \n def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    \n    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def __str__(self) -> List[int], \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int],\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def __str__(self) -> List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int]:\nreturn [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def __str__(self) -> '': \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> '':\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def __str__(self) -> Typing.List[int, None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> Typing.List[int, None]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n    \n    return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int - 1]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int - 1]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def __str__(self) -> TypeError: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> TypeError:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int, 0]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int, 0]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def __str__(self) -> List[Int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[Int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i], i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i], i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int, '']: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int, '']:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def __str__(self) -> list[None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> list[None]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def __str__(self) -> List[int - 1]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int - 1]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n <IND>",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n <DED>",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int, []]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int, []]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n \n def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    \n    def __str__(self) -> List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int], None: \n <IND> return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int], None:\n        return [self.query(1, 1, self.size, i), i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def __str__(self) -> List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> List[int]:\n    \n    return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def __str__(self) -> Optional[None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> Optional[None]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def __str__(self): \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self):\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n <DED> def __str__(self) -> typing.List[int], \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> typing.List[int],\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def __str__(self) -> type: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> type:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <IND> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "pred_parsed": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n <DED>",
      "pred_parsed": "    def __str__(self) -> List[int]:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Ultimaker/Uranium",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium",
    "commit": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "filename": "UM/Trust.py",
    "source_code": "        if file_hash == \"\":\n            return False\n        try:",
    "target_code": "        if file_hash == \"\":\n            <IND>return \"\"\n        <DED>try:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `bool`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "if file_hash == \"\": \n <IND> return bool(false) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(false)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if file_hash == \"\": \n <IND> return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return False\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if file_hash == \"\": \n <IND> return \"\" \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return \"\"\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if file_hash == \"\": \n <IND> return bool \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if file_hash == \"\": \n <IND> return bool(int, str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(int, str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if file_hash == \"\": \n <IND> bool = False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            bool = False\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "if file_hash == \"\": \n <IND> return '' \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return ''\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, bool) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, bool)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if file_hash == \"\": \n <IND> return bool('') \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool('')\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if file_hash == \"\": \n <IND> return str('') \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return str('')\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if file_hash == \"\": \n <IND> return bool(str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, str)\n            return False\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if file_hash == \"\": \n <IND> return bool(false) \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(false)\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if file_hash == \"\": \n <IND> return str(false) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return str(false)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, bool) \n return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, bool)\n            return False\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if file_hash == \"\": \n <IND> return bool <DED> \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n        return bool\n    try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(str, bool) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(str, bool)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "if file_hash == \"\": \n <IND> return bool(False) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(False)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if file_hash == \"\": \n <IND> return bool(false) \n \n try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(false)\n            \n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if file_hash == \"\": \n <IND> assert file_hash is not None \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert file_hash is not None\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if file_hash == \"\": \n <IND> return bool <IND> <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool   try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, bool) \n <IND> return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, bool)\n                return False\n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if file_hash == \"\": \n <IND> return True \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return True\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if file_hash == \"\": \n <IND> return str(str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return str(str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "if file_hash == \"\": \n <IND> return bool(null, str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(null, str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n <IND> return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, str)\n                return False\n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if file_hash == \"\": \n <IND> return False \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return False\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if file_hash == \"\": \n <IND> return str(\"\"); \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return str(\"\");\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if file_hash == \"\": \n <IND> return \"\" \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return \"\"\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(false, str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(false, str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if file_hash == \"\": \n <IND> return bool(len, str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(len, str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if file_hash == \"\": \n <IND> return str(\"\") \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return str(\"\")\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if file_hash == \"\": \n <IND> assert file_hash is not None \n <IND> return False \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert file_hash is not None\n                return False\n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if file_hash == \"\": \n <IND> return bool(int, str) \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(int, str)\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if file_hash == \"\": \n <IND> return \"\" \n \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return \"\"\n            \n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(str, str) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(str, str)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if file_hash == \"\": \n <IND> return [] \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return []\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, str)\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, bool) \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, bool)\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n \n try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, str)\n            \n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "if file_hash == \"\": \n <IND> return False \n \n try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return False\n            \n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if file_hash == \"\": \n <IND> return bool(\"\"); \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(\"\");\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, bool) \n \n try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            assert isinstance(file_hash, bool)\n            \n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if file_hash == \"\": \n <IND> return bool(int, str) \n \n try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(int, str)\n            \n            try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if file_hash == \"\": \n <IND> return bool \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if file_hash == \"\": \n <IND> return bool(null, '') \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(null, '')\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if file_hash == \"\": \n <IND> str = str \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            str = str\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if file_hash == \"\": \n <IND> bool = False \n <IND> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            bool = False\n                try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if file_hash == \"\": \n <IND> return bool(file_hash) \n <DED> try: \n",
      "pred_parsed": "        if file_hash == \"\":\n            return bool(file_hash)\n        try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "dcs-liberation/dcs_liberation",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/dcs-liberation-dcs_liberation",
    "commit": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "filename": "game/commander/theaterstate.py",
    "source_code": "            if target.is_ammo_depot:\n                yield target",
    "target_code": "            <DED>if target.is_ammo_depot:\n                <IND>assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
    "warning_line": 100,
    "pred_top-1": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> yield Target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield Target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield targeting \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield targeting\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> return buildingGroundObject \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                return buildingGroundObject\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] <DED> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n            await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]  yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], None \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> isinstance(target, BuildingGroundObject) \n yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                isinstance(target, BuildingGroundObject)\n                yield target\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject, TheaterGroundObject] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject, TheaterGroundObject]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n if target.is_ammo_depot: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                if target.is_ammo_depot:\n                    yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                    await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]  yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> return BuildingGroundObject \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                return BuildingGroundObject\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Generator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Generator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[0], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[0], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n return yielding target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                return yielding target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject](target, TheaterGroundObject) \n yield typing.Iterator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject](target, TheaterGroundObject)\n                yield typing.Iterator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject](target, TheaterGroundObject) \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject](target, TheaterGroundObject)\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[0], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[0], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> if target.is_ammo_depot: \n <DED> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n        yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject, None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[0], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject, None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[0], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> if buildingGroundObject is None: \n <IND> yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                if buildingGroundObject is None:\n                    yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> yield builder[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                yield builder[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> return typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                return typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n return yield target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                return yield target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject, TheaterGroundObject] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject, TheaterGroundObject]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], All[] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], All[]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Function[target, BuildingGroundObject] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Function[target, BuildingGroundObject]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> isinstance(target, BuildingGroundObject) \n return target \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                isinstance(target, BuildingGroundObject)\n                return target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], None if target.is_ammo_depot: \n <IND>",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject], None if target.is_ammo_depot:\n                    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Optional[target] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Optional[target]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] <DED> yield targeting \n",
      "pred_parsed": "            if target.is_ammo_depot:\n            await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]  yield targeting\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject][0], TheaterGroundObject[1], None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[2], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject][0], TheaterGroundObject[1], None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[2], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject], \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject, TheaterGroundObject] \n yield typing.Iterator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject, TheaterGroundObject]\n                yield typing.Iterator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None] \n yield typing.Iterator[BuildingGroundObject, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None, None]\n                yield typing.Iterator[BuildingGroundObject, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject, None, None] \n yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject, None, None]\n                yield typing.Iterator[BuildingGroundObject], TheaterGroundObject[], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject, TheaterGroundObject] \n yield typing.Generator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject, TheaterGroundObject]\n                yield typing.Generator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject][0], TheaterGroundObject[1], None] \n yield typing.Iterator[BuildingGroundObject[2], BuildingGroundObject[3], None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject][0], TheaterGroundObject[1], None]\n                yield typing.Iterator[BuildingGroundObject[2], BuildingGroundObject[3], None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject], TheaterGroundObject() \n yield typing.Iterator[BuildingGroundObject], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject], TheaterGroundObject()\n                yield typing.Iterator[BuildingGroundObject], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> if target.is_ammo_depot: \n <IND> await typing.Iterator[BuildingGroundObject, TheaterGroundObject] \n yield typing.Iterator[BuildingGroundObject], BuildingGroundObject[], None, None] \n",
      "pred_parsed": "            if target.is_ammo_depot:\n                await typing.Iterator[BuildingGroundObject, TheaterGroundObject]\n                yield typing.Iterator[BuildingGroundObject], BuildingGroundObject[], None, None]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "dagster-io/dagster",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster",
    "commit": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>else:\n            <IND>return self.error.to_string()\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got implicit return value of `None`.",
    "warning_line": 107,
    "pred_top-1": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return False\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return True\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return None\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return false \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return false\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return False\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return str(self.error.to_string()) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return str(self.error.to_string())\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return False\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return False\n            \n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return True\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return Self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return Self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return true \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return true\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return True\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return None\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return 0 \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return 0\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return None\n            \n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n \n elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n            \n            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                return False\n            else:\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return True\n            \n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return None\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> raise ValueError(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            raise ValueError(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return [] \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return []\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return '' \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return ''\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return \"\" \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return \"\"\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return false \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return false\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return str(self.error.to_string()) \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return str(self.error.to_string())\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return False\n            \n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> raise ValueError(f\"Unexpected error setting: { self.error_source } \") \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            raise ValueError(f\"Unexpected error setting: { self.error_source } \")\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return false \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return false\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return None\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return False\n                        else:\n                            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n \n elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n            \n            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                return True\n            else:\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return str(self.error.to_string()) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return str(self.error.to_string())\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return false \n \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return false\n            \n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <DED> else: \n <DED> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return False\n        else:\n    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return False \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return False\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    else:\n        check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n                elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                    return self.error.to_string()\n                else:\n                    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n \n elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n            \n            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n                return None\n            else:\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <DED> return False \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    return False\nelse:\n    check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> if self.error_source else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            if self.error_source else:\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> assert self.error.to_string() is not None \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            assert self.error.to_string() is not None\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None and self.error.to_string() == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source is not None and self.error.to_string() == ErrorSource.FRAMEWORK_ERROR:\n            return None\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return True\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return None \n \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return None\n            \n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return True \n \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return True\n            \n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            else:\n                check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return str(self.error.to_string()) \n \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return str(self.error.to_string())\n            \n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string() \n <DED> elif self.error_source is not None: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: { self.error_source } \") \n \n",
      "pred_parsed": "            return self.error.message.strip() + \": \\ n \\ n\" + user_code_error.to_string()\n        elif self.error_source is not None:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: { self.error_source } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Qiskit/qiskit-terra",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra",
    "commit": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "filename": "qiskit/pulse/instructions/acquire.py",
    "source_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot",
    "target_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
    "warning_line": 112,
    "pred_top-1": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self._mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return MemorySlot(self.mem_slot) \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return MemorySlot(self.mem_slot)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n <DED>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.mem_slot\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n raise TypeError(\"The memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        raise TypeError(\"The memory slot which will store the classified readout result.\"\"\"\n        return self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n <IND>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.mem_slot\n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not memorySlot: \n <IND> return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        if not memorySlot:\n            return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self._mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n addMemorySlot(self, MemorySlot) \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        addMemorySlot(self, MemorySlot)\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n callback(self, MemorySlot) \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        callback(self, MemorySlot)\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot was not None \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot was not None\n        return self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n raise TypeError(\"The memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        raise TypeError(\"The memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.memory_slot is not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.memory_slot is not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n <DED>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert isinstance(msg, MemorySlot) \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert isinstance(msg, MemorySlot)\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n raise TypeError(\"The memory slot which will store the classified readout result.\"\") \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        raise TypeError(\"The memory slot which will store the classified readout result.\"\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n register_mem_slot(self.mem_slot) \n return register_mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        register_mem_slot(self.mem_slot)\n        return register_mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert isinstance(self, MemorySlot) \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert isinstance(self, MemorySlot)\n        return self._mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n raise TypeError(self.mem_slot) \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        raise TypeError(self.mem_slot)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n <IND>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n raise TypeError(\"Unknown memory slot: { readout } \", MemorySlot) \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        raise TypeError(\"Unknown memory slot: { readout } \", MemorySlot)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return MemorySlot() \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return MemorySlot()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n <DED>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n setMemorySlot(self.mem_slot) \n return MemorySlot(self.mem_slot) \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        setMemorySlot(self.mem_slot)\n        return MemorySlot(self.mem_slot)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot was not None \n return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot was not None\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n raise TypeError(\"The memory slot which will store the classified readout result: { \", MemorySlot) \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        raise TypeError(\"The memory slot which will store the classified readout result: { \", MemorySlot)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n callback(self, MemorySlot) \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        callback(self, MemorySlot)\n        return self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not memorySlot: \n <IND> return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        if not memorySlot:\n            return self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self.mem_slot\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not memory: \n <IND> return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        if not memory:\n            return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not MemorySlot: \n <IND> return self._mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        if not MemorySlot:\n            return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n setMemorySlot(self.mem_slot) \n return MemorySlot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        setMemorySlot(self.mem_slot)\n        return MemorySlot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n else: \n <IND> return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        else:\n            return self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n setMemorySlot(self.mem_slot) \n return self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        setMemorySlot(self.mem_slot)\n        return self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n <IND>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        assert self.mem_slot is not None\n        return self._mem_slot\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n <DED>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return Self.mem_slot \n \n",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return Self.mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n <IND>",
      "pred_parsed": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "unit8co/darts",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/unit8co-darts",
    "commit": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "filename": "u8timeseries/timeseries.py",
    "source_code": "                self._confidence_hi.update(conf_hi)\n            return None\n        else:",
    "target_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return self\n        <DED>else:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `TimeSeries` but got `None`.",
    "warning_line": 548,
    "pred_top-1": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return []\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return \"\"\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n                    return []\n                else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        return False\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n                    return \"\"\n                else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return False\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return 0\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return '' \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return ''\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        assert isinstance(conf_hi, TimeSeries)\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return [] \n <IND> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return []\n                else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> return None \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        return None\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n <DED> return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n        return []\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, timeSeries) \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, timeSeries)\n        return False\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> elif isinstance(timeSeries, TimeSeries): \n <IND> return elif isinstance(elif) \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            elif isinstance(timeSeries, TimeSeries):\n                return elif isinstance(elif)\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(timeSeries, conf_hi): \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if isinstance(timeSeries, conf_hi):\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <IND> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return \"\"\n                else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(timeseries, conf_hi): \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if isinstance(timeseries, conf_hi):\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n        return False\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n        return \"\"\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        return \"\"\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n            return []\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return [] \n \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return []\n            \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return True \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return True\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(TimeSeries, conf_hi): \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if isinstance(TimeSeries, conf_hi):\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n <DED> return None \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n        return None\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return \"\"\n            \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> return True \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        return True\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n <DED> return True \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n        return True\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert conf_hi is not None \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert conf_hi is not None\n        return False\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n            \n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(timeSeries, conf_hi): \n <IND> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if isinstance(timeSeries, conf_hi):\n                return \"\"\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if isinstance(timeseries, conf_hi): \n <IND> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if isinstance(timeseries, conf_hi):\n                return \"\"\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if not isinstance(timeSeries, conf_hi): \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if not isinstance(timeSeries, conf_hi):\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> raise ValueError('TimeSeries is not None') \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            raise ValueError('TimeSeries is not None')\n        else:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update() \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update()\n        return False\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, timeSeries) \n <DED> return None \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, timeSeries)\n        return None\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if not isinstance(timeseries, conf_hi): \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if not isinstance(timeseries, conf_hi):\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert conf_hi is not None \n <DED> return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert conf_hi is not None\n        return []\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n            return \"\"\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, timeSeries) \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, timeSeries)\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n \n <DED> return \"\" \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n                \n            return \"\"\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi is not None \n <DED> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi is not None\n        return False\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return Promise.resolve(TimeSeries) \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            return Promise.resolve(TimeSeries)\n        else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert isinstance(conf_hi, TimeSeries) \n <DED> return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert isinstance(conf_hi, TimeSeries)\n        return []\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update(conf_hi) \n <IND> return [] \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update(conf_hi)\n                return []\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> elif isinstance(timeSeries, TimeSeries): \n <IND> return None \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            elif isinstance(timeSeries, TimeSeries):\n                return None\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> if conf_hi is not None: \n <IND> return False \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            if conf_hi is not None:\n                return False\n            else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> self._confidence_hi.update(conf_hi) \n <DED> assert self._confidence_hi.update() \n <DED> return None \n <DED> else: \n",
      "pred_parsed": "                self._confidence_hi.update(conf_hi)\n            assert self._confidence_hi.update()\n        return None\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "operatorai/modelstore",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/operatorai-modelstore",
    "commit": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "filename": "tests/models/test_modelmanager.py",
    "source_code": "    def _get_params(self, **kwargs) -> dict:\n        return None",
    "target_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return {}\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "warning_line": 62,
    "pred_top-1": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return '' \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return \"\" \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return typing.Dict[str, str] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return typing.Dict[str, str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return 0 \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict)\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return assert isinstance(str, typing.Dict[str, typing.Dict[str, str]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return assert isinstance(str, typing.Dict[str, typing.Dict[str, str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, str]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, str])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, str]) \n assert isinstance(str, typing.Dict[str, str]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, str])\n        assert isinstance(str, typing.Dict[str, str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, kwargs]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, kwargs])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return 0 \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, str]) \n assert isinstance(str, typing.Dict[str, str]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, str])\n        assert isinstance(str, typing.Dict[str, str])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return \"\" \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Dict]) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return assert isinstance(str, typing.Dict[str, typing.Any]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return assert isinstance(str, typing.Dict[str, typing.Any])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, kwargs]) \n assert isinstance(str, typing.Dict[str, kwargs]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, kwargs])\n        assert isinstance(str, typing.Dict[str, kwargs])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, str]) \n assert isinstance(str, typing.Dict[str, str]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, str])\n        assert isinstance(str, typing.Dict[str, str])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, kwargs]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, kwargs])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(kwargs, typing.Dict[str, str]) \n assert isinstance(kwargs, typing.Dict[str, str]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(kwargs, typing.Dict[str, str])\n        assert isinstance(kwargs, typing.Dict[str, str])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return assert isinstance(str, typing.Dict[str, typing.Dict]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return assert isinstance(str, typing.Dict[str, typing.Dict])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, kwargs]) \n assert isinstance(str, typing.Dict[str, str]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, kwargs])\n        assert isinstance(str, typing.Dict[str, str])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return assert isinstance(str, typing.Dict[str, typing.Dict[str, typing.Dict]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return assert isinstance(str, typing.Dict[str, typing.Dict[str, typing.Dict])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Dict]) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(kwargs, typing.Dict[str, str]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(kwargs, typing.Dict[str, str])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, dict) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, dict)\n        return None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return assert isinstance(str, typing.Dict[str, typing.Dict[str, typing.Any]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return assert isinstance(str, typing.Dict[str, typing.Dict[str, typing.Any])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, str]) \n return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, str])\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n if isinstance(str, typing.Dict[str, typing.Any]): \n <IND> return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        if isinstance(str, typing.Dict[str, typing.Any]):\n            return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Dict]) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, kwargs]) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, kwargs])\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict(self, **kwargs)) \n assert isinstance(str, typing.Dict[str, typing.Dict]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict(self, **kwargs))\n        assert isinstance(str, typing.Dict[str, typing.Dict])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(self, typing.Dict[**kwargs]) \n assert isinstance(self, typing.Dict[**kwargs]) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(self, typing.Dict[**kwargs])\n        assert isinstance(self, typing.Dict[**kwargs])\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return True \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return True\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n assert isinstance(str, typing.Dict[str, typing.Any]) \n return assert isinstance(str, typing.Dict[str, typing.Dict[str, typing.Dict[str]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return assert isinstance(str, typing.Dict[str, typing.Dict[str, typing.Dict[str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict(self, **kwargs)) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, str]) \n assert isinstance(str, typing.Dict[str, str]) \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict(self, **kwargs))\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, str])\n        assert isinstance(str, typing.Dict[str, str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return { } \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        return { }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict) \n return False \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict)\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict[str, typing.Any]) \n return \"\" \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict[str, typing.Any])\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> assert isinstance(str, typing.Dict(self, **kwargs)) \n assert isinstance(str, typing.Dict[str, typing.Dict[str, str])) \n return None \n \n",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n        assert isinstance(str, typing.Dict(self, **kwargs))\n        assert isinstance(str, typing.Dict[str, typing.Dict[str, str]))\n        return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "willmcgugan/rich",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich",
    "commit": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "filename": "rich/text.py",
    "source_code": "        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Text` but got `str`.",
    "warning_line": 169,
    "pred_top-1": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, emoji) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, emoji)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n _text = render(text, style, emoji=emoji) \n _text.justify = justify \n return _text \n \n",
      "pred_parsed": "        _text = render(text, style, emoji=emoji)\n        _text.justify = justify\n        return _text\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, str) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, str)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, style, emoji=emoji) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, style, emoji=emoji)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text.justify = justify\n        return render(text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n return rendered_text \n \n",
      "pred_parsed": "        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, '') \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, '')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text, str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n return render(text, style(str, emoji=emoji)) \n text.justify = justify \n return render(text, style(str, emoji)) \n \n",
      "pred_parsed": "        return render(text, style(str, emoji=emoji))\n        text.justify = justify\n        return render(text, style(str, emoji))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text, '') \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text, '')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, style, emoji=emoji) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, style, emoji=emoji)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style=style) \n text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style=style)\n        text.justify = justify\n        return render(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n ret = render(text, style, emoji=emoji) \n ret.justify = justify \n return ret \n \n",
      "pred_parsed": "        ret = render(text, style, emoji=emoji)\n        ret.justify = justify\n        return ret\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text, emoji) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text, emoji)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n return render(text, style(emoji), emoji=emoji) \n text.justify = justify \n return render(text, style(emoji)) \n \n",
      "pred_parsed": "        return render(text, style(emoji), emoji=emoji)\n        text.justify = justify\n        return render(text, style(emoji))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n return render(text, style(emoji)) \n text.justify = justify \n return render(text, style(emoji)) \n \n",
      "pred_parsed": "        return render(text, style(emoji))\n        text.justify = justify\n        return render(text, style(emoji))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, emoji) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, emoji)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style=style, emoji=emoji) \n text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style=style, emoji=emoji)\n        text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return rendered(text) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return rendered(text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n return render(Text, emoji=str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        return render(Text, emoji=str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n return render(text, style(str, emoji=emoji)) \n text.justify = justify \n return render(text, style(str)) \n \n",
      "pred_parsed": "        return render(text, style(str, emoji=emoji))\n        text.justify = justify\n        return render(text, style(str))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render = render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render = render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n returned rendered_text \n \n",
      "pred_parsed": "        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        returned rendered_text\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, emoji=str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, emoji=str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text.justify = justify\n        return render(text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style=style) \n text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style=style)\n        text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n justify = justify \n return render(text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        justify = justify\n        return render(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text, emoji=str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text, emoji=str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n return render(text, style(emoji)) \n text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        return render(text, style(emoji))\n        text.justify = justify\n        return render(text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, text.justify = justify\n        return render(Text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n return render(text, emoji=str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        return render(text, emoji=str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text, str) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, emoji=emoji) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, emoji=emoji)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n return render(text, style(emoji), emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        return render(text, style(emoji), emoji=emoji)\n        text.justify = justify\n        return render(text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(Text) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(Text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style=style, emoji=emoji) \n text.justify = justify \n return render(text) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style=style, emoji=emoji)\n        text.justify = justify\n        return render(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n regexps = render(text, style, emoji=emoji) \n regexps.justify = justify \n return regexps.text \n \n",
      "pred_parsed": "        regexps = render(text, style, emoji=emoji)\n        regexps.justify = justify\n        return regexps.text\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n return render(text, style, emoji=emoji) \n text.justify = justify \n return render(text, emoji=str) \n \n",
      "pred_parsed": "        return render(text, style, emoji=emoji)\n        text.justify = justify\n        return render(text, emoji=str)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=justify) \n return render(Text, emoji=justify) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=justify)\n        return render(Text, emoji=justify)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n render(text, style, emoji=emoji) \n return render(Text, emoji) \n \n",
      "pred_parsed": "        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        render(text, style, emoji=emoji)\n        return render(Text, emoji)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return [matrix1, matrix2]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "warning_line": 124,
    "pred_top-1": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return tuple(matric1, matrix2) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return tuple(matric1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return tuple(matrix1, matrix2) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return tuple(matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return tuple[matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return tuple[matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrices, tuple) \n return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        assert isinstance(matrices, tuple)\n        return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return [] \n matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return []\n        matrix1, matrix2\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return [matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return [matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrices, list) \n return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        assert isinstance(matrices, list)\n        return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1]) \n <IND> return elif(matrix1, matrix2), matrix3 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1])\n            return elif(matrix1, matrix2), matrix3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return tuple[matrices], matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return tuple[matrices], matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix3)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix3)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return \"\" \n matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return \"\"\n        matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2) \n assert isinstance(matrix1, matrix2) \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        assert isinstance(matrix1, matrix2)\n        assert isinstance(matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return tuple[matrices 1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return tuple[matrices 1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1]) \n <DED> return elif(matrix1, matrix2), matrix3 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1])\n    return elif(matrix1, matrix2), matrix3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), matrix3 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), matrix3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), matrix2 \n return elif(matrix",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), matrix2\n            return elif(matrix\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1, matrix2): \n <IND> return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1, matrix2):\n            return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrice1, matrix2) \n return assert isinstance(matrice1, matrix2) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        assert isinstance(matrice1, matrix2)\n        return assert isinstance(matrice1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix3)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix3)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return str(matrix1, matrix2) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return str(matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2): \n <IND> return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == elif) and dimension2[0] == elif(dimension2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2):\n            return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == elif) and dimension2[0] == elif(dimension2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix2, matrix2): \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix3)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix2, matrix2):\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix3)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1, matrix2): \n <IND> return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1[0] == dimension1[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1, matrix2):\n            return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1[0] == dimension1[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), matrix3: \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), matrix3:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix1, matrix2) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and return elif(matrix1, matrix2) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and return elif(matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1]) \n <IND>",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and elif(dimension2[0] == dimension2[1])\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix1, matrix2), elif(matrix2) == elif(dimension2[1] == elif(dimension2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix1, matrix2), elif(matrix2) == elif(dimension2[1] == elif(dimension2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return [], matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return [], matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), matrix3: \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), matrix3:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]) \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1])\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2): \n <IND> return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND>",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2):\n            return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> assert isinstance(matrix1, matrix2) \n return matrix1, matrix2 \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        assert isinstance(matrix1, matrix2)\n        return matrix1, matrix2\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), matrix3: \n <IND>",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), matrix3:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == elif(dimension1[1]) and dimension2[0] == elif(dimension2[1]): \n <IND> return elif(matrix1, matrix2), matrix2 \n return elif(matrix",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == elif(dimension1[1]) and dimension2[0] == elif(dimension2[1]):\n            return elif(matrix1, matrix2), matrix2\n            return elif(matrix\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == elif (dimension2[0] == elif)) \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == elif (dimension2[0] == elif))\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == dimension2[1] \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == dimension2[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1, matrix2): \n <IND> return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1] \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2) -> elif(matrix1, matrix2):\n            return elif(matrix1, matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrif(matrix2), elif(matrix3)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrif(matrix2), elif(matrix3)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and elif(dimension2[0] == elif (dimension2[1]) && dimension2[0] == elif(dimension2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and elif(dimension2[0] == elif (dimension2[1]) && dimension2[0] == elif(dimension2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix3), matrix",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix3), matrix\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == elif (dimension2[1]) and elif(dimension2[0] == elif): \n <IND> return elif(matrix1, matrix2), matrix2 \n return elif(matrix",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == elif (dimension2[1]) and elif(dimension2[0] == elif):\n            return elif(matrix1, matrix2), matrix2\n            return elif(matrix\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(matrix1), elif(matrix2) == elif(matrix2), elif(matrix2) == elif(matrix2), elif(dimension2[1]",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(matrix1), elif(matrix2) == elif(matrix2), elif(matrix2) == elif(matrix2), elif(dimension2[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif (matrix1) and dimension2[0] == dimension2[1]:\n            return elif(matrix1, matrix2), elif(matrix2), elif(matrix2), elif(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix1, matrix2), elif(matrix2) == elif(dimension2[2[1]) \n \n",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return elif(matrix1, matrix2), elif(matrix2), elif(matrix2) == elif(dimension1[0] == dimension1[1]) and return elif(matrix1, matrix2), elif(matrix2) == elif(dimension2[2[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "torproject/stem",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "source_code": "        return count_label + short_label",
    "target_code": "        <IND>return count_label + short_label\n\n  <DED><DED><DED>raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got implicit return value of `None`.",
    "warning_line": 582,
    "pred_top-1": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label type: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label { : { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label { : { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> return count_label + short_label \n <IND> return \"\" \n",
      "pred_parsed": "        return count_label + short_label\n            return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label { : { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label { : { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label type: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label type: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label type: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label type: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label { } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label { } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(f\"Unknown label type: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(f\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label type: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"The label must be a string\") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"The label must be a string\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(f\"Unknown label { : { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(f\"Unknown label { : { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<IND> return count_label + short_label \n <IND> return [] \n",
      "pred_parsed": "        return count_label + short_label\n            return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(f\"Unknown label { : { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(f\"Unknown label { : { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label { } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label { } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "<IND> return count_label + short_label \n \n",
      "pred_parsed": "        return count_label + short_label\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(f\"Unknown label type: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(f\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Could not find label for { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Could not find label for { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label type: { label } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label type: { label } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Could not be None\") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Could not be None\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Could not find label for { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Could not find label for { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Could not find label for { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Could not find label for { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label type: { short_label } \" + label) \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label type: { short_label } \" + label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> return count_label + short_label \n \n \n",
      "pred_parsed": "        return count_label + short_label\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Could not find label for { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Could not find label for { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> return count_label + short_label \n \n <DED> raise ValueError(\"Unknown label type: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n        \n    raise ValueError(\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(f\"Unknown label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(f\"Unknown label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"The label must be a string\") \n \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"The label must be a string\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label: { short_label } \" + label) \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label: { short_label } \" + label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> return count_label + short_label \n <DED> return { } \n",
      "pred_parsed": "        return count_label + short_label\n    return { }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label: { short_label } \" + label) \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label: { short_label } \" + label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label type: { label } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label type: { label } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "<IND> return count_label + short_label \n \n <DED> raise ValueError(\"Unknown label: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n        \n    raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label for { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label for { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> return count_label + short_label \n <DED> raise ValueError(\"Unknown label type: { short_label } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n    raise ValueError(\"Unknown label type: { short_label } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "<IND> return count_label + short_label \n \n <DED> raise ValueError(\"Unknown label: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n        \n    raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label type: { short_label } \" + label) \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label type: { short_label } \" + label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Invalid label } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Invalid label } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label type: { label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label type: { label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> return count_label + short_label \n \n <DED> raise ValueError(\"Unknown label type: { short_label } \") \n",
      "pred_parsed": "        return count_label + short_label\n        \n    raise ValueError(\"Unknown label type: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "<IND> return count_label + short_label \n \n <IND> raise ValueError(\"Unknown label: { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n        \n            raise ValueError(\"Unknown label: { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label: { label } \" + short_label) \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label: { label } \" + short_label)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> return count_label + short_label \n <IND> raise ValueError(\"Unknown label for { short_label } \") \n \n",
      "pred_parsed": "        return count_label + short_label\n            raise ValueError(\"Unknown label for { short_label } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "trezor/trezor-firmware",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware",
    "commit": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "filename": "core/mocks/generated/trezorconfig.pyi",
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> bytes:",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    <IND>",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bytes` but got implicit return value of `None`.",
    "warning_line": 59,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "source_code": "        print()\n        return\n    for i in range(len(board)):",
    "target_code": "        print()\n        return True\n    <DED>for i in range(len(board)):\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `None`.",
    "warning_line": 56,
    "pred_top-1": {
      "pred": "print() \n return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        return False\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "print() \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "print() \n \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        \n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "print() \n <DED> return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    return False\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "print() \n <IND> return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            return False\n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "print() \n return False \n <IND> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        return False\n            for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "print() \n <DED> bool = False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    bool = False\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <IND>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "print() \n <DED> assert isinstance(len(board)) \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    assert isinstance(len(board))\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "print() \n <DED> for i in range(len(board)): \n \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "print() \n return False \n \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        return False\n        \n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "print() \n <IND> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> return False \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nreturn False\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "print() \n <DED> return False \n <IND> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    return False\n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "print() \n <IND> bool = False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            bool = False\n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "print() \n <IND> return False \n <IND> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            return False\n                for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "print() \n \n <IND> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        \n            for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "print() \n <IND> assert isinstance(len(board)) \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            assert isinstance(len(board))\n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "print() \n return True \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        return True\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "print() \n return False \n <DED> for i in range(len(board)): \n <IND>",
      "pred_parsed": "        print()\n        return False\n    for i in range(len(board)):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "print() \n <DED> return False \n \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    return False\n    \nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "print() \n return [] \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        return []\n    for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "print() \n return False \n <DED> for i in range(len(board)): \n <DED>",
      "pred_parsed": "        print()\n        return False\n    for i in range(len(board)):\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <IND> return False \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n        return False\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "print() \n <IND> return False \n \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            return False\n            \n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "print() \n \n <DED> bool = False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        \n    bool = False\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> return False \n <IND>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nreturn False\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "print() \n return \"\" \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        return \"\"\n    for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> return False \n \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nreturn False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "print() \n return False \n <DED> for i in range(len(board)): \n \n",
      "pred_parsed": "        print()\n        return False\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "print() \n bool = False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        bool = False\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "print() \n <DED> bool = False \n <IND> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    bool = False\n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <IND> return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n        return False\n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nreturn False\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> if not isinstance(len(board)): \n <IND> return False \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nif not isinstance(len(board)):\n    return False\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> if not isinstance(len(board)): \n <DED> return False \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nif not isinstance(len(board)):\nreturn False\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <IND> return False \n <IND>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n        return False\n            \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "print() \n \n <DED> for i in range(len(board)): \n <IND>",
      "pred_parsed": "        print()\n        \n    for i in range(len(board)):\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "print() \n \n <DED> return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        \n    return False\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> return False \n <DED> if not isinstance(len(board)): \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nreturn False\nif not isinstance(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <IND> return False \n \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\n        return False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> bool = False \n <DED> return False \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nbool = False\nreturn False\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "print() \n return False <IND> \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n            return False\n        for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "print() \n return False <DED> \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n    return False\nfor i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> return False \n <DED> return False \n <DED>",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nreturn False\nreturn False\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "print() \n <DED> for i in range(len(board)): \n <DED> if not isinstance(len(board)): \n",
      "pred_parsed": "        print()\n    for i in range(len(board)):\nif not isinstance(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "print() \n \n <DED> for i in range(len(board)): \n <DED>",
      "pred_parsed": "        print()\n        \n    for i in range(len(board)):\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "print() <IND> return False \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()  return False\n    for i in range(len(board)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "print() \n \n \n <DED> for i in range(len(board)): \n",
      "pred_parsed": "        print()\n        \n        \n    for i in range(len(board)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "oppia/oppia",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "source_code": "    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
    "target_code": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `bytes`.",
    "warning_line": 213,
    "pred_top-1": {
      "pred": "\n return str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return str(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n normalize( unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize( unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string) ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "\n return str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n \n",
      "pred_parsed": "    return str(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n normalize_string(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_string(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalize( \n 'ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n    return normalize(\n    'ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    return normalized_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n return normalize( unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return normalize( unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n return bytes(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return bytes(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "\n return normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n normalize_string(input_string) \n return normalize_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_string(input_string)\n    return normalize_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n normalize_string( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalize_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_string(\n    'NFKD', python_utils.UNICODE(input_string))\n    return normalize_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n normalize(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n normalize_strings = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_strings = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n return str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).decode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return str(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).decode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n normalize( <DED> input_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(  input_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', str(python_utils.UNICODE(input_string)) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', str(python_utils.UNICODE(input_string))\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "\n str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    str(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n normalize_string( <DED> 'NFKD', python_utils.UNICODE(input_string)) \n return normalize_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_string(  'NFKD', python_utils.UNICODE(input_string))\n    return normalize_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n normalize_strings = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalize_strings.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_strings = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n    return normalize_strings.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) <DED> decode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n'NFKD', python_utils.UNICODE(input_string))  decode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n normalize( <DED> 'NFKD', python_utils.UNICODE(input_string)) \n return normalize( \n 'ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(  'NFKD', python_utils.UNICODE(input_string))\n    return normalize(\n    'ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n normalize( input_string) \n return normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize( input_string)\n    return normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n return unicodedata.normalize( <DED> 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(  'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "\n normalize_strings = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n return normalize_strings.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_strings = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    return normalize_strings.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n return normalized( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return normalized(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n normalize( unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize( unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n return str(unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n",
      "pred_parsed": "    return str(unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n normalize_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalized_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n    \n    return normalized_string.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n normal_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normal_string = unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n decode('ascii', 'ignore') \n \n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    decode('ascii', 'ignore')\n    \n    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n decode('ascii', 'ignore') \n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    decode('ascii', 'ignore')\n    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n normalize_strings(input_string) \n return normalize_strings.encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_strings(input_string)\n    return normalize_strings.encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n decode('ascii', 'ignore') \n \n return normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    decode('ascii', 'ignore')\n    \n    return normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n normalize( unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalize( 'ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize( unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\n    return normalize( 'ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n return normalize( <DED> 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    return normalize(  'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n normalize( <DED> 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(  'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n return unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n <DED> return str('ascii', 'ignore') \n \n",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', python_utils.UNICODE(input_string))\nreturn str('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n normalize( <IND> 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize(  'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n decode('ascii', 'ignore') \n return normalize( \n 'NFKD', python_utils.UNICODE(input_string) \n ).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    decode('ascii', 'ignore')\n    return normalize(\n    'NFKD', python_utils.UNICODE(input_string)\n    ).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n normalize_string( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "pred_parsed": "    normalize_string(\n    'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "althonos/pronto",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/althonos-pronto",
    "commit": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "filename": "pronto/logic/lineage.py",
    "source_code": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "target_code": "\n    <IND>def __iter__(self) -> \"SuperpropertiesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
    "warning_line": 197,
    "pred_top-1": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n        return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        assert self.entity is not None\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <IND> def __iter__(self) -> 'SuperclassesIterator': \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> 'SuperclassesIterator':\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "\n <IND> def __iter__(self) -> super(): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> super():\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n        assert self.entity is not None\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n        return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n <IND> def __iter__(self) -> Superclasses: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Superclasses:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <IND> def __iter__(self) -> Super: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Super:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\nreturn SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\nreturn SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <IND> def __iter__(self) -> [\"SuperclassesIterator\"]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> [\"SuperclassesIterator\"]:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <IND> def __iter__(self) -> List[\"SuperclassesIterator\"]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> List[\"SuperclassesIterator\"]:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <IND> def __iter__(self) -> Optional[\"SuperclassesIterator\"]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Optional[\"SuperclassesIterator\"]:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <IND> def __iter__(self) -> SuperClassesIterator: \n <IND> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperClassesIterator:\n        return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <IND> def __iter__(self) -> super: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> super:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <IND> def __iter__(self) -> Super(): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Super():\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <IND> def __iter__(self) -> Superclasses(): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Superclasses():\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n \n def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    \n    def __iter__(self) -> SuperclassesIterator:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "\n <IND> def __iter__(self): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self):\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesManager: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesManager:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity), with_self=self.with_self \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity), with_self=self.with_self\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "\n \n def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    \n    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "\n <IND> def __iter__(self) -> Superclasses: \n <IND> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Superclasses:\n        return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    \n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert isinstance(self.entity, distance=self.distance, with_self=self.with_self) \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        assert isinstance(self.entity, distance=self.distance, with_self=self.with_self)\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n            return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\n    \n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity), \n with_self=self.with_self \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity),\n        with_self=self.with_self\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator: \n <DED> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator:\nreturn SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "\n <IND> def __iter__(self) -> SuperclassesIterator(): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> SuperclassesIterator():\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <IND> def __iter__(self) -> Super[\"classesIterator\"]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Super[\"classesIterator\"]:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert isinstance(self.entity, distance=self.distance, with_self=self.with_self) \n return SuperpropertiesIterator(self.entity, distance=self.distance) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        assert isinstance(self.entity, distance=self.distance, with_self=self.with_self)\n        return SuperpropertiesIterator(self.entity, distance=self.distance)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <IND> def __iter__(self) -> Super_classesIterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> Super_classesIterator:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n return SuperpropertiesIterator(self.entity, distance=self.distance) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n        return SuperpropertiesIterator(self.entity, distance=self.distance)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def __iter__(self) -> 'SuperclassesIterator': \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> 'SuperclassesIterator':\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n    return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <IND> def __iter__(self) -> None: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> None:\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> super().__iter__(self.entity), <DED> distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    super().__iter__(self.entity),  distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <IND> def __iter__(self) -> 'SuperclassesIterator': \n <IND> super().__iter__(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    def __iter__(self) -> 'SuperclassesIterator':\n        super().__iter__(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n \n def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "pred_parsed": "    \n    def __iter__(self) -> SuperclassesIterator:\n        return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "IBM/lale",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/IBM-lale",
    "commit": "b38267abe490e869338f212179b03521e89013ee",
    "filename": "lale/schema_simplifier.py",
    "source_code": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:",
    "target_code": ") -> JsonSchema:\n    <IND>if is_true_schema(schema) or is_false_schema(schema):\n        <IND>return schema\n    <DED>if \"anyOf\" in schema:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Dict[str, typing.Any]` but got `bool`.",
    "warning_line": 988,
    "pred_top-1": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return True \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return True\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return \"\" \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return \"\"\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": ") -> JsonSchema: \n <IND> return bool(schema) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return bool(schema)\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return False \n <IND> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return False\n            if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": ") -> JsonSchema: \n <IND> if schema: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return bool(str) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return bool(str)\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": ") -> JsonSchema: \n <IND> return str(schema) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return str(schema)\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None and schema is None:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": ") -> JsonSchema: \n <IND> return Dict[str, Any] \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return Dict[str, Any]\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return bool(Schema) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return bool(Schema)\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return False \n \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return False\n        \n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": ") -> JsonSchema: \n <IND> if schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None and schema is False: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None and schema is False:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": ") -> JsonSchema: \n <IND> if schema is NotEnabled: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is NotEnabled:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": ") -> JsonSchema: \n <IND> return Dict[str, Any](false) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return Dict[str, Any](false)\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return None\n            if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None and schema is None:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return bool(str) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return bool(str)\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return None\n        \n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return bool(str, Dict[str, Any]) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return bool(str, Dict[str, Any])\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return bool(str, Dict[str, Any]) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return bool(str, Dict[str, Any])\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return [] \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return []\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return [] \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return []\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return bool(false) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return bool(false)\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": ") -> JsonSchema: \n <IND> assert schema is None \n if schema is None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    assert schema is None\n    if schema is None:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": ") -> JsonSchema: \n <IND> if schema: \n <IND> return True \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema:\n        return True\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": ") -> JsonSchema: \n <DED> if schema is None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\nif schema is None:\nreturn False\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None and schema is False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None and schema is False:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": ") -> JsonSchema: \n <IND> if schema is not None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is not None:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": ") -> JsonSchema: \n <IND> if schema is bool: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is bool:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return \"\" \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return \"\"\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <DED> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\nreturn False\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": ") -> JsonSchema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return None\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": ") -> JsonSchema: \n <IND> if schema: \n <IND> return bool(schema) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema:\n        return bool(schema)\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": ") -> JsonSchema: \n <IND> if schema = bool: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema = bool:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": ") -> JsonSchema: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return False\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return True \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return True\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": ") -> JsonSchema: \n <IND> return [] \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return []\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\nreturn None\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": ") -> JsonSchema: \n <IND> return \"\" \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    return \"\"\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": ") -> JsonSchema: \n <IND> if schema = None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema = None:\n        return False\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": ") -> JsonSchema: \n <IND> if schema is NotEnabled: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is NotEnabled:\n        return None\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return True \n <IND> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is None:\n        return True\n            if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": ") -> JsonSchema: \n <IND> if schema is NotEnabled: \n <IND> return True \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is NotEnabled:\n        return True\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": ") -> JsonSchema: \n <IND> if schema: \n <IND> return \"\" \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema:\n        return \"\"\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return bool(Schema) \n <DED> if \"anyOf\" in schema: \n",
      "pred_parsed": ") -> JsonSchema:\n    if schema is False:\n        return bool(Schema)\n    if \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "chanzuckerberg/miniwdl",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type",
    "target_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                <IND>vty = v.type\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "warning_line": 445,
    "pred_top-1": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()):\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == None: \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == None:\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == None or vty == T.Array(T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == None or vty == None: \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == None or vty == None:\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == None: \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == None:\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map(Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n                    if vty is None or vty == T.Array(T.Any()):\n                        vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Equal(0)): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Equal(0)):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map([]): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map([]):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(Equal(0)): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map(Equal(0)):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty is None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty is None or vty == T.Array(T.Any()):\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map(T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Either): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Either):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n                \n                if vty is None or vty == T.Array(T.Any()):\n                    vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map([]): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map([]):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) \n vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any())\n            vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(Error): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map(Error):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array(T.Any()) or vty == T.Map(Either): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array(T.Any()) or vty == T.Map(Either):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Error): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Error):\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array((T.Any())) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array((T.Any())) or vty == T.Map(None):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()):\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array((T.Any())): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array((T.Any())):\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == \"Tuple[T.Any()]\": \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == \"Tuple[T.Any()]\":\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Equal): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Equal):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) \n if vty is None or vty == T.Map(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any())\n            if vty is None or vty == T.Map():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) \n if vty is None or vty == None: \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any())\n            if vty is None or vty == None:\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()): \n <DED> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()):\n        vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any())\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty is None: \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty is None:\n                vty = v.type\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) \n if vty is None or vty == T.Map(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any())\n            if vty is None or vty == T.Map(T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array() or vty == T.Map(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array() or vty == T.Map():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array([T.Any()]): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array([T.Any()]):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == T.Array() or vty == T.Map(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == T.Array() or vty == T.Map():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Any): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(Any):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> k.typecheck(kty) \n <IND> if vty == None or vty == T.Array(T.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n                    if vty == None or vty == T.Array(T.Any()):\n                        vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == None or vty == T.Array(Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == None or vty == T.Array(Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) \n if vty is None or vty == T.Map([]): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any())\n            if vty is None or vty == T.Map([]):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) or vty == T.Map(Equal(0)): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any()) or vty == T.Map(Equal(0)):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> k.typecheck(kty) \n <DED> vty = None or vty == T.Array(T.Any()) \n if vty is None or vty == T.Map(Equal(0)): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            vty = None or vty == T.Array(T.Any())\n            if vty is None or vty == T.Map(Equal(0)):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(t.Any()): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(t.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> k.typecheck(kty) \n <DED> if vty == None or vty == T.Array(): \n <IND> vty = v.type \n",
      "pred_parsed": "                k.typecheck(kty)\n            if vty == None or vty == T.Array():\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "libp2p/py-libp2p",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p",
    "commit": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "filename": "libp2p/pubsub/gossipsub.py",
    "source_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )",
    "target_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
    "warning_line": 433,
    "pred_top-1": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], None \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], None\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[]\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n str(self.degree, self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                str(self.degree, self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID]\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - str(self.degree), self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - str(self.degree), self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n str(self.degree), self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                str(self.degree), self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List([]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List([])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> selected_peers = List(GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] \n ) \n",
      "pred_parsed": "                selected_peers = List(GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[]\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n str(self.degree, self.mesh[topic], List[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                str(self.degree, self.mesh[topic], List[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], list([]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], list([])\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<IND> selected_peers = List(GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = List(GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set([]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set([])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - str, self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - str, self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - list(self.degree), self.mesh[topic], List[] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - list(self.degree), self.mesh[topic], List[]\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], list[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], list[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set() \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set()\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], 0 \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], 0\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List(self.mesh[topic], List[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List(self.mesh[topic], List[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n Sequence(self.degree, self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                Sequence(self.degree, self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n str(self.degree num_mesh_peers_in_topic - self.degree), self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                str(self.degree num_mesh_peers_in_topic - self.degree), self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic]\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n self.degree num_mesh_peers_in_topic = self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                self.degree num_mesh_peers_in_topic = self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - list(self.degree), self.mesh[topic], List([]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - list(self.degree), self.mesh[topic], List([])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - list(self.degree), self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - list(self.degree), self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], None \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], None\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n self.degree num_mesh_peers_in_topic - self.mesh[topic], None \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                self.degree num_mesh_peers_in_topic - self.mesh[topic], None\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set(ID) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set(ID)\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], () \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], ()\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List(self.mesh[topic], List[ID]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List(self.mesh[topic], List[ID])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n self.degree.num_mesh_peers_in_topic - self.mesh[topic], List[] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                self.degree.num_mesh_peers_in_topic - self.mesh[topic], List[]\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n self.degree num_mesh_peers_in_topic - self.mesh[topic], List[] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                self.degree num_mesh_peers_in_topic - self.mesh[topic], List[]\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID], None \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID], None\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], set(self.mesh[topic]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], set(self.mesh[topic])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID], List[str, str], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[ID], List[str, str], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], list[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], list[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]), [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]), []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[0], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set[0], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> selected_peers = List(GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] ], [] \n ) \n",
      "pred_parsed": "                selected_peers = List(GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] ], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n str(self.degree, self.mesh[topic], None) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                str(self.degree, self.mesh[topic], None)\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set(ID(self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], Set(ID(self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] ], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] ], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n String(self.degree, self.mesh[topic], []) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                String(self.degree, self.mesh[topic], [])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> selected_peers = List(GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] ], \n ) \n",
      "pred_parsed": "                selected_peers = List(GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - self.degree, self.mesh[topic], List[] ],\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[]) \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], List[])\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - topic, self.mesh[topic], [] \n ) \n",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                num_mesh_peers_in_topic - topic, self.mesh[topic], []\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "facebookresearch/Mephisto",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto",
    "commit": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 128,
    "pred_top-1": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.Dict[str, Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.Dict[str, Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { } ), shared=annotation[\"inputs\"] \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { } ), shared=annotation[\"inputs\"]\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[str, Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[str, Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { } ), shared=typing.List[typing.Dict[str, Any]]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { } ), shared=typing.List[typing.Dict[str, Any]])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { } ) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { } )\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, any]]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, any]])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[\u201cinputs\u201d]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[\u201cinputs\u201d])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str,...]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str,...])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], \n []) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],\n    [])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, [share=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, [share=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]], \n shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]],\n    shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]], <IND> shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n        InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]],  shared=annotation[\"inputs\"])\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[[\"inputs\"], typing.Dict[str, Any]]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[[\"inputs\"], typing.Dict[str, Any]])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, list=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, list=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <IND> shared=typing.List[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n        InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  shared=typing.List[\"inputs\"])\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]], <DED> shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\nInitializationData(unit_data= { }, list=typing.List[typing.Dict[str, Any]],  shared=annotation[\"inputs\"])\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=settings.annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=settings.annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <IND> ) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n        InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  )\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data = { }, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data = { }, shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[\"inputs\"], typing.Dict[str, Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[\"inputs\"], typing.Dict[str, Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <IND> shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n        InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  shared=annotation[\"inputs\"])\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[[\"inputs\"]]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[[\"inputs\"]])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[annotation[\"inputs\"], Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[annotation[\"inputs\"], Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], \n [\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],\n    [\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\u201dinputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=annotation[\u201dinputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, list_id=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, list_id=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <DED> ) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\nInitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  )\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[Annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[Annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data, shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data, shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <IND> Shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n        InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  Shared=annotation[\"inputs\"])\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[str, Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=annotation[str, Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { } ), shared=typing.Dict[str, Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { } ), shared=typing.Dict[str, Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[type, str]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[type, str])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <DED> shared=typing.List[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\nInitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  shared=typing.List[\"inputs\"])\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List(typing.Dict[str, Any])) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List(typing.Dict[str, Any]))\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=Dict[str, Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=Dict[str, Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]]), \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]]),\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, str=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, str=annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Str, typing.Any]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typing.List[typing.Str, typing.Any])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <DED> shared=annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\nInitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  shared=annotation[\"inputs\"])\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]], <IND> ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n        InitializationData(unit_data= { }, shared=typing.List[typing.Dict[str, Any]],  )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=typeof dict[annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=typeof dict[annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=str(annotation[\"inputs\"]) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=str(annotation[\"inputs\"])\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "assignment.write_assignment_data( \n InitializationData(unit_data= { }, shared=annotation[\"inputs\"], None) \n ) \n",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data= { }, shared=annotation[\"inputs\"], None)\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "filename": "volatility/framework/automagic/windows.py",
    "source_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "target_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        <IND>raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    <DED>hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
    "warning_line": 267,
    "pred_top-1": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context), PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context), PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(progress_callback)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(progress_callback))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(physical_layer, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, bool, bytes, int, str]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, bool, bytes, int, str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hit_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hit_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert isinstance(physical_layer, str) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    assert isinstance(physical_layer, str)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, List[PageMapScanner(useful), progress_callback]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, List[PageMapScanner(useful), progress_callback])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1], str[2]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1], str[2])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(...)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(...))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str.scan(progress_callback)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str.scan(progress_callback))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(f)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(f))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if not isinstance(physical_layer, str): \n <IND> hit_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        hit_path = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(foreignKey, str)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(foreignKey, str))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str] \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n if isinstance(physical_layer, str): \n <IND> hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if isinstance(physical_layer, str):\n                        hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, pagemapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, pagemapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n assert physical_layer is not None \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    assert physical_layer is not None\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, List[PageMapScanner(useful), str]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, List[PageMapScanner(useful), str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits_ = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits_ = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(false), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(false), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hit_layer = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hit_layer = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(false)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(false))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(...args)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(...args))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, StructureList.PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, StructureList.PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1], str[2], str]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1], str[2], str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str.scan()) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str.scan())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str, str) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str.str()) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str.str())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(foreignKey)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(foreignKey))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[1], str[2]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[1], str[2])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, [PageMapScanner(useful), progress_callback]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, [PageMapScanner(useful), progress_callback])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str()) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(sub_config_path), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(sub_config_path), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str] \n ) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str]\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1], str[2], str[3]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], str[1], str[2], str[3])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(str)) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(str))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context], PageMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context], PageMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0], progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str(progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, StepMapScanner(useful), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, StepMapScanner(useful), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0]) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), str[0])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful)), progress_callback) \n",
      "pred_parsed": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful)), progress_callback)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "wemake-services/wemake-python-styleguide",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wemake-services-wemake-python-styleguide",
    "commit": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "filename": "wemake_python_styleguide/helpers/variables.py",
    "source_code": "    return bool(name) and name != '_' and len(name) < min_length",
    "target_code": "\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
    "warning_line": 38,
    "pred_top-1": {
      "pred": "\n return bool(name) and name!= '_' and str(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and str(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n return bool(name) and name!= str('_') and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= str('_') and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n return bool(name) and name!= '_' and len(name)  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n return bool(name) and name!= '_' and str(name)  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= '_' and str(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n return bool(name) and name!= '_' and args[name]  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and args[name]  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n return bool(name) and name!= '_' and bool(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and bool(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n return bool(name) and name!= '_' and assert isinstance(name, str)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and assert isinstance(name, str)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n return bool(name) and name!= '_' and assert isinstance(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and assert isinstance(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n return bool(name) and name!= str('_') and len(name)  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= str('_') and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n return str(bool(name)) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    return str(bool(name)) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n return bool(name) and name!= '_' and!typeof len(name)!= 'undefined' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typeof len(name)!= 'undefined' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n return bool(name) and name!= '_' and!typeof len(name)!= 'boolean')  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typeof len(name)!= 'boolean')  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n return bool(name) and name!= '_' and!typing.Sized(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typing.Sized(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n assert name is not None \n return bool(name) and name!= '_' and len(name)  min_length \n",
      "pred_parsed": "    assert name is not None\n    return bool(name) and name!= '_' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n return bool(name) and name!= '_' and!int(len(name))  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!int(len(name))  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n return bool(name) and name!= '_' and len(name)  min_length \n <IND>",
      "pred_parsed": "    return bool(name) and name!= '_' and len(name)  min_length\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n return bool(name) and name!= '_' and assert isinstance(name) and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and assert isinstance(name) and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n return bool(name) and name!= '_' and args.len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and args.len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n return str(bool(name)) and name!= '_' and str(name)  min_length \n",
      "pred_parsed": "    return str(bool(name)) and name!= '_' and str(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n return bool(name) and name!= '_' and if name is not None and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and if name is not None and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n return bool(name) and name!= '_' and bool(name)  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= '_' and bool(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n return bool(name) and name!= '_' and tuple(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and tuple(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n return bool(name) and name!= '_' and isinstance(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and isinstance(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n return bool(name) and name!= '_' and str(name)  min_length \n <IND>",
      "pred_parsed": "    return bool(name) and name!= '_' and str(name)  min_length\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n return bool(name) and name!= '_' and len()  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and len()  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n return bool(name) and name!= '_' and!typeof len(name)!= 'number')  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typeof len(name)!= 'number')  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n return bool(name) and name!= '_' and assert isinstance(name, str) and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and assert isinstance(name, str) and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n return bool(name) and name!= \"_\" and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= \"_\" and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n return bool(name) and name!= '_' and scalar(len(name))  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and scalar(len(name))  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n return bool(name) and name!= '_' and typing.Sized(len(name))  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and typing.Sized(len(name))  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n return bool(name) and name!= '_' and bool(len(name))  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and bool(len(name))  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n return bool(name) and name!= Optional['_'] and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= Optional['_'] and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n return bool(name) and name!= '_' and tuple(len(name))  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and tuple(len(name))  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n return bool(name) and name!= '_' and!typing.Sized(name)  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typing.Sized(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n return bool(name) and name!= '_' and!typeof len(name)!= 'undefined'  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typeof len(name)!= 'undefined'  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n return bool(name) and name!= '_' and args(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and args(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n return bool(name) and name!= '_' and proto(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and proto(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n return bool(name) and name!= String('_') and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= String('_') and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n return bool(name) and name!= '_' and scalar(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and scalar(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n return bool(name) and name!= '_' and '' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and '' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n return bool(name) and name!= str('_') and len(name)  min_length \n <IND>",
      "pred_parsed": "    return bool(name) and name!= str('_') and len(name)  min_length\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n return bool(name) and name!= ('_') and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= ('_') and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n return bool(name) and name!= '_' and!typeof len(name)!= 'number' and len(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typeof len(name)!= 'number' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n return bool(name) and name!= '_' and args[name]  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= '_' and args[name]  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n return bool(name) and name!= '_' and np.ndarray(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and np.ndarray(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n return bool(name) and name!= '_' and _none(name)  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and _none(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n return bool(name) and name!= '_' and (len(name))  min_length \n",
      "pred_parsed": "    return bool(name) and name!= '_' and (len(name))  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n return str(bool(name) and name!= '_' and len(name)  min_length) \n",
      "pred_parsed": "    return str(bool(name) and name!= '_' and len(name)  min_length)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n return bool(name) and name!= '_' and!typeof len(name)!= 'undefined' and len(name)  min_length \n \n",
      "pred_parsed": "    return bool(name) and name!= '_' and!typeof len(name)!= 'undefined' and len(name)  min_length\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "rotki/rotki",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki",
    "commit": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "filename": "rotkehlchen/blockchain.py",
    "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}",
    "target_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "warning_line": 131,
    "pred_top-1": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = blocks.query_ethereum_tokens() \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = blocks.query_ethereum_tokens()\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, tokens.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, tokens.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = blockchain.query_ethereum_tokens() \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = blockchain.query_ethereum_tokens()\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances[S_ETH, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances[S_ETH, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = blockchain.query_ethereum_tokens(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = blockchain.query_ethereum_tokens(tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, tokens.balances) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, tokens.balances)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH])) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]))\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = blocks.query_ethereum_tokens(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = blocks.query_ethereum_tokens(tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals \\ \n self.query_ethereum_tokens[token",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals \\\n        self.query_ethereum_tokens[token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = blocks[str] \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = blocks[str]\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals \\ \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals \\\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals } \n self.query_ethereum_tokens[token",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals }\n        self.query_ethereum_tokens[token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(str, tokens.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(str, tokens.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]])\n        return { 'per_account': self.balances, 'totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]])\n        return { 'per_account': self.balances, 'totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens() \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens()\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals \\ \n self.query_ethereum_tokens[tokens]",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals \\\n        self.query_ethereum_tokens[tokens]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals } \n self.query_ethereum_tokens[tokens]",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals }\n        self.query_ethereum_tokens[tokens]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(Blockchain.query_ethereum_tokens(tokens, self.balances[S_ETH])) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(Blockchain.query_ethereum_tokens(tokens, self.balances[S_ETH]))\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(binary_tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(binary_tokens, self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals \\ \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]])\n        return { 'per_account': self.balances, 'totals \\\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, Blockchain.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, Blockchain.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances[S_ETH, 'totals \\ \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances[S_ETH, 'totals \\\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n assert self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        assert self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens: \n <IND> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens:\n            return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens([tokens, tokens.balances]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens([tokens, tokens.balances])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(list(tokens), self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(list(tokens), self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = blockchain.query_ethereum_tokens[tokens] \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = blockchain.query_ethereum_tokens[tokens]\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(blocked_chain_tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(blocked_chain_tokens, self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals } \n self.query_ethereum_tokens[token",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]])\n        return { 'per_account': self.balances, 'totals }\n        self.query_ethereum_tokens[token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(): \n <IND> return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens():\n            return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals \\ \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals \\\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(): \n \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens():\n        \n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens: \n \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens:\n        \n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens = Blockchain.query_ethereum_tokens() \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens = Blockchain.query_ethereum_tokens()\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals \\ \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]])\n        return { 'per_account': self.balances, 'totals \\\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(str, tokens) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(str, tokens)\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]) \n return { 'per_account': self.balances, 'totals \\ \n self.query_ethereum_tokens[token",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, tokens) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]])\n        return { 'per_account': self.balances, 'totals \\\n        self.query_ethereum_tokens[token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens.call(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens.call(tokens, self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances[S_ETH, 'totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances[S_ETH, 'totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(basic_tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(basic_tokens, self.balances[S_ETH])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress], typing.NonEthTokenBlockchainAsset], FVal]) \n return { 'per_account': self.balances, 'totals': self.totals } \n",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens((tokens, self.balances[S_ETH]) => Dict[Union[str, typing.EthAddress], typing.NonEthTokenBlockchainAsset], FVal])\n        return { 'per_account': self.balances, 'totals': self.totals }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow",
    "commit": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "filename": "airflow/cli/simple_table.py",
    "source_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)",
    "target_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
    "warning_line": 73,
    "pred_top-1": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> rows = [d.values() for d in data] \n var output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        var output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=str(data[0].keys())) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=str(data[0].keys()))\n        print(output)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys.keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys.keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=typing.KeysView[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=typing.KeysView[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys.str(data[0].keys())) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys.str(data[0].keys()))\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> rows = [d.values() for d in data] \n return tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> rows = [d.values() for d in data] \n assert rows are not None \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        assert rows are not None\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> rows = [d.values() for d in data] \n _output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(_output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        _output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(_output)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<DED> rows = [d.values() for d in data] \n _output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        _output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> rows = [d.values() for d in data] \n return tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> rows = [d.values() for d in data] \n input = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        input = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys_data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys_data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate((rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate((rows, tablefmt=\"plain\", headers=data[0].keys()))\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(_rows, tablefmt=\"plain\", headers=_data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(_rows, tablefmt=\"plain\", headers=_data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> rows = [d.values() for d in data] \n return output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=str(data[0].keys())]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=str(data[0].keys())])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keysList[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keysList[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys.keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys.keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> rows = [d.values() for d in data] \n result = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        result = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys(data[0].keys())) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys(data[0].keys()))\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys_data[0].keys()]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys_data[0].keys()])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys.data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys.data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(str(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(str(rows, tablefmt=\"plain\", headers=data[0].keys()))\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> rows = [d.values() for d in data] \n return tabulate(rows, tablefmt=\"plain\", headers=keys) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return tabulate(rows, tablefmt=\"plain\", headers=keys)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> rows = [d.values() for d in data] \n assert rows are not None \n output = tabulate(rows, tablefmt=\"plain\", headers=keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        assert rows are not None\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "<DED> rows = [d.values() for d in data] \n input = tabulate(rows, tablefmt=\"plain\", headers=keys) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        input = tabulate(rows, tablefmt=\"plain\", headers=keys)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> rows = [d.values() for d in data] \n return output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows)\n        print(output)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "<DED> rows = [d.values() for d in data] \n expected_output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        expected_output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys[0]]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys[0]])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> rows = [d.values() for d in data] \n input = tabulate(rows, tablefmt=\"plain\", headers=keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        input = tabulate(rows, tablefmt=\"plain\", headers=keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> rows = [d.values() for d in data] \n return tabulate(rows, tablefmt=\"plain\", headers=keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return tabulate(rows, tablefmt=\"plain\", headers=keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> rows = [d.values() for d in data] \n return output = tabulate(rows, tablefmt=\"plain\", headers=keys) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return output = tabulate(rows, tablefmt=\"plain\", headers=keys)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()]) \n print(output] \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=keys[data[0].keys()])\n        print(output]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> rows = [d.values() for d in data] \n output = tabulate([rows, tablefmt=\"plain\", headers=keys[data[0].keys]]) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate([rows, tablefmt=\"plain\", headers=keys[data[0].keys]])\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> rows = [d.values() for d in data] \n return output = tabulate(rows, tablefmt=\"plain\", headers=keys()) \n print(output) \n",
      "pred_parsed": "        rows = [d.values() for d in data]\n        return output = tabulate(rows, tablefmt=\"plain\", headers=keys())\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "althonos/pronto",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/althonos-pronto",
    "commit": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "filename": "pronto/term.py",
    "source_code": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)",
    "target_code": "                <IND>r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(typing.cast(str, item)))\n        <DED><DED>return frozenset(intersection_of)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
    "warning_line": 441,
    "pred_top-1": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                \n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                \n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> \n return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n            \n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n        intersection_of.append(ont.get_term(item))\nreturn frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r)), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r)), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n \n intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n            \n            intersection_of.append(ont.get_term(item))\n    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError(IntersectionError): \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError(IntersectionError):\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(str(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(str(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> r, t = item \n intersection_of.append(on.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(on.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> r, t = item \n intersection_of.append(str(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(str(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(str(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(str(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> r, t = item \n intersection_of.append(t.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(t.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) <IND> <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))   except TypeError:\n                    intersection_of.append(ont.get_term(item))\n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) <DED> <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n        intersection_of.append(ont.get_relationship(r), ont.get_term(t))   except TypeError:\n            intersection_of.append(ont.get_term(item))\n    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> r, t = item <IND> intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item  intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> r, t = item \n intersection_of.append((ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) <DED> <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n    intersection_of.append(ont.get_term(item))    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) <IND> <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n            intersection_of.append(ont.get_term(item))    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> r, t = item <DED> intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item  intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                except TypeError:  intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: <DED> <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:   intersection_of.append(ont.get_term(item))\n    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                        \n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except typeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except typeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) <IND>",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                \n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset() \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset()\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError(intersection_of.append(ont.get_term(item))) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError(intersection_of.append(ont.get_term(item)))\n    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                \n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(t.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(t.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                \n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> \n return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                    \n                    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r, ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r, ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(on.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(on.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> <IND> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                \n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> \n return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                    except TypeError:\n                        intersection_of.append(ont.get_term(item))\n                    \n                    return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                \n                \n                except TypeError:\n                    intersection_of.append(ont.get_term(item))\n            return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> r, t = item \n intersection_of.append(ot.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "pred_parsed": "                r, t = item\n                intersection_of.append(ot.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "lykoss/lykos",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/lykoss-lykos",
    "commit": "3b3870c9f365944134225c5b7364430c5bce0158",
    "filename": "src/roles/madscientist.py",
    "source_code": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "target_code": "\n    <DED>target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
    "warning_line": 53,
    "pred_top-1": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> set(target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    set(target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> target1 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> _target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> set(target1, target2) = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    set(target1, target2) = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> _get_targets = [var, get_players(var), player] \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = [var, get_players(var), player]\n    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "\n <IND> set(target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    set(target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, list(get_players(var), player)) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, list(get_players(var), player))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> _target1, _get_targets = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _target1, _get_targets = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, _get_players(var), _player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, _get_players(var), _player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> assert isinstance(player, player) \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    assert isinstance(player, player)\n    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> assert isinstance(player, target1) \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    assert isinstance(player, target1)\n    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> _get_players = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_players = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> str(target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    str(target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> user = _get_targets(var, get_players(var), player) \n <DED> target = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    user = _get_targets(var, get_players(var), player)\ntarget = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    \n    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "\n <DED> _target1, _target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _target1, _target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, set_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, set_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> _get_targets = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\n_get_targets = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, fetch_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, fetch_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\ntarget1 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> list(target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    list(target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> _get_players = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, _get_players(var), player) \n \n",
      "pred_parsed": "    _get_players = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, _get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <IND> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\ntarget = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> _get_players = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, _get_players(var), _player) \n \n",
      "pred_parsed": "    _get_players = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, _get_players(var), _player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, _get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, _get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> target1, target2 = set(_get_targets(var, get_players(var), player)) \n \n",
      "pred_parsed": "    target1, target2 = set(_get_targets(var, get_players(var), player))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "\n <DED> _target1, _get_targets=_get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _target1, _get_targets=_get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, _get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, _get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> target1, target2 = _get_targets(var, _get_players(var), _player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\ntarget1, target2 = _get_targets(var, _get_players(var), _player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> global_target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    global_target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\n        target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> _get_players = _get_targets(var, get_players(var), player) \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_players = _get_targets(var, get_players(var), player)\n        target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> _get_targets = _get_targets(var, get_players(var), player) \n <DED> _get_players = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = _get_targets(var, get_players(var), player)\n_get_players = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> callback(target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    callback(target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> _get_players = _get_targets(var, get_players(var), player) \n <DED> target1 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_players = _get_targets(var, get_players(var), player)\ntarget1 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> _get_players = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_players = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> _target1, target2 = _get_targets(var, _get_players(var), _player) \n \n",
      "pred_parsed": "    _target1, target2 = _get_targets(var, _get_players(var), _player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> target2, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target2, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> setting(target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    setting(target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> set(target1, target2 = _get_targets(var, get_players(var), player) \n <DED>",
      "pred_parsed": "    set(target1, target2 = _get_targets(var, get_players(var), player)\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> _get_targets = set(var, get_players(var), player) \n \n",
      "pred_parsed": "    _get_targets = set(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> target1, target2 = _get_targets(var, list(get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, list(get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> user = _get_targets(var, get_players(var), player) \n <DED> target = _get_targets(var, get_players(var), user) \n \n",
      "pred_parsed": "    user = _get_targets(var, get_players(var), player)\ntarget = _get_targets(var, get_players(var), user)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> return _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    return _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "<DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "pred_parsed": "    target1, target2 = _get_targets(var, get_players(var), player)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "StellarCN/py-stellar-base",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)",
    "target_code": "                <IND>continue\n            <DED>assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "warning_line": 410,
    "pred_top-1": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue\n                    self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> continue \n <DED> assert account_resp is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue\n            assert account_resp is not None\n            self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRe",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRe\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <IND>",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n                if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <DED>",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n        if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_re",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_re\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponses",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponses\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp(index), destination) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp(index), destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_res",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_res\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <IND>",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n                if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponses) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponses)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <DED> Respon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n        if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon  Respon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResp",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResp\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsesRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsesRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon <IND>",
      "pred_parsed": "                continue\n                self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_re",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_re\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <IND> e",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n                if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon  e\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsesResponseResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsesResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon <DED>",
      "pred_parsed": "                continue\n        self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_respon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination, Dict) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination, Dict)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponse",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponse\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_res",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination.response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_response_res\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessourceResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessourceResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <DED> Respon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n        if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon  Respon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessourceRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessourceRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <DED> ResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n        if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon  ResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsesResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsesResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessource",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessource\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <DED> ResponseRe",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n        if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon  ResponseRe\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon <IND>",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n                if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes <IND>",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n                if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRe",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRe\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponses) \n",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponses)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessourceResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRessourceResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes <DED>",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n        if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsePresentationResponseResponseResponseResponseResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsePresentationResponseResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsePresentationResponseResponseResponseResponseRespon",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponsePresentationResponseResponseResponseResponseRespon\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes",
      "pred_parsed": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n            if account_resp.index == DestinationResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseResponseRes\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
    "warning_line": 1357,
    "pred_top-1": {
      "pred": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if type(condition) == bool \n else is_true(Expression(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expression(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if type(condition) == bool \n else is_true(Simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if type(condition) == bool \n else is_true(expression(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(expression(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if type(condition) == bool \n else is_true(expression.Simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(expression.Simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if type(condition) == bool \n else is_true((simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true((simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "if type(condition) == bool \n else is_true(Expression.Simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expression.Simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "if type(condition) == bool \n else is_true(int(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(int(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "if type(condition) == bool \n else is_true(MYTHRIL.laser.smt.expression.Expression(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(MYTHRIL.laser.smt.expression.Expression(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if type(condition) == bool \n if condition is not None else is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    if condition is not None else is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if type(condition) == bool \n else is_true(Expression[simplify(condition)]) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expression[simplify(condition)])\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if type(condition) == bool \n else is_true(Expression[simplify(condition])) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expression[simplify(condition]))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "if type(condition) == bool \n else is_true(MYTHRIL.laser.smt.expression.Expression(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(MYTHRIL.laser.smt.expression.Expression(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if type(condition) == bool \n else is_true(Callable(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Callable(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if type(condition) == bool \n else is_true(insert(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(insert(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "if type(condition) == bool \n else is_true(Expression.simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expression.simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if type(condition) == bool \n else is_true(require(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(require(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if type(condition) == bool \n else is_true(Int(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Int(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "if type(condition) == bool \n else is_true(Equal(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Equal(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if type(condition) == bool \n else is_true(Optional[simplify(condition])) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Optional[simplify(condition]))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(mythril.laser.smt.expression.Expression(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if type(condition) == bool \n else assert is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else assert is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if type(condition) == bool \n else is_true(expression[simplify(condition)]) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(expression[simplify(condition)])\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if type(condition) == bool \n else is_true(False or bool(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False or bool(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if type(condition) == bool \n else is_true(mythril.laser.smt.expression.Expression(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(mythril.laser.smt.expression.Expression(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "if type(condition) == bool \n else is_true(Expected(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expected(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if type(condition) == bool \n else is_true(Eval(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Eval(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if type(condition) == bool \n else is_true(Base(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Base(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if type(condition) == bool \n else is_true(False, simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False, simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if type(condition) == bool \n else bool(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else bool(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "if type(condition) == bool \n else is_true(Expression(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(Expression(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if type(condition) == bool \n else is_true(MYTHRIL.laser.smt.expression.Expression) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(MYTHRIL.laser.smt.expression.Expression)\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if type(condition) == bool \n else is_true(expressed(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(expressed(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if type(condition) == bool \n is_true(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    is_true(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if type(condition) == bool \n else is_true(basic(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(basic(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if type(condition) == bool \n else is_true(MYTHRIL.laser.smt.expression.Simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(MYTHRIL.laser.smt.expression.Simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if type(condition) == bool \n else is_true(False or bool(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False or bool(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if type(condition) == bool \n else is_true([simplify(condition)]) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true([simplify(condition)])\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if type(condition) == bool \n else is_true(mythril.laser.smt.Expression.Simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(mythril.laser.smt.Expression.Simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if type(condition) == bool \n else is_true(async(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(async(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if type(condition) == bool \n else is_true(_simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(_simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "if type(condition) == bool \n else is_true(False if condition is not bool) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False if condition is not bool)\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if type(condition) == bool \n else is_true(False(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if type(condition) == bool \n else is_true(False) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False)\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if type(condition) == bool \n else is_true(False(simplify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(False(simplify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if type(condition) == bool \n else is_true(MYTHRIL.laser.smt.Expression(simplify(condition))) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(MYTHRIL.laser.smt.Expression(simplify(condition)))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if type(condition) == bool \n else is_true(insert(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(insert(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if type(condition) == bool \n else is_true(implify(condition)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(implify(condition))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if type(condition) == bool \n else is_true(MYTHRIL.laser.smt.expression.Expression)) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(MYTHRIL.laser.smt.expression.Expression))\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if type(condition) == bool \n else is_true(simplify()) \n ) \n",
      "pred_parsed": "                    if type(condition) == bool\n                    else is_true(simplify())\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "common-workflow-language/cwltool",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool",
    "commit": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "filename": "cwltool/singularity.py",
    "source_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
    "target_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
    "warning_line": 182,
    "pred_top-1": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                            cmd [\"singularity\", \"build\", name,\n                            \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n \n cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        \n                        cmd [\"singularity\", \"build\", name,\n                        \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, <DED> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd [\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                            cmd[\"singularity\", \"build\", name,\n                            \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, <IND> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd [\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<IND> name = \" ^ }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" ^ }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "\n name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd = [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "<IND> name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, <DED> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd[\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n \n cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        \n                        cmd[\"singularity\", \"build\", name,\n                        \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd = \"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd = \"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// ^ } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// ^ } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\"], name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\"], name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, <IND> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd[\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, <DED> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd [\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [singularity, build, name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [singularity, build, name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> name = \" ^ }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" ^ }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n ) \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n                    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [singularity, \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [singularity, \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) <IND> <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])   cmd [\"singularity\", \"build\", name,\n                        \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\u201dsingularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\u201dsingularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n \n cmd [\"singularity\", \"build\", name, <DED> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        \n                    cmd [\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name, \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                            cmd [\"singularity\", \"build\", name,\n                            \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"utility\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"utility\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, <IND> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                                cmd [\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirements[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirements[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { \\.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) <DED> <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])   cmd [\"singularity\", \"build\", name,\n                        \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { \\ \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { \\ \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\",singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\",singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd, \"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd, \"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n ] = [\"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    ] = [\"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[[\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd[[\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd (\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd (\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n \n cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        \n                        cmd [\"singularity\", \"build\", name,\n                        \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", names, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", names,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd = [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                            cmd = [\"singularity\", \"build\", name,\n                            \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n \n cmd [\"singularity\", \"build\", name, <IND> \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        \n                            cmd [\"singularity\", \"build\", name,  \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                            cmd [\"singularity\", \"build\", name,\n                            \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])] \n <IND>",
      "pred_parsed": "                        name = \" { }.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                    \"docker-archive:// { } \".format(dockerRequirement[\"dockerLoad\"])]\n                        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "psychopy/psychopy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/psychopy-psychopy",
    "commit": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_code": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\\n')\n    elif not order+'\\n' in target:",
    "target_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
    "warning_line": 82,
    "pred_top-1": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' \\ n')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' \\ n')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('Utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('Utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <IND> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n            elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8'))+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8'))+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n        \n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' ^ n')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' ^ n')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "if '--out' in sys.argv: \n <DED> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\noutfile.write(str(order.encode('utf8')+' \\ n'))\nelif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(int(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(int(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(sys.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(sys.encode('utf8')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(' \\ n' + str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(' \\ n' + str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8') +'\\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8') +'\\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n') \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(sys.encode(' \\ n')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(sys.encode(' \\ n')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(' \\ n', str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(' \\ n', str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if '--out' in sys.argv: \n <IND> if not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        if not order+' \\ n' in target:\n            outfile.write(str(order.encode('utf8')+' \\ n'))\n        elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')).decode(' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n')).decode(' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order+' \\ n') \n <IND> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order+' \\ n')\n            elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write((order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write((order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(outfile.encode('utf8')+' \\ n') \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(outfile.encode('utf8')+' \\ n')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' { n')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' { n')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(' \\ n'+str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(' \\ n'+str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <DED> outfile.write(str(order.encode('utf8')+' \\ n')) \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\noutfile.write(str(order.encode('utf8')+' \\ n'))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' \\ n')+' \\ n')) \n <IND> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' \\ n')+' \\ n'))\n            elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(bitmap(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(bitmap(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order+' \\ n'.decode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order+' \\ n'.decode('utf8')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(' \\ n'+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(' \\ n'+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(' \\ n' + str(order.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(' \\ n' + str(order.encode('utf8')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if '--out' in sys.argv: \n \n outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n    \n    outfile.write(str(order.encode('utf8')+' \\ n'))\nelif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' } n')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' } n')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode(' \\ n')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(order.encode(' \\ n')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n') \n \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(' \\ n'+str(order.encode('utf8')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(' \\ n'+str(order.encode('utf8')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(list(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(list(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('Utf8')+' \\ n')) \n <IND> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('Utf8')+' \\ n'))\n            elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode(' \\ n')+' \\ n') \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode(' \\ n')+' \\ n')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' \\ n'))+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' \\ n'))+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(int(order.encode(' \\ n')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(int(order.encode(' \\ n')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if '--out' in sys.argv: \n <IND> str(outfile.write(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        str(outfile.write(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(io.stringify(order.encode('utf8')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(io.stringify(order.encode('utf8')+' \\ n'))\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n \n elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n        \n        elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode(' \\ n')+' \\ n')) \n <DED> elif not order+' \\ n' in target: \n <IND> outfile.write(str(order.encode('utf8')+' \\ n')) \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(str(order.encode(' \\ n')+' \\ n'))\n    elif not order+' \\ n' in target:\n        outfile.write(str(order.encode('utf8')+' \\ n'))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "if '--out' in sys.argv: \n <IND> outfile.write(outfile.encode(' \\ n')+' \\ n') \n <DED> elif not order+' \\ n' in target: \n",
      "pred_parsed": "    if '--out' in sys.argv:\n        outfile.write(outfile.encode(' \\ n')+' \\ n')\n    elif not order+' \\ n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "obsei/obsei",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/obsei-obsei",
    "commit": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "filename": "obsei/source/reddit_scrapper.py",
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            <IND>state[config.url_id] = scrapper_stat\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "warning_line": 69,
    "pred_top-1": {
      "pred": "last_index = since_id \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "last_index = since_id \n assert isinstance(str, config.url_id) \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(str, config.url_id)\n        state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id,'scrap') \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id,'scrap')\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, dict) \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, dict)\n        state[str] = scrapper_stat\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, str) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, str)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "last_index = since_id \n assert config.url_id is not None \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert config.url_id is not None\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "last_index = since_id \n state[str, config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        state[str, config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, '') \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, '')\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    assert isinstance(str, config.url_id)\n    assert isinstance(str, scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, scrapper_stat) \n assert isinstance(str, config.url_id) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    assert isinstance(str, scrapper_stat)\n    assert isinstance(str, config.url_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id,'scrapper') \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id,'scrapper')\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <IND> assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n            assert isinstance(str, config.url_id)\n            assert isinstance(str, scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "last_index = since_id \n assert isinstance(str, config.url_id) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(str, config.url_id)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <IND> assert isinstance(str, scrapper_stat) \n assert isinstance(str, config.url_id) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n            assert isinstance(str, scrapper_stat)\n            assert isinstance(str, config.url_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        assert isinstance(str, config.url_id)\n        assert isinstance(str, scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "last_index = since_id \n state[config.url_id] = dict.__setitem__ \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "last_index = since_id \n state[config.url_id] = dict.__setitem__[str] \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = dict.__setitem__[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    assert isinstance(str, scrapper_stat)\n    state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <IND> assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n            assert isinstance(str, scrapper_stat)\n            state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, config.url_id) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        assert isinstance(str, scrapper_stat)\n        assert isinstance(str, config.url_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, str) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, str)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id,'scrapper_stat') \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id,'scrapper_stat')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        assert isinstance(str, scrapper_stat)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id,'scrapper_stat') \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id,'scrapper_stat')\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "last_index = since_id \n state[config.url_id] = str \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = str\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "last_index = since_id \n state[config.url_id] = list(scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = list(scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, str) \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, str)\n        state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, dict) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, dict)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "last_index = since_id \n assert isinstance(config, url) \n state[config.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config, url)\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "last_index = since_id \n state[str[config.url_id]] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        state[str[config.url_id]] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, str) \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, str)\n        state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <IND> return \n \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n            return\n            \n            state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "last_index = since_id \n assert isinstance(config.url_id, '') \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(config.url_id, '')\n        state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "last_index = since_id \n state[config.url_id] = list[str] \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = list[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "last_index = since_id \n state[config.url_id] = \"\" \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = \"\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n return \n \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        return\n        \n        state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <IND> if not isinstance(str, config.url_id) = scrapper_stat \n return \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n            if not isinstance(str, config.url_id) = scrapper_stat\n            return\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, scrapper_stat) \n assert isinstance(str, config.url_id) \n <DED>",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    assert isinstance(str, scrapper_stat)\n    assert isinstance(str, config.url_id)\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "last_index = since_id \n state[config.url_id] = dict(scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = dict(scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "last_index = since_id \n state[config.url_id] = dict.__set_item__ \n \n",
      "pred_parsed": "        last_index = since_id\n        state[config.url_id] = dict.__set_item__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "last_index = since_id \n assert isinstance(str, config.url_id) \n assert isinstance(str, scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        assert isinstance(str, config.url_id)\n        assert isinstance(str, scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <IND> if not isinstance(str, config.url_id) = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n            if not isinstance(str, config.url_id) = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, config.url_id) <IND> assert isinstance(str, scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        assert isinstance(str, config.url_id)  assert isinstance(str, scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> return \n \n state[str] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    return\n    \n    state[str] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, scrapper_stat) \n <IND> assert isinstance(str, config.url_id) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    assert isinstance(str, scrapper_stat)\n        assert isinstance(str, config.url_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n <DED> assert isinstance(str, scrapper_stat) \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n    assert isinstance(str, scrapper_stat)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n args = since_items \n state[args.url_id] = scrapper_stat \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        args = since_items\n        state[args.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n if not isinstance(str, config.url_id) = scrapper_stat \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        if not isinstance(str, config.url_id) = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "last_index = since_id \n if not isinstance(str, config.url_id): \n \n if not isinstance(str, config.url_id) = scrapper_stat \n return \n \n",
      "pred_parsed": "        last_index = since_id\n        if not isinstance(str, config.url_id):\n        \n        if not isinstance(str, config.url_id) = scrapper_stat\n        return\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "crownpku/Rasa_NLU_Chi",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/crownpku-Rasa_NLU_Chi",
    "commit": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "filename": "rasa_nlu/model.py",
    "source_code": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "target_code": "\n        <DED><DED>return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
    "warning_line": 190,
    "pred_top-1": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=init_context) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=init_context)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=str.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=str.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> <DED> callback(Interpreter(self.pipeline, context=init_context, config=self.config)) \n \n",
      "pred_parsed": "        callback(Interpreter(self.pipeline, context=init_context, config=self.config))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=init_config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=init_config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=RasaNLUConfig) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=RasaNLUConfig)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <IND> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Init_context.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Init_context.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config, str) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any]) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Dict[str, Any])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=Init_context, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=Init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=str, config=init_context) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=str, config=init_context)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=str(self.config)) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=str(self.config))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=np.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=np.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=init_context.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=init_context.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config).decode('utf-8') \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config).decode('utf-8')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config); \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config);\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "\n <IND> <DED> return Interpreter(self.pipeline, context=init_context, config=init_context) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=init_context)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=river.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=river.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Dict[str, str]) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Dict[str, str])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Init_Context.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Init_Context.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> \n return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "pred_parsed": "        \n        return Interpreter(self.pipeline, context=init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "\n \n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "pred_parsed": "        \nreturn Interpreter(self.pipeline, context=init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=InitContext.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=InitContext.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.name) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config).__init__() \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.str) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=false, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=false, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=find_context, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=find_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> <DED> callback(Interpreter(self.pipeline, context=init_context), config=self.config) \n \n",
      "pred_parsed": "        callback(Interpreter(self.pipeline, context=init_context), config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=RasaNLUConfig.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=RasaNLUConfig.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=el.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=el.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Namespace.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Namespace.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.text) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.text)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Library.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Library.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.list) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=text, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=text, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <DED>",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config)\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "\n <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=init_context) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=init_context)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=tmp.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=tmp.config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Init_context) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Init_context)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=Dict[str, any]) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=Dict[str, any])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.path) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.string) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.string)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.type) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.type)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n <IND>",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config)\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=None) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=None)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> <DED> return Interpreter(self.pipeline, context=text, config=init_context) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=text, config=init_context)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "warning_line": 59,
    "pred_top-1": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, normalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_applicator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_applicator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_app) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_app)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, []) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regex) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regex)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__() \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_id) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_init__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_init__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_izer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_izer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_applicator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_applicator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n **kwargs) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        **kwargs) -> None:\n            super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regualizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regualizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <DED> ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n    regularizer: Optional[RegularizerApplicator] = None,  ) -> None:\n        super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n        \n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <IND> ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n            regularizer: Optional[RegularizerApplicator] = None,  ) -> None:\n                super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, Regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \"regularizer\") \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, \"regularizer\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, _regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, _regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \"Regularizer\") \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, \"Regularizer\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, realizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, realizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_str) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab,'regularizer') \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab,'regularizer')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n <IND>",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg__init__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg__init__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, [regularizer]) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, [regularizer])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n <DED>",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ): \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ):\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_licator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_licator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, config) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, __init__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, __init__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        normalizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_application) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_application)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_item) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_item)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \"Regularizer\") \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, \"Regularizer\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_filter) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_filter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, [Regularizer]) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, [Regularizer])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_name) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        normalizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, normalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), <DED> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),  regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, naturalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, naturalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_appligator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_appligator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, normalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, normalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, variable) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, variable)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/graph_parser.py",
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "warning_line": 79,
    "pred_top-1": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, normalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_applicator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_applicator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_app) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_app)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, []) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regex) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regex)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_id) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__() \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_init__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_init__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_izer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_izer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_applicator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_applicator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regualizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regualizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, _regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, _regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \"Regularizer\") \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, \"Regularizer\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, Regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, Regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \"regularizer\") \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, \"regularizer\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_licator) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_licator)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, [regularizer]) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, [regularizer])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, realizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, realizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab,'regularizer') \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab,'regularizer')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_str) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg__init__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg__init__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n        \n        super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n **kwargs) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        **kwargs) -> None:\n            super().__init__(vocab, **kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <DED> ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n    regularizer: Optional[RegularizerApplicator] = None,  ) -> None:\n        super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n <IND>",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n <DED>",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <IND> ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n            regularizer: Optional[RegularizerApplicator] = None,  ) -> None:\n                super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_filter) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_filter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_item) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_item)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, [Regularizer]) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, [Regularizer])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, \"Regularizer\") \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, \"Regularizer\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, __init__) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, __init__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_application) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_application)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, config) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, config)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, variable) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, variable)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, naturalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, naturalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, reg_name) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, reg_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        normalizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n normalizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, normalizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        normalizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, normalizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, bool) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, bool)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, stabilizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n            super().__init__(vocab, stabilizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n    super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <IND> <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n                ) -> None:   super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ): \n <IND> super().__init__(vocab, regularizer) \n \n",
      "pred_parsed": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ):\n            super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/allenai-allennlp",
    "commit": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "filename": "allennlp/common/logging.py",
    "source_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "target_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
    "warning_line": 103,
    "pred_top-1": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel[level_name, logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO)) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <IND> level = logging._nameToLevel.get(level_name, logging.INFO) \n level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n            level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  level = logging._nameToLevel.get(level_name, logging.INFO)\n            level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO)) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <DED> logging.INFO) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  logging.INFO)\n    LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\").get() \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\").get()\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\").get(\"ALLENNLP_LOG_INFO\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\").get(\"ALLENNLP_LOG_INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" \n LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO)) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"\n        LEVEL = logging._nameToLevel.get(level_name, str(logging.INFO))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel[level_name, logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel[level_name, logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"); \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\");\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" \n level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"\n        level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, typing.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, typing.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get() \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, typing.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, typing.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel[level_name], logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO).append(level_name) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO).append(level_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel[level_name, logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <IND> level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n            level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get(level_name) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get(level_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> else: \n <IND> assert level_name is not None \n level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        assert level_name is not None\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get('ALLENNLP_LOG_LEVEL') \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get('ALLENNLP_LOG_LEVEL')\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] <DED> LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n    level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]  LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <IND> level = logging._nameToLevel.get(level_name, logging.INFO) \n level = logging._nameToLevel.get(level_name, str) \n",
      "pred_parsed": "    else:\n            level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  level = logging._nameToLevel.get(level_name, logging.INFO)\n            level = logging._nameToLevel.get(level_name, str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <IND> level = logging._nameToLevel.get(level_name, logging.INFO).get() \n level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n            level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  level = logging._nameToLevel.get(level_name, logging.INFO).get()\n            level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"); \n level = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\");\n        level = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level = logging._nameToLevel[level_name, logging.INFO] \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        level = logging._nameToLevel[level_name, logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <IND> level = logging._nameToLevel.get(level_name, logging.INFO) \n level = logging._nameToLevel.get(level_name, str(logging.INFO)) \n",
      "pred_parsed": "    else:\n            level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  level = logging._nameToLevel.get(level_name, logging.INFO)\n            level = logging._nameToLevel.get(level_name, str(logging.INFO))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" <IND> level = logging._nameToLevel.get(level_name, logging.INFO) \n level_name = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n            level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"  level = logging._nameToLevel.get(level_name, logging.INFO)\n            level_name = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "pred_parsed": "    else:\nlevel_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\nLEVEL = logging._nameToLevel[level_name, logging.INFO]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "<DED> else: \n <IND> level_name = str(os.environ.get(\"ALLENNLP_LOG_LEVEL\")) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "pred_parsed": "    else:\n        level_name = str(os.environ.get(\"ALLENNLP_LOG_LEVEL\"))\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n level = logging._nameToLevel.get(level_name, str(logging.INFO)) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        level = logging._nameToLevel.get(level_name, str(logging.INFO))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO].get(level_name) \n",
      "pred_parsed": "    else:\n        level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"]\n        LEVEL = logging._nameToLevel[level_name, logging.INFO].get(level_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", []) \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO, []) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", [])\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get() \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO).get()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n level = logging._nameToLevel.get(level_name, logging.INFO).get(level_name) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        level = logging._nameToLevel.get(level_name, logging.INFO).get(level_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\" \n LEVEL = logging._nameToLevel.get(level_name, typing.INFO) \n",
      "pred_parsed": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\"\n        LEVEL = logging._nameToLevel.get(level_name, typing.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "algolia/algoliasearch-client-python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token",
    "target_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "warning_line": 32,
    "pred_top-1": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> str(Node) \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> str(Node)\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Optional[InsightsClient, Transporter, InsightsConfig]) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Optional[InsightsClient, Transporter, InsightsConfig]) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client._transporter,\n        user_token\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> str(None) \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> str(None)\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client).__init__() \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self) \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self)\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client._transporter, \n user_token) \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client._transporter,\n        user_token)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "\n <IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> InsightsConfig.__init__ \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> InsightsConfig.__init__\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Optional[InsightsClient, Transporter, InsightsConfig]) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Optional[InsightsClient, Transporter, InsightsConfig]) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client).__init__( \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client).__init__(\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \nsuper(UserInsightsClientAsync, self).__init__(\ninsights_client._transporter,\nuser_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> str(Node) \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> str(Node)\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig, str) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig, str) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, transporter).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, transporter).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \nsuper(UserInsightsClientAsync, self).__init__()\ninsights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> str(None) \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> str(None)\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> str(Node) \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> str(Node)\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> str( None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> str( None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client).__init__() \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super()(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super()(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client, user_token) \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client, user_token)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n <IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self, insights_client) \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self, insights_client)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self) \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self)\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (insightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (insightsClient, Transporter, InsightsConfig) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Config, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Config, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Optional[InsightsClient, Transporter], InsightsConfig]) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Optional[InsightsClient, Transporter], InsightsConfig]) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super()(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n        super()(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig, str) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__() \n insights_client._transporter \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig, str) -> None\n    \n        super(UserInsightsClientAsync, self).__init__()\n        insights_client._transporter\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (Config, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (Config, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (TypeError, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (TypeError, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter) -> None\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> InsightsConfig() \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> InsightsConfig()\n    \n        super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "quay/quay",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/quay-quay",
    "commit": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "filename": "test/specs.py",
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
    "warning_line": 29,
    "pred_top-1": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\")).hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\")).hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = str(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = str(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest)\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\")).hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + isinstance(hashlib.sha256(\"fake\")).hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST ='sha256:' + hashlib.sha256('fake').hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST ='sha256:' + hashlib.sha256('fake').hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + [hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + [hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256: { } \") + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256: { } \") + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256: { } \" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256: { } \" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256: { } \" + hashlib.sha256(\"fake\").hexdigest()] \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256: { } \" + hashlib.sha256(\"fake\").hexdigest()]\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + args.hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + args.hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + \"fake\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + \"fake\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256('fake').hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256('fake').hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + args[hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + args[hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST ='sha256:' + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST ='sha256:' + str(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + args.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + args.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + block(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + block(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + string(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + string(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\")).hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\")).hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + (hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\".fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\".fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + block(hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + block(hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + list(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + list(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = bool(\"sha256: { } \") + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = bool(\"sha256: { } \") + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = null + \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = null + \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + buffer(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + buffer(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256[\"fake\"].hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256[\"fake\"].hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()] \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()]\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + parseInt(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + parseInt(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\")).hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\")).hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256().hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256().hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256: { } \" + hashlib.sha256(\"fake\").hexdigest()] \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256: { } \" + hashlib.sha256(\"fake\").hexdigest()]\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = dir(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = dir(\"sha256:\" + hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + Hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + Hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()).decode(\"fake-image\") \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()).decode(\"fake-image\")\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256( \"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256( \"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + SHA256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + SHA256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGES_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest())\nFAKE_IMAGES_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()).decode() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()).decode()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (sha256:) + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = (sha256:) + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" <IND>",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest())\n    FAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()).decode(\"utf-8\") \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + str(hashlib.sha256(\"fake\").hexdigest()).decode(\"utf-8\")\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256: { }, \"fake\"].hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = [\"sha256: { }, \"fake\"].hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "borglab/gtsfm",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/borglab-gtsfm",
    "commit": "26f76a40e21bd082123f275404efca964faa59b9",
    "filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )",
    "target_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
    "warning_line": 201,
    "pred_top-1": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list[two_view_reports_dict] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list[two_view_reports_dict]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], one_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], one_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list[2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list[2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, Tuple[i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, Tuple[i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, (i0, i1, i2), two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], three_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], three_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], [two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], [two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2 ), two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2 ), two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, List[i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i2), list(two_view_reports_dict) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i2), list(two_view_reports_dict)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], multiple_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], multiple_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, plural, [i0, i1, plural, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, plural, [i0, i1, plural, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i1), list(two_view_reports_dict) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i1), list(two_view_reports_dict)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], List[compute_cycle_error, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], List[compute_cycle_error, int], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, list(i0, i1, i2), two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, list(i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[i0, i1, i2], Two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, List[i0, i1, i2], Two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, tuple(i0, i1, i2), two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, tuple(i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], four_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], four_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2, int], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[int, int], List[int], int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, List[int, int], List[int], int], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, list[i0, i1, i2], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, list[i0, i1, i2], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, int, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, int, int], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list[2] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list[2]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, int) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, int)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list[six], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list[six], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2=2, two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2=2, two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i1, i2), list(two_view_reports_dict) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i1, i2), list(two_view_reports_dict)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], lists[two_view_reports_dict] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], lists[two_view_reports_dict]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], List[int, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], List[int, int], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[i0, int, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, List[i0, int, int], two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <IND> ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict  )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[int, int], Two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, List[int, int], Two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, i0) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, i0)\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], 2[view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], 2[view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <DED> ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n    i2Ri1_dict, [i0, i1, i2], two_view_reports_dict  )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, int], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list[two_view_reports_dict] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list[two_view_reports_dict]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2], list[two_view_reports_dict] \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2], list[two_view_reports_dict]\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i1, i2]) \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list(two_view_reports_dict, [i0, i1, i2])\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], list[single], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, [i0, i1, i2], list[single], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2=4, two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2=4, two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, i0, i1, i2 [], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, i0, i1, i2 [], two_view_reports_dict\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, List[int, int], two_view_reports_dict \n ) \n",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, List[int, int], two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "stac-utils/pystac",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/stac-utils-pystac",
    "commit": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "filename": "pystac/collection.py",
    "source_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)",
    "target_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        <IND>minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
    "warning_line": 437,
    "pred_top-1": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, max=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, max=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximal=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximal=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\nminimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\nmaximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\nreturn cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) <IND>",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n            return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, max=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, max=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, max=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, max=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], type: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], type: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> @classmethod \n def from_dict(cls: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) <DED>",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n    return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, max=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, max=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], type: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], type: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        max: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n \n minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    \n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n    return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\nminimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\nmaximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\nreturn cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimal: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimal: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximal=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximal=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any] typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any] typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\nminimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\nmaximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\nreturn cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximal=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximal=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximal: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximal: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum) <IND>",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n            return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) <IND>",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n            return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, max=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, max=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\") \n return cls(minimum=minimum, max=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum\")\n        return cls(minimum=minimum, max=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximal=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximal=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Variable[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Variable[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Variable[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Variable[T] = get_required(d.get(\"maximum\"), \"maximum)\n        return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n \n minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum) \n return cls(minimum=minimum, maximum=maximum) \n",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    \n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"maximum\")\n    maximum: Optional[T] = get_required(d.get(\"maximum\"), \"maximum)\n    return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "samschott/maestral",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral",
    "commit": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "filename": "maestral/cli.py",
    "source_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "target_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
    "warning_line": 550,
    "pred_top-1": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements=maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements=maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"])) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = [\"gui\"] \n requirements = maestral_dist.requires(extras=\"gui\"] \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = [\"gui\"]\n        requirements = maestral_dist.requires(extras=\"gui\"]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements_ = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements_ = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = [\"gui\"] \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = [\"gui\"]\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n additional_requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        additional_requires = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Tuple(maestral_dist, extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Tuple(maestral_dist, extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = [] \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = []\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements_= maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements_= maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(maestral_dist, extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(maestral_dist, extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(gui) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(gui)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = typing.Tuple([\"gui\"],...]) \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = typing.Tuple([\"gui\"],...])\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"], [])) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=typing.Tuple([\"gui\"], []))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(gui) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(gui)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = typing.Tuple([\"gui\"]) \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = typing.Tuple([\"gui\"])\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required_requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        required_requires = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requires = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=List[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=List[\"gui\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Tuple(maestral_dist.requires(extras=[\"gui\"])) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Tuple(maestral_dist.requires(extras=[\"gui\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(maestral_dist, gui) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(maestral_dist, gui)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=typing.Tuple[str,...])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires() \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = pkg_resources.Distribution.requires([\"gui\"]) \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = pkg_resources.Distribution.requires([\"gui\"])\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = pkg_resources.Distribution.requires([\"gui\"], \"extras\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = pkg_resources.Distribution.requires([\"gui\"], \"extras\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n demands = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        demands = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = typing.Tuple([\"gui\"], []) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = typing.Tuple([\"gui\"], [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = pkg_resources.Distribution.requires(\"gui\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = pkg_resources.Distribution.requires(\"gui\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements.requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements.requires = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = pkg_resources.Distribution.requires(\"gui\"]) \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = pkg_resources.Distribution.requires(\"gui\"])\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = [\"gui\"] \n requirements = maestral_dist.requires(extras) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = [\"gui\"]\n        requirements = maestral_dist.requires(extras)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n _requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        _requires = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n <DED>",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements_requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements_requires = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras=extras \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras=extras\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(maestral_dist).requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(maestral_dist).requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple(\"gui\"])) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=typing.Tuple(\"gui\"]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n needs = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        needs = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n <IND>",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n extras = [\"gui\"] \n requirements = maestral_dist.requires(extras=\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        extras = [\"gui\"]\n        requirements = maestral_dist.requires(extras=\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires([\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires([\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(maestral_dist) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(maestral_dist)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n rest = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        rest = maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements=maestral_dist_requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements=maestral_dist_requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires=maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requires=maestral_dist.requires(extras=[\"gui\"])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(maestral_dist, []) \n \n",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = pkg_resources.Distribution.requires(maestral_dist, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "quantumlib/Cirq",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/docs/snippets_test.py",
    "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)",
    "target_code": "    if expected_failure is not None:\n        <IND>assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, str(expected_failure)) \n",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, str(expected_failure))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, str(expected_failure)) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, str(expected_failure))\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, str(expected_failure)) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, str(expected_failure))\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context_context_context",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context__context_context_context_context_context_context_context\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <IND> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n            assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_conf=\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n <DED> assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_",
      "pred_parsed": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)\n    assert_code_snippet_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context-context_context-context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_context_\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "deepmipt/DeepPavlov",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/deepmipt-DeepPavlov",
    "commit": "1de404c11bc5f40b766e966573506921980ff524",
    "filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[str, str])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[str, str]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, list(self.ec_data)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, list(self.ec_data))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, List[save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, List[save_path])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), list(self.ec_data)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), list(self.ec_data))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, [])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, []))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(ec_data, list(self.save_path)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(ec_data, list(self.save_path))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, str)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, str))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), List(self.ec_data)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), List(self.ec_data))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list[self.save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list[self.save_path])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[any])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[any]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, List[self.save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, List[self.save_path])\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[save_path])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[save_path]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n assert self.ec_data is not None \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        assert self.ec_data is not None\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, list(self.ec_data, list(self.ec_data))) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, list(self.ec_data, list(self.ec_data)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, List[save_path], List[save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, List[save_path], List[save_path])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[Any])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[Any]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, lists[self.save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, lists[self.save_path])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, list[str, str])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, list[str, str]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), List[save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), List[save_path])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List())) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List()))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(ec_data, list(self.save_path, List[str, str])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(ec_data, list(self.save_path, List[str, str]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n saved_pickle(self.ec_data, list(self.save_path)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        saved_pickle(self.ec_data, list(self.save_path))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n parent.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(ec_data, parent.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        parent.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(ec_data, parent.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n assert isinstance(self.ec_data, self.save_path) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        assert isinstance(self.ec_data, self.save_path)\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, list(self.ec_data, list(self.ec_data, list(self.save_path))) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, list(self.ec_data, list(self.ec_data, list(self.save_path)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data), list(self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data), list(self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), List[str]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), List[str])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[str])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[str]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), List() \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), List()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(ec_data, list(self.save_path, list(self.ec_data)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(ec_data, list(self.save_path, list(self.ec_data))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[save_path]) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[save_path])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, '')) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, ''))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n _self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(_self.ec_data, _self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        _self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(_self.ec_data, _self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, None)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, None))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, list(self.ec_data, list(self.save_path))) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, list(self.ec_data, list(self.save_path)))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), List(self.ec_data, list(self.save_path)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), List(self.ec_data, list(self.save_path))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List(self.ec_data)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List(self.ec_data))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, List[any], self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, List[any], self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[str,...])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[str,...]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n parent.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, parent.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        parent.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, parent.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[[]])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[[]]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path, List[])) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path, List[]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, str(self.save_path)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, str(self.save_path))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, list(self.save_path), List()) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, list(self.save_path), List())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n parent.save_path.mkdir(parents=True, exist_ok=True) \n save_pickle(ec_data, parent.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        parent.save_path.mkdir(parents=True, exist_ok=True)\n        save_pickle(ec_data, parent.save_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(ec_data, list(self.save_path), list(self.ec_data)) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(ec_data, list(self.save_path), list(self.ec_data))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "log.info(f\"Saving model to { self.save_path } \") \n assert self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "pred_parsed": "        log.info(f\"Saving model to { self.save_path } \")\n        assert self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3",
    "commit": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "filename": "volatility/framework/interfaces/configuration.py",
    "source_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)",
    "target_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            <IND>context.add_layer(obj)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
    "warning_line": 635,
    "pred_top-1": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert isinstance(obj, interfaces.layers.DataLayerInterface)\n            context.add_layer(obj)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert obj is not None \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert obj is not None\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is None and obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if isinstance(obj, interfaces.layers.DataLayerInterface): \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if isinstance(obj, interfaces.layers.DataLayerInterface):\n            context.add_layer(obj)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is None: \n <IND> assert isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is None:\n            assert isinstance(obj, interfaces.layers.DataLayerInterface)\n            context.add_layer(obj)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None and not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface): \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            context.add_layer(obj)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            isinstance(obj, interfaces.layers.DataLayerInterface)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n    context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj, config_path) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj, config_path)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert isinstance(obj, interfaces.layers.DataLayerInterface, obj) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert isinstance(obj, interfaces.layers.DataLayerInterface, obj)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is None and not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is None and not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> obj.layers = interfaces.layers.DataLayerInterface(obj) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            obj.layers = interfaces.layers.DataLayerInterface(obj)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert obj is not None and context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert obj is not None and context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert isinstance(obj, interfaces.layers[obj]) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert isinstance(obj, interfaces.layers[obj])\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None && obj.layers.DataLayerInterface: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None && obj.layers.DataLayerInterface:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert obj is None \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert obj is None\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interface.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interface.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and obj is None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> if obj is None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            if obj is None:\n                context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert obj is not None <DED> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n        assert obj is not None  context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> obj.layers = interfaces.layers.DataLayerInterface[obj] \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            obj.layers = interfaces.layers.DataLayerInterface[obj]\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n assert isinstance(obj, interfaces.layers.DataLayerInterface) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        assert isinstance(obj, interfaces.layers.DataLayerInterface)\n        context.add_layer(obj)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> obj.layers = interfaces.layers.DataLayerInterface() \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            obj.layers = interfaces.layers.DataLayerInterface()\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is Not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is Not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface = self._construct_class(context, config_path, args)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is None: \n <IND> assert obj is None \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is None:\n            assert obj is None\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> global.context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            global.context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert obj is not None <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n                assert obj is not None  context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None and obj = None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None and obj = None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> assert isinstance(obj, interfaces.layers[obj].DataLayerInterface) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            assert isinstance(obj, interfaces.layers[obj].DataLayerInterface)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface = obj \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface = obj\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface = [obj] \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface = [obj]\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> obj.interface.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            obj.interface.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if not obj is None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if not obj is None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface = self._construct_class(context, config_path) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface = self._construct_class(context, config_path)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if not obj is not None: \n <IND> context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if not obj is not None:\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface = self._construct_class(context, config_path) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface = self._construct_class(context, config_path)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj, []) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj, [])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is None: \n <IND> assert isinstance(obj, interfaces.layers.DataLayerInterface, obj) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is None:\n            assert isinstance(obj, interfaces.layers.DataLayerInterface, obj)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n        \n        context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> interfaces.layers.DataLayerInterface.append(obj) \n context.add_layer(obj) \n",
      "pred_parsed": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            interfaces.layers.DataLayerInterface.append(obj)\n            context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "theupdateframework/python-tuf",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/theupdateframework-python-tuf",
    "commit": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "filename": "tests/repository_simulator.py",
    "source_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, {})\n        # put delegation last by default",
    "target_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 354,
    "pred_top-1": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = OrderedDict[str, DelegatedRole]( { }, { } ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = OrderedDict[str, DelegatedRole]( { }, { } )\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations() \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations()\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = OrderedDict( { }, { } ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = OrderedDict( { }, { } )\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]]( { }, { } ) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations[OrderedDict[str, DelegatedRole]]( { }, { } )\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = OrderedDict[str, DelegatedRole]() \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = OrderedDict[str, DelegatedRole]()\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations([]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations([])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str, Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str, Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str], Organisation[str, Organisation[str],",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str], Organisation[str, Organisation[str],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str], Organisation[str], Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str], Organisation[str], Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str]] = Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str]] = Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str], Organisation[str], Organisation[str],",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str], Organisation[str], Organisation[str],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str] = Organisation[str], Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str] = Organisation[str], Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str] = Organisation[str], Organisation[str], Organisation[str],",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str], Organisation[str] = Organisation[str], Organisation[str], Organisation[str],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str] = Organisation[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str], Organisation[str]])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str, Organisation[str], Organisation[str, Organisation[str],",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]] = Organisation[str, Organisation[str], Organisation[str, Organisation[str],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str]) \n # put delegation",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str])\n            # put delegation\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str]) \n # put delegation last by default \n",
      "pred_parsed": "        if delegator.delegations is None:\n            delegator.delegations = Delegations(Any, Organisational[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organisation[str], Organization[str], Organisation[str], Organisation[str])\n            # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/flairNLP-flair",
    "commit": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs",
    "target_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(str(idx), conf.item()))\n        <DED>return label_probs\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
    "warning_line": 488,
    "pred_top-1": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Str(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Int(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Int(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, str(conf.item())))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert idx is not None \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert idx is not None\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Str(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(conf.item(), idx) \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(conf.item(), idx)\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> self._probs.append(Label(idx, conf.item())) \n <DED> return self._probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            self._probs.append(Label(idx, conf.item()))\n        return self._probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n    label_probs.append(Label(idx, str(conf.item())))\nreturn label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, str(conf.item())))\n            \n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(str(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(str(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(conf.item, idx) \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(conf.item, idx)\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> self.probs.append(Label(idx, conf.item())) \n <DED> return self.probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            self.probs.append(Label(idx, conf.item()))\n        return self.probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert conf.item is not None \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert conf.item is not None\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, int)) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, int))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) <DED> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n        assert isinstance(idx, conf.item())  label_probs.append(Label(idx, conf.item()))\n    return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n                assert isinstance(idx, conf.item())  label_probs.append(Label(idx, conf.item()))\n            return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> self.append(Label(idx, conf.item())) \n <DED> return self.append(label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            self.append(Label(idx, conf.item()))\n        return self.append(label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n            \n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, str) \n label_probs.append(Label(idx, str.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, str)\n            label_probs.append(Label(idx, str.item()))\n        return label_probs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item(), str)) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item(), str))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(label(idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, conf.item()))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> _label_probs.append(Label(idx, conf.item())) \n <DED> return _label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            _label_probs.append(Label(idx, conf.item()))\n        return _label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Str(idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append((idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append((idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Int(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Int(Label(idx, conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, str(conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, str(conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n    label_probs.append(Label(idx, conf.item()))\nreturn label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, label.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, label.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append([Label(idx, conf.item())]) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append([Label(idx, conf.item())])\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, str)) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, str))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append((idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append((idx, conf.item()))\n        return label_probs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Token(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Token(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(List(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(List(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Text(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Text(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())).append(str(idx)) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item())).append(str(idx))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(idx, conf.item())) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Str(idx, conf.item()))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(String(idx, conf.item())) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(String(idx, conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Int(idx, conf.item())) \n <IND> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Int(idx, conf.item()))\n                return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, list(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, list(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n \n return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, str(conf.item())))\n            \n            return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append([label(idx, conf.item())]) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append([label(idx, conf.item())])\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, conf.item()) \n label_probs.append(Label(idx, int(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            assert isinstance(idx, conf.item())\n            label_probs.append(Label(idx, int(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Int(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Int(idx, str(conf.item())))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Instagram/LibCST",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Instagram-LibCST",
    "commit": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)",
    "target_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
    "warning_line": 80,
    "pred_top-1": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert cst.Subscript is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert cst.Subscript is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                elif isinstance(base.value, cst.Subscript):\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif cst.Subscript isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif cst.Subscript isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n assert new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n                assert new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        assert new_value is not None\n                        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> if isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                if isinstance(base.value, cst.Subscript):\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        assert isinstance(base.value, cst.Subscript)\n                        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, expression.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, expression.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is instance(base.value, cst.Subscript) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is instance(base.value, cst.Subscript)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n                assert new_value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                \n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> assert cst.Subscript is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        assert cst.Subscript is not None\n                        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> if isinstance(base.value, cst.Expression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                if isinstance(base.value, cst.Expression):\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> elif isinstance(base.value, cst.Expression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                elif isinstance(base.value, cst.Expression):\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                \n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif cst.Subscript isinstance(base.value, cst.Expression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif cst.Subscript isinstance(base.value, cst.Expression):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert cst.subscript is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert cst.subscript is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert cst.BaseExpression is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert cst.BaseExpression is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                \n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        elif isinstance(base.value, cst.Subscript):\n                            new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> if cst.Subscript is not None: \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                if cst.Subscript is not None:\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert cst.Expression is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert cst.Expression is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(value, cst.Subscript) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(value, cst.Subscript)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif cst.Subscript isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif cst.Subscript isinstance(base.value, cst.Subscript):\n                assert new_value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <DED> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n        assert new_value is not None\n        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is not None\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n assert new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif isinstance(base.value, cst.Subscript):\n                        assert isinstance(base.value, cst.Subscript)\n                        assert new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) <DED> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n            assert isinstance(base.value, cst.Subscript)  new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Expression) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Expression)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is not None <DED> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n            assert new_value is not None  new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                    assert isinstance(base.value, cst.Subscript)  new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is instance(base.value, cst.Subscript) \n assert new_value is instance(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is instance(base.value, cst.Subscript)\n                assert new_value is instance(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n <DED> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n            new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert cst.Subscript is instance(value) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert cst.Subscript is instance(value)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif cst.Subscript isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n                    elif cst.Subscript isinstance(base.value, cst.Subscript):\n                        new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(base.value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(base.value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> if cst.Subscript is None: \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                if cst.Subscript is None:\n                    new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, expression): \n <IND> new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, expression):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert new_value is instance(base.value, cst.Subscript) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert new_value is instance(base.value, cst.Subscript)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> assert isinstance(base.value, cst.Subscript) \n assert isinstance(value) \n new_value = self._handle_Subscript(value) \n",
      "pred_parsed": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                assert isinstance(base.value, cst.Subscript)\n                assert isinstance(value)\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "facebookresearch/Mephisto",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto",
    "commit": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.load(json_fp)\n            <DED>for jd in json_data:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert json_data is not None \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert json_data is not None\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.get(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper.get(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper[json_fp] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper[json_fp]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, bytes) \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert isinstance(json_fp, bytes)\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert json_fp is not None \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert json_fp is not None\n                json_data = json.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.parse(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.parse(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.utils.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.utils.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.encode(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.encode(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.config.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.config.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.get(json.loads(json_fp)) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper.get(json.loads(json_fp))\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.type(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.type(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert json_data is not None \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert json_data is not None\n                json_data = json.loads(json_fp)\n                    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = tuple(json.loads(json_fp)) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = tuple(json.loads(json_fp))\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.path(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.path(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> if isinstance(json_fp, bytes): \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                if isinstance(json_fp, bytes):\n                    json_data = json.loads(json_fp)\n                for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> var json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                var json_data = json.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.decode(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.decode(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.slice(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.slice(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper[json_fp], json_data] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper[json_fp], json_data]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.namespace(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.namespace(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert json_data is not None \n json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert json_data is not None\n                json_data = json.loads(json_fp)\n                \n                for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert json_data is not None \n json_data = json.loads(json_fp).decode() \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert json_data is not None\n                json_data = json.loads(json_fp).decode()\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n <IND> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n                    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[json_fp, bytes] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[json_fp, bytes]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(str(json_fp)) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(str(json_fp))\n            for jd in json_data:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper[json_fp, bytes] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper[json_fp, bytes]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n <IND> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n                    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(typing.Union[bytes, str]) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(typing.Union[bytes, str])\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.keys(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.keys(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> if not json_fp: \n <IND> return json_data \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                if not json_fp:\n                    return json_data\n                for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json._utils.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json._utils.loads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads() \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads()\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.load(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper.load(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> if json_fp is not None: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                if json_fp is not None:\n                    json_data = json.loads(json_fp)\n                for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str](json_fp) \n \n for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str](json_fp)\n                \n                for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.reloads(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.reloads(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, bytes) \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert isinstance(json_fp, bytes)\n                json_data = json.loads(json_fp)\n                    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json._encode(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json._encode(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str][0] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[bytes, str][0]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[json_fp, bytes] \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = typing.Union[json_fp, bytes]\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper[json_fp] \n <IND> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = io.TextIOWrapper[json_fp]\n                    for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = tuple(json_fp) \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = tuple(json_fp)\n            for jd in json_data:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> assert isinstance(json_fp, bytes) \n json_data = json.loads(json_fp).decode() \n <DED> for jd in json_data: \n",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                assert isinstance(json_fp, bytes)\n                json_data = json.loads(json_fp).decode()\n            for jd in json_data:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec",
    "commit": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "filename": "transformers4rec/torch/features/embedding.py",
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                <IND>tables[name] = table\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "warning_line": 76,
    "pred_top-1": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is None: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is None:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is not None: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is not None:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is None and table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is None and table.name not in tables:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name not in tables:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables:\n                assert table.name is not None\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "features_dim[name] = table.dim \n if table.name is None in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None in tables:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                assert table.name is not None\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name is not None: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name is not None:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "features_dim[name] = table.dim \n if table.name in dict: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in dict:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name not in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "features_dim[name] = table.dim \n if table.name in dict: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in dict:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "features_dim[name] = table.dim \n if table.name in table: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in table:\n                assert table.name is not None\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name not in tables:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "features_dim[name] = table.dim \n if table.name is None in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name in tables:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name not in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "features_dim[name] = table.dim \n if table.name in table: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in table:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__(table.name) \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = dict.__setitem__(table.name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name is not None in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name is not None in tables:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None in tables:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is None and table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is None and table.name in tables:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "features_dim[name] = table.dim \n if table.name is None in tables: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None in tables:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "features_dim[name] = table.dim \n if table.name in table: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in table:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name not in tables:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None in tables: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None in tables:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None and table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name not in tables:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name not in tables:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is None: \n <IND> tables[table.name] = [] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is None:\n                tables[table.name] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "features_dim[name] = table.dim \n if table.name is not None: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None:\n                tables[table.name] = table\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "features_dim[name] = table.dim \n if table.name is None in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None in tables:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is None: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is None:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "features_dim[name] = table.dim \n if table.name in dict: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in dict:\n                assert table.name is not None\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name is None in tables: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name is None in tables:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name not in tables:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "features_dim[name] = table.dim \n if table.name is None and table.name is None else: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None and table.name is None else:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "features_dim[name] = table.dim \n if table.name is None else: \n <IND> tables[table.name] = table \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is None else:\n                tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "features_dim[name] = table.dim \n if table.name in dict is not None: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in dict is not None:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables is None: \n <IND> tables[table.name] = dict.__setitem__[table.name] \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables is None:\n                tables[table.name] = dict.__setitem__[table.name]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> tables[table.name] = dict.__setitem__(table.name) \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables:\n                tables[table.name] = dict.__setitem__(table.name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = \"\" \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "features_dim[name] = table.dim \n if table.name in dict: \n <IND> tables[table.name] = dict.__setitem__(table.name) \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in dict:\n                tables[table.name] = dict.__setitem__(table.name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name in tables:\n                tables[table.name] = dict.__setitem__\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "spesmilo/electrum",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/spesmilo-electrum",
    "commit": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "filename": "electrum/lnpeer.py",
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
    "warning_line": 477,
    "pred_top-1": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= [], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= [],\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes([], List[Variable[_T]]) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes([], List[Variable[_T]])\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], List[Variable[_T]]) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], List[Variable[_T]])\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], []), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], []),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "current_commitment_signature=None, \n htlc_signatures=bytes, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            htlc_signatures=bytes,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= None, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= None,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], List[Variable[_T]]), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], List[Variable[_T]]),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], [], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], [],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes(), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes(),\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], None), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], None),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes([], List[Variable[_T]]), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes([], List[Variable[_T]]),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], []) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], [])\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes[0], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes[0],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= (), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= (),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= [] \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= []\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= null, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= null,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=[], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], Bytes) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], Bytes)\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=List[], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=List[],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures: List[Variable[_T]] = [], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures: List[Variable[_T]] = [],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes[], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes[],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "current_commitment_signature=None, \n htlc_signatures= bytes, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            htlc_signatures= bytes,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], 'utf-8'), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], 'utf-8'),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], <DED> ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n        current_htlc_signatures= Bytes([],  )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "current_commitment_signature=None, \n htlc_signatures= Bytes([], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            htlc_signatures= Bytes([],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Byte(0), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Byte(0),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], <IND> ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n                current_htlc_signatures= Bytes([],  )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], # type: List[Variable[_T]]) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], # type: List[Variable[_T]])\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], Bytes), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], Bytes),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], bytes) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], bytes)\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([]), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([]),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures: List[Variable[_T]] = None, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures: List[Variable[_T]] = None,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes([], []), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes([], []),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes.decode('utf-8'), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes.decode('utf-8'),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], bytes), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], bytes),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes([], List[Variable[_T]]).decode(), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes([], List[Variable[_T]]).decode(),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=parse_bytes([], List[Variable[_T]]) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=parse_bytes([], List[Variable[_T]])\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], List[Variable[_T]]).decode(), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], List[Variable[_T]]).decode(),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= Bytes([], # type: List[Variable[_T]]), \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= Bytes([], # type: List[Variable[_T]]),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes([], []) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes([], [])\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], bytes) \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes([], bytes)\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes.decode('utf-8') \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes.decode('utf-8')\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "current_commitment_signature=None, \n htlc_signatures= [], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            htlc_signatures= [],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= \"\", \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= \"\",\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= str([], \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= str([],\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=bytes,\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "current_commitment_signature=None, \n current_htlc_signatures= bytes([], List[Variable[_T]]); \n ) \n",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures= bytes([], List[Variable[_T]]);\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Mic92/nixpkgs-review",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Mic92-nixpkgs-review",
    "commit": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "filename": "nixpkgs_review/review.py",
    "source_code": "    with proc as nix_env:\n        return parse_packages_xml(nix_env.stdout)",
    "target_code": "    with proc as nix_env:\n        <IND>assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
    "warning_line": 258,
    "pred_top-1": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env.stdout is not None\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return IO[bytes](parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env, bytes) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env, bytes)\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes_bytes(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes_bytes(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout, IO[bytes])\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, bytes) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout, bytes)\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "with proc as nix_env: \n <DED> assert nix_env.stdout is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\nassert nix_env.stdout is not None\nreturn parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(IO[bytes]).stdout \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout, IO[bytes])\n        return parse_packages_xml(IO[bytes]).stdout\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes().stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes().stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env, Bytes) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env, Bytes)\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env, bytecode) \n return parse_packages_xml(bytecode(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env, bytecode)\n        return parse_packages_xml(bytecode(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env.stdout is not None\n        return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "with proc as nix_env: \n <IND> if nix_env.stdout is None: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        if nix_env.stdout is None:\n            return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return IO[bytes](parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "with proc as nix_env: \n <IND> return IO[bytes](nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        return IO[bytes](nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout)\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "with proc as nix_env: \n <IND> call IO[bytes](IO[bytes]) \n return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        call IO[bytes](IO[bytes])\n        return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env,bytes) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env,bytes)\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(nix_env.stdout).decode('utf-8') \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env.stdout is not None\n        return parse_packages_xml(nix_env.stdout).decode('utf-8')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "with proc as nix_env: \n <IND> if nix_env.stdout is None: \n <IND> return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        if nix_env.stdout is None:\n            return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(Nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env.stdout is not None\n        return parse_packages_xml(Nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "with proc as nix_env: \n <IND> return nix_env.stdout \n",
      "pred_parsed": "    with proc as nix_env:\n        return nix_env.stdout\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None <DED> return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n    assert nix_env.stdout is not None  return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(IO[bytes]) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout, IO[bytes])\n        return parse_packages_xml(IO[bytes])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env.stdout is not None\n        return parse_packages_xml(parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(stdout, nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(stdout, nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout, IO[bytes])\n        return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "with proc as nix_env: \n <IND> if nix_env.stdout is None: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        if nix_env.stdout is None:\n            return IO[bytes](parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env is not None\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "with proc as nix_env: \n <DED> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\nreturn IO[bytes](parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "with proc as nix_env: \n <IND> if nix_env.stdout not None: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        if nix_env.stdout not None:\n            return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "with proc as nix_env: \n <IND> if not nix_env: \n <IND> return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        if not nix_env:\n            return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env, bytecode) \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env, bytecode)\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "with proc as nix_env: \n <IND> if isinstance(nix_env, bytes): \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        if isinstance(nix_env, bytes):\n            return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "with proc as nix_env: \n <IND> return bytes(parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return bytes(parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "with proc as nix_env: \n <IND> if not nix_env: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        if not nix_env:\n            return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes[nix_env.stdout])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "with proc as nix_env: \n <IND> if nix_env.stdout not None: \n <IND> return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        if nix_env.stdout not None:\n            return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "with proc as nix_env: \n <IND> return bytes(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        return bytes(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "with proc as nix_env: \n <IND> call IO[bytes](IO[bytes]) \n return parse_packages_xml(IO[bytes].stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        call IO[bytes](IO[bytes])\n        return parse_packages_xml(IO[bytes].stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert nix_env.stdout is not None\n        return parse_packages_xml(stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout) \n return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout)\n        return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n \n",
      "pred_parsed": "    with proc as nix_env:\n        return IO[bytes](parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "with proc as nix_env: \n <IND> return bool(parse_packages_xml(nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        return bool(parse_packages_xml(nix_env.stdout))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, bytes) \n return parse_packages_xml(IO[bytes](nix_env.stdout)) \n",
      "pred_parsed": "    with proc as nix_env:\n        assert isinstance(nix_env.stdout, bytes)\n        return parse_packages_xml(IO[bytes](nix_env.stdout))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes = nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        return parse_packages_xml(bytes = nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "with proc as nix_env: \n <IND> bool = IO[bytes] \n return parse_packages_xml(nix_env.stdout) \n",
      "pred_parsed": "    with proc as nix_env:\n        bool = IO[bytes]\n        return parse_packages_xml(nix_env.stdout)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is not None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title is not None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title === self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title === self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title && self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title && self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!== self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!== self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= none else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= none else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "player.init_gender(self.gender) \n title_description = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title_description = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "player.init_gender(self.gender) \n name = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        name = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == none else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == none else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "player.init_gender(self.gender) \n title.init() = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title.init() = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is None else self.title \n if self.title is None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title is None else self.title\n        if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= '' else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= '' else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title = self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title = self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "player.init_gender(self.gender) \n title.description = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title.description = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n if self.title is not None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        if self.title is not None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == '' else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == '' else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title int == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title int == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n if self.title is None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "player.init_gender(self.gender) \n title= None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title= None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "player.init_gender(self.gender) \n if self.title is None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is none else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title is none else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title ==/self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title ==/self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "player.init_gender(self.gender) \n title_name = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title_name = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= null else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= null else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= 'undefined' else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= 'undefined' else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == undefined else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == undefined else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is None else self.title <IND> player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n            title = None if self.title is None else self.title  player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title== self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title== self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "player.init_gender(self.gender) \n title= None if self.title is None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title= None if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is NOT None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title is NOT None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <IND> player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n            title = None if self.title == self._name else self.title  player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title name== self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title name== self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title isn't None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title isn't None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title!= undefined else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title!= undefined else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title is None else self.title <DED> player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n    title = None if self.title is None else self.title  player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <DED> player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n    title = None if self.title == self._name else self.title  player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title not None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title not None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title are not None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title are not None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title has any value other self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title has any value other self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-45": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title name is None else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title name is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title else str(self._name) \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title else str(self._name)\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == any else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == any else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == or else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == or else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title exists else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title exists else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n \n",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "edgedb/edgedb",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
    "warning_line": 91,
    "pred_top-1": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert expr is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert expr is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, ctx=ctx) \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert isinstance(expr, ctx=ctx)\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isolator is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert isolator is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "def compile_IsOp( \n expr: base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert op_node is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert op_node is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def compile_IsOp( \n expr: IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> Irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> Irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "def compile_IsOp( \n expr, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert op is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert op is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "def compile_IsOp( \n expr: *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert ctx is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert ctx is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "def compile_IsOp( \n expr: [, *, ctx: context.ContextLevel]) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: [, *, ctx: context.ContextLevel]) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def compile_IsOp( \n expr: Base*, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: Base*, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel): \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel):\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "def compile_IsOp( \n expr: str, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: str, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "def compile_IsOp( <DED> expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(  expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "def compile_IsOp( <IND> expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(  expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "def compile_IsOp( \n expr: List[qlast.Base], *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: List[qlast.Base], *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, op_node, qlast.Base) \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert isinstance(expr, op_node, qlast.Base)\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "def compile_IsOp( \n expr: qlast.String, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.String, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: <IND> <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:   op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def compile_IsOp( \n expr: qlast.Base *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "def compile_IsOp( \n expr: () => qlast.Base(*, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: () => qlast.Base(*, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "def compile_IsOp( \n expr: qlast.Base*, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base*, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "def compile_IsOp( \n expr: \"\" + qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: \"\" + qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "def compile_IsOp( \n expr: qlast.Example, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Example, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: Base, *, ctx: context.ContextLevel) -> irast.Set:\n    assert expr is not None\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: <DED> <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:   op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "def compile_IsOp( \n expr: qlast.Base*, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base*, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "def compile_IsOp( \n expr: \"Base\", *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: \"Base\", *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def compile_IsOp( \n expr: \"\" + expr, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: \"\" + expr, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def compile_IsOp( \n expr: base64, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: base64, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def compile_IsOp( \n expr: qlast.Path, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Path, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "def compile_IsOp( \n expr: Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def compile_IsOp( \n expr: \"\", *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: \"\", *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(extr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(extr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> compile_type_check_op = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    compile_type_check_op = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def compile_IsOp( \n expr: List[, *, ctx: context.ContextLevel]) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: List[, *, ctx: context.ContextLevel]) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "def compile_IsOp( \n expr: Base *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: Base *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op( <DED> expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(  expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def compile_IsOp( \n expr: Basis, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "pred_parsed": "def compile_IsOp(\nexpr: Basis, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "RasaHQ/rasa",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/RasaHQ-rasa",
    "commit": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "filename": "rasa_nlu/model.py",
    "source_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)",
    "target_code": "        for component in self.pipeline:\n            <IND>args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
    "warning_line": 175,
    "pred_top-1": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.id) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.id)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.to_dict()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.to_dict())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.list(args)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.list(args))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.name) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.name)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.isinstance(args)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.isinstance(args))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.text_args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.text_args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, dict) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, dict)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.encode()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.encode())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.stringify(args)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.stringify(args))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.stringify()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.stringify())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config[str]) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config[str])\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.items) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.items)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.el) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.el)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str(args)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str(args))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.to_float()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.to_float())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), (context, self.config)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), (context, self.config))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.context_args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.context_args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, Dict[self.config, str]) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, Dict[self.config, str])\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.init)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.div) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.div)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, str(self.config.args)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, str(self.config.args))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.test(args)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.test(args))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.origin_args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.origin_args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.has_args()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.has_args())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.stringify(str)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.stringify(str))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, dict[self.config, str]) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, dict[self.config, str])\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\"))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), []) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), [])\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\", []) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_init\", [])\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, str(self.config)) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, str(self.config))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict_args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config._dict_args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.required_args) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.required_args)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get_args()) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get_args())\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.dict)\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_args\")) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get(\"pipeline_args\"))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get('pipeline_init')) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.get('pipeline_init'))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str(\"pipeline_init\")) \n updates = component.pipeline_init(*args) \n",
      "pred_parsed": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.str(\"pipeline_init\"))\n            updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "                new = Or(new, key_argument != index_argument)",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
    "warning_line": 1374,
    "pred_top-1": {
      "pred": "\n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n assert isinstance(key_argument, Bool) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, Bool)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n assert isinstance(key_argument, bool) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, bool)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n bool = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                bool = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n assert isinstance(item, key_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(item, key_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n new_argument = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new_argument = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n assert isinstance(key_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n assert key_argument is not None \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert key_argument is not None\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n new_argument = or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                new_argument = or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n assert isinstance(key_argument, index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\", \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\", \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\", index_argument\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\", index_argument\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n assert isinstance(int, key_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(int, key_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Or\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Or\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", \"mythril.laser.smt.bool.Or\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", \"mythril.laser.smt.bool.Or\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool\", \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\", \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool\").decode(\"mythril.laser.smt.bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\").decode(\"mythril.laser.smt.bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\"), \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\"), \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n assert isinstance(key_argument, bool) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, bool)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", \"mythril.laser.smt.bool.Or\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\", \"mythril.laser.smt.bool.Or\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\") \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\")\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool\".Bool) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\".Bool)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\") \n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\")\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.\", \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.\", \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\"), \"mythril.laser.smt.bool.Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\"), \"mythril.laser.smt.bool.Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\", \"mythril.laser.smt.bool.Or\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\", \"mythril.laser.smt.bool.Or\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Or\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Or\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.\"), \"mythril.laser.smt.bool.\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.\"), \"mythril.laser.smt.bool.\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool.Or\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Or\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool.Or\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Or\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\") \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\")\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n return Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                return Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool\".Bool\") \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool\".Bool\")\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument) \n assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Or\", index_argument) \n new = Or(new, key_argument!= index_argument) \n \n",
      "pred_parsed": "                assert isinstance(key_argument, \"mythril.laser.smt.bool\", index_argument)\n                assert isinstance(key_argument, \"mythril.laser.smt.bool.Bool\", \"mythril.laser.smt.bool.Or\", index_argument)\n                new = Or(new, key_argument!= index_argument)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "chanzuckerberg/miniwdl",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/StdLib.py",
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "warning_line": 180,
    "pred_top-1": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], ''), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], ''), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], ]), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], ]), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], 0), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], 0), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], None], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], None], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], []), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], []), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([0], None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([0], None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()], _notimpl)), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()], _notimpl)),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([[T.Any()], T.Any()], ]), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([[T.Any()], T.Any()], ]),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), [], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), [], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(\"\", None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(\"\", None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()], T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()], T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], [], T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], [], T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([\", T.Any()), ]), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([\", T.Any()), ]),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any(), T.Any()], T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any(), T.Any()], T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([[T.Any()], T.Any()], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([[T.Any()], T.Any()], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(...), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(...), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), ]), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), ]),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), 0), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), 0), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(\",\", _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(\",\", _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], \"], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], \"], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(''), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(''), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([],...], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([],...], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], ''), ''), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], ''), ''),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), None, _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), None, _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()], []), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()], []), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([\", T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([\", T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Equal(T.Any()), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(Equal(T.Any()), None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), \"\", _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), \"\", _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(\"\", T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(\"\", T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], \"\", _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], \"\", _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), None], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), None], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), ''), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(([T.Any()], T.Any()), ''),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], [], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], [], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), None\", _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), None\", _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Error), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(Error), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), []), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([]), []),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], None, _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], None, _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], )), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map([], )),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
    "warning_line": 598,
    "pred_top-1": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=to_canonical_address(data['identifier']),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=to_canonical_address(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_name=to_canonical_address(data['token_network_name']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_name=to_canonical_address(data['token_network_name']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n amount=TokenAmount(int(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=TokenAmount(int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <DED> token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n        initiator=to_canonical_address(data['initiator']),  token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_number=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_number=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=to_canonical_address(data['identifier']),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']) \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=to_canonical_address(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <IND> token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n                initiator=to_canonical_address(data['initiator']),  token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_number=to_canonical_address(data['token_number']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_number=to_canonical_address(data['token_number']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_id=to_canonical_address(data['token_network_id), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_id=to_canonical_address(data['token_network_id),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_number=to_canonical_address(data['token_number']), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_number=to_canonical_address(data['token_number']),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n amount=TokenAmount(int(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=TokenAmount(int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=TokenAmount(int(data['identifier'])),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n ), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            ),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_identifier=TokenAddress(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_identifier=TokenAddress(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <DED> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n        identifier=TokenAmount(int(data['identifier'])),  amount=TokenAmount(int(data['amount'])),\n        initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['token_network_identifier']), \n token_amount=TokenAmount(int(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=to_canonical_address(data['token_network_identifier']),\n            token_amount=TokenAmount(int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),  identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=to_canonical_address(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_user=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_user=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <IND> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n                identifier=TokenAmount(int(data['identifier'])),  amount=TokenAmount(int(data['amount'])),\n                initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), <IND> initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n                amount=TokenAmount(int(data['amount'])),  initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), <DED> initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n        amount=TokenAmount(int(data['amount'])),  initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),  identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_id=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_id=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_amount=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_amount=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_number=to_canonical_address(data['token_number']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_number=to_canonical_address(data['token_number']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n token_network_name=to_canonical_address(data['token_network_name']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=to_canonical_address(data['identifier']),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_name=to_canonical_address(data['token_network_name']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=to_canonical_address(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_identifier=to_canonical_address(data['",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_identifier=to_canonical_address(data['\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n ) \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_address=to_canonical_address(data['token_network_address(data['",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_address=to_canonical_address(data['token_network_address(data['\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_name=to_canonical_address(data['token_network_identifier']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=TokenAmount(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_name=to_canonical_address(data['token_network_identifier']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n token_network_name=to_canonical_address(data['token_network_name']), \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=to_canonical_address(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n            token_network_name=to_canonical_address(data['token_network_name']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n token_identifier=TokenAmount(int(data['identifier'])), \n amount=to_canonical_address(data['amount']), \n initiator=to_canonical_address(data['initiator']), \n \n",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            token_identifier=TokenAmount(int(data['identifier'])),\n            amount=to_canonical_address(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "intel/dffml",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/intel-dffml",
    "commit": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "filename": "dffml/operation/output.py",
    "source_code": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)",
    "target_code": "\n<DED><DED>group_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple(GroupBySpec) \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple(GroupBySpec)\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" <IND> ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\"  )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" <DED> ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"  )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\" )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any]\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple[GroupBySpec] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple[GroupBySpec]\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> <DED> spec=Definition[GroupBySpec] \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "spec=Definition[GroupBySpec]\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\") \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> <DED> spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> <DED> spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition[GroupBySpec] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition[GroupBySpec]\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\"=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\"=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=NamedTuple(GroupBySpec) \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=NamedTuple(GroupBySpec)\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n <DED> <DED> spec=Definition[GroupBySpec] \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "spec=Definition[GroupBySpec]\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Tuple(GroupBySpec) \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Tuple(GroupBySpec)\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any]) \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=NamedTuple(Dict[str, Any])\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"|GroupBySpec\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"|GroupBySpec\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=List[GroupBySpec] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=List[GroupBySpec]\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", str=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", str=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> \n group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "\ngroup_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n \n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "\ngroup_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Tuple[GroupBySpec] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Tuple[GroupBySpec]\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any]\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "\n <DED> <DED> name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition( \n name=\"group_by_spec\", primitive=\"GroupBySpec\"\" \n ) \n \n",
      "pred_parsed": "name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition(\nname=\"group_by_spec\", primitive=\"GroupBySpec\"\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=NamedTuple[Dict[str, Any]] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=NamedTuple[Dict[str, Any]]\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\": GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\": GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "\n <DED> <DED> name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\" = \"GroupBySpec\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\" = \"GroupBySpec\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" -----\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\" -----\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\" ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\" )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"... \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"...\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\",\"GroupBySpec\"\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\",\"GroupBySpec\"\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> <DED> name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\") \n ) \n \n",
      "pred_parsed": "name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\n)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", \"GroupBySpec\" \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", \"GroupBySpec\"\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> <DED> name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition( \n name=\"group_by_spec\", primitive=\"GroupBySpec\"\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "name=\"group_by_spec\", primitive=\"Dict[str, Any]\" = Definition(\nname=\"group_by_spec\", primitive=\"GroupBySpec\"\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=NamedTuple[GroupBySpec] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"\", spec=NamedTuple[GroupBySpec]\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( <IND> name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(  name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\"] \n ) \n \n",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\"]\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n \n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "pred_parsed": "\ngroup_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ktbyers/netmiko",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ktbyers-netmiko",
    "commit": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_code": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):",
    "target_code": "        if not self.check_enable_mode():\n            <IND>new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
    "warning_line": 65,
    "pred_top-1": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, str) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(str, str)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt = False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt = False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=None, strip_command=None \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=None, strip_command=None\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "if not self.check_enable_mode(): \n <IND> return self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            return self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, dict) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(str, dict)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=Null, strip_command=Null \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=Null, strip_command=Null\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "if not self.check_enable_mode(): \n <DED> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n    output += self.send_command_timing(\n    cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n <IND> output += self.send_command_timing( \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n                output += self.send_command_timing(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( <DED> cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n        output += self.send_command_timing(  cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <DED> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False  )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <IND> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False  )\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( <IND> cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n                output += self.send_command_timing(  cmd, strip_prompt=False, strip_command=False\n                )\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert cmd is not None \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert cmd is not None\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "if not self.check_enable_mode(): \n <IND> _ output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            _ output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=false, strip_command=false \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=false, strip_command=false\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, str) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(str, str)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "if not self.check_enable_mode(): \n <IND> if not self.check_enable_mode: \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            if not self.check_enable_mode:\n                output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n                )\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n <DED> output += self.send_command_timing( \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n        output += self.send_command_timing(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "if not self.check_enable_mode(): \n <IND> if re.search(pattern, output, flags=re_flags): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            if re.search(pattern, output, flags=re_flags):\n                output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n                )\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=True, strip_command=True \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=True, strip_command=True\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=false, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=false, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "if not self.check_enable_mode(): \n \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n        \n        output += self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert wasinstance(str, str) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert wasinstance(str, str)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "if not self.check_enable_mode(): \n <IND> input += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            input += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, str) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n <IND> assert isinstance(str, str) \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(str, str)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n                assert isinstance(str, str)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt, strip_command=False \n ) \n if re.search(pattern, output, flags=flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt, strip_command=False\n            )\n            if re.search(pattern, output, flags=flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(cmd, strip_prompt=False, strip_command=False) \n output += self.send_command_timing( \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(cmd, strip_prompt=False, strip_command=False)\n            output += self.send_command_timing(\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt, str=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt, str=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            \n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n <DED> if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "if not self.check_enable_mode(): \n <IND> _output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            _output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ); \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            );\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=Error, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=Error, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "if not self.check_enable_mode(): \n <IND> return self.send_command_timing( \n cmd, strip_prompt = False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            return self.send_command_timing(\n            cmd, strip_prompt = False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, str) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(str, str)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt= False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt= False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt = False, strip_command=False \n ) \n if re.search(pattern, output, flags=flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt = False, strip_command=False\n            )\n            if re.search(pattern, output, flags=flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=Undefined, strip_command=Undefined \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=Undefined, strip_command=Undefined\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n <IND> if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "if not self.check_enable_mode(): \n <IND> self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n <IND> output += self.send_command_timing( \n ) \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n                output += self.send_command_timing(\n                )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): <IND>",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n                if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False )\n            if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "if not self.check_enable_mode(): <IND> <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():   output += self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "if not self.check_enable_mode(): \n <IND> assert isinstance(str, dict) \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=flags): \n",
      "pred_parsed": "        if not self.check_enable_mode():\n            assert isinstance(str, dict)\n            output += self.send_command_timing(\n            cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "optuna/optuna",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna",
    "commit": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "filename": "optuna/storages/cached_storage.py",
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
    "warning_line": 182,
    "pred_top-1": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = param_value_internal \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = param_value_internal\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dicts \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dicts\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = [] \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = []\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dict(dists) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dict(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = Dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = Dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = (dists) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = (dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = deps \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = deps\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = str(dists) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = str(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "dists[param_name] = distribution <IND> cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution  cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = \"\" \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = \"\"\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "dists[param_name] = distribution <DED> cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution  cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists <DED> updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n            cached_trial.distributions[param_name] = dists  updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists <IND> updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                    cached_trial.distributions[param_name] = dists  updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = (str, distributions.BaseDistribution) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = (str, distributions.BaseDistribution)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dicts[str, distributions.BaseDistribution] \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dicts[str, distributions.BaseDistribution]\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dict[str, distributions.BaseDistribution] \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dict[str, distributions.BaseDistribution]\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dits \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dits\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dict() \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dict()\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dict.__setitem__ \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dict.__setitem__\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = str \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = str\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = ints \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = ints\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <IND>",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                    updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = set(dists) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = set(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = config.dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = config.dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED>",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n            updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = list(dists) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = list(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = sts \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = sts\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dict.distributions.BaseDistribution \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dict.distributions.BaseDistribution\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = disks \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = disks\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = ts \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = ts\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = strs \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = strs\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n <IND>",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n                    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = ds \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = ds\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dicts.BaseDistribution \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dicts.BaseDistribution\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = null \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = null\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = (dists) \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = (dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[parm_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[parm_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = args \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = args\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "dists[param_name] = Distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = Distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = null = dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = null = dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = diffs \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = diffs\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bas_distribution \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = bas_distribution\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n <DED>",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name]= dists \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name]= dists\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = exts \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = exts\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updated_params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updated_params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = distributions \n updates.params[param_name] = param_value_internal \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = distributions\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED> \n",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n            updates.params[param_name] = param_value_internal\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow",
    "commit": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "filename": "airflow/security/kerberos.py",
    "source_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:",
    "target_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
    "warning_line": 117,
    "pred_top-1": {
      "pred": "<IND> time.sleep(1.5) \n ret = str(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = str(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "<IND> time.sleep(1.5) \n ret = Perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> time.sleep(1.5) \n ret = Optional[str] = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Optional[str] = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> time.sleep(1.5) \n ret = assert.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = assert.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> time.sleep(1.5) \n ret = self.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = self.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> time.sleep(1.5) \n ret = execute_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = execute_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> time.sleep(1.5) \n ret = bool(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = bool(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<IND> time.sleep(1.5) \n ret = Optional[perform_krb181_workaround(principal)] \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Optional[perform_krb181_workaround(principal)]\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> time.sleep(1.5) \n ret = Perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> time.sleep(1.5) \n ret = str(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = str(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "<IND> time.sleep(1.5) \n ret = this.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = this.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> time.sleep(1.5) \n ret = optional[str] = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = optional[str] = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> time.sleep(1.5) \n assert isinstance(principal, str) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        assert isinstance(principal, str)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "<IND> time.sleep(1.5) \n ret = python.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = python.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> time.sleep(1.5) \n ret = os.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = os.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> time.sleep(1.5) \n ret = elif isinstance(principal, krb181) and ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = elif isinstance(principal, krb181) and ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> time.sleep(1.5) \n ret = optional[str](perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = optional[str](perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> time.sleep(1.5) \n ret = sys.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = sys.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> time.sleep(1.5) \n ret = str(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = str(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<IND> time.sleep(1.5) \n ret = tuple(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = tuple(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "<IND> time.sleep(1.5) \n ret = cast(str(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = cast(str(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> time.sleep(1.5) \n ret = _perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = _perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> time.sleep(1.5) \n ret = cls.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = cls.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> time.sleep(1.5) \n ret = normal[str] \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = normal[str]\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> time.sleep(1.5) \n ret = bool.perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = bool.perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> time.sleep(1.5) \n ret = int(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = int(perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "<IND> time.sleep(1.5) \n ret = \"perform_krb181_workaround(principal)\" \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = \"perform_krb181_workaround(principal)\"\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "<IND> time.sleep(1.5) \n ret = elif isinstance(principal, krb181_workaround) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = elif isinstance(principal, krb181_workaround)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal); \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal);\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<IND> time.sleep(1.5) \n ret = Execute_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Execute_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> time.sleep(1.5) \n ret = elif isinstance(principal, krb181) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = elif isinstance(principal, krb181)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> time.sleep(1.5) \n ret = perf_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perf_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> time.sleep(1.5) \n ret = krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> time.sleep(1.5) \n ret = assert(principal, perform_krb181_workaround) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = assert(principal, perform_krb181_workaround)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "<IND> time.sleep(1.5) \n ret = \"\" \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = \"\"\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<IND> time.sleep(1.5) \n ret = Perform_krb181_workaround(principal); \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Perform_krb181_workaround(principal);\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> time.sleep(1.5) \n ret = super().workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = super().workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> time.sleep(1.5) \n assert isinstance(principal, ret) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        assert isinstance(principal, ret)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> time.sleep(1.5) \n ret = Optional[perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Optional[perform_krb181_workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> time.sleep(1.5) \n ret = Optional[perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = Optional[perform_krb181_workaround(principal))\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> time.sleep(1.5) \n ret = f(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = f(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> time.sleep(1.5) \n ret = ret.workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = ret.workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<IND> time.sleep(1.5) \n ret = this._workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = this._workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> time.sleep(1.5) \n ret = '' \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = ''\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "<IND> time.sleep(1.5) \n ret = this.workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = this.workaround(principal)\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> time.sleep(1.5) \n ret = str(perform_krb181_workaround(principal)) \n if exit_on_fail and ret!= 0: <IND>",
      "pred_parsed": "        time.sleep(1.5)\n        ret = str(perform_krb181_workaround(principal))\n            if exit_on_fail and ret!= 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> time.sleep(1.5) \n ret = 0 \n if exit_on_fail and ret!= 0: \n",
      "pred_parsed": "        time.sleep(1.5)\n        ret = 0\n        if exit_on_fail and ret!= 0:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "paul-nameless/tg",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/paul-nameless-tg",
    "commit": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "filename": "tg/controllers.py",
    "source_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "target_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            <IND>return\n        <DED>self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
    "warning_line": 111,
    "pred_top-1": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id: from_chat_id \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id: from_chat_id\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert chat_id is not None\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        assert chat_id is not None\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return  from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids=self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids=self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = msg_ids\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n \n from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n            \n            from_chat_id, msg_ids = self.model.yanked_msgs\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert self.model.yanked_msgs is not None\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n                from_chat_id, msg_ids = self.model.yanked_msgs\n                self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id: from_chat_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id: from_chat_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(msg_ids, int) \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert isinstance(msg_ids, int)\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        \n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> from_chat_id: from_chat_id \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n                from_chat_id: from_chat_id\n                self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id: from_chat_id, msg_ids: \n <IND> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id: from_chat_id, msg_ids:\n            assert chat_id is not None\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not msgs.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not msgs.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = msg_ids\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert chat_id is not None \n return self.model.yanked_msgs \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        assert chat_id is not None\n        return self.model.yanked_msgs\n    from_chat_id, msg_ids = self.model.yanked_msgs\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n <IND> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n            assert chat_id is not None\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id.call(self.model.yanked_msgs) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id.call(self.model.yanked_msgs)\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n <DED> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n    assert chat_id is not None\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs is not None: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs is not None:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n if not chat_id: \n <IND> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if not chat_id:\n            assert chat_id is not None\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = str(self.model.yanked_msgs) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = str(self.model.yanked_msgs)\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n \n from_chat_id: from_chat_id \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n            \n            from_chat_id: from_chat_id\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert chat_id is not None \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        assert chat_id is not None\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        assert chat_id is not None\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert chat_id is not None \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        assert chat_id is not None\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        assert chat_id is not None\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert self.model.yanked_msgs is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        assert self.model.yanked_msgs is not None\n        return\n    from_chat_id, msg_ids = self.model.yanked_msgs\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        assert chat_id is not None\n        return\n    from_chat_id, msg_ids = self.model.yanked_msgs\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        assert chat_id is not None\n        return\n    from_chat_id, msg_ids = self.model.yanked_msgs\n    assert chat_id is not None\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id: from_chat_id <IND> self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n            from_chat_id: from_chat_id  self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n \n from_chat_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n            \n            from_chat_id = self.model.yanked_msgs\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n if not chat_ids: \n <IND> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if not chat_ids:\n            assert chat_id is not None\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id: to_id \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id: to_id\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id(msg_ids = self.model.yanked_msgs) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id(msg_ids = self.model.yanked_msgs)\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> from_chat_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n                from_chat_id = self.model.yanked_msgs\n                self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not msg_ids: \n <IND> return \n <DED> from_chat_id, msg_ids = msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not msg_ids:\n            return\n        from_chat_id, msg_ids = msg_ids\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <IND> from_chat_id.call(self.model.yanked_msgs) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n                from_chat_id.call(self.model.yanked_msgs)\n                self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, msg_ids) \n assert isinstance(chat_id, from_chat_id, msg_ids) \n assert isinstance(chat_id, from_chat_id) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert isinstance(chat_id, msg_ids)\n            assert isinstance(chat_id, from_chat_id, msg_ids)\n            assert isinstance(chat_id, from_chat_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n assert isinstance(chat_id, from_chat_id, msg_ids) \n assert isinstance(chat_id, from_chat_id) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert isinstance(chat_id, from_chat_id, msg_ids)\n            assert isinstance(chat_id, from_chat_id, msg_ids)\n            assert isinstance(chat_id, from_chat_id)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id: from_chat_id <DED> self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n    from_chat_id: from_chat_id  self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            assert self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return <DED> from_chat_id: from_chat_id \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return  from_chat_id: from_chat_id\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id.call(self.model.yanked_msgs) \n self.tg.forward_msgs(chat_id, from_chat_id.call(msg_ids)) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id.call(self.model.yanked_msgs)\n        self.tg.forward_msgs(chat_id, from_chat_id.call(msg_ids))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n if not chat_ids: \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if not chat_ids:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n if not chat_id: \n <IND> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if not chat_id:\n            assert chat_id is not None\n            self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "tensorflow/tfx",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx",
    "commit": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_code": "class BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "target_code": "\n<DED>class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.BaseBeam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.BaseBeam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, bac.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, bac.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <IND> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC, base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC, base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n metaclass: abc.ABC, base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nmetaclass: abc.ABC, base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n B.BaseBeamExecutor: \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nB.BaseBeamExecutor:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC, base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC, base_beam_executor.BaseBeamExecutor)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl_components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl_components.base.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor ):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n    if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=\"abc.ABC\"], base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass=\"abc.ABC\"], base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass(abc.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass=abc.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not tfx.dsl.components.base.base_beam_executor: \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not tfx.dsl.components.base.base_beam_executor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n B.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nB.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.BaseBeam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.BaseBeam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> assert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\nassert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor, abc.ABC\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND> if not tfx.dsl.components.base.base_beam_executor: \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n    if not tfx.dsl.components.base.base_beam_executor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> \"\"\"Base class for tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\" \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    \"\"\"Base class for tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> assert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\nassert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> assert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor.BaseBeamEx",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\nassert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor.BaseBeamEx\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nbase_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND> if not tfx.dsl.components.base.base.base_beam_executor.BaseBeamExecutor: \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n    if not tfx.dsl.components.base.base.base_beam_executor.BaseBeamExecutor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base_beam_executor.BaseBeamExecutor, abc.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base_beam_executor.BaseBeamExecutor, abc.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.Base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.Base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> return tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n        return tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND> \"\"\"Base class for tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n        \"\"\"Base class for tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> assert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor.BaseBe",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\nassert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor.BaseBe\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> assert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    if not isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\nassert isinstance(tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\nif not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl_components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl_components.base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base_beam_executor.BaseBeamExecutor, bac.ABC): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base_beam_executor.BaseBeamExecutor, bac.ABC):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor: \n <IND> if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor:\n    if not tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor): \n <IND>",
      "pred_parsed": "class BaseExampleGenExecutor(\nwith_metaclass=abc.ABC, base_beam_executor.BaseBeamExecutor):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND> \"\"\"Base class for tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\": \n",
      "pred_parsed": "class BaseExampleGenExecutor(\ntfx.dsl.components.base.base_beam_executor.BaseBeamExecutor):\n    \"\"\"Base class for tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor\":\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jwkvam/bowtie",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie",
    "commit": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "filename": "bowtie/_component.py",
    "source_code": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):",
    "target_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(metaclass=_Maker):\n    <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
    "warning_line": 240,
    "pred_top-1": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(obj): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(obj):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component: \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component:\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=_Maker, object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass:bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass:bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=\"bowtie._component._Maker\", object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=\"bowtie._component._Maker\", object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(with_metaclass(_Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(mit_metaclass(_Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(mit_metaclass(_Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(os.metaclass(bowtie._component._Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(os.metaclass(bowtie._component._Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Obj): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Obj):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component[metaclass=\"bowtie._component._Maker\", object]: \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component[metaclass=\"bowtie._component._Maker\", object]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(mit_metaclass(bowtie._component._Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(mit_metaclass(bowtie._component._Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Operator, bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Operator, bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(object, metaclass:bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(object, metaclass:bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass:bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass:bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(object, metaclass=_Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(object, metaclass=_Maker):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Object, with_metaclass(_Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Object, with_metaclass(_Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Operator, Bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Operator, Bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Operator, bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Operator, bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\", object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\", object):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(MetaClass:bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(MetaClass:bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(with_metaclass(_Maker, bowtie._component._Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, bowtie._component._Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(OwnProperty.With_metaclass(bowtie._component._Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(OwnProperty.With_metaclass(bowtie._component._Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component[metaclass=_Maker, object]: \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component[metaclass=_Maker, object]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass: \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(op, bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(op, bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(self, _Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(self, _Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(pos, bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(pos, bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(os): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(os):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Operator, Bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Operator, Bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(_Maker, bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(OwnProperty.with_metaclass(bowtie._component._Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(OwnProperty.with_metaclass(bowtie._component._Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(OB): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(OB):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(self.metaclass(bowtie._component._Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(self.metaclass(bowtie._component._Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component[metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"]: \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component[metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"]:\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(Operation, Bowtie._component._Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(Operation, Bowtie._component._Maker):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(self._metaclass(_Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(self._metaclass(_Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(op, bowtie._component._Maker, object): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(op, bowtie._component._Maker, object):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=_Maker):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(self.metaclass(_Maker, object)): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(self.metaclass(_Maker, object)):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(object, _Maker): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(object, _Maker):\n    \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"]): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(metaclass=\"bowtie._component._Maker\", metaclass=\"bowtie._component._Maker\"]):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(pos): \n <IND>",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nclass Component(pos):\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "golemfactory/clay",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/golemfactory-clay",
    "commit": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
    "warning_line": 24,
    "pred_top-1": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Match: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Match:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[bool]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[bool]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[bool], typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[bool], typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> bool: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> bool:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> str: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> str:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[str], typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[str], typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing[str], typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing[str], typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Int(typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Int(typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> Optional[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> match(typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> match(typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> str(typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> str(typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> str = (typing.Optional[bool], typing.Optional[typing.Match]) \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> str = (typing.Optional[bool], typing.Optional[typing.Match])\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ):\n                \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[int], typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[int], typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Equal(typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Equal(typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing[int], typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing[int], typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> list[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> list[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Match(typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Match(typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> tun(typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> tun(typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Integer[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Integer[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Function[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Function[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[(bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[(bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[type]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[type]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> Match: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> Match:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> str = (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> str = (typing.Optional[bool], typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[()], typing.Optional[typing.Match]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[()], typing.Optional[typing.Match]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[typing.Optional[bool], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing[typing.Optional[bool], typing.Optional[typing.Match]]: \n <DED>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing[typing.Optional[bool], typing.Optional[typing.Match]]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> str = (typing.Optional[bool], typing.Optional[typing.Match]) -> str: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> str = (typing.Optional[bool], typing.Optional[typing.Match]) -> str:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[(bool), typing.Optional[typing.Match]): \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[(bool), typing.Optional[typing.Match]):\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[[], typing.Optional[typing.Match]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[[], typing.Optional[typing.Match]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[[]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[[]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing[typing.Optional[bool], typing.Optional[typing.Match]]: \n \n",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing[typing.Optional[bool], typing.Optional[typing.Match]]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[()]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[()]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Equal(typing.Optional[bool], typing.Optional[typing.Match]) \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Equal(typing.Optional[bool], typing.Optional[typing.Match])\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> None: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> None:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Optional[(bool], typing.Optional[typing.Match])]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Optional[(bool], typing.Optional[typing.Match])]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing[typing.Match, typing.Optional[bool]]: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing[typing.Match, typing.Optional[bool]]:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> match(typing.Optional[bool], typing.Optional[typing.Match]) \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> match(typing.Optional[bool], typing.Optional[typing.Match])\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]: \n <DED>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]:\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> match(typing.Optional[bool], typing.Optional[typing.Match]) -> match: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> match(typing.Optional[bool], typing.Optional[typing.Match]) -> match:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "awaited_messages: typing.Optional[list] = None \n ) -> typing.Int(typing.Optional[bool], typing.Optional[typing.Match]) -> None: \n <IND>",
      "pred_parsed": "            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Int(typing.Optional[bool], typing.Optional[typing.Match]) -> None:\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_reallife_fastapi.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)\ncategory= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)\ncategory = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\ncategory= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name= ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100).decode() \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100).decode()\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name= ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\ncategory = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category: ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String[max_length=100] \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String[max_length=100]\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name += ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name += ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar[max_length=100] \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar[max_length=100]\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)\n        category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n <DED> id += ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id += ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=150) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=150)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True), \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True),\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar[nullable=True] \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar[nullable=True]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python",
    "commit": "60895366c0f50844af2737130ed98c2510e90060",
    "filename": "ciphers/trafid_cipher.py",
    "source_code": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    tmp, thisPart = \"\", \"\"",
    "target_code": "\n<DED>def __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `(str, str, str)` is not a valid type.",
    "warning_line": 19,
    "pred_top-1": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> str:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> dict: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> dict:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> tmp: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> tmp:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> elif isinstance(str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> elif isinstance(str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> bool: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> bool:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> List[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> List[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> encrypt(str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> encrypt(str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> list[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> list[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> int = (str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> int = (str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> str:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> undefined: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> undefined:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <IND> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> str:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> def: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> def:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> f: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> f:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> msg: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> msg:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> _: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> _:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> '': \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> '':\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> cb: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> cb:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> cb(str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> cb(str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: str) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: str) -> str:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> a[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> a[str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> str:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> isinstance(str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> isinstance(str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> null: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> null:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> args: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> args:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def __decryptPart(str, character2Number: dict) -> dict: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(str, character2Number: dict) -> dict:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def __decryptPart(str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(str, character2Number: dict) -> str:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> void dict: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> void dict:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> cb(): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> cb():\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> [str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> [str, str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> String(str, str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> String(str, str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n \n def __decryptPart(messagePart: str, character2Number: dict) -> str: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "\ndef __decryptPart(messagePart: str, character2Number: dict) -> str:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> List[str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> List[str, str]:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> func: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> func:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> ie: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> ie:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> dic: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> dic:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> string: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> string:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> url: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> url:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> id: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> id:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: str) -> dict: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: str) -> dict:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> 0: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> 0:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> str: \n \n tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> str:\n\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> None: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> None:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> uint32: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> uint32:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> elif isinstance(str, str): \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> elif isinstance(str, str):\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> e: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> e:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> res: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> res:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> db: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> db:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def __decryptPart(messagePart: str, character2Number: Optional[dict]) -> dict: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: Optional[dict]) -> dict:\n    tmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_queryset_level_methods.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
    "warning_line": 58,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\ntext = ormar.String(max_length=500)\ncategory = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\ntext = ormar.String(max_length=500)\ncategory= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text= ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    text= ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n        category = ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\ncategory = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        text = ormar.String(max_length=500)  category = ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\ntext = ormar.String(max_length=500)  category = ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\ntext = ormar.String(max_length=500)  category= ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n        category= ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        text = ormar.String(max_length=500)  category= ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        text = ormar.String(max_length=500)\n        category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\ncategory= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        text = ormar.String(max_length=500)\n        category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category: ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n <DED> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\ntext = ormar.String(max_length=500)\ncategory = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n <IND> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        text = ormar.String(max_length=500)\n        category = ormar.ForeignKey(Category)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-39": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text= ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    \n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n categories= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    categories= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text= ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "\n <DED> key = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    key = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "<IND> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n <IND> id= ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    text= ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n texte = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    texte = ormar.String(max_length=500)\n    category = ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500), \n category= ormar.ForeignKey(Category) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500),\n    category= ormar.ForeignKey(Category)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_fastapi_usage.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)\ncategory= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)\ncategory = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\ncategory= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\ncategory = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category: ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name= ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)\n        category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name= ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, Nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, Nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100), \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100),\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, Nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, Nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> user_id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    user_id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, NULLABLE=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, NULLABLE=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True), \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True),\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True), \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True),\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, NUllable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, NUllable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "brainglobe/brainrender",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/brainglobe-brainrender",
    "commit": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "filename": "brainrender/scene.py",
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `[str, vedo.Plane]` is not a valid type.",
    "warning_line": 336,
    "pred_top-1": {
      "pred": "self, \n plane: vedo.Plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self, \n plane: List[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: List[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self, \n plane: Optional[Plane] = None, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Plane] = None,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self, \n plane: str(Plane), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: str(Plane),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self, \n plane, vedo.Plane: vedo.Plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane, vedo.Plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "self, \n plane: Optional[Plane] = [str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Plane] = [str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "self, \n plane: [str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "self, \n plane: list[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: list[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self, \n plane: vedo[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: vedo[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self, \n plane: Optional[Plane] = (str, Plane), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Plane] = (str, Plane),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self, \n plane: [str, vedo.Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: [str, vedo.Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self, \n plane: TypeError([str, Plane], Plane), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: TypeError([str, Plane], Plane),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self, \n plane: Element[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Element[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self, \n plane: Optional[Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self, \n plane: typing.Optional[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: typing.Optional[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self, \n plane: vedo.Optional[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: vedo.Optional[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self, \n plane: Dict[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Dict[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self, \n plane: Vedo.Plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self, \n plane: Optional[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self, \n plane: Type[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Type[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self, \n plane: Optional[Plane](str, Plane), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Plane](str, Plane),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self, \n plane: TypeError(str, Plane), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: TypeError(str, Plane),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self, \n plane: Optional[[str, Plane]] = None, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[[str, Plane]] = None,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self, \n plane: str, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: str,\n        actors=None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "self, \n plane: Optional[str, Plane] = None, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[str, Plane] = None,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self, \n plane: Optional[[str, Plane]], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[[str, Plane]],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self, \n plane: TypeError, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: TypeError,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self, \n plane: Optional[Pool] = [str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Pool] = [str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self, \n plane: [str, Plane] \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: [str, Plane]\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self, \n plane: V[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: V[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self, \n plane: Map[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Map[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self, \n plane: Optional[Plane](str), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Plane](str),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self, \n plane: Vedo[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Vedo[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self, \n plane: Markdown[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Markdown[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self, \n plane=Vedo.Plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane=Vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self, \n plane: [str, vedo.Plane] \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: [str, vedo.Plane]\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "self, \n plane: TypeError([str, Plane], PlaneError), \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: TypeError([str, Plane], PlaneError),\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self, \n plane: Optional[plane] = None, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[plane] = None,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self, \n plane = [str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane = [str, Plane],\n        actors=None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "self, \n plane: Schemas[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Schemas[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self, \n plane: Navigator[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Navigator[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self, \n plane: Optional[Pool] = None, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[Pool] = None,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self, \n plane: Optional[[str, Plane], Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Optional[[str, Plane], Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "self, \n plane: vedo.Plane, <DED> actors=None, \n",
      "pred_parsed": "        self,\n    plane: vedo.Plane,  actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self, \n plane: vedo[str, Plane] \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: vedo[str, Plane]\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self, \n plane, vedo.Plane: vedo[str, Plane], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane, vedo.Plane: vedo[str, Plane],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self, \n plane: vedo.Plane, \n actors=None, <IND>",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n            actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self, \n plane: Dict[str, Plane]], \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: Dict[str, Plane]],\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self, \n plane: vedo.Plane, \n actors=None, <DED>",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n    actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self, \n plane: options.Plane, \n actors=None, \n",
      "pred_parsed": "        self,\n        plane: options.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_reallife_fastapi.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 48,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)\ncategory= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)\ncategory = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n        category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\ncategory= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)  category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\ncategory = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nname = ormar.String(max_length=100)  category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)\n        category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name= ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n <DED> let id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    let id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        name = ormar.String(max_length=100)\n        category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-35": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100), \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100),\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "\n \n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    \n    \n    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n <DED> let id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    let id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category: ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n name= ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    name= ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n <DED> id = ormar.Indeger(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Indeger(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> assert ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    assert ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> id = ormar.Indeger(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Indeger(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100), \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100),\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n <DED>  <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n <DED> identity_id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    identity_id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n <DED> assert ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    assert ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n <DED> return ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "pred_parsed": "    return ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category= ormar.ForeignKey(Category, nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "freqtrade/freqtrade",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade",
    "commit": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "filename": "freqtrade/indicator_helpers.py",
    "source_code": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    magic = pi * sqrt(2) / smoothing",
    "target_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `type(pandas.Series)` is not a valid type.",
    "warning_line": 16,
    "pred_top-1": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> tuple[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> tuple[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> [Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> [Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> List[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Series:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> spandas[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> spandas[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> spandas.Series: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> spandas.Series:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> bool: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> bool:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float, Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float, Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list['series']: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list['series']:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> int = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> int = 6):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list['Series']: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> list['Series']:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> python_type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> python_type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pytorch(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pytorch(Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float, series: Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float, series: Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> this._type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> this._type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> perf: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> perf:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> this.type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> this.type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Types: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Types:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float, Series: Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float, Series: Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> params: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> params:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Type(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas.Type(Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float, series=Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float, series=Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> panades[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> panades[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float, series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float, series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> lang.type(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> lang.type(Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> \"\": \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> \"\":\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas.Type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Pandas.Type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float, Series) -> str: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float, Series) -> str:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas[Series]:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> \"Series\": \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> \"Series\":\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> elif: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> elif:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> lang.type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> lang.type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> _type(Series):\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> undefined: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> undefined:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> python.Type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> python.Type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> '': \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> '':\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> str:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pid: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pid:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Schedule: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Schedule:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> window.Type: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> window.Type:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "pred_parsed": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> pandas:\n    magic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Flax-Network/flax-blockchain",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Flax-Network-flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/util/Conditions.py",
    "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:",
    "target_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
    "warning_line": 43,
    "pred_top-1": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <DED> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]: \n <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]:\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <DED> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = []\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n \n d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = } } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = } }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] <DED> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = []  for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = () => None: \n <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = () => None:\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n \n d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = []\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]: \n \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]:\n    \n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> str: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    str: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair, None]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair, None]] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode], List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode], List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = 1) -> List[ConditionVarPair]: \n <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = 1) -> List[ConditionVarPair]:\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]]:\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = * () -> List[ConditionVarPair]: \n <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = * () -> List[ConditionVarPair]:\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]: \n <DED> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]:\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] =] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] =] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \\ } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = \\ }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: <IND> <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:   d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode: List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: <DED> <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:   d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = ^ } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = ^ }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: List[ConditionOpcode, List[ConditionVarPair]] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] <IND> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n        d: Dict[ConditionOpcode, List[ConditionVarPair]] = []  for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \"\" \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = \"\"\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } <DED> for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = { }  for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> str: List[ConditionVarPair] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    str: List[ConditionVarPair] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = 1) = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = 1) = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: <IND>",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = []\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [] \n for _ in conditions: \n \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]: \n <IND> _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = () -> List[ConditionVarPair]:\n        _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]]] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]]] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode]: List[ConditionVarPair] = [] \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode]: List[ConditionVarPair] = []\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = [], None] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = [], None] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] =][0] = { } \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] =][0] = { }\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { } \n for _ in conditions: <IND>",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = { }\n        for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = ----- \n for _ in conditions: \n",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = -----\n    for _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "asyml/texar-pytorch",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/metric/generation.py",
    "source_code": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):",
    "target_code": "\n    <DED>def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
    "warning_line": 69,
    "pred_top-1": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> def add(self, predicted: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def add(self, predicted: List[str]), labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]), labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric()) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric()) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n <DED> def add( <DED> self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(  self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "\n <DED> def add( \n self, predicted: List[str], labels: List[str] \n ) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(\n    self, predicted: List[str], labels: List[str]\n    ) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]): \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]):\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\nfor (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def add( <IND> self, predicted: List[str], labels: List[str] \n ) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(  self, predicted: List[str], labels: List[str]\n    ) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "\n \n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    \n    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric(List[str])) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric(List[str])) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric[str], str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric[str], str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <IND> def add(self, predicted: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric(List[str], str])) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric(List[str], str])) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <IND> def add(self, predicted: List[str], labels: StreamingMetric) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric[List[str]]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric[List[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n    \n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: Optional[List[str]]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: Optional[List[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def add(self, predicted: List[str]], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <DED> def add(self, predicted: List[str]) -> List[str]: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]) -> List[str]:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def add(self, predicted: StreamingMetric[List[str], str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: StreamingMetric[List[str], str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "\n <DED> def add( <DED> self, predicted: List[str], labels: StreamingMetric) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(  self, predicted: List[str], labels: StreamingMetric) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def add(self, predicted: List[str]), labels: StreamingMetric()) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]), labels: StreamingMetric()) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric) -> None:\nfor (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> def add(self, predicted: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]) -> None:\nfor (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: Union[List[str], str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: Union[List[str], str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def add( <IND> self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(  self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "\n <DED> def add( \n self, predicted: List[str], labels: StreamingMetric() \n ) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(\n    self, predicted: List[str], labels: StreamingMetric()\n    ) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def add(self, predicted: List[str]]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def add(self, predicted: List[str]), labels: List[str]: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]), labels: List[str]:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <IND> def add(self, predicted: List[str]), labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]), labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n \n def add(self, predicted: List[str], labels: StreamingMetric) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    \n    def add(self, predicted: List[str], labels: StreamingMetric) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: StreamingMetric]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: StreamingMetric]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def add(self, predicted: tuple[List[str], str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: tuple[List[str], str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): <IND>",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n            for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: <IND> <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:   for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n \n def add(self, predicted: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    \n    def add(self, predicted: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def add( <IND> self, predicted: List[str], labels: List[str] \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(  self, predicted: List[str], labels: List[str]\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def add( <DED> self, predicted: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(  self, predicted: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): <DED>",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: str) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: str) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def add( \n self, predicted: List[str], labels: List[str] \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(\n    self, predicted: List[str], labels: List[str]\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def add(self, predicted: List[str]) -> None: \n \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]) -> None:\n    \n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def add(self, predicted: List[str]) -> bool: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "pred_parsed": "    def add(self, predicted: List[str]) -> bool:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n \n",
      "pred_parsed": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "unit8co/darts",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/unit8co-darts",
    "commit": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "filename": "darts/models/theta.py",
    "source_code": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series",
    "target_code": "\n    <DED>def fit(self, ts):\n        <IND>super().fit(ts)\n        # Check univariate time series\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
    "warning_line": 218,
    "pred_top-1": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n <DED> def fit(self, ts, component_index=None): \n <IND> super().fit(ts, component_index=None) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=None):\n        super().fit(ts, component_index=None)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel[int]): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel[int]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel[int]):\n        super().fit(ts, component_index=UnivariateForecastingModel[int])\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None) -> None:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = None) -> None:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None) -> None:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "\n <DED> def fit(self, ts, component_index = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel(Component_index)): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel(component_index)) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel(Component_index)):\n        super().fit(ts, component_index=UnivariateForecastingModel(component_index))\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def fit(self, ts): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel(component_index)): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel(component_index)) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel(component_index)):\n        super().fit(ts, component_index=UnivariateForecastingModel(component_index))\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index=0) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None):\n        super().fit(ts, component_index=0)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel[int], series_index=UnivariateForecastingModel[int]): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel[int], series_index=UnivariateForecastingModel[int]):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-16": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = -1): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = -1):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = -1): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = -1):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n <IND> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = False): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = False):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel[int]): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel[int]):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel[int], series_index=UnivariateForecastingModel[int]): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel[int]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel[int], series_index=UnivariateForecastingModel[int]):\n        super().fit(ts, component_index=UnivariateForecastingModel[int])\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel(Component_index)): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel[int]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel(Component_index)):\n        super().fit(ts, component_index=UnivariateForecastingModel[int])\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <IND> def fit(self, ts: Optional[int], component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = 0): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = 0):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index: Optional[int] = -1): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = -1):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index=0) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = None):\n        super().fit(ts, component_index=0)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None) -> None:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = -1): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = -1):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel(component_index)): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel[int]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel(component_index)):\n        super().fit(ts, component_index=UnivariateForecastingModel[int])\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <IND> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index=0) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index=0)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "\n <DED> def fit( \n self, ts, component_index: Optional[int] = None \n ): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(\n    self, ts, component_index: Optional[int] = None\n    ):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "\n <IND> def fit(self, ts, component_index=None): \n <IND> super().fit(ts, component_index=None) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=None):\n        super().fit(ts, component_index=None)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-34": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None):\nsuper().fit(ts, component_index)\n# Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> def fit(self, ts: Optional[int]): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int]):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def fit( <IND> self, ts, component_index: Optional[int] = None \n ): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(  self, ts, component_index: Optional[int] = None\n    ):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None):\n        super().fit(ts, component_index])\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index: Optional[int]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None, component_index: Optional[int] = None):\n        super().fit(ts, component_index: Optional[int])\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None): \n <IND> super().fit(ts: Optional[int] = None) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None):\n        super().fit(ts: Optional[int] = None)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> def fit(self, ts: Optional[int] = None): \n <IND> super().fit(ts, component_index=0) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int] = None):\n        super().fit(ts, component_index=0)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index]) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = None):\n        super().fit(ts, component_index])\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel[int]): \n <IND> super().fit(ts, component_index=UnivariateForecastingModel[int], series) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel[int]):\n        super().fit(ts, component_index=UnivariateForecastingModel[int], series)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index=None): \n <IND> super().fit(ts, component_index=None) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index=None):\n        super().fit(ts, component_index=None)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def fit(self, ts, component_index = 0): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index = 0):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "\n <DED> def fit( \n self, ts, component_index: Optional[int] = None \n ) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(\n    self, ts, component_index: Optional[int] = None\n    ) -> None:\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "\n <DED> def fit(self, ts, component_index=UnivariateForecastingModel(Component_index)): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index=UnivariateForecastingModel(Component_index)):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def fit(self, ts, component_index: Optional[int]): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int]):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n <DED> def fit(self, ts: Optional[int], component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(self, ts: Optional[int], component_index: Optional[int] = None):\nsuper().fit(ts, component_index)\n# Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def fit( <DED> self, ts, component_index=None): \n <IND> super().fit(ts, component_index=None) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(  self, ts, component_index=None):\n        super().fit(ts, component_index=None)\n        # Check univariate time series\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "\n <DED> def fit( <DED> self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "pred_parsed": "    def fit(  self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "filename": "mythril/laser/smt/bitvecfunc.py",
    "source_code": "        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "target_code": "\n        if not isinstance(other, BitVec):\n            <IND>other = BitVec(z3.BitVecVal(other, self.size()))\n        <DED>return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        <IND>",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
    "warning_line": 145,
    "pred_top-1": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, \"BitVec\"]]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, \"BitVec\"]]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, BitVec]]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, BitVec]]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n            def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, \"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, \"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Int, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\") -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\") -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n            def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\":\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[Int, BitVec]]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[Int, BitVec]]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\", \"BitVecFunc\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\", \"BitVecFunc\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[str,...]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[str,...]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[str, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[str, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[\"BitVec\", \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[\"BitVec\", \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, \"BitVec\"], int]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, \"BitVec\"], int]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> super().__xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    super().__xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[str, str]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[str, str]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[\"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[\"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, \"BitVec\", \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, \"BitVec\", \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[[\"BitVec\", \"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[[\"BitVec\", \"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[\"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[\"BitVec\"], \"BitVecFunc\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\", \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\", \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[str, int]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[str, int]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[types.BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[types.BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[types[\"BitVec\"]]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[types[\"BitVec\"]]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int], \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int], \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, int]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, int]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[type[\"BitVec\"], \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[type[\"BitVec\"], \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int,...]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int,...]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[\"BitVec\", \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[\"BitVec\", \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[types.BitVec, int]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[types.BitVec, int]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n return _arithmetic_helper(self, else, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, else, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int, int]]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int, int]]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n        \n    def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "<DED> return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n            def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> super().__xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    super().__xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n    def __xor__(self, other: Union[int, BitVec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[Union[int,...]]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[Union[int,...]]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\": \n <IND>",
      "pred_parsed": "        return _arithmetic_helper(self, other, operator.or_)\n        \n    def __xor__(self, other: Union[int, bitvec]) -> \"BitVecFunc\":\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Ultimaker/Cura",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura",
    "commit": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_code": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
    "target_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
    "warning_line": 36,
    "pred_top-1": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'int'): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'int'):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'float'): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'float'):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(int) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(int)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -40): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -40):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: float, temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(int(temperature)) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(int(temperature))\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 0): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 0):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -64): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -64):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(window.temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(window.temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\", temperature: float): \n <IND> data = str(int) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\", temperature: float):\n        data = str(int)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -34): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -34):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\" \n temperature = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\n    temperature = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\"\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\"\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -1, int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -1, int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(int(temperature)) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float):\n        data = str(int(temperature))\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -31): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -31):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -64, int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -64, int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(height) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(height)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n <IND> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'int'): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'int'):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -1): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -1):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n <IND> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'float'): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: 'float'):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(int) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float):\n        data = str(int)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-31": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -23): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -23):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -30): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -30):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(temperature)): \n <IND> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(temperature)):\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int): \n <IND> data = str(int) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(int)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -160): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -160):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: minus0): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: minus0):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <IND> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-38": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -35): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: -35):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: PrinterOutputModel, temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(int, temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(int, temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(temperature)) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: str(temperature))\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\" <DED> temperature: int \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"  temperature: int\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temp) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temp)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: 0): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: 0):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"): \n <IND> data = str(int) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"):\n        data = str(int)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"), temperature: str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: int): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: float, temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\" \n data = str(int) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\n    data = str(int)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\" \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\"\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> def setTargetBedTemperature(self, printer, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "pred_parsed": "    def setTargetBedTemperature(self, printer, temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "pallets/werkzeug",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/datastructures.pyi",
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "warning_line": 52,
    "pred_top-1": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int == -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int == -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: list[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: list[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int == 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int == 1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: list = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: list = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: List[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: List[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int == -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int == -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int, SupportsIndex) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int, SupportsIndex) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V):...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int == 0-1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int == 0-1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, index: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, index: int, value: V) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: list[int], value: V) -> NoReturn:... \n def pop(self, index: list[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: list[int], value: V) -> NoReturn:...\n    def pop(self, index: list[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 0-1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = 0-1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index == -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index == -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: str = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: str = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n <DED> def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\ndef pop(self, index: int = -1) -> NoReturn:...\ndef reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int == 0) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int == 0) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 0) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = 0) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V,...) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V,...) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int == -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V):...\n    def pop(self, index: int == -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int === -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int === -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int || -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int || -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = 1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    \n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: list = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: list = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, index: list[int], value: V) -> NoReturn:... \n def pop(self, index: list[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, index: list[int], value: V) -> NoReturn:...\n    def pop(self, index: list[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value:... \n ) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value:...\n    ) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, index: int, value: V) -> NoReturn:... \n def pop(self, index: int == -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, index: int, value: V) -> NoReturn:...\n    def pop(self, index: int == -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int || -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int || -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int, SuppliedIndex) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int, SuppliedIndex) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n <DED> def pop(self, index: int == -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\ndef pop(self, index: int == -1) -> NoReturn:...\ndef reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n <IND> def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n        def pop(self, index: int = -1) -> NoReturn:...\n        def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: list.index = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: list.index = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index || int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index || int = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index == 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index == 1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: list[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: list[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = > 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = > 1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert( <DED> self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\ndef insert(  self, pos: int, value: V) -> NoReturn:...\ndef pop(self, index: int = -1) -> NoReturn:...\ndef reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... <IND>",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\n        def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index:... \n ) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index:...\n    ) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: index = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: index = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... <DED>",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V) -> NoReturn:...\n    def pop(self, index: int = -1) -> NoReturn:...\ndef reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: list[int] = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn:...\n    def insert(self, pos: int, value: V):...\n    def pop(self, index: list[int] = -1) -> NoReturn:...\n    def reverse(self) -> NoReturn:...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden",
    "commit": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "filename": "raiden/messages.py",
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        <IND>return cls(\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
    "warning_line": 1769,
    "pred_top-1": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ):\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "def from_dict( \n cls: typing.Optional[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Optional[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def from_dict( \n cls = typing.Type[typing.T_UpdatePFS], \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.Type[typing.T_UpdatePFS],\n    data = typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def from_dict( \n cls, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Message, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Message,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "def from_dict( \n cls: typing.T_UpdatePFS, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.T_UpdatePFS,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "def from_dict( \n cls: typing.Callable[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Callable[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "def from_dict( \n cls=typing.Type[typing.T_UpdatePFS], \n data=typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls=typing.Type[typing.T_UpdatePFS],\n    data=typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "def from_dict( \n cls: typing.Optional[typing.T_UpdatePFS], \n data: typing.Dict, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Optional[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ):\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls,\n    data,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "def from_dict( \n cls: typing.Type[T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <DED> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\nreturn cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Optional[typing.Dict], \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Optional[typing.Dict],\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n \n return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    \n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "def from_dict( \n cls: typing.Optional[typing.Type[T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Optional[typing.Type[T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "def from_dict( \n cls: typing.Type[Message], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[Message],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "def from_dict( <DED> cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(  cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "def from_dict( \n cls = typing.Type[typing.T_UpdatePFS], \n data = typing.Dict, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.Type[typing.T_UpdatePFS],\n    data = typing.Dict,\n    ):\n        return cls(\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "def from_dict( \n cls: typing.Optional[typing.T_UpdatePFS], \n data: typing.Optional[typing.Dict], \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Optional[typing.T_UpdatePFS],\n    data: typing.Optional[typing.Dict],\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "def from_dict( \n cls = typing.Optional[typing.T_UpdatePFS], \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.Optional[typing.T_UpdatePFS],\n    data = typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "def from_dict( \n cls: typing.Optional[typing.Type[T_UpdatePFS], \n data: typing.Dict, \n ]: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Optional[typing.Type[T_UpdatePFS],\n    data: typing.Dict,\n    ]:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "def from_dict( \n cls = typing.Callable[typing.T_UpdatePFS], \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.Callable[typing.T_UpdatePFS],\n    data = typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "def from_dict( \n cls: typing.Default[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Default[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "def from_dict( \n cls: typing.Dict, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Dict,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "def from_dict( \n cls: typing.Variable[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Variable[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "def from_dict( \n cls: typing.Message, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Message,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "def from_dict( \n cls: typing.Messages[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Messages[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "def from_dict( \n cls: typing.Set[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Set[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "def from_dict( <IND> cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(  cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS] \n data: typing.Dict \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS]\n    data: typing.Dict\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "def from_dict( \n cls: typing.T_UpdatePFS, \n data: typing.Dict, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.T_UpdatePFS,\n    data: typing.Dict,\n    ):\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "def from_dict( \n cls: typing.Type[type.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[type.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Message, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Message,\n    ):\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "def from_dict( \n cls = typing.T_UpdatePFS, \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.T_UpdatePFS,\n    data = typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "def from_dict( \n cls: typing.Callable[typing.T_UpdatePFS], \n data: typing.Dict, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Callable[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ):\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "def from_dict( \n cls = typing.Type(cls), \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.Type(cls),\n    data = typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "def from_dict( \n cls, \n data: typing.Message, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls,\n    data: typing.Message,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "def from_dict( \n cls = typing.Type[T_UpdatePFS], \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls = typing.Type[T_UpdatePFS],\n    data = typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "def from_dict( \n cls: typing.Type, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "def from_dict( \n cls: typing.Type.UpdatePFS, \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type.UpdatePFS,\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( <IND>",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n            return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( <DED>",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "def from_dict( \n cls, \n data: typing.Optional[typing.T_UpdatePFS], \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls,\n    data: typing.Optional[typing.T_UpdatePFS],\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: <IND> <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[typing.T_UpdatePFS],\n    data: typing.Dict,\n            ) -> typing.T_UpdatePFS:   return cls(\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "def from_dict( \n cls: typing.Type[[T]], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[[T]],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "def from_dict( \n cls: typing.Optional[typing.Type[T_UpdatePFS], \n data: typing.Dict, \n ): \n <IND> return cls( \n",
      "pred_parsed": "    def from_dict(\n    cls: typing.Optional[typing.Type[T_UpdatePFS],\n    data: typing.Dict,\n    ):\n        return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_new_annotation_style.py",
    "source_code": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
    "warning_line": 76,
    "pred_top-1": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email= ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email= ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-10": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email= ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nteam = ormar.ForeignKey(Team)\nemail = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-12": {
      "pred": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n <DED> id: ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n <DED> id: ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> id: ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email: ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n \n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    \nid = ormar.Integer(primary_key=True)\nteam= ormar.ForeignKey(Team)\nemail = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-18": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-19": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email= ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "<DED> <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-23": {
      "pred": "\n <DED> id: ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email: ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "\n <DED> id: int = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team: Optional[Team] = ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email= ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-29": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "\n <DED> id: ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) <IND> email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        team = ormar.ForeignKey(Team)  email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <DED> team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team: ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team: ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n        email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) <DED> email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nteam = ormar.ForeignKey(Team)  email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n <DED> id: str = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: str = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team.value) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team.value)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) <IND> team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)  team = ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team] \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team]\n    email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <DED> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\nemail = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <IND>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n        \n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": "\n <IND> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email= ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <DED>",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "\n <DED> id: ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email: ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team)\n    email: ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) <IND> email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n        team= ormar.ForeignKey(Team)  email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n \n <IND> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    \n        id = ormar.Integer(primary_key=True)\n        team = ormar.ForeignKey(Team)\n        email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "\n <DED> id= ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email: str = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id= ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team); \n email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team = ormar.ForeignKey(Team);\n    email = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) <DED> email = ormar.String(max_length=100) \n \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\nteam= ormar.ForeignKey(Team)  email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <IND> \n",
      "pred_parsed": "    id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n        email = ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "wemake-services/dotenv-linter",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/wemake-services-dotenv-linter",
    "commit": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "filename": "dotenv_linter/grammar/fst.py",
    "source_code": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
    "warning_line": 139,
    "pred_top-1": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n body: List[Comment, Statement] = field(default=list) \n",
      "pred_parsed": "    body: List[Comment, Statement] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n body = List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body = List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n body: List[List[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[List[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n body: List[Comment, Statement] = field(default=list) \n \n",
      "pred_parsed": "    body: List[Comment, Statement] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=list) \n \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=str) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: Optional[List[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n body: List[Core[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Core[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=global[list]) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=global[list])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n body: [List[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: [List[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n body: _List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: _List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n body: List[Callable[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Callable[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n body= List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body= List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n body: List[Child[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Child[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n body: List[Instance[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Instance[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n body: List[Comment, Statement] = field(default=str) \n",
      "pred_parsed": "    body: List[Comment, Statement] = field(default=str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n body: tuple[List[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: tuple[List[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n body: List[[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n body: List[Child[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Child[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n body: List[Coord[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Coord[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n body: Type[List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: Type[List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n body: Array[List[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: Array[List[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n body: List[Comment, Statement] = field(default=global[list]) \n",
      "pred_parsed": "    body: List[Comment, Statement] = field(default=global[list])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n body: List[union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n body: List[Field[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Field[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n body_: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body_: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n body: List[list[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[list[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n body: Liste[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: Liste[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=list) \n <IND>",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n        \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "\n body: List[Array[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[Array[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=list) \n <DED>",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "\n body=List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body=List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default_list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default_list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=null) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=null)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n body: list[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: list[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "\n body: List[Comment, Statement] = field(default=list) \n <IND>",
      "pred_parsed": "    body: List[Comment, Statement] = field(default=list)\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n body: List[List[Union[Comment, Statement]] = field(default=list) \n",
      "pred_parsed": "    body: List[List[Union[Comment, Statement]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n body: List[[Union[Comment, Statement]]] = field(default=list) \n",
      "pred_parsed": "    body: List[[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n body: List[Comment, Statement] = field(default=list) \n <DED>",
      "pred_parsed": "    body: List[Comment, Statement] = field(default=list)\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n body: List[Command, Statement] = field(default=list) \n",
      "pred_parsed": "    body: List[Command, Statement] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=_list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=_list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n body: List[Union[Comment, Statement,]] = field(default=list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement,]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=false) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=false)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n \n",
      "pred_parsed": "    body: Optional[List[Union[Comment, Statement]]] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n body: List[Comment, Statement,...] = field(default=list) \n",
      "pred_parsed": "    body: List[Comment, Statement,...] = field(default=list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n body: List[Union[Comment, Statement]] = field(default=to_list) \n",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default=to_list)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "python/mypy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy",
    "commit": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "filename": "mypy/checkstrformat.py",
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
    "warning_line": 175,
    "pred_top-1": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# Some services are provided by a MessageChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "# Some services are provided by a MessageChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-21": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: \"Mypy.checker.TypeChecker\" \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"Mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: \"Mypy.checker.TypeChecker\"\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"Mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-28": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# Some services are provided by a MessageChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a MessageChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: Mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: Mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"Mypy.checker.TypeChecker\" \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"Mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"Mypy.checker.TypeChecker\"\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"Mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored separately here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored separately here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: Mypy.checker.TypeChecker\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "# Some services are provided by a ExpressionChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored separately here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored separately here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# Some services are provided by a ExpressionChecker instance \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "pred_parsed": "    # Some services are provided by a ExpressionChecker instance\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance\n    exprchk: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "# Some services are provided by a TypeChecker instance. \n chk: \"Mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"Mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk: \"Mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"Mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: \"MessageBuilder\"\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "# Some services are provided by a MessageChecker instance. \n chk: MessageBuilder \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a MessageChecker instance.\n    chk: MessageBuilder\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: '' \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: '' \n # Some services are provided by a ExpressionChecker instance. \n exprchk: '' \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: ''\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: ''\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "# Some services are provided by a MessageBuilder instance. \n chk: '' \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: '' \n # Some services are provided by a ExpressionChecker instance. \n exprchk: '' \n \n",
      "pred_parsed": "    # Some services are provided by a MessageBuilder instance.\n    chk: ''\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: ''\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# Some services are provided by a MessageChecker instance. \n chk: MessageBuilder \n # This is shared with ExpressionChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: MessageBuilder \n \n",
      "pred_parsed": "    # Some services are provided by a MessageChecker instance.\n    chk: MessageBuilder\n    # This is shared with ExpressionChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: MessageBuilder\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "mesonbuild/meson",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson",
    "commit": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "filename": "mesonbuild/interpreterbase.py",
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
    "warning_line": 461,
    "pred_top-1": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: str \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: tmp_version \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: tmp_version\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: tmp_meson_version \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: tmp_meson_version\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: typing.Optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: typing.Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: \"\" \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n <DED>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: () # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: () # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n <IND>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <DED> \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Union[str,...] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Union[str,...] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: bool \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: bool\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = 0 # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version=None # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version=None # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: '' \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None <IND> \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: None # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: None # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = \"\" # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Type = None # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Type = None # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Type = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Type = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: typing.Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: typing.Optional[str]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: List[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: List[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: List[str] = None # type: List[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: List[str] = None # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Any # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Any # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[Str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[Str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: str \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Type.Optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Type.Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "# current meson version target within that if-block. <IND> self.tmp_meson_version: Optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.  self.tmp_meson_version: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: TRUE # type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: TRUE # type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: type: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: type: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: 'InterpreterBase' \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: 'InterpreterBase'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: List[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: List[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: type = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: type = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Type[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Type[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "# current meson version target within that if-block. <DED> \n self.tmp_meson_version: Optional[str] = None \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: str <DED> \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: option(str) \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: option(str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: str \n <IND>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: str\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: Default[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: Default[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: str <IND> \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: str\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n <IND>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Optional[str]\n            \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Type.Optional[str] \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Type.Optional[str]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n <DED>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: Optional[str]\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version:'str' \n \n",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version:'str'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "# current meson version target within that if-block. \n self.tmp_meson_version: str \n <DED>",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version: str\n    \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Project-MONAI/MONAILabel",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Project-MONAI-MONAILabel",
    "commit": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "filename": "monailabel/config.py",
    "source_code": "    APP_DIR: str = None\n    STUDIES: str = None",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
    "warning_line": 12,
    "pred_top-1": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------................------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[ <DED> * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
      "pred_parsed": "    APP_DIR: Optional[str] = None\nSTUDIES: Optional[  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------................---------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------................---------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------................---------------------------------------------------------------------------------------------------------------------------\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------................------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------................------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
      "pred_parsed": "    APP_DIR: Optional[str] = None\n    STUDIES: Optional[str] = None\n    \nn",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "OSInside/kiwi",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/OSInside-kiwi",
    "commit": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "filename": "kiwi/builder/kis.py",
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": ") \n self.image: str = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": ") \n self.image: str = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": ") \n self.image: optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": ") \n self.image: typing.Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: typing.Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": ") \n self.image: choice[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: choice[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": ") \n self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image_name: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": ") <IND> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )  self.image: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": ") <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )  self.image: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": ") \n self.image: Union[str, None] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: Union[str, None] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": ") \n self.image: Optional[str] = None <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n    self.image: Optional[str] = None  self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": ") \n self.image: option[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: option[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": ") \n self.image: Optional[str] = None <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n            self.image: Optional[str] = None  self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": ") \n self.image: Union[str,...] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: Union[str,...] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <IND>",
      "pred_parsed": "        )\n        self.image: Optional[str] = None\n            self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": ") \n self.image: options.str = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: options.str = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED>",
      "pred_parsed": "        )\n        self.image: Optional[str] = None\n    self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": ") \n self.image: str = [] \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = []\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": ") \n self.image: float = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: float = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": ") \n self.image: use[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: use[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": ") \n self.image: float = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: float = \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": ") \n self.images: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.images: Optional[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": ") \n self.image: float = 0 \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: float = 0\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": ") \n self.image: selecting[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: selecting[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": ") \n self.image: choosing[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: choosing[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": ") \n self.image: bool = False \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: bool = False\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": ") \n self.image: \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": ") \n self.image_name: str = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image_name: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": ") \n self.image_name: str = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image_name: str = \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": ") \n self.image: tuple[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: tuple[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": ") \n self.image: str = 0 \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = 0\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": ") \n self.image: union[str,...] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: union[str,...] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": ") \n self.image: float = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: float = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": ") \n self.image: Optional[str] = Nothing \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: Optional[str] = Nothing\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": ") \n self.image: str = () \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = ()\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": ") \n self.image: select[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: select[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": ") \n self.image: Options[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: Options[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": ") \n self.image: list[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: list[str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": ") \n self.image: using [str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: using [str] = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": ") \n self.image: str = '' <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n    self.image: str = ''  self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": ") \n self.image: str = \"5\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: str = \"5\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-42": {
      "pred": ") \n self.image: float = False \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: float = False\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": ") \n self.image: str = '' <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n            self.image: str = ''  self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": ") \n self.image: args = [] \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: args = []\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": ") \n self.image: str = \"\" <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n            self.image: str = \"\"  self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": ") \n self.image: return \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: return \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": ") \n self.image = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": ") \n self.image: int = 0 \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: int = 0\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": ") \n self.image: \"\"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n        self.image: \"\"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": ") \n self.image: str = \"\" <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "pred_parsed": "        )\n    self.image: str = \"\"  self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "microsoft/msticpy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy",
    "commit": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
    "warning_line": 50,
    "pred_top-1": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = None\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\"\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = '' \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = ''\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str | Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str | Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "ioc: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = [] \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = []\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\n        result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "ioc: str <IND> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str  ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: options.str = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: options.str = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = None\n    query_subtype: Optional[str] = None\n        result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "ioc: str <DED> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str  ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "ioc: str \n ioc_type: Optional[str] = str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "ioc: str \n ioc_type: str <IND> query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n        ioc_type: str  query_subtype: Optional[str] = None\n        result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str <DED> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\nquery_subtype: str  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: option[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: option[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str <IND> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n        query_subtype: str  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str; \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str;\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-22": {
      "pred": "ioc: str \n ioc_type: str <DED> query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\nioc_type: str  query_subtype: Optional[str] = None\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None <DED> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\nquery_subtype: Optional[str] = None  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None <IND> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n        query_subtype: Optional[str] = None  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = () \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = ()\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = None\n    query_subtype: Optional[str] = None\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "ioc: str \n <DED> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\nioc_type: str\nquery_subtype: Optional[str] = None\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None <IND> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = None\n        query_subtype: Optional[str] = None  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None <DED> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: Optional[str] = None\nquery_subtype: Optional[str] = None  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "ioc: str \n \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    \n    ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-32": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: typing.Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: typing.Optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "ioc: str \n <IND> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n        ioc_type: str\n        query_subtype: Optional[str] = None\n        result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = Optional[str] \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = Optional[str]\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"\", \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\",\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Options.str = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Options.str = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "ioc: str \n ioc_type: Str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: Str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "ioc: str \n self.ioc_type: str \n self.query_subtype: str = \"\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    self.ioc_type: str\n    self.query_subtype: str = \"\"\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "ioc: str \n Ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    Ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: options[str] = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: options[str] = None\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"\" \n result: bool = False <IND>",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\"\n        result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str || \"\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str || \"\"\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str | None = None \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str | None = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"4\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"4\"\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "ioc: str <DED> ioc_type: str \n query_subtype: str = \"\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str  ioc_type: str\n    query_subtype: str = \"\"\n    result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"SearchResult\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"SearchResult\"\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"\" <IND> result: bool = False \n",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n        query_subtype: str = \"\"  result: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "ioc: str \n ioc_type: str <DED> query_subtype: str = \"\" \n result: bool = False \n",
      "pred_parsed": "    ioc: str\nioc_type: str  query_subtype: str = \"\"\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "ioc: str \n ioc_type: str \n query_subtype: str = \"\" \n result: bool = False <DED>",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\"\nresult: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "instadeepai/Mava",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/instadeepai-Mava",
    "commit": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "filename": "mava/systems/tf/mappo/system.py",
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
    "warning_line": 153,
    "pred_top-1": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agent\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in count(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in count(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights is not None else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights is not None else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights is None else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights is None else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in list(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in list(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i = 0, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i = 0, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else Agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else Agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shares_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shares_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self._agent_net_config: { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config: {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n \\ \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            \\\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n { \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            {\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights or agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights or agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i in enumerate(agents) \n agent: agent.split(\"_\")[0] \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i in enumerate(agents)\n            agent: agent.split(\"_\")[0]\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <DED> self._agent_net_config = { \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n        }  self._agent_net_config = {\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights are None else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights are None else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i=0, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i=0, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self._agent_net_config = { \n agent: broker.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: broker.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <DED> self._agent_net_config = { \n agent: agent.split(\"_\")[0] \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n        }  self._agent_net_config = {\n        agent: agent.split(\"_\")[0]\n        for a_i, agent in enumerate(agents)\n        }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights are not None \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights are not None\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <DED> self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n        }  self._agent_net_config = {\n        agent: agent.split(\"_\")[0] if shared_weights else agents\n        for a_i, agent in enumerate(agents)\n        }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights enumerate(agents) \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights enumerate(agents)\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self._agent_net_config = { \n agent: Agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: Agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self._agent_net_config = { \n agent: dict[agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: dict[agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in count in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in count in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <IND>",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n                }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) <IND> self._agent_net_config = { \n agent: agent.split(\"_\")[0] \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)  self._agent_net_config = {\n                agent: agent.split(\"_\")[0]\n                for a_i, agent in enumerate(agents)\n                }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n self._agent_net_config = { \n agent: agent.split(\"_\")[0] \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n            self._agent_net_config = {\n            agent: agent.split(\"_\")[0]\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "self._agent_net_config = { \n agent: agent.split('_'[0]) if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split('_'[0]) if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents <IND> for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents  for a_i, agent in enumerate(agents)\n                }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if share_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if share_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0], if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0], if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "self._agent_net_config = { <DED> agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {  agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) <IND> self._agent_net_config = { \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)  self._agent_net_config = {\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if used_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if used_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } <IND> self._agent_net_config = { \n agent: agent.split(\"_\")[0] \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n                }  self._agent_net_config = {\n                agent: agent.split(\"_\")[0]\n                for a_i, agent in enumerate(agents)\n                }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents <DED> for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n        agent: agent.split(\"_\")[0] if shared_weights else agents  for a_i, agent in enumerate(agents)\n        }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i in enumerate(agents) \n agent: agent.split(\"_\")[0] \n for agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i in enumerate(agents)\n            agent: agent.split(\"_\")[0]\n            for agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "self._agent_net_config = { <IND> agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {  agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-45": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i (agent in enumerate(agents)) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i (agent in enumerate(agents))\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i in enumerate(agents) \n agent in enumerate(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i in enumerate(agents)\n            agent in enumerate(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i in enumerate(agents) \n agent: agent.split(\"_\")[0] \n self._agent_net_config = { \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i in enumerate(agents)\n            agent: agent.split(\"_\")[0]\n            self._agent_net_config = {\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(Agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents\n            for a_i, agent in enumerate(Agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights is not None else agents \n for a_i, agent in count(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights is not None else agents\n            for a_i, agent in count(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in count(agents) \n } \n",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agent\n            for a_i, agent in count(agents)\n            }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "kinnala/scikit-fem",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/kinnala-scikit-fem",
    "commit": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "filename": "skfem/assembly/dofs.py",
    "source_code": "    topo: Mesh = None\n    element: Element = None",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
    "warning_line": 171,
    "pred_top-1": {
      "pred": "\n topo: Optional[Mesh] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[Mesh] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "\n topo: Optional[Mash] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[Mash] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n topo: Optional[M Mesh] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[M Mesh] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n topo: Mesh = \"\" \n element: Element = \"\" \n \n",
      "pred_parsed": "    topo: Mesh = \"\"\n    element: Element = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n topo: Optional[Mach] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[Mach] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n topo: Mesh = \"\" \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh = \"\"\n    element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n topo: Mesh = [] \n element: Element = [] \n \n",
      "pred_parsed": "    topo: Mesh = []\n    element: Element = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n topo: Mesh = False \n element: Element = False \n \n",
      "pred_parsed": "    topo: Mesh = False\n    element: Element = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n topo: Mesh = Optional[Mesh] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Mesh = Optional[Mesh] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n topo: Mesh | None = None \n element: Element | None = None \n \n",
      "pred_parsed": "    topo: Mesh | None = None\n    element: Element | None = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "\n topo: Optional[MeSH] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[MeSH] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n topo: List[Mesh] = None \n element: List[Element] = None \n \n",
      "pred_parsed": "    topo: List[Mesh] = None\n    element: List[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "\n topo: Optional[Meash] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[Meash] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "\n topo: Mesh = () => None \n element: Element = () \n \n",
      "pred_parsed": "    topo: Mesh = () => None\n    element: Element = ()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n topo: Mesh: Optional[Mesh] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Mesh: Optional[Mesh] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n topo: Mesh = [] \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh = []\n    element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n topo: Optional[mesh] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[mesh] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n topo: Mesh = '' \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh = ''\n    element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n topo: Mesh \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh\n    element: Element\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-20": {
      "pred": "\n topo: Mesh = \"undefined\" \n element: Element = \"undefined\" \n \n",
      "pred_parsed": "    topo: Mesh = \"undefined\"\n    element: Element = \"undefined\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "\n topo: Mesh = '' \n element: Element = '' \n \n",
      "pred_parsed": "    topo: Mesh = ''\n    element: Element = ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n topo: Optional[M mesh] = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Optional[M mesh] = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n topo: Mesh = bool = None \n element: Element = bool \n \n",
      "pred_parsed": "    topo: Mesh = bool = None\n    element: Element = bool\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n topo: Mesh[0] = None \n element: Element[1] = None \n \n",
      "pred_parsed": "    topo: Mesh[0] = None\n    element: Element[1] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n topo: Options.M Mesh = None \n element: Optional[Element] = None \n \n",
      "pred_parsed": "    topo: Options.M Mesh = None\n    element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n topo: Optional[Mesh] = None \n element: Optional[Element] = None \n <IND>",
      "pred_parsed": "    topo: Optional[Mesh] = None\n    element: Optional[Element] = None\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n topo: Mesh = 'undefined' \n element: Element = '' \n \n",
      "pred_parsed": "    topo: Mesh = 'undefined'\n    element: Element = ''\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n topo: Mesh = None \n element: Element = \"\" \n \n",
      "pred_parsed": "    topo: Mesh = None\n    element: Element = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n topo: Mesh = \"\" \n element: Element <IND> \n",
      "pred_parsed": "    topo: Mesh = \"\"\n        element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n topo: Optional[Mesh] = None \n element: Optional[Element] = None \n <DED>",
      "pred_parsed": "    topo: Optional[Mesh] = None\n    element: Optional[Element] = None\n\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n topo: Mesh = bool = False \n element: Element = bool = False \n \n",
      "pred_parsed": "    topo: Mesh = bool = False\n    element: Element = bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n topo: Mesh = Optional[Mesh] = None \n element: Element = Optional[Dofs] = None \n \n",
      "pred_parsed": "    topo: Mesh = Optional[Mesh] = None\n    element: Element = Optional[Dofs] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "\n topo: Mesh = \"\" \n element: Element || Dofs = \"\" \n \n",
      "pred_parsed": "    topo: Mesh = \"\"\n    element: Element || Dofs = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n topo: Mesh = \"\" \n element: Element <DED> \n",
      "pred_parsed": "    topo: Mesh = \"\"\nelement: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n topo: Optional[Mesh] = None \n element: Optional[Element] = None <IND> \n",
      "pred_parsed": "    topo: Optional[Mesh] = None\n        element: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n topo: Mesh = [] \n element: Element || Dofs = [] \n \n",
      "pred_parsed": "    topo: Mesh = []\n    element: Element || Dofs = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n topo: Mesh = bool = False \n element: Element = bool \n \n",
      "pred_parsed": "    topo: Mesh = bool = False\n    element: Element = bool\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "\n topo: Optional[Mesh] = None \n element: Optional[Element] = None <DED> \n",
      "pred_parsed": "    topo: Optional[Mesh] = None\nelement: Optional[Element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n topo: Mesh = None \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh = None\n    element: Element\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n topo: Mesh <IND> element: Element \n \n",
      "pred_parsed": "    topo: Mesh  element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n topo: Mesh = \"\") \n element: Element = \"\" \n \n",
      "pred_parsed": "    topo: Mesh = \"\")\n    element: Element = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n topo: Mesh = False \n element: Element = \"\" \n \n",
      "pred_parsed": "    topo: Mesh = False\n    element: Element = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n topo: Mesh = 0 \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh = 0\n    element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n topo: Optional[Mesh] = None \n element: Optional[element] = None \n \n",
      "pred_parsed": "    topo: Optional[Mesh] = None\n    element: Optional[element] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n topo: Mesh = Optional[Mesh] = None \n element: Element = Optional[Dofs] \n \n",
      "pred_parsed": "    topo: Mesh = Optional[Mesh] = None\n    element: Element = Optional[Dofs]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n topo: Mesh = [] \n element: Element || Dofs[] = None \n \n",
      "pred_parsed": "    topo: Mesh = []\n    element: Element || Dofs[] = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n topo: Mesh = 0 \n element: Element = 0 \n \n",
      "pred_parsed": "    topo: Mesh = 0\n    element: Element = 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n topo: Mesh | None = None \n element: Element | None = 0 \n \n",
      "pred_parsed": "    topo: Mesh | None = None\n    element: Element | None = 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n topo: Mesh = () \n element: Element = () \n \n",
      "pred_parsed": "    topo: Mesh = ()\n    element: Element = ()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n topo: Mesh = () => None \n element: Element \n \n",
      "pred_parsed": "    topo: Mesh = () => None\n    element: Element\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "actionless/pikaur",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/actionless-pikaur",
    "commit": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "filename": "pikaur_test/helpers.py",
    "source_code": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
    "warning_line": 85,
    "pred_top-1": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n def _fake_exit(self, code: Optional[code] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[code] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\n def _fake_exit(self, code: Optional[Code] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[Code] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\nself.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\n def _fake_exit(self, code: Optional[str] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[str] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = int \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "\n def _fake_exit(self, code: Int = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Int = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "\n def _fake_exit(self, code: Optional[Int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[Int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n \n self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    \n    self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "\n def _fake_exit(self, code: int = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: int = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-11": {
      "pred": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = int.code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = int.code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = int(code) \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = int(code)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "\n def _fake_exit( <DED> self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(  self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0, no_return: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0, no_return:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = Code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = Code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = int <DED> \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n def _fake_exit( \n self, code: Optional[int] = 0 \n ) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(\n    self, code: Optional[int] = 0\n    ) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = None) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = None) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> noReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> noReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0, 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0, 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: <IND> <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:   self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code <IND>",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n            self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "\n def _fake_exit(self, code: 'Optional[int'] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: 'Optional[int'] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = encode \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = encode\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: <DED> <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:   self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = input.code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = input.code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = returncode \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = returncode\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code <DED>",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "\n def _fake_exit(self, code: Optional[output] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[output] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "\n def _fake_exit( <IND> self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(  self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = int, code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = int, code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = decode \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = decode\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0, noreturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0, noreturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoneReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoneReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0): \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0):\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0.) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0.) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n def _fake_exit(self, code: bool = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: bool = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "\n def _fake_exit( <IND> self, code: Optional[int] = 0 ) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(  self, code: Optional[int] = 0 ) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = int <IND> \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n            self.returncode = int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "\n def _fake_exit(self, code: Optional[code] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[code] = 0) -> NoReturn:\nself.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "\n def _fake_exit(self, code: List[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: List[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0, noReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0, noReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = _code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = _code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "\n _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "\n def _fake_exit(self, code: Optional[ int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[ int] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-48": {
      "pred": "\n def _fake_exit(self, code: Optional[coding] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[coding] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n def _fake_exit(self, code: Optional[type] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: Optional[type] = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "\n def _fake_exit(self, code: String(int) = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "pred_parsed": "    def _fake_exit(self, code: String(int) = 0) -> NoReturn:\n        self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ehForwarderBot/efb-telegram-master",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ehForwarderBot-efb-telegram-master",
    "commit": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "filename": "efb_telegram_master/master_message.py",
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
    "warning_line": 271,
    "pred_top-1": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "m.author = self.chat_manager.self \n m.chat_manager = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat_manager = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, efb_telegram_master.chat.ETMChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid, efb_telegram_master.chat.ETMChat)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "m.author = self.chat_manager.self \n assert isinstance(m, channel, uid) \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            assert isinstance(m, channel, uid)\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, efb_telegram_master.chat.ETMChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, efb_telegram_master.chat.ETMChat)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid); \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid);\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, ETMMsg) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid, ETMMsg)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, username, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, username, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_chat \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).get_chat\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_uid \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).get_uid\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "m.author = self.chat_manager.self \n assert uid is not None \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            assert uid is not None\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_() \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).get_()\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, efb_telegram_master.chat.ETMChat, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, efb_telegram_master.chat.ETMChat, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_output() \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).get_output()\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(uid, channel) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(uid, channel)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid.chat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid.chat)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.chat.ETMChat.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = efb_telegram_master.chat.ETMChat.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).getChat \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).getChat\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, ID(uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, ID(uid))\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, EMThat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid, EMThat)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "m.author = self.chat_manager.self <IND> m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self  m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.chat.ETMChat \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = efb_telegram_master.chat.ETMChat\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, ETChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid, ETChat)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, name, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, name, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_to_uid \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).get_to_uid\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid=0) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid=0)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "m.author = self.chat_manager.self <DED> m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self  m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "m.author = self.chat_manager.self \n # Chat not found anyway, build a fake object \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            # Chat not found anyway, build a fake object\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid, ETMChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid, ETMChat)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid.name) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid.name)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.chat.ETMChat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = efb_telegram_master.chat.ETMChat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object <IND>",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, userID) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, userID)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, isinstance(uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, isinstance(uid))\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid.id) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid.id)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) <IND> if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n                m.chat = self.chat_manager.get_chat(channel, uid)  if not m.chat:\n                # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object <DED>",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n        # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: <IND> # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n                if not m.chat:  # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) <DED> if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n        m.chat = self.chat_manager.get_chat(channel, uid)  if not m.chat:\n        # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).decode(\"chat\") \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).decode(\"chat\")\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: <DED> # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n        if not m.chat:  # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, channel.uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, channel.uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-45": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid).get_update() \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid).get_update()\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid: uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid: uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "m.author = self.chat_manager.self \n var m = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            var m = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel), uid \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel), uid\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid: uid \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid: uid\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "m.author = self.chat_manager.self \n self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "pred_parsed": "            m.author = self.chat_manager.self\n            self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n            # Chat not found anyway, build a fake object\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "OSInside/kiwi",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/OSInside-kiwi",
    "commit": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "filename": "kiwi/builder/kis.py",
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
    "warning_line": 90,
    "pred_top-1": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = \"\"\n        self.hypervisor_filename: str = \"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(Xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(Xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = '' \n self.hypervisor_filename = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = \"\" \n self.hypervisor_filename = \"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = \"\"\n        self.hypervisor_filename = \"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str || '' \n self.hypervisor_filename: str || '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str || ''\n        self.hypervisor_filename: str || ''\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str; \n self.hypervisor_filename: str; \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str;\n        self.hypervisor_filename: str;\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <DED> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n    self.kernel_filename: Optional[str] = None  self.hypervisor_filename: Optional[str] = None\n    self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) <IND> self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])  self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <IND> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n            self.kernel_filename: Optional[str] = None  self.hypervisor_filename: Optional[str] = None\n            self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) <DED> self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])  self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <IND> self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n            self.hypervisor_filename: Optional[str] = None  self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <DED> self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n    self.hypervisor_filename: Optional[str] = None  self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) <IND>",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n            self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str || \"\" \n self.hypervisor_filename: str || \"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str || \"\"\n        self.hypervisor_filename: str || \"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = [] \n self.hypervisor_filename: str = [] \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = []\n        self.hypervisor_filename: str = []\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str: Optional[str] = None \n self.hypervisor_filename: str: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str: Optional[str] = None\n        self.hypervisor_filename: str: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) <DED>",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n    self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Union[str,...] = None \n self.hypervisor_filename: Union[str,...] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Union[str,...] = None\n        self.hypervisor_filename: Union[str,...] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: typing.Optional[str] = None \n self.hypervisor_filename: typing.Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: typing.Optional[str] = None\n        self.hypervisor_filename: typing.Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Union[str, None] = None \n self.hypervisor_filename: Union[str, None] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Union[str, None] = None\n        self.hypervisor_filename: Union[str, None] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = '' \n self.hypervisor_filename: '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename: ''\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str() \n self.hypervisor_filename: str() \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str()\n        self.hypervisor_filename: str()\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str=\"\" \n self.hypervisor_filename: str=\"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str=\"\"\n        self.hypervisor_filename: str=\"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-27": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Results(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Results(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str | Optional[str] = None \n self.hypervisor_filename: str | Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str | Optional[str] = None\n        self.hypervisor_filename: str | Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(Xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(Xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str, \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str,\n        self.hypervisor_filename: str = \"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Default[str] = None \n self.hypervisor_filename: Default[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Default[str] = None\n        self.hypervisor_filename: Default[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str, \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str,\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n Self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        Self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = Nothing \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = Nothing\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str='' \n self.hypervisor_filename: str='' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str=''\n        self.hypervisor_filename: str=''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-36": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str || '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str || ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(XML_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(XML_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: List[str] = None \n self.hypervisor_filename: List[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: List[str] = None\n        self.hypervisor_filename: List[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "self.checksum_name = \"'.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = \"'.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str | '' \n self.hypervisor_filename: str | '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str | ''\n        self.hypervisor_filename: str | ''\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: choice[str] = None \n self.hypervisor_filename: choice[str] = None \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: choice[str] = None\n        self.hypervisor_filename: choice[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' <DED> self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n    self.kernel_filename: str = ''  self.hypervisor_filename: str = ''\n    self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' <IND> self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n            self.kernel_filename: str = ''  self.hypervisor_filename: str = ''\n            self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename = [] \n self.hypervisor_filename = [] \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = []\n        self.hypervisor_filename = []\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str || \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str || \"\"\n        self.hypervisor_filename: str = \"\"\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = 0 \n self.hypervisor_filename: str = 0 \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = 0\n        self.hypervisor_filename: str = 0\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"5\" \n self.hypervisor_filename: str = \"5\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = \"5\"\n        self.hypervisor_filename: str = \"5\"\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"default\" \n self.hypervisor_filename: str = \"default\" \n self.result = Result(xml_state) \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = \"default\"\n        self.hypervisor_filename: str = \"default\"\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-50": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n \n",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: Optional[str] = None\n        self.hypervisor_filename: Optional[str] = None\n        self.result = Result(xml_state)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jupyterhub-zero-to-jupyterhub-k8s",
    "commit": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "filename": "images/hub/jupyterhub_config.py",
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "warning_line": 275,
    "pred_top-1": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert isinstance(trait, cfg_key)\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = trait\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-8": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert trait is not None\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert trait is not None\n            \n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n            \n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_authenticator is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_authenticator is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\nassert cfg_key is not None\nset_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-14": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = trait  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.encode(trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.encode(trait)\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n                cfg_key = cfg_key  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = common_oauth_traits.cfg_key \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = common_oauth_traits.cfg_key\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert c.CILogonOAuthenticator is not None \n set_config_if_not_none(trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert c.CILogonOAuthenticator is not None\n        set_config_if_not_none(trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-20": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert isinstance(trait, cfg_key)\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert trait is not None\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> isinstance(trait, cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        isinstance(trait, cfg_key)\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = common_oauth_traits.get(trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = common_oauth_traits.get(trait)\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> str(trait, cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        str(trait, cfg_key)\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = trait\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-26": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    assert cfg_key is not None  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert c.CILogonOAuthenticator is not None \n \n set_config_if_not_none(trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert c.CILogonOAuthenticator is not None\n            \n            set_config_if_not_none(trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n            assert cfg_key is not None  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n \n assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    \n    assert cfg_key is not None\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits.get(trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key in common_oauth_traits.get(trait)\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.cilogon', trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.cilogon', trait)\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert c.CILogonOAuthenticator is not None \n \n set_config_if_not_none(trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert c.CILogonOAuthenticator is not None\n            \n            set_config_if_not_none(trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> cfg_key in common_oauth_traits <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n    cfg_key = cfg_key  cfg_key in common_oauth_traits  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.cilogon.', trait) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.cilogon.', trait)\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) <IND>",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n cfg_key = cfg_key \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = trait\n            cfg_key = cfg_key\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-41": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key): \n <IND> elif isinstance(trait, cfg_key): \n <IND> elif isinstance(trait, cfg_key): \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key):\n            elif isinstance(trait, cfg_key):\n                elif isinstance(trait, cfg_key):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key  set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <IND> cfg_key = cfg_key \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n                cfg_key = cfg_key  cfg_key = cfg_key\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key): \n <IND> assert cfg_key is None \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key):\n            assert cfg_key is None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> set_config_if_not_none(trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key  set_config_if_not_none(trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert c.CILogonOAuthenticator is not None \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert c.CILogonOAuthenticator is not None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-49": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n            set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key): \n <IND> assert cfg_key is not None \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None and cfg_config_if_not_none(trait, 'auth.cilogon.' + cfg_key):\n            assert cfg_key is not None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "standardebooks/tools",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/standardebooks-tools",
    "commit": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "filename": "se/formatting.py",
    "source_code": " number = int(number)\n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "target_code": "\n value = int(number)\n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `str` and `int`.",
    "warning_line": 720,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale",
    "commit": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "filename": "tale/driver.py",
    "source_code": "        else:\n            raise ValueError(\"unknown topic: \" + topicname)",
    "target_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
    "warning_line": 1052,
    "pred_top-1": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + str(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \") + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \") + topicname)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \", topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \", topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<DED> else: \n <IND> raise ValueError(true, \"unknown topic: \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(true, \"unknown topic: \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> else: \n <IND> raise ValueError('unknown topic: { topic }'+ topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError('unknown topic: { topic }'+ topicname)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "<DED> else: \n <IND> raise ValueError(msg(\"unknown topic: \" + topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(msg(\"unknown topic: \" + topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \", topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \", topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \" + topicname))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "\n else: \n <IND> raise ValueError(f\"unknown topic: { topic } \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + list(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(\"unknown topic: \" + list(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> else: \n <IND> raise ValueError(valueError(\"unknown topic: \" + topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(valueError(\"unknown topic: \" + topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<DED> else: \n <IND> raise ValueError(str('unknown topic:'+ topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str('unknown topic:'+ topicname))\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-16": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \"), list(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \"), list(topicname))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-17": {
      "pred": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \", list(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \", list(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + list(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \" + list(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + str, topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \" + str, topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> else: \n <IND> raise ValueError(str('unknown topic: ') + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str('unknown topic: ') + topicname)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + str.name)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \" + str.name))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic \\ \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic \\ \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-24": {
      "pred": "<DED> else: \n <DED> raise ValueError(f\"unknown topic: { topic } \") \n \n",
      "pred_parsed": "        else:\n    raise ValueError(f\"unknown topic: { topic } \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> else: \n <IND> raise ValueError(typeError(\"unknown topic: \" + topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(typeError(\"unknown topic: \" + topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> else: \n <IND> raise ValueError('unknown topic: } topic }'+ topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError('unknown topic: } topic }'+ topicname)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-27": {
      "pred": "<DED> else: \n <IND> raise ValueError(ctx, \"unknown topic: { topic } \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(ctx, \"unknown topic: { topic } \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "\n else: \n <IND> raise ValueError(f\"unknown topic: { topic } \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \"), not found) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \"), not found)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \"), + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \"), + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \") + tuplename) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \") + tuplename)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> else: \n <IND> raise ValueError(\"unknown topic: \" + str(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-33": {
      "pred": "<DED> else: \n <IND> raise ValueError(str('unknown topic:') + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str('unknown topic:') + topicname)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "<DED> else: \n <IND> raise ValueError(msg(\"unknown topic: \", topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(msg(\"unknown topic: \", topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + str)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \" + str))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: } topic } \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: } topic } \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \" + tuple[topicname])) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \" + tuple[topicname]))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> else: \n <IND> raise ValueError(str(\"unknown topic: \") + str) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(str(\"unknown topic: \") + str)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> else: \n <IND> raise ValueError(unknown topic: { topic } ) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(unknown topic: { topic } )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> else: \n <IND> raise ValueError(self.unknown topic: '' + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(self.unknown topic: '' + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> else: \n <IND> raise ValueError(F\"unknown topic: { topic } \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(F\"unknown topic: { topic } \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> else: \n <IND> raise ValueError(b\"unknown topic: { topic } \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(b\"unknown topic: { topic } \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> else: \n <IND> raise ValueError(\"unknown topic: \" + tuplename) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(\"unknown topic: \" + tuplename)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "\n else: \n <IND> raise ValueError(\"unknown topic: \" + str(topicname)) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic { \") \n \n",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic { \")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-46": {
      "pred": "<DED> else: \n <IND> raise ValueError('unknown topic: topicname') \n \n",
      "pred_parsed": "        else:\n            raise ValueError('unknown topic: topicname')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "<DED> else: \n <IND> raise ValueError('unknown topic: { topic } ') \n \n",
      "pred_parsed": "        else:\n            raise ValueError('unknown topic: { topic } ')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \") \n <DED>",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \")\n        \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> else: \n <IND> raise ValueError(self.unknown topic: \" + topicname) \n \n",
      "pred_parsed": "        else:\n            raise ValueError(self.unknown topic: \" + topicname)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topic } \") \n <IND>",
      "pred_parsed": "        else:\n            raise ValueError(f\"unknown topic: { topic } \")\n                \n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Ultimaker/Cura",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura",
    "commit": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) < self._library_max_private_projects)",
    "target_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "warning_line": 95,
    "pred_top-1": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  int(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, r) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, r) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  list(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<IND> callback(True) \n <DED> assert isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                assert isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                        elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                            callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  int(self._library_max_private_projects))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  str(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  str(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list(response)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list(response)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, List(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, List(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list(response, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list(response, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, ProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list, all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list, all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(response, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(response, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> callback(True) \n <DED> assert isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                assert isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(str, list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(str, list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list(r, DigitalFactoryProjectResponse)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list(r, DigitalFactoryProjectResponse)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, DigitalFactoryProjectResponse) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list(response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list(response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(str, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(str, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list(r)) and all(isinstance(response, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list(r)) and all(isinstance(response, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  int(self._library_max_private_projects))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  int(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, r) and all(isinstance(list, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, r) and all(isinstance(list, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, r) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, r) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  int(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> callback(True) \n <DED> assert self.isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                assert self.isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response)\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> callback(True) \n \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                    \n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  int(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list of projects) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list of projects) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list, isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list, isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list(response) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list(response) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, res) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, res) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse, res) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse, res) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> callback(True) \n <IND> assert isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                        assert isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                            callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list(r)) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  list(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(list, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(list, response) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  list  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(instance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  list(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<IND> callback(True) \n <DED> elif isinstance(instance(response, list, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                elif isinstance(instance(response, list, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response)  self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "pred_parsed": "                    callback(True)\n                        elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                            callback(len(response)  int(self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/jupyterhub-zero-to-jupyterhub-k8s",
    "commit": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "filename": "images/hub/jupyterhub_config.py",
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "warning_line": 279,
    "pred_top-1": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert isinstance(trait, cfg_key)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = trait\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-7": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits.get(trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key in common_oauth_traits.get(trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n            \n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-9": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = common_oauth_traits.get(trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = common_oauth_traits.get(trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab.')\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\nassert cfg_key is not None\nset_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-13": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert trait is not None\n            \n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert c.GitLabOAuthenticator is not None \n \n set_config_if_not_none(trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert c.GitLabOAuthenticator is not None\n            \n            set_config_if_not_none(trait, cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab.').get(trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab.').get(trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert trait is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key in common_oauth_traits\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.encode(trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.encode(trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key in common_oauth_traits  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get(trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get(trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert isinstance(trait, cfg_key)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-25": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert c.GitLabOAuthenticator is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert c.GitLabOAuthenticator is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-26": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab').get(trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab').get(trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab', trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab', trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    assert cfg_key is not None  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab.', trait) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab.', trait)\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab.') \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab.')\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab')\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n                cfg_key = cfg_key  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n            assert cfg_key is not None  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> str(trait, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        str(trait, cfg_key)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert cfg_key is not None\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-37": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n        cfg_key = cfg_key in common_oauth_traits  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> isinstance(trait, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        isinstance(trait, cfg_key)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = trait\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n \n assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    \n    assert cfg_key is not None\n    set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <DED> cfg_key in common_oauth_traits <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n    cfg_key = cfg_key  cfg_key in common_oauth_traits  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> assert c.GitLabOAuthenticator is not None \n set_config_if_not_none(trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        assert c.GitLabOAuthenticator is not None\n        set_config_if_not_none(trait, cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-44": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert cfg_key is not None\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-45": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits.get(trait).get('auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key in common_oauth_traits.get(trait).get('auth.gitlab.')\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert c.GitLabOAuthenticator is not None \n set_config_if_not_none(trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            assert c.GitLabOAuthenticator is not None\n            set_config_if_not_none(trait, cfg_key)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key in common_oauth_traits \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key in common_oauth_traits\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-48": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key.get('auth.gitlab.').get(trait) \n <DED> set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key) \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = cfg_key.get('auth.gitlab.').get(trait)\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n                cfg_key = cfg_key  set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.') \n",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n        if cfg_key is None:\n            cfg_key = trait\n            set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "crytic/slither",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/crytic-slither",
    "commit": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "filename": "slither/core/solidity_types/elementary_type.py",
    "source_code": "            return 32, True\n\n        return int(self.size / 8), False",
    "target_code": "            <IND>return 32, True\n        <DED>if self.size is None:\n            <IND>return 32, True\n        <DED>return int(self.size / 8), False\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "warning_line": 180,
    "pred_top-1": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "<IND> return 32, True \n \n <DED> assert self.size is not None \n return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        assert self.size is not None\n        return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "<IND> return 32, True \n <DED> assert self.size is not None \n return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n        assert self.size is not None\n        return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "<IND> return 32, True \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, int(self.size)), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, int(self.size)), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "<IND> return 32, True \n \n <DED> return str(int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return str(int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, False) \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, False)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<IND> return 32, True \n \n <DED> if self.size is not None: \n <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        if self.size is not None:\n            return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<IND> return 32, True \n \n <IND> assert self.size is not None \n return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n                assert self.size is not None\n                return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, ''), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, ''), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<IND> return 32, True \n \n <DED> return bool(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return bool(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "<IND> return 32, True \n \n <DED> assert self.size is not None \n return int(self.size / 8, False \n",
      "pred_parsed": "            return 32, True\n            \n        assert self.size is not None\n        return int(self.size / 8, False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<IND> return 32, True \n \n <DED> return int(int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> return 32, True \n \n <DED> if self.size is not None: \n <IND> return int(self.size / 8, False \n",
      "pred_parsed": "            return 32, True\n            \n        if self.size is not None:\n            return int(self.size / 8, False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> return 32, True \n \n <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n                return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<IND> return 32, True \n <IND> assert self.size is not None \n return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n                assert self.size is not None\n                return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<IND> return 32, True \n <DED> if self.size is not None: \n <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n        if self.size is not None:\n            return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "<IND> return 32, True \n <DED> return int(self.size / 8, int(self.size)), False \n",
      "pred_parsed": "            return 32, True\n        return int(self.size / 8, int(self.size)), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<IND> return 32, True \n \n <DED> return int(str(self.size) / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(str(self.size) / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<IND> return 32, True \n \n \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n            \n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-22": {
      "pred": "<IND> return 32, True \n <DED> return str(int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n        return str(int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "<IND> return 32, True \n <DED> assert self.size is not None \n return int(self.size / 8, False \n",
      "pred_parsed": "            return 32, True\n        assert self.size is not None\n        return int(self.size / 8, False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<IND> return 32, True \n <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n                return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<IND> return 32, True \n \n <DED> str = int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        str = int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<IND> return 32, True \n \n <DED> return async int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return async int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> return 32, True \n \n <DED> return int(str(self.size / 8)), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(str(self.size / 8)), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "<IND> return 32, True \n <DED> if self.size is not None: \n <IND> return int(self.size / 8, False \n",
      "pred_parsed": "            return 32, True\n        if self.size is not None:\n            return int(self.size / 8, False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<IND> return 32, True \n \n <DED> return int(int(self.size / 8)), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(int(self.size / 8)), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "<IND> return 32, True \n \n <DED> return bool(int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return bool(int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<IND> return 32, True \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, \"\"), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, \"\"), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<IND> return 32, True \n \n <DED> return bool(self.size / 8, False) \n",
      "pred_parsed": "            return 32, True\n            \n        return bool(self.size / 8, False)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<IND> return 32, True \n \n <DED> elif isinstance(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        elif isinstance(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, int(self.name)), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, int(self.name)), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<IND> return 32, True \n \n <DED> return int(int(self.size / 8)), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(int(self.size / 8)), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "<DED> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 48), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 48), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "<IND> return 32, True \n <DED> return int(self.size / 8, False) \n",
      "pred_parsed": "            return 32, True\n        return int(self.size / 8, False)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<IND> return 32, True \n \n <DED> int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, True), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, True), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<IND> return 32, True \n \n <DED> bool = int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        bool = int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<IND> return 32, True \n \n <DED> return int(str(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(str(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<IND> return 32, True \n <DED> return bool(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n        return bool(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-45": {
      "pred": "<IND> return 32, True \n \n <DED> return int(self.size / 8, self.size=32), False \n",
      "pred_parsed": "            return 32, True\n            \n        return int(self.size / 8, self.size=32), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<IND> return 32, True \n <DED> return int(self.size / 8, ''), False \n",
      "pred_parsed": "            return 32, True\n        return int(self.size / 8, ''), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<IND> return 32, True \n \n <DED> return bool(self.size / 8, int), False \n",
      "pred_parsed": "            return 32, True\n            \n        return bool(self.size / 8, int), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<IND> return 32, True \n \n \n <DED> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n            \n        return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-49": {
      "pred": "<IND> return 32, True \n \n <IND> return int(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n                return int(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<IND> return 32, True \n \n <DED> return str(self.size / 8), False \n",
      "pred_parsed": "            return 32, True\n            \n        return str(self.size / 8), False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "rizar/attention-lvcsr",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/tensor/tests/test_basic.py",
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `range` and `range`.",
    "warning_line": 848,
    "pred_top-1": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + (range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + (range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + \"range(1, 128)\", dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + \"range(1, 128)\", dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + str(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + str(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + \"\", range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + \"\", range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + li range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + li range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + [range(1, 128)], dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + [range(1, 128)], dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + (range(1, 128))), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + (range(1, 128))),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + lrange(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + lrange(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 'numpy.range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 'numpy.range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + _range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + _range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-15": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + lexeme(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + lexeme(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(0, 0) + range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + grange(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + grange(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + larray(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + larray(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + arange(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + arange(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 'range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 'range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, (range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, (range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + ltype(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + ltype(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 255, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 255, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + int(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + int(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0-127, 0) + \"range(1, 128)\", dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(0-127, 0) + \"range(1, 128)\", dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(six(-127, 0)) + six(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(six(-127, 0)) + six(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(max(-127, 0) + max(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(max(-127, 0) + max(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-30": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 0) + \"\", \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 0) + \"\",\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + numpy.range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + numpy.range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, 'int8', dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, 'int8', dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0, 0) + (range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(0, 0) + (range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + \"\"(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + \"\"(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(255, 0) + 255, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(255, 0) + 255, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(numpy.arange(-127, 0) + arange(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, 'int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, 'int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(six(-127, 0) + six(range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(six(-127, 0) + six(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + (r=range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + (r=range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, 168, dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, 168, dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, ltype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, ltype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 'int8', [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 'int8', [255, 1])],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-43": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array((-127, 0) + (range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array((-127, 0) + (range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + (range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + (range(1, 128), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 'lat.range(1, 128)), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 'lat.range(1, 128)),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-47": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 0), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 0),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + -127, 0), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + -127, 0),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + 127, 0), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(-127, 0) + 127, 0),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.arange(-127, 0) + dtype='int8'), \n [255, 1])], \n",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(numpy.arange(-127, 0) + dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril",
    "commit": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "            return [global_state]\n\n        if size > 0:",
    "target_code": "            return [global_state]\n        <DED>size = cast(int, size)\n        if size > 0:\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
    "warning_line": 748,
    "pred_top-1": {
      "pred": "return [global_state] \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "return [global_state] \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "return [global_state] \n <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n                if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "return [global_state] \n assert isinstance(int, mythril.laser.smt.expression.Expression) \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert isinstance(int, mythril.laser.smt.expression.Expression)\n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "return [global_state] \n \n <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            \n                if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "return [global_state] \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "return [global_state] \n <DED> if size is not None and size > 0: \n",
      "pred_parsed": "            return [global_state]\n        if size is not None and size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "return [global_state] \n \n <DED> if size is not None and size > 0: \n",
      "pred_parsed": "            return [global_state]\n            \n        if size is not None and size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "return [global_state] \n \n \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            \n            \n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n                if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\" \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\"\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n \n <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n            \n                if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\" \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\"\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n \n \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n            \n            \n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", (global_state) \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", (global_state)\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state] \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state]\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "return [global_state] \n <IND> if size is not None and size > 0: \n",
      "pred_parsed": "            return [global_state]\n                if size is not None and size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", (global_state) \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", (global_state)\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "return [global_state] \n assert size is not None \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size is not None\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state] \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state]\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression], int] \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression], int]\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\" \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\"\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state] \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state]\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression], int\" \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression], int\"\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression], int\" \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression], int\"\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "return [global_state] \n if size is not None and size > 0: \n",
      "pred_parsed": "            return [global_state]\n            if size is not None and size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression], int] \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression], int]\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "return [global_state] \n assert isinstance(int, mythril.laser.smt.expression.Expression) \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert isinstance(int, mythril.laser.smt.expression.Expression)\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression\"] \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression\"]\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\") \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\")\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n    assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"  if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "return [global_state] \n <DED> assert size is not None \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size is not None\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"  if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "return [global_state] \n <DED> assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\") \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\")\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", (global_state) \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", (global_state)\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n                assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"  if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "return [global_state] \n assert isinstance(int, mythril.laser.smt.expression.Expression) <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n                assert isinstance(int, mythril.laser.smt.expression.Expression)  if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "return [global_state] \n assert isinstance(int, mythril.laser.smt.expression.Expression) <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert isinstance(int, mythril.laser.smt.expression.Expression)  if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n        assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"  if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "return [global_state] \n assert isinstance(int, mythril.laser.smt.expression.Expression)? \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert isinstance(int, mythril.laser.smt.expression.Expression)?\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\" \n \n <DED> assert size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\"\n            \n        assert size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state] \n if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", [global_state]\n            if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "return [global_state] \n assert isinstance(int, mythril.laser.smt.expression.Expression) \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert isinstance(int, mythril.laser.smt.expression.Expression)\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression], int\" \n \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression], int\"\n            \n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\" \n \n <IND> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\"\n            \n                if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "return [global_state] \n assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\") \n <DED> if size > 0: \n",
      "pred_parsed": "            return [global_state]\n            assert size = \"Union[int, mythril.laser.smt.expression.Expression]\", \"global_state\")\n        if size > 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "microsoft/msticpy",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy",
    "commit": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
    "warning_line": 159,
    "pred_top-1": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "err_result.raw_result = ( \n str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            str(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "err_result.raw_result = ( \n assert err is not None \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            assert err is not None\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "err_result.raw_result = ( \n err_result[str, json.decoder.JSONDecodeError] = [ \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result[str, json.decoder.JSONDecodeError] = [\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "err_result.raw_result = ( \n err_result += \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result += \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-6": {
      "pred": "err_result.raw_result = ( \n assert isinstance(err, json.decoder.JSONDecodeError) \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            assert isinstance(err, json.decoder.JSONDecodeError)\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "err_result.raw_result = ( \n _type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            _type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "err_result.raw_result = ( \n err_result.max_length = 0 \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.max_length = 0\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "err_result.raw_result = ( \n err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + json.decoder.JSONDecodeError(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-12": {
      "pred": "err_result.raw_result = ( \n err_result.length = 0 \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.length = 0\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "err_result.raw_result = ( \n err_result.encoded_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.encoded_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "err_result.raw_result = ( \n err_result.args = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.args = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "err_result.raw_result = ( \n err_result.length = 1 \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.length = 1\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "err_result.raw_result = ( \n err_result.max_length = 1 \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.max_length = 1\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "err_result.raw_result = ( \n type(err) = \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) = \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "err_result.raw_result = ( \n err_result.single_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.single_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "err_result.raw_result = ( \n err_result.new_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.new_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "err_result.raw_result = ( \n err_result[str, ConnectionError] = None \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result[str, ConnectionError] = None\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "err_result.raw_result = ( \n err_result.max_length = 2 \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.max_length = 2\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + json.decoder.JSONDecodeError + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + json.decoder.JSONDecodeError + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "err_result.raw_result = ( <DED> type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (  type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" ^ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" ^ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "err_result.raw_result = ( \n err_result.create_result((err)) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.create_result((err)) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "err_result.raw_result = ( \n err_result.length = 1) \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.length = 1)\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "err_result.raw_result = ( \n err_result.get(\"raw\") + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.get(\"raw\") + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "err_result.raw_result = ( \n err_result.create_result( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.create_result(\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() <DED> ) \n",
      "pred_parsed": "            err_result.raw_result = (\n        type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()  )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-30": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n <IND>",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n                \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() <IND> ) \n",
      "pred_parsed": "            err_result.raw_result = (\n                type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()  )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + err + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + err + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "err_result.raw_result = ( \n err_result.name + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.name + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "err_result.raw_result = ( \n err_result.id + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.id + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + (str(err) + \" \\ n\" + traceback.format_exc()) \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + (str(err) + \" \\ n\" + traceback.format_exc())\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "err_result.raw_result = ( \n err_result.ConnectionError + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.ConnectionError + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) <IND>",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n                )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-39": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n <DED> ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-40": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + (str(err)) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + (str(err)) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-41": {
      "pred": "err_result.raw_result = ( \n _type(err) + \" \\ n\" + _type(str(err)) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            _type(err) + \" \\ n\" + _type(str(err)) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "err_result.raw_result = ( \n err_result.length = 1) \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.length = 1)\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "err_result.raw_result = ( \n _type(err) + \" \\ n\" + _type(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            _type(err) + \" \\ n\" + _type(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            \n            )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "err_result.raw_result = ( \n err_result.msg(\" \\ n\", str(err)) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.msg(\" \\ n\", str(err)) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "err_result.raw_result = ( \n err_result[str, json.decoder.JSONDecodeError] = [ \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result[str, json.decoder.JSONDecodeError] = [\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "err_result.raw_result = ( \n err_result.max_length = 0 \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result.max_length = 0\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "err_result.raw_result = ( \n err_result[str, json.decoder.JSONDecodeError] = [ \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n \n ) \n",
      "pred_parsed": "            err_result.raw_result = (\n            err_result[str, json.decoder.JSONDecodeError] = [\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n            \n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) <DED> \n",
      "pred_parsed": "            err_result.raw_result = (\n            type(err) + \" \\ n\" + str(err) + \" \\ n\" + traceback.format_exc()\n        )\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "RasaHQ/rasa",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/RasaHQ-rasa",
    "commit": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_code": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "target_code": "\n        <DED>model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `str` and `str`.",
    "warning_line": 1015,
    "pred_top-1": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\" { file_name }.tf_model\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\n <DED> tf_model_file = path(model_dir) / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = path(model_dir) / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "\n <DED> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-6": {
      "pred": "\n <DED> assert model_dir is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        assert model_dir is not None\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-7": {
      "pred": "\n <DED> _tf_model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        _tf_model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-8": {
      "pred": "\n <DED> assert model_dir is not None \n model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        assert model_dir is not None\n        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-9": {
      "pred": "\n <DED> model_dir= Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir= Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-10": {
      "pred": "\n \n model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        \n        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-11": {
      "pred": "\n <DED> tf_model_file = model_dir(path(model_dir)) / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = model_dir(path(model_dir)) / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "\n <DED> file_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        file_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-13": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n assert model_dir is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        assert model_dir is not None\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-14": {
      "pred": "\n <DED> path_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        path_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-15": {
      "pred": "\n <DED> model_dir = Path(Model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(Model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n <DED>",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-17": {
      "pred": "\n <DED> tf_model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-18": {
      "pred": "<DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-19": {
      "pred": "\n <DED> str = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        str = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "\n <DED> path = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        path = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-21": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n assert tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        assert tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "\n <DED> str(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        str(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-23": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n <IND>",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-24": {
      "pred": "\n <DED> db_model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        db_model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-25": {
      "pred": "\n <DED> model_dir: Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir: Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n str(tf_model_file) = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        str(tf_model_file) = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-28": {
      "pred": "\n <DED> sys_model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        sys_model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-29": {
      "pred": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "\n <DED> str(model_dir) = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        str(model_dir) = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-31": {
      "pred": "\n <DED> tf_model_file = str(model_dir) / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = str(model_dir) / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-32": {
      "pred": "\n <DED> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n <DED>",
      "pred_parsed": "        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n    \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-33": {
      "pred": "\n <DED> method_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        method_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-34": {
      "pred": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir_path = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-35": {
      "pred": "\n <DED> exports = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        exports = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-36": {
      "pred": "\n <DED> file_path = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        file_path = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-37": {
      "pred": "\n <DED> mod_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        mod_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-38": {
      "pred": "\n <DED> model_dir += Path(model_dir) \n tf_model_file = model_dir += f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir += Path(model_dir)\n        tf_model_file = model_dir += f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "\n <DED> tf_model_file = Path(model_dir) / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = Path(model_dir) / f\" { file_name }.tf_model\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-40": {
      "pred": "\n <IND> tf_model_file = path(model_dir) / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = path(model_dir) / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "\n <DED> file = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        file = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-42": {
      "pred": "\n <DED> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n <IND>",
      "pred_parsed": "        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n            \n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-43": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / str(f\" { file_name }.tf_model\") \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / str(f\" { file_name }.tf_model\")\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-44": {
      "pred": "\n <DED> self = path(model_dir) \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        self = path(model_dir)\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "\n <IND> assert model_dir is not None \n tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        assert model_dir is not None\n        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-46": {
      "pred": "\n <IND> tf_model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-47": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n model_file = model_dir / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        model_file = model_dir / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "\n <DED> model_dir(path(model_dir)) \n tf_model_file = model_dir(f\" { file_name }.tf_model\") \n \n",
      "pred_parsed": "        model_dir(path(model_dir))\n        tf_model_file = model_dir(f\" { file_name }.tf_model\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name \\.tf_model\" \n \n",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\" { file_name \\.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-50": {
      "pred": "\n <DED> tf_model_file = model_dir (path(model_dir)) / f\" { file_name }.tf_model\" \n \n",
      "pred_parsed": "        tf_model_file = model_dir (path(model_dir)) / f\" { file_name }.tf_model\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "repo_dir": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox",
    "commit": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_code": "    def _check_params(self) -> None:\n        if self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")",
    "target_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step is not None and self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps is not None and self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "warning_line": 148,
    "pred_top-1": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps is not None and self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-6": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-7": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-8": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None and if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None and if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None and if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None and if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-9": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n                if self.eps = 0:\n                    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-10": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.eps is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.eps is not None and self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-11": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-12": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-13": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.steps is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.steps is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-14": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n                raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-15": {
      "pred": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-16": {
      "pred": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-17": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None if \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None if\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-18": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps >= 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps >= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-19": {
      "pred": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-20": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None and \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None and\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-21": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps = 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-22": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.steps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.steps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-23": {
      "pred": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-24": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n            \n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-25": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None \n if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None\n        if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-26": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step == 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step == 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-27": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.steps is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.steps is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps is not None and self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-28": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps is not None\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-29": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n            \n            if self.eps = 0:\n                raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-30": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps == 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps == 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-31": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-32": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None \n if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None\n        if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None\n    if self.eps = 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-33": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-34": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-35": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n    raise ValueError(\"Step size must be strictly positive.\")\nif self.eps = 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-36": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-37": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None \n if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None\n        if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-38": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps is not None and self.eps is not None \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps is not None and self.eps is not None\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-39": {
      "pred": "<DED> def _check_params(self) -> None: \n <DED> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\nif self.step = 0:\n    raise ValueError(\"Step size must be strictly positive.\")\nif self.eps = 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-40": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError('Step size must be strictly positive.') \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError('Step size must be strictly positive.')\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-41": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None \n if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None\n        if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-42": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-43": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-44": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step:\n            raise ValueError(\"Step size must be strictly positive.\")\n                if self.eps:\n                    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-45": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step >= 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step >= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps = 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-46": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps = 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-47": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None and is not None if self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None and is not None if \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None and is not None if self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None and is not None if\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-48": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> assert self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> assert self.eps is not None and self.eps is not None \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        assert self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        assert self.eps is not None and self.eps is not None\n            raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-49": {
      "pred": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n \n raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n        if self.step is not None and self.eps = 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps is not None and self.eps = 0:\n        \n        raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-50": {
      "pred": "<DED> def _check_params(self) -> None: \n \n if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "pred_parsed": "    def _check_params(self) -> None:\n    \n    if self.step = 0:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps = 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  }
]